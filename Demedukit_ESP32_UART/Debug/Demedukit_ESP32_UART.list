
Demedukit_ESP32_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009668  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001920  08009720  08009720  0000a720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b040  0800b040  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b040  0800b040  0000d1e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b040  0800b040  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b040  0800b040  0000c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b044  0800b044  0000c044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b048  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  200001e8  0800b22c  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800b22c  0000d8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001104c  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002858  00000000  00000000  0001e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00020ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b33  00000000  00000000  00021930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017793  00000000  00000000  00022463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013409  00000000  00000000  00039bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f151  00000000  00000000  0004cfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc150  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000dc194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e06e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e8 	.word	0x200001e8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009708 	.word	0x08009708

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001ec 	.word	0x200001ec
 80000fc:	08009708 	.word	0x08009708

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ff69 	bl	800130c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fea9 	bl	800119c <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ff5b 	bl	800130c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ff51 	bl	800130c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fed3 	bl	8001224 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fec9 	bl	8001224 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_dadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	4657      	mov	r7, sl
 80004a4:	464e      	mov	r6, r9
 80004a6:	4645      	mov	r5, r8
 80004a8:	46de      	mov	lr, fp
 80004aa:	b5e0      	push	{r5, r6, r7, lr}
 80004ac:	b083      	sub	sp, #12
 80004ae:	9000      	str	r0, [sp, #0]
 80004b0:	9101      	str	r1, [sp, #4]
 80004b2:	030c      	lsls	r4, r1, #12
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	0fce      	lsrs	r6, r1, #31
 80004b8:	0a61      	lsrs	r1, r4, #9
 80004ba:	9c00      	ldr	r4, [sp, #0]
 80004bc:	031d      	lsls	r5, r3, #12
 80004be:	0f64      	lsrs	r4, r4, #29
 80004c0:	430c      	orrs	r4, r1
 80004c2:	9900      	ldr	r1, [sp, #0]
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	00c8      	lsls	r0, r1, #3
 80004ca:	0059      	lsls	r1, r3, #1
 80004cc:	0d4b      	lsrs	r3, r1, #21
 80004ce:	4699      	mov	r9, r3
 80004d0:	9a00      	ldr	r2, [sp, #0]
 80004d2:	9b01      	ldr	r3, [sp, #4]
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	0fd9      	lsrs	r1, r3, #31
 80004d8:	0f53      	lsrs	r3, r2, #29
 80004da:	432b      	orrs	r3, r5
 80004dc:	469a      	mov	sl, r3
 80004de:	9b00      	ldr	r3, [sp, #0]
 80004e0:	0d7f      	lsrs	r7, r7, #21
 80004e2:	00da      	lsls	r2, r3, #3
 80004e4:	4694      	mov	ip, r2
 80004e6:	464a      	mov	r2, r9
 80004e8:	46b0      	mov	r8, r6
 80004ea:	1aba      	subs	r2, r7, r2
 80004ec:	428e      	cmp	r6, r1
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x52>
 80004f0:	e0b0      	b.n	8000654 <__aeabi_dadd+0x1b4>
 80004f2:	2a00      	cmp	r2, #0
 80004f4:	dc00      	bgt.n	80004f8 <__aeabi_dadd+0x58>
 80004f6:	e078      	b.n	80005ea <__aeabi_dadd+0x14a>
 80004f8:	4649      	mov	r1, r9
 80004fa:	2900      	cmp	r1, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x60>
 80004fe:	e0e9      	b.n	80006d4 <__aeabi_dadd+0x234>
 8000500:	49c9      	ldr	r1, [pc, #804]	@ (8000828 <__aeabi_dadd+0x388>)
 8000502:	428f      	cmp	r7, r1
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x68>
 8000506:	e195      	b.n	8000834 <__aeabi_dadd+0x394>
 8000508:	2501      	movs	r5, #1
 800050a:	2a38      	cmp	r2, #56	@ 0x38
 800050c:	dc16      	bgt.n	800053c <__aeabi_dadd+0x9c>
 800050e:	2180      	movs	r1, #128	@ 0x80
 8000510:	4653      	mov	r3, sl
 8000512:	0409      	lsls	r1, r1, #16
 8000514:	430b      	orrs	r3, r1
 8000516:	469a      	mov	sl, r3
 8000518:	2a1f      	cmp	r2, #31
 800051a:	dd00      	ble.n	800051e <__aeabi_dadd+0x7e>
 800051c:	e1e7      	b.n	80008ee <__aeabi_dadd+0x44e>
 800051e:	2120      	movs	r1, #32
 8000520:	4655      	mov	r5, sl
 8000522:	1a8b      	subs	r3, r1, r2
 8000524:	4661      	mov	r1, ip
 8000526:	409d      	lsls	r5, r3
 8000528:	40d1      	lsrs	r1, r2
 800052a:	430d      	orrs	r5, r1
 800052c:	4661      	mov	r1, ip
 800052e:	4099      	lsls	r1, r3
 8000530:	1e4b      	subs	r3, r1, #1
 8000532:	4199      	sbcs	r1, r3
 8000534:	4653      	mov	r3, sl
 8000536:	40d3      	lsrs	r3, r2
 8000538:	430d      	orrs	r5, r1
 800053a:	1ae4      	subs	r4, r4, r3
 800053c:	1b45      	subs	r5, r0, r5
 800053e:	42a8      	cmp	r0, r5
 8000540:	4180      	sbcs	r0, r0
 8000542:	4240      	negs	r0, r0
 8000544:	1a24      	subs	r4, r4, r0
 8000546:	0223      	lsls	r3, r4, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0xac>
 800054a:	e10f      	b.n	800076c <__aeabi_dadd+0x2cc>
 800054c:	0264      	lsls	r4, r4, #9
 800054e:	0a64      	lsrs	r4, r4, #9
 8000550:	2c00      	cmp	r4, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xb6>
 8000554:	e139      	b.n	80007ca <__aeabi_dadd+0x32a>
 8000556:	0020      	movs	r0, r4
 8000558:	f001 fe5e 	bl	8002218 <__clzsi2>
 800055c:	0003      	movs	r3, r0
 800055e:	3b08      	subs	r3, #8
 8000560:	2120      	movs	r1, #32
 8000562:	0028      	movs	r0, r5
 8000564:	1aca      	subs	r2, r1, r3
 8000566:	40d0      	lsrs	r0, r2
 8000568:	409c      	lsls	r4, r3
 800056a:	0002      	movs	r2, r0
 800056c:	409d      	lsls	r5, r3
 800056e:	4322      	orrs	r2, r4
 8000570:	429f      	cmp	r7, r3
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xd6>
 8000574:	e173      	b.n	800085e <__aeabi_dadd+0x3be>
 8000576:	1bd8      	subs	r0, r3, r7
 8000578:	3001      	adds	r0, #1
 800057a:	1a09      	subs	r1, r1, r0
 800057c:	002c      	movs	r4, r5
 800057e:	408d      	lsls	r5, r1
 8000580:	40c4      	lsrs	r4, r0
 8000582:	1e6b      	subs	r3, r5, #1
 8000584:	419d      	sbcs	r5, r3
 8000586:	0013      	movs	r3, r2
 8000588:	40c2      	lsrs	r2, r0
 800058a:	408b      	lsls	r3, r1
 800058c:	4325      	orrs	r5, r4
 800058e:	2700      	movs	r7, #0
 8000590:	0014      	movs	r4, r2
 8000592:	431d      	orrs	r5, r3
 8000594:	076b      	lsls	r3, r5, #29
 8000596:	d009      	beq.n	80005ac <__aeabi_dadd+0x10c>
 8000598:	230f      	movs	r3, #15
 800059a:	402b      	ands	r3, r5
 800059c:	2b04      	cmp	r3, #4
 800059e:	d005      	beq.n	80005ac <__aeabi_dadd+0x10c>
 80005a0:	1d2b      	adds	r3, r5, #4
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	41ad      	sbcs	r5, r5
 80005a6:	426d      	negs	r5, r5
 80005a8:	1964      	adds	r4, r4, r5
 80005aa:	001d      	movs	r5, r3
 80005ac:	0223      	lsls	r3, r4, #8
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_dadd+0x112>
 80005b0:	e12d      	b.n	800080e <__aeabi_dadd+0x36e>
 80005b2:	4a9d      	ldr	r2, [pc, #628]	@ (8000828 <__aeabi_dadd+0x388>)
 80005b4:	3701      	adds	r7, #1
 80005b6:	4297      	cmp	r7, r2
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x11c>
 80005ba:	e0d3      	b.n	8000764 <__aeabi_dadd+0x2c4>
 80005bc:	4646      	mov	r6, r8
 80005be:	499b      	ldr	r1, [pc, #620]	@ (800082c <__aeabi_dadd+0x38c>)
 80005c0:	08ed      	lsrs	r5, r5, #3
 80005c2:	4021      	ands	r1, r4
 80005c4:	074a      	lsls	r2, r1, #29
 80005c6:	432a      	orrs	r2, r5
 80005c8:	057c      	lsls	r4, r7, #21
 80005ca:	024d      	lsls	r5, r1, #9
 80005cc:	0b2d      	lsrs	r5, r5, #12
 80005ce:	0d64      	lsrs	r4, r4, #21
 80005d0:	0524      	lsls	r4, r4, #20
 80005d2:	432c      	orrs	r4, r5
 80005d4:	07f6      	lsls	r6, r6, #31
 80005d6:	4334      	orrs	r4, r6
 80005d8:	0010      	movs	r0, r2
 80005da:	0021      	movs	r1, r4
 80005dc:	b003      	add	sp, #12
 80005de:	bcf0      	pop	{r4, r5, r6, r7}
 80005e0:	46bb      	mov	fp, r7
 80005e2:	46b2      	mov	sl, r6
 80005e4:	46a9      	mov	r9, r5
 80005e6:	46a0      	mov	r8, r4
 80005e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x150>
 80005ee:	e084      	b.n	80006fa <__aeabi_dadd+0x25a>
 80005f0:	464a      	mov	r2, r9
 80005f2:	1bd2      	subs	r2, r2, r7
 80005f4:	2f00      	cmp	r7, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x15a>
 80005f8:	e16d      	b.n	80008d6 <__aeabi_dadd+0x436>
 80005fa:	0025      	movs	r5, r4
 80005fc:	4305      	orrs	r5, r0
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x162>
 8000600:	e127      	b.n	8000852 <__aeabi_dadd+0x3b2>
 8000602:	1e56      	subs	r6, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x16a>
 8000608:	e23b      	b.n	8000a82 <__aeabi_dadd+0x5e2>
 800060a:	4d87      	ldr	r5, [pc, #540]	@ (8000828 <__aeabi_dadd+0x388>)
 800060c:	42aa      	cmp	r2, r5
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x172>
 8000610:	e26a      	b.n	8000ae8 <__aeabi_dadd+0x648>
 8000612:	2501      	movs	r5, #1
 8000614:	2e38      	cmp	r6, #56	@ 0x38
 8000616:	dc12      	bgt.n	800063e <__aeabi_dadd+0x19e>
 8000618:	0032      	movs	r2, r6
 800061a:	2a1f      	cmp	r2, #31
 800061c:	dd00      	ble.n	8000620 <__aeabi_dadd+0x180>
 800061e:	e1f8      	b.n	8000a12 <__aeabi_dadd+0x572>
 8000620:	2620      	movs	r6, #32
 8000622:	0025      	movs	r5, r4
 8000624:	1ab6      	subs	r6, r6, r2
 8000626:	0007      	movs	r7, r0
 8000628:	4653      	mov	r3, sl
 800062a:	40b0      	lsls	r0, r6
 800062c:	40d4      	lsrs	r4, r2
 800062e:	40b5      	lsls	r5, r6
 8000630:	40d7      	lsrs	r7, r2
 8000632:	1e46      	subs	r6, r0, #1
 8000634:	41b0      	sbcs	r0, r6
 8000636:	1b1b      	subs	r3, r3, r4
 8000638:	469a      	mov	sl, r3
 800063a:	433d      	orrs	r5, r7
 800063c:	4305      	orrs	r5, r0
 800063e:	4662      	mov	r2, ip
 8000640:	1b55      	subs	r5, r2, r5
 8000642:	45ac      	cmp	ip, r5
 8000644:	4192      	sbcs	r2, r2
 8000646:	4653      	mov	r3, sl
 8000648:	4252      	negs	r2, r2
 800064a:	000e      	movs	r6, r1
 800064c:	464f      	mov	r7, r9
 800064e:	4688      	mov	r8, r1
 8000650:	1a9c      	subs	r4, r3, r2
 8000652:	e778      	b.n	8000546 <__aeabi_dadd+0xa6>
 8000654:	2a00      	cmp	r2, #0
 8000656:	dc00      	bgt.n	800065a <__aeabi_dadd+0x1ba>
 8000658:	e08e      	b.n	8000778 <__aeabi_dadd+0x2d8>
 800065a:	4649      	mov	r1, r9
 800065c:	2900      	cmp	r1, #0
 800065e:	d175      	bne.n	800074c <__aeabi_dadd+0x2ac>
 8000660:	4661      	mov	r1, ip
 8000662:	4653      	mov	r3, sl
 8000664:	4319      	orrs	r1, r3
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1ca>
 8000668:	e0f6      	b.n	8000858 <__aeabi_dadd+0x3b8>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1d2>
 8000670:	e191      	b.n	8000996 <__aeabi_dadd+0x4f6>
 8000672:	4d6d      	ldr	r5, [pc, #436]	@ (8000828 <__aeabi_dadd+0x388>)
 8000674:	42aa      	cmp	r2, r5
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1da>
 8000678:	e0dc      	b.n	8000834 <__aeabi_dadd+0x394>
 800067a:	2501      	movs	r5, #1
 800067c:	2938      	cmp	r1, #56	@ 0x38
 800067e:	dc14      	bgt.n	80006aa <__aeabi_dadd+0x20a>
 8000680:	000a      	movs	r2, r1
 8000682:	2a1f      	cmp	r2, #31
 8000684:	dd00      	ble.n	8000688 <__aeabi_dadd+0x1e8>
 8000686:	e1a2      	b.n	80009ce <__aeabi_dadd+0x52e>
 8000688:	2120      	movs	r1, #32
 800068a:	4653      	mov	r3, sl
 800068c:	1a89      	subs	r1, r1, r2
 800068e:	408b      	lsls	r3, r1
 8000690:	001d      	movs	r5, r3
 8000692:	4663      	mov	r3, ip
 8000694:	40d3      	lsrs	r3, r2
 8000696:	431d      	orrs	r5, r3
 8000698:	4663      	mov	r3, ip
 800069a:	408b      	lsls	r3, r1
 800069c:	0019      	movs	r1, r3
 800069e:	1e4b      	subs	r3, r1, #1
 80006a0:	4199      	sbcs	r1, r3
 80006a2:	4653      	mov	r3, sl
 80006a4:	40d3      	lsrs	r3, r2
 80006a6:	430d      	orrs	r5, r1
 80006a8:	18e4      	adds	r4, r4, r3
 80006aa:	182d      	adds	r5, r5, r0
 80006ac:	4285      	cmp	r5, r0
 80006ae:	4180      	sbcs	r0, r0
 80006b0:	4240      	negs	r0, r0
 80006b2:	1824      	adds	r4, r4, r0
 80006b4:	0223      	lsls	r3, r4, #8
 80006b6:	d559      	bpl.n	800076c <__aeabi_dadd+0x2cc>
 80006b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000828 <__aeabi_dadd+0x388>)
 80006ba:	3701      	adds	r7, #1
 80006bc:	429f      	cmp	r7, r3
 80006be:	d051      	beq.n	8000764 <__aeabi_dadd+0x2c4>
 80006c0:	2101      	movs	r1, #1
 80006c2:	4b5a      	ldr	r3, [pc, #360]	@ (800082c <__aeabi_dadd+0x38c>)
 80006c4:	086a      	lsrs	r2, r5, #1
 80006c6:	401c      	ands	r4, r3
 80006c8:	4029      	ands	r1, r5
 80006ca:	430a      	orrs	r2, r1
 80006cc:	07e5      	lsls	r5, r4, #31
 80006ce:	4315      	orrs	r5, r2
 80006d0:	0864      	lsrs	r4, r4, #1
 80006d2:	e75f      	b.n	8000594 <__aeabi_dadd+0xf4>
 80006d4:	4661      	mov	r1, ip
 80006d6:	4653      	mov	r3, sl
 80006d8:	4319      	orrs	r1, r3
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x23e>
 80006dc:	e0bc      	b.n	8000858 <__aeabi_dadd+0x3b8>
 80006de:	1e51      	subs	r1, r2, #1
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x246>
 80006e4:	e164      	b.n	80009b0 <__aeabi_dadd+0x510>
 80006e6:	4d50      	ldr	r5, [pc, #320]	@ (8000828 <__aeabi_dadd+0x388>)
 80006e8:	42aa      	cmp	r2, r5
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x24e>
 80006ec:	e16a      	b.n	80009c4 <__aeabi_dadd+0x524>
 80006ee:	2501      	movs	r5, #1
 80006f0:	2938      	cmp	r1, #56	@ 0x38
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x256>
 80006f4:	e722      	b.n	800053c <__aeabi_dadd+0x9c>
 80006f6:	000a      	movs	r2, r1
 80006f8:	e70e      	b.n	8000518 <__aeabi_dadd+0x78>
 80006fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000830 <__aeabi_dadd+0x390>)
 80006fc:	1c7d      	adds	r5, r7, #1
 80006fe:	4215      	tst	r5, r2
 8000700:	d000      	beq.n	8000704 <__aeabi_dadd+0x264>
 8000702:	e0d0      	b.n	80008a6 <__aeabi_dadd+0x406>
 8000704:	0025      	movs	r5, r4
 8000706:	4662      	mov	r2, ip
 8000708:	4653      	mov	r3, sl
 800070a:	4305      	orrs	r5, r0
 800070c:	431a      	orrs	r2, r3
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_dadd+0x274>
 8000712:	e137      	b.n	8000984 <__aeabi_dadd+0x4e4>
 8000714:	2d00      	cmp	r5, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x27a>
 8000718:	e1a8      	b.n	8000a6c <__aeabi_dadd+0x5cc>
 800071a:	2a00      	cmp	r2, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x280>
 800071e:	e16a      	b.n	80009f6 <__aeabi_dadd+0x556>
 8000720:	4663      	mov	r3, ip
 8000722:	1ac5      	subs	r5, r0, r3
 8000724:	4653      	mov	r3, sl
 8000726:	1ae2      	subs	r2, r4, r3
 8000728:	42a8      	cmp	r0, r5
 800072a:	419b      	sbcs	r3, r3
 800072c:	425b      	negs	r3, r3
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	021a      	lsls	r2, r3, #8
 8000732:	d400      	bmi.n	8000736 <__aeabi_dadd+0x296>
 8000734:	e203      	b.n	8000b3e <__aeabi_dadd+0x69e>
 8000736:	4663      	mov	r3, ip
 8000738:	1a1d      	subs	r5, r3, r0
 800073a:	45ac      	cmp	ip, r5
 800073c:	4192      	sbcs	r2, r2
 800073e:	4653      	mov	r3, sl
 8000740:	4252      	negs	r2, r2
 8000742:	1b1c      	subs	r4, r3, r4
 8000744:	000e      	movs	r6, r1
 8000746:	4688      	mov	r8, r1
 8000748:	1aa4      	subs	r4, r4, r2
 800074a:	e723      	b.n	8000594 <__aeabi_dadd+0xf4>
 800074c:	4936      	ldr	r1, [pc, #216]	@ (8000828 <__aeabi_dadd+0x388>)
 800074e:	428f      	cmp	r7, r1
 8000750:	d070      	beq.n	8000834 <__aeabi_dadd+0x394>
 8000752:	2501      	movs	r5, #1
 8000754:	2a38      	cmp	r2, #56	@ 0x38
 8000756:	dca8      	bgt.n	80006aa <__aeabi_dadd+0x20a>
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	4653      	mov	r3, sl
 800075c:	0409      	lsls	r1, r1, #16
 800075e:	430b      	orrs	r3, r1
 8000760:	469a      	mov	sl, r3
 8000762:	e78e      	b.n	8000682 <__aeabi_dadd+0x1e2>
 8000764:	003c      	movs	r4, r7
 8000766:	2500      	movs	r5, #0
 8000768:	2200      	movs	r2, #0
 800076a:	e731      	b.n	80005d0 <__aeabi_dadd+0x130>
 800076c:	2307      	movs	r3, #7
 800076e:	402b      	ands	r3, r5
 8000770:	2b00      	cmp	r3, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x2d6>
 8000774:	e710      	b.n	8000598 <__aeabi_dadd+0xf8>
 8000776:	e093      	b.n	80008a0 <__aeabi_dadd+0x400>
 8000778:	2a00      	cmp	r2, #0
 800077a:	d074      	beq.n	8000866 <__aeabi_dadd+0x3c6>
 800077c:	464a      	mov	r2, r9
 800077e:	1bd2      	subs	r2, r2, r7
 8000780:	2f00      	cmp	r7, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x2e6>
 8000784:	e0c7      	b.n	8000916 <__aeabi_dadd+0x476>
 8000786:	4928      	ldr	r1, [pc, #160]	@ (8000828 <__aeabi_dadd+0x388>)
 8000788:	4589      	cmp	r9, r1
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2ee>
 800078c:	e185      	b.n	8000a9a <__aeabi_dadd+0x5fa>
 800078e:	2501      	movs	r5, #1
 8000790:	2a38      	cmp	r2, #56	@ 0x38
 8000792:	dc12      	bgt.n	80007ba <__aeabi_dadd+0x31a>
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	0409      	lsls	r1, r1, #16
 8000798:	430c      	orrs	r4, r1
 800079a:	2a1f      	cmp	r2, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0x300>
 800079e:	e1ab      	b.n	8000af8 <__aeabi_dadd+0x658>
 80007a0:	2120      	movs	r1, #32
 80007a2:	0025      	movs	r5, r4
 80007a4:	1a89      	subs	r1, r1, r2
 80007a6:	0007      	movs	r7, r0
 80007a8:	4088      	lsls	r0, r1
 80007aa:	408d      	lsls	r5, r1
 80007ac:	40d7      	lsrs	r7, r2
 80007ae:	1e41      	subs	r1, r0, #1
 80007b0:	4188      	sbcs	r0, r1
 80007b2:	40d4      	lsrs	r4, r2
 80007b4:	433d      	orrs	r5, r7
 80007b6:	4305      	orrs	r5, r0
 80007b8:	44a2      	add	sl, r4
 80007ba:	4465      	add	r5, ip
 80007bc:	4565      	cmp	r5, ip
 80007be:	4192      	sbcs	r2, r2
 80007c0:	4252      	negs	r2, r2
 80007c2:	4452      	add	r2, sl
 80007c4:	0014      	movs	r4, r2
 80007c6:	464f      	mov	r7, r9
 80007c8:	e774      	b.n	80006b4 <__aeabi_dadd+0x214>
 80007ca:	0028      	movs	r0, r5
 80007cc:	f001 fd24 	bl	8002218 <__clzsi2>
 80007d0:	0003      	movs	r3, r0
 80007d2:	3318      	adds	r3, #24
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	dc00      	bgt.n	80007da <__aeabi_dadd+0x33a>
 80007d8:	e6c2      	b.n	8000560 <__aeabi_dadd+0xc0>
 80007da:	002a      	movs	r2, r5
 80007dc:	3808      	subs	r0, #8
 80007de:	4082      	lsls	r2, r0
 80007e0:	429f      	cmp	r7, r3
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0x346>
 80007e4:	e0a9      	b.n	800093a <__aeabi_dadd+0x49a>
 80007e6:	1bdb      	subs	r3, r3, r7
 80007e8:	1c58      	adds	r0, r3, #1
 80007ea:	281f      	cmp	r0, #31
 80007ec:	dc00      	bgt.n	80007f0 <__aeabi_dadd+0x350>
 80007ee:	e1ac      	b.n	8000b4a <__aeabi_dadd+0x6aa>
 80007f0:	0015      	movs	r5, r2
 80007f2:	3b1f      	subs	r3, #31
 80007f4:	40dd      	lsrs	r5, r3
 80007f6:	2820      	cmp	r0, #32
 80007f8:	d005      	beq.n	8000806 <__aeabi_dadd+0x366>
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	1a1b      	subs	r3, r3, r0
 80007fe:	409a      	lsls	r2, r3
 8000800:	1e53      	subs	r3, r2, #1
 8000802:	419a      	sbcs	r2, r3
 8000804:	4315      	orrs	r5, r2
 8000806:	2307      	movs	r3, #7
 8000808:	2700      	movs	r7, #0
 800080a:	402b      	ands	r3, r5
 800080c:	e7b0      	b.n	8000770 <__aeabi_dadd+0x2d0>
 800080e:	08ed      	lsrs	r5, r5, #3
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <__aeabi_dadd+0x388>)
 8000812:	0762      	lsls	r2, r4, #29
 8000814:	432a      	orrs	r2, r5
 8000816:	08e4      	lsrs	r4, r4, #3
 8000818:	429f      	cmp	r7, r3
 800081a:	d00f      	beq.n	800083c <__aeabi_dadd+0x39c>
 800081c:	0324      	lsls	r4, r4, #12
 800081e:	0b25      	lsrs	r5, r4, #12
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	0d64      	lsrs	r4, r4, #21
 8000824:	e6d4      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	000007ff 	.word	0x000007ff
 800082c:	ff7fffff 	.word	0xff7fffff
 8000830:	000007fe 	.word	0x000007fe
 8000834:	08c0      	lsrs	r0, r0, #3
 8000836:	0762      	lsls	r2, r4, #29
 8000838:	4302      	orrs	r2, r0
 800083a:	08e4      	lsrs	r4, r4, #3
 800083c:	0013      	movs	r3, r2
 800083e:	4323      	orrs	r3, r4
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x3a4>
 8000842:	e186      	b.n	8000b52 <__aeabi_dadd+0x6b2>
 8000844:	2580      	movs	r5, #128	@ 0x80
 8000846:	032d      	lsls	r5, r5, #12
 8000848:	4325      	orrs	r5, r4
 800084a:	032d      	lsls	r5, r5, #12
 800084c:	4cc3      	ldr	r4, [pc, #780]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 800084e:	0b2d      	lsrs	r5, r5, #12
 8000850:	e6be      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000852:	4660      	mov	r0, ip
 8000854:	4654      	mov	r4, sl
 8000856:	000e      	movs	r6, r1
 8000858:	0017      	movs	r7, r2
 800085a:	08c5      	lsrs	r5, r0, #3
 800085c:	e7d8      	b.n	8000810 <__aeabi_dadd+0x370>
 800085e:	4cc0      	ldr	r4, [pc, #768]	@ (8000b60 <__aeabi_dadd+0x6c0>)
 8000860:	1aff      	subs	r7, r7, r3
 8000862:	4014      	ands	r4, r2
 8000864:	e696      	b.n	8000594 <__aeabi_dadd+0xf4>
 8000866:	4abf      	ldr	r2, [pc, #764]	@ (8000b64 <__aeabi_dadd+0x6c4>)
 8000868:	1c79      	adds	r1, r7, #1
 800086a:	4211      	tst	r1, r2
 800086c:	d16b      	bne.n	8000946 <__aeabi_dadd+0x4a6>
 800086e:	0022      	movs	r2, r4
 8000870:	4302      	orrs	r2, r0
 8000872:	2f00      	cmp	r7, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_dadd+0x3d8>
 8000876:	e0db      	b.n	8000a30 <__aeabi_dadd+0x590>
 8000878:	2a00      	cmp	r2, #0
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x3de>
 800087c:	e12d      	b.n	8000ada <__aeabi_dadd+0x63a>
 800087e:	4662      	mov	r2, ip
 8000880:	4653      	mov	r3, sl
 8000882:	431a      	orrs	r2, r3
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x3e8>
 8000886:	e0b6      	b.n	80009f6 <__aeabi_dadd+0x556>
 8000888:	4663      	mov	r3, ip
 800088a:	18c5      	adds	r5, r0, r3
 800088c:	4285      	cmp	r5, r0
 800088e:	4180      	sbcs	r0, r0
 8000890:	4454      	add	r4, sl
 8000892:	4240      	negs	r0, r0
 8000894:	1824      	adds	r4, r4, r0
 8000896:	0223      	lsls	r3, r4, #8
 8000898:	d502      	bpl.n	80008a0 <__aeabi_dadd+0x400>
 800089a:	000f      	movs	r7, r1
 800089c:	4bb0      	ldr	r3, [pc, #704]	@ (8000b60 <__aeabi_dadd+0x6c0>)
 800089e:	401c      	ands	r4, r3
 80008a0:	003a      	movs	r2, r7
 80008a2:	0028      	movs	r0, r5
 80008a4:	e7d8      	b.n	8000858 <__aeabi_dadd+0x3b8>
 80008a6:	4662      	mov	r2, ip
 80008a8:	1a85      	subs	r5, r0, r2
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	4192      	sbcs	r2, r2
 80008ae:	4653      	mov	r3, sl
 80008b0:	4252      	negs	r2, r2
 80008b2:	4691      	mov	r9, r2
 80008b4:	1ae3      	subs	r3, r4, r3
 80008b6:	001a      	movs	r2, r3
 80008b8:	464b      	mov	r3, r9
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	4691      	mov	r9, r2
 80008c0:	021a      	lsls	r2, r3, #8
 80008c2:	d454      	bmi.n	800096e <__aeabi_dadd+0x4ce>
 80008c4:	464a      	mov	r2, r9
 80008c6:	464c      	mov	r4, r9
 80008c8:	432a      	orrs	r2, r5
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x42e>
 80008cc:	e640      	b.n	8000550 <__aeabi_dadd+0xb0>
 80008ce:	2600      	movs	r6, #0
 80008d0:	2400      	movs	r4, #0
 80008d2:	2500      	movs	r5, #0
 80008d4:	e67c      	b.n	80005d0 <__aeabi_dadd+0x130>
 80008d6:	4da1      	ldr	r5, [pc, #644]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 80008d8:	45a9      	cmp	r9, r5
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x43e>
 80008dc:	e090      	b.n	8000a00 <__aeabi_dadd+0x560>
 80008de:	2501      	movs	r5, #1
 80008e0:	2a38      	cmp	r2, #56	@ 0x38
 80008e2:	dd00      	ble.n	80008e6 <__aeabi_dadd+0x446>
 80008e4:	e6ab      	b.n	800063e <__aeabi_dadd+0x19e>
 80008e6:	2580      	movs	r5, #128	@ 0x80
 80008e8:	042d      	lsls	r5, r5, #16
 80008ea:	432c      	orrs	r4, r5
 80008ec:	e695      	b.n	800061a <__aeabi_dadd+0x17a>
 80008ee:	0011      	movs	r1, r2
 80008f0:	4655      	mov	r5, sl
 80008f2:	3920      	subs	r1, #32
 80008f4:	40cd      	lsrs	r5, r1
 80008f6:	46a9      	mov	r9, r5
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d006      	beq.n	800090a <__aeabi_dadd+0x46a>
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	4653      	mov	r3, sl
 8000900:	1a8a      	subs	r2, r1, r2
 8000902:	4093      	lsls	r3, r2
 8000904:	4662      	mov	r2, ip
 8000906:	431a      	orrs	r2, r3
 8000908:	4694      	mov	ip, r2
 800090a:	4665      	mov	r5, ip
 800090c:	1e6b      	subs	r3, r5, #1
 800090e:	419d      	sbcs	r5, r3
 8000910:	464b      	mov	r3, r9
 8000912:	431d      	orrs	r5, r3
 8000914:	e612      	b.n	800053c <__aeabi_dadd+0x9c>
 8000916:	0021      	movs	r1, r4
 8000918:	4301      	orrs	r1, r0
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x47e>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_dadd+0x608>
 800091e:	1e51      	subs	r1, r2, #1
 8000920:	2a01      	cmp	r2, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x486>
 8000924:	e0fb      	b.n	8000b1e <__aeabi_dadd+0x67e>
 8000926:	4d8d      	ldr	r5, [pc, #564]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 8000928:	42aa      	cmp	r2, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x48e>
 800092c:	e0b5      	b.n	8000a9a <__aeabi_dadd+0x5fa>
 800092e:	2501      	movs	r5, #1
 8000930:	2938      	cmp	r1, #56	@ 0x38
 8000932:	dd00      	ble.n	8000936 <__aeabi_dadd+0x496>
 8000934:	e741      	b.n	80007ba <__aeabi_dadd+0x31a>
 8000936:	000a      	movs	r2, r1
 8000938:	e72f      	b.n	800079a <__aeabi_dadd+0x2fa>
 800093a:	4c89      	ldr	r4, [pc, #548]	@ (8000b60 <__aeabi_dadd+0x6c0>)
 800093c:	1aff      	subs	r7, r7, r3
 800093e:	4014      	ands	r4, r2
 8000940:	0762      	lsls	r2, r4, #29
 8000942:	08e4      	lsrs	r4, r4, #3
 8000944:	e76a      	b.n	800081c <__aeabi_dadd+0x37c>
 8000946:	4a85      	ldr	r2, [pc, #532]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 8000948:	4291      	cmp	r1, r2
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x4ae>
 800094c:	e0e3      	b.n	8000b16 <__aeabi_dadd+0x676>
 800094e:	4663      	mov	r3, ip
 8000950:	18c2      	adds	r2, r0, r3
 8000952:	4282      	cmp	r2, r0
 8000954:	4180      	sbcs	r0, r0
 8000956:	0023      	movs	r3, r4
 8000958:	4240      	negs	r0, r0
 800095a:	4453      	add	r3, sl
 800095c:	181b      	adds	r3, r3, r0
 800095e:	07dd      	lsls	r5, r3, #31
 8000960:	085c      	lsrs	r4, r3, #1
 8000962:	2307      	movs	r3, #7
 8000964:	0852      	lsrs	r2, r2, #1
 8000966:	4315      	orrs	r5, r2
 8000968:	000f      	movs	r7, r1
 800096a:	402b      	ands	r3, r5
 800096c:	e700      	b.n	8000770 <__aeabi_dadd+0x2d0>
 800096e:	4663      	mov	r3, ip
 8000970:	1a1d      	subs	r5, r3, r0
 8000972:	45ac      	cmp	ip, r5
 8000974:	4192      	sbcs	r2, r2
 8000976:	4653      	mov	r3, sl
 8000978:	4252      	negs	r2, r2
 800097a:	1b1c      	subs	r4, r3, r4
 800097c:	000e      	movs	r6, r1
 800097e:	4688      	mov	r8, r1
 8000980:	1aa4      	subs	r4, r4, r2
 8000982:	e5e5      	b.n	8000550 <__aeabi_dadd+0xb0>
 8000984:	2d00      	cmp	r5, #0
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x4ea>
 8000988:	e091      	b.n	8000aae <__aeabi_dadd+0x60e>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d138      	bne.n	8000a00 <__aeabi_dadd+0x560>
 800098e:	2480      	movs	r4, #128	@ 0x80
 8000990:	2600      	movs	r6, #0
 8000992:	0324      	lsls	r4, r4, #12
 8000994:	e756      	b.n	8000844 <__aeabi_dadd+0x3a4>
 8000996:	4663      	mov	r3, ip
 8000998:	18c5      	adds	r5, r0, r3
 800099a:	4285      	cmp	r5, r0
 800099c:	4180      	sbcs	r0, r0
 800099e:	4454      	add	r4, sl
 80009a0:	4240      	negs	r0, r0
 80009a2:	1824      	adds	r4, r4, r0
 80009a4:	2701      	movs	r7, #1
 80009a6:	0223      	lsls	r3, r4, #8
 80009a8:	d400      	bmi.n	80009ac <__aeabi_dadd+0x50c>
 80009aa:	e6df      	b.n	800076c <__aeabi_dadd+0x2cc>
 80009ac:	2702      	movs	r7, #2
 80009ae:	e687      	b.n	80006c0 <__aeabi_dadd+0x220>
 80009b0:	4663      	mov	r3, ip
 80009b2:	1ac5      	subs	r5, r0, r3
 80009b4:	42a8      	cmp	r0, r5
 80009b6:	4180      	sbcs	r0, r0
 80009b8:	4653      	mov	r3, sl
 80009ba:	4240      	negs	r0, r0
 80009bc:	1ae4      	subs	r4, r4, r3
 80009be:	2701      	movs	r7, #1
 80009c0:	1a24      	subs	r4, r4, r0
 80009c2:	e5c0      	b.n	8000546 <__aeabi_dadd+0xa6>
 80009c4:	0762      	lsls	r2, r4, #29
 80009c6:	08c0      	lsrs	r0, r0, #3
 80009c8:	4302      	orrs	r2, r0
 80009ca:	08e4      	lsrs	r4, r4, #3
 80009cc:	e736      	b.n	800083c <__aeabi_dadd+0x39c>
 80009ce:	0011      	movs	r1, r2
 80009d0:	4653      	mov	r3, sl
 80009d2:	3920      	subs	r1, #32
 80009d4:	40cb      	lsrs	r3, r1
 80009d6:	4699      	mov	r9, r3
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d006      	beq.n	80009ea <__aeabi_dadd+0x54a>
 80009dc:	2140      	movs	r1, #64	@ 0x40
 80009de:	4653      	mov	r3, sl
 80009e0:	1a8a      	subs	r2, r1, r2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	4662      	mov	r2, ip
 80009e6:	431a      	orrs	r2, r3
 80009e8:	4694      	mov	ip, r2
 80009ea:	4665      	mov	r5, ip
 80009ec:	1e6b      	subs	r3, r5, #1
 80009ee:	419d      	sbcs	r5, r3
 80009f0:	464b      	mov	r3, r9
 80009f2:	431d      	orrs	r5, r3
 80009f4:	e659      	b.n	80006aa <__aeabi_dadd+0x20a>
 80009f6:	0762      	lsls	r2, r4, #29
 80009f8:	08c0      	lsrs	r0, r0, #3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	08e4      	lsrs	r4, r4, #3
 80009fe:	e70d      	b.n	800081c <__aeabi_dadd+0x37c>
 8000a00:	4653      	mov	r3, sl
 8000a02:	075a      	lsls	r2, r3, #29
 8000a04:	4663      	mov	r3, ip
 8000a06:	08d8      	lsrs	r0, r3, #3
 8000a08:	4653      	mov	r3, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	4302      	orrs	r2, r0
 8000a0e:	08dc      	lsrs	r4, r3, #3
 8000a10:	e714      	b.n	800083c <__aeabi_dadd+0x39c>
 8000a12:	0015      	movs	r5, r2
 8000a14:	0026      	movs	r6, r4
 8000a16:	3d20      	subs	r5, #32
 8000a18:	40ee      	lsrs	r6, r5
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d003      	beq.n	8000a26 <__aeabi_dadd+0x586>
 8000a1e:	2540      	movs	r5, #64	@ 0x40
 8000a20:	1aaa      	subs	r2, r5, r2
 8000a22:	4094      	lsls	r4, r2
 8000a24:	4320      	orrs	r0, r4
 8000a26:	1e42      	subs	r2, r0, #1
 8000a28:	4190      	sbcs	r0, r2
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	4335      	orrs	r5, r6
 8000a2e:	e606      	b.n	800063e <__aeabi_dadd+0x19e>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	d07c      	beq.n	8000b2e <__aeabi_dadd+0x68e>
 8000a34:	4662      	mov	r2, ip
 8000a36:	4653      	mov	r3, sl
 8000a38:	08c0      	lsrs	r0, r0, #3
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x5a0>
 8000a3e:	e6fa      	b.n	8000836 <__aeabi_dadd+0x396>
 8000a40:	0762      	lsls	r2, r4, #29
 8000a42:	4310      	orrs	r0, r2
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	08e4      	lsrs	r4, r4, #3
 8000a48:	0312      	lsls	r2, r2, #12
 8000a4a:	4214      	tst	r4, r2
 8000a4c:	d008      	beq.n	8000a60 <__aeabi_dadd+0x5c0>
 8000a4e:	08d9      	lsrs	r1, r3, #3
 8000a50:	4211      	tst	r1, r2
 8000a52:	d105      	bne.n	8000a60 <__aeabi_dadd+0x5c0>
 8000a54:	4663      	mov	r3, ip
 8000a56:	08d8      	lsrs	r0, r3, #3
 8000a58:	4653      	mov	r3, sl
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	075b      	lsls	r3, r3, #29
 8000a5e:	4318      	orrs	r0, r3
 8000a60:	0f42      	lsrs	r2, r0, #29
 8000a62:	00c0      	lsls	r0, r0, #3
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	0752      	lsls	r2, r2, #29
 8000a68:	4302      	orrs	r2, r0
 8000a6a:	e6e7      	b.n	800083c <__aeabi_dadd+0x39c>
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x5d2>
 8000a70:	e72d      	b.n	80008ce <__aeabi_dadd+0x42e>
 8000a72:	4663      	mov	r3, ip
 8000a74:	08d8      	lsrs	r0, r3, #3
 8000a76:	4653      	mov	r3, sl
 8000a78:	075a      	lsls	r2, r3, #29
 8000a7a:	000e      	movs	r6, r1
 8000a7c:	4302      	orrs	r2, r0
 8000a7e:	08dc      	lsrs	r4, r3, #3
 8000a80:	e6cc      	b.n	800081c <__aeabi_dadd+0x37c>
 8000a82:	4663      	mov	r3, ip
 8000a84:	1a1d      	subs	r5, r3, r0
 8000a86:	45ac      	cmp	ip, r5
 8000a88:	4192      	sbcs	r2, r2
 8000a8a:	4653      	mov	r3, sl
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	1b1c      	subs	r4, r3, r4
 8000a90:	000e      	movs	r6, r1
 8000a92:	4688      	mov	r8, r1
 8000a94:	1aa4      	subs	r4, r4, r2
 8000a96:	3701      	adds	r7, #1
 8000a98:	e555      	b.n	8000546 <__aeabi_dadd+0xa6>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	08d9      	lsrs	r1, r3, #3
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	075a      	lsls	r2, r3, #29
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	08dc      	lsrs	r4, r3, #3
 8000aa6:	e6c9      	b.n	800083c <__aeabi_dadd+0x39c>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	4654      	mov	r4, sl
 8000aac:	e6d4      	b.n	8000858 <__aeabi_dadd+0x3b8>
 8000aae:	08c0      	lsrs	r0, r0, #3
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x616>
 8000ab4:	e6bf      	b.n	8000836 <__aeabi_dadd+0x396>
 8000ab6:	0762      	lsls	r2, r4, #29
 8000ab8:	4310      	orrs	r0, r2
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	08e4      	lsrs	r4, r4, #3
 8000abe:	0312      	lsls	r2, r2, #12
 8000ac0:	4214      	tst	r4, r2
 8000ac2:	d0cd      	beq.n	8000a60 <__aeabi_dadd+0x5c0>
 8000ac4:	08dd      	lsrs	r5, r3, #3
 8000ac6:	4215      	tst	r5, r2
 8000ac8:	d1ca      	bne.n	8000a60 <__aeabi_dadd+0x5c0>
 8000aca:	4663      	mov	r3, ip
 8000acc:	08d8      	lsrs	r0, r3, #3
 8000ace:	4653      	mov	r3, sl
 8000ad0:	075b      	lsls	r3, r3, #29
 8000ad2:	000e      	movs	r6, r1
 8000ad4:	002c      	movs	r4, r5
 8000ad6:	4318      	orrs	r0, r3
 8000ad8:	e7c2      	b.n	8000a60 <__aeabi_dadd+0x5c0>
 8000ada:	4663      	mov	r3, ip
 8000adc:	08d9      	lsrs	r1, r3, #3
 8000ade:	4653      	mov	r3, sl
 8000ae0:	075a      	lsls	r2, r3, #29
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	08dc      	lsrs	r4, r3, #3
 8000ae6:	e699      	b.n	800081c <__aeabi_dadd+0x37c>
 8000ae8:	4663      	mov	r3, ip
 8000aea:	08d8      	lsrs	r0, r3, #3
 8000aec:	4653      	mov	r3, sl
 8000aee:	075a      	lsls	r2, r3, #29
 8000af0:	000e      	movs	r6, r1
 8000af2:	4302      	orrs	r2, r0
 8000af4:	08dc      	lsrs	r4, r3, #3
 8000af6:	e6a1      	b.n	800083c <__aeabi_dadd+0x39c>
 8000af8:	0011      	movs	r1, r2
 8000afa:	0027      	movs	r7, r4
 8000afc:	3920      	subs	r1, #32
 8000afe:	40cf      	lsrs	r7, r1
 8000b00:	2a20      	cmp	r2, #32
 8000b02:	d003      	beq.n	8000b0c <__aeabi_dadd+0x66c>
 8000b04:	2140      	movs	r1, #64	@ 0x40
 8000b06:	1a8a      	subs	r2, r1, r2
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	4320      	orrs	r0, r4
 8000b0c:	1e42      	subs	r2, r0, #1
 8000b0e:	4190      	sbcs	r0, r2
 8000b10:	0005      	movs	r5, r0
 8000b12:	433d      	orrs	r5, r7
 8000b14:	e651      	b.n	80007ba <__aeabi_dadd+0x31a>
 8000b16:	000c      	movs	r4, r1
 8000b18:	2500      	movs	r5, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	e558      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000b1e:	4460      	add	r0, ip
 8000b20:	4560      	cmp	r0, ip
 8000b22:	4192      	sbcs	r2, r2
 8000b24:	4454      	add	r4, sl
 8000b26:	4252      	negs	r2, r2
 8000b28:	0005      	movs	r5, r0
 8000b2a:	18a4      	adds	r4, r4, r2
 8000b2c:	e73a      	b.n	80009a4 <__aeabi_dadd+0x504>
 8000b2e:	4653      	mov	r3, sl
 8000b30:	075a      	lsls	r2, r3, #29
 8000b32:	4663      	mov	r3, ip
 8000b34:	08d9      	lsrs	r1, r3, #3
 8000b36:	4653      	mov	r3, sl
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	08dc      	lsrs	r4, r3, #3
 8000b3c:	e67e      	b.n	800083c <__aeabi_dadd+0x39c>
 8000b3e:	001a      	movs	r2, r3
 8000b40:	001c      	movs	r4, r3
 8000b42:	432a      	orrs	r2, r5
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dadd+0x6a8>
 8000b46:	e6ab      	b.n	80008a0 <__aeabi_dadd+0x400>
 8000b48:	e6c1      	b.n	80008ce <__aeabi_dadd+0x42e>
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	1a09      	subs	r1, r1, r0
 8000b50:	e519      	b.n	8000586 <__aeabi_dadd+0xe6>
 8000b52:	2200      	movs	r2, #0
 8000b54:	2500      	movs	r5, #0
 8000b56:	4c01      	ldr	r4, [pc, #4]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 8000b58:	e53a      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	000007ff 	.word	0x000007ff
 8000b60:	ff7fffff 	.word	0xff7fffff
 8000b64:	000007fe 	.word	0x000007fe

08000b68 <__aeabi_ddiv>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	46de      	mov	lr, fp
 8000b6c:	4645      	mov	r5, r8
 8000b6e:	4657      	mov	r7, sl
 8000b70:	464e      	mov	r6, r9
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	b087      	sub	sp, #28
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	030b      	lsls	r3, r1, #12
 8000b7c:	0b1b      	lsrs	r3, r3, #12
 8000b7e:	469b      	mov	fp, r3
 8000b80:	0fca      	lsrs	r2, r1, #31
 8000b82:	004b      	lsls	r3, r1, #1
 8000b84:	0004      	movs	r4, r0
 8000b86:	4680      	mov	r8, r0
 8000b88:	0d5b      	lsrs	r3, r3, #21
 8000b8a:	9202      	str	r2, [sp, #8]
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_ddiv+0x28>
 8000b8e:	e16a      	b.n	8000e66 <__aeabi_ddiv+0x2fe>
 8000b90:	4ad4      	ldr	r2, [pc, #848]	@ (8000ee4 <__aeabi_ddiv+0x37c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x30>
 8000b96:	e18c      	b.n	8000eb2 <__aeabi_ddiv+0x34a>
 8000b98:	4659      	mov	r1, fp
 8000b9a:	0f42      	lsrs	r2, r0, #29
 8000b9c:	00c9      	lsls	r1, r1, #3
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0409      	lsls	r1, r1, #16
 8000ba4:	4311      	orrs	r1, r2
 8000ba6:	00c2      	lsls	r2, r0, #3
 8000ba8:	4690      	mov	r8, r2
 8000baa:	4acf      	ldr	r2, [pc, #828]	@ (8000ee8 <__aeabi_ddiv+0x380>)
 8000bac:	4689      	mov	r9, r1
 8000bae:	4692      	mov	sl, r2
 8000bb0:	449a      	add	sl, r3
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	9e00      	ldr	r6, [sp, #0]
 8000bba:	9f01      	ldr	r7, [sp, #4]
 8000bbc:	033b      	lsls	r3, r7, #12
 8000bbe:	0b1b      	lsrs	r3, r3, #12
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	007b      	lsls	r3, r7, #1
 8000bc4:	0030      	movs	r0, r6
 8000bc6:	0d5b      	lsrs	r3, r3, #21
 8000bc8:	0ffd      	lsrs	r5, r7, #31
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_ddiv+0x68>
 8000bce:	e128      	b.n	8000e22 <__aeabi_ddiv+0x2ba>
 8000bd0:	4ac4      	ldr	r2, [pc, #784]	@ (8000ee4 <__aeabi_ddiv+0x37c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x70>
 8000bd6:	e177      	b.n	8000ec8 <__aeabi_ddiv+0x360>
 8000bd8:	4659      	mov	r1, fp
 8000bda:	0f72      	lsrs	r2, r6, #29
 8000bdc:	00c9      	lsls	r1, r1, #3
 8000bde:	430a      	orrs	r2, r1
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0409      	lsls	r1, r1, #16
 8000be4:	4311      	orrs	r1, r2
 8000be6:	468b      	mov	fp, r1
 8000be8:	49bf      	ldr	r1, [pc, #764]	@ (8000ee8 <__aeabi_ddiv+0x380>)
 8000bea:	00f2      	lsls	r2, r6, #3
 8000bec:	468c      	mov	ip, r1
 8000bee:	4651      	mov	r1, sl
 8000bf0:	4463      	add	r3, ip
 8000bf2:	1acb      	subs	r3, r1, r3
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9e02      	ldr	r6, [sp, #8]
 8000bfa:	406e      	eors	r6, r5
 8000bfc:	2c0f      	cmp	r4, #15
 8000bfe:	d827      	bhi.n	8000c50 <__aeabi_ddiv+0xe8>
 8000c00:	49ba      	ldr	r1, [pc, #744]	@ (8000eec <__aeabi_ddiv+0x384>)
 8000c02:	00a4      	lsls	r4, r4, #2
 8000c04:	5909      	ldr	r1, [r1, r4]
 8000c06:	468f      	mov	pc, r1
 8000c08:	46cb      	mov	fp, r9
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	9e02      	ldr	r6, [sp, #8]
 8000c0e:	9b03      	ldr	r3, [sp, #12]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d016      	beq.n	8000c42 <__aeabi_ddiv+0xda>
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d100      	bne.n	8000c1a <__aeabi_ddiv+0xb2>
 8000c18:	e2a6      	b.n	8001168 <__aeabi_ddiv+0x600>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_ddiv+0xb8>
 8000c1e:	e0df      	b.n	8000de0 <__aeabi_ddiv+0x278>
 8000c20:	2200      	movs	r2, #0
 8000c22:	2300      	movs	r3, #0
 8000c24:	2400      	movs	r4, #0
 8000c26:	4690      	mov	r8, r2
 8000c28:	051b      	lsls	r3, r3, #20
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	07f6      	lsls	r6, r6, #31
 8000c2e:	4333      	orrs	r3, r6
 8000c30:	4640      	mov	r0, r8
 8000c32:	0019      	movs	r1, r3
 8000c34:	b007      	add	sp, #28
 8000c36:	bcf0      	pop	{r4, r5, r6, r7}
 8000c38:	46bb      	mov	fp, r7
 8000c3a:	46b2      	mov	sl, r6
 8000c3c:	46a9      	mov	r9, r5
 8000c3e:	46a0      	mov	r8, r4
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	2200      	movs	r2, #0
 8000c44:	2400      	movs	r4, #0
 8000c46:	4690      	mov	r8, r2
 8000c48:	4ba6      	ldr	r3, [pc, #664]	@ (8000ee4 <__aeabi_ddiv+0x37c>)
 8000c4a:	e7ed      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	e7df      	b.n	8000c10 <__aeabi_ddiv+0xa8>
 8000c50:	45cb      	cmp	fp, r9
 8000c52:	d200      	bcs.n	8000c56 <__aeabi_ddiv+0xee>
 8000c54:	e1d4      	b.n	8001000 <__aeabi_ddiv+0x498>
 8000c56:	d100      	bne.n	8000c5a <__aeabi_ddiv+0xf2>
 8000c58:	e1cf      	b.n	8000ffa <__aeabi_ddiv+0x492>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	469c      	mov	ip, r3
 8000c60:	4644      	mov	r4, r8
 8000c62:	4648      	mov	r0, r9
 8000c64:	2700      	movs	r7, #0
 8000c66:	44e2      	add	sl, ip
 8000c68:	465b      	mov	r3, fp
 8000c6a:	0e15      	lsrs	r5, r2, #24
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	431d      	orrs	r5, r3
 8000c70:	0c19      	lsrs	r1, r3, #16
 8000c72:	042b      	lsls	r3, r5, #16
 8000c74:	0212      	lsls	r2, r2, #8
 8000c76:	9500      	str	r5, [sp, #0]
 8000c78:	0c1d      	lsrs	r5, r3, #16
 8000c7a:	4691      	mov	r9, r2
 8000c7c:	9102      	str	r1, [sp, #8]
 8000c7e:	9503      	str	r5, [sp, #12]
 8000c80:	f7ff fae0 	bl	8000244 <__aeabi_uidivmod>
 8000c84:	0002      	movs	r2, r0
 8000c86:	436a      	muls	r2, r5
 8000c88:	040b      	lsls	r3, r1, #16
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	4680      	mov	r8, r0
 8000c8e:	4319      	orrs	r1, r3
 8000c90:	428a      	cmp	r2, r1
 8000c92:	d909      	bls.n	8000ca8 <__aeabi_ddiv+0x140>
 8000c94:	9d00      	ldr	r5, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	46ac      	mov	ip, r5
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	4461      	add	r1, ip
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	44e0      	add	r8, ip
 8000ca2:	428d      	cmp	r5, r1
 8000ca4:	d800      	bhi.n	8000ca8 <__aeabi_ddiv+0x140>
 8000ca6:	e1fb      	b.n	80010a0 <__aeabi_ddiv+0x538>
 8000ca8:	1a88      	subs	r0, r1, r2
 8000caa:	9902      	ldr	r1, [sp, #8]
 8000cac:	f7ff faca 	bl	8000244 <__aeabi_uidivmod>
 8000cb0:	9a03      	ldr	r2, [sp, #12]
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	4342      	muls	r2, r0
 8000cb6:	0409      	lsls	r1, r1, #16
 8000cb8:	0c24      	lsrs	r4, r4, #16
 8000cba:	0003      	movs	r3, r0
 8000cbc:	430c      	orrs	r4, r1
 8000cbe:	42a2      	cmp	r2, r4
 8000cc0:	d906      	bls.n	8000cd0 <__aeabi_ddiv+0x168>
 8000cc2:	9900      	ldr	r1, [sp, #0]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	468c      	mov	ip, r1
 8000cc8:	4464      	add	r4, ip
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	d800      	bhi.n	8000cd0 <__aeabi_ddiv+0x168>
 8000cce:	e1e1      	b.n	8001094 <__aeabi_ddiv+0x52c>
 8000cd0:	1aa0      	subs	r0, r4, r2
 8000cd2:	4642      	mov	r2, r8
 8000cd4:	0412      	lsls	r2, r2, #16
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	4693      	mov	fp, r2
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4659      	mov	r1, fp
 8000cde:	0c1b      	lsrs	r3, r3, #16
 8000ce0:	001d      	movs	r5, r3
 8000ce2:	9304      	str	r3, [sp, #16]
 8000ce4:	040b      	lsls	r3, r1, #16
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	0409      	lsls	r1, r1, #16
 8000cea:	0c09      	lsrs	r1, r1, #16
 8000cec:	000c      	movs	r4, r1
 8000cee:	0c1b      	lsrs	r3, r3, #16
 8000cf0:	435c      	muls	r4, r3
 8000cf2:	0c12      	lsrs	r2, r2, #16
 8000cf4:	436b      	muls	r3, r5
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	4351      	muls	r1, r2
 8000cfa:	436a      	muls	r2, r5
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	46ac      	mov	ip, r5
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	4463      	add	r3, ip
 8000d04:	4299      	cmp	r1, r3
 8000d06:	d903      	bls.n	8000d10 <__aeabi_ddiv+0x1a8>
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0249      	lsls	r1, r1, #9
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	4462      	add	r2, ip
 8000d10:	0c19      	lsrs	r1, r3, #16
 8000d12:	0424      	lsls	r4, r4, #16
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	0c24      	lsrs	r4, r4, #16
 8000d18:	188a      	adds	r2, r1, r2
 8000d1a:	191c      	adds	r4, r3, r4
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d302      	bcc.n	8000d26 <__aeabi_ddiv+0x1be>
 8000d20:	d116      	bne.n	8000d50 <__aeabi_ddiv+0x1e8>
 8000d22:	42a7      	cmp	r7, r4
 8000d24:	d214      	bcs.n	8000d50 <__aeabi_ddiv+0x1e8>
 8000d26:	465b      	mov	r3, fp
 8000d28:	9d00      	ldr	r5, [sp, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	444f      	add	r7, r9
 8000d2e:	9305      	str	r3, [sp, #20]
 8000d30:	454f      	cmp	r7, r9
 8000d32:	419b      	sbcs	r3, r3
 8000d34:	46ac      	mov	ip, r5
 8000d36:	425b      	negs	r3, r3
 8000d38:	4463      	add	r3, ip
 8000d3a:	18c0      	adds	r0, r0, r3
 8000d3c:	4285      	cmp	r5, r0
 8000d3e:	d300      	bcc.n	8000d42 <__aeabi_ddiv+0x1da>
 8000d40:	e1a1      	b.n	8001086 <__aeabi_ddiv+0x51e>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	d900      	bls.n	8000d48 <__aeabi_ddiv+0x1e0>
 8000d46:	e1f6      	b.n	8001136 <__aeabi_ddiv+0x5ce>
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x1e4>
 8000d4a:	e1f1      	b.n	8001130 <__aeabi_ddiv+0x5c8>
 8000d4c:	9b05      	ldr	r3, [sp, #20]
 8000d4e:	469b      	mov	fp, r3
 8000d50:	1b3c      	subs	r4, r7, r4
 8000d52:	42a7      	cmp	r7, r4
 8000d54:	41bf      	sbcs	r7, r7
 8000d56:	9d00      	ldr	r5, [sp, #0]
 8000d58:	1a80      	subs	r0, r0, r2
 8000d5a:	427f      	negs	r7, r7
 8000d5c:	1bc0      	subs	r0, r0, r7
 8000d5e:	4285      	cmp	r5, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_ddiv+0x1fc>
 8000d62:	e1d0      	b.n	8001106 <__aeabi_ddiv+0x59e>
 8000d64:	9902      	ldr	r1, [sp, #8]
 8000d66:	f7ff fa6d 	bl	8000244 <__aeabi_uidivmod>
 8000d6a:	9a03      	ldr	r2, [sp, #12]
 8000d6c:	040b      	lsls	r3, r1, #16
 8000d6e:	4342      	muls	r2, r0
 8000d70:	0c21      	lsrs	r1, r4, #16
 8000d72:	0007      	movs	r7, r0
 8000d74:	4319      	orrs	r1, r3
 8000d76:	428a      	cmp	r2, r1
 8000d78:	d900      	bls.n	8000d7c <__aeabi_ddiv+0x214>
 8000d7a:	e178      	b.n	800106e <__aeabi_ddiv+0x506>
 8000d7c:	1a88      	subs	r0, r1, r2
 8000d7e:	9902      	ldr	r1, [sp, #8]
 8000d80:	f7ff fa60 	bl	8000244 <__aeabi_uidivmod>
 8000d84:	9a03      	ldr	r2, [sp, #12]
 8000d86:	0424      	lsls	r4, r4, #16
 8000d88:	4342      	muls	r2, r0
 8000d8a:	0409      	lsls	r1, r1, #16
 8000d8c:	0c24      	lsrs	r4, r4, #16
 8000d8e:	0003      	movs	r3, r0
 8000d90:	430c      	orrs	r4, r1
 8000d92:	42a2      	cmp	r2, r4
 8000d94:	d900      	bls.n	8000d98 <__aeabi_ddiv+0x230>
 8000d96:	e15d      	b.n	8001054 <__aeabi_ddiv+0x4ec>
 8000d98:	4641      	mov	r1, r8
 8000d9a:	1aa4      	subs	r4, r4, r2
 8000d9c:	043a      	lsls	r2, r7, #16
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	9d04      	ldr	r5, [sp, #16]
 8000da2:	0413      	lsls	r3, r2, #16
 8000da4:	0c1b      	lsrs	r3, r3, #16
 8000da6:	4359      	muls	r1, r3
 8000da8:	4647      	mov	r7, r8
 8000daa:	436b      	muls	r3, r5
 8000dac:	469c      	mov	ip, r3
 8000dae:	0c10      	lsrs	r0, r2, #16
 8000db0:	4347      	muls	r7, r0
 8000db2:	0c0b      	lsrs	r3, r1, #16
 8000db4:	44bc      	add	ip, r7
 8000db6:	4463      	add	r3, ip
 8000db8:	4368      	muls	r0, r5
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d903      	bls.n	8000dc6 <__aeabi_ddiv+0x25e>
 8000dbe:	2580      	movs	r5, #128	@ 0x80
 8000dc0:	026d      	lsls	r5, r5, #9
 8000dc2:	46ac      	mov	ip, r5
 8000dc4:	4460      	add	r0, ip
 8000dc6:	0c1f      	lsrs	r7, r3, #16
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	0c09      	lsrs	r1, r1, #16
 8000dce:	183f      	adds	r7, r7, r0
 8000dd0:	185b      	adds	r3, r3, r1
 8000dd2:	42bc      	cmp	r4, r7
 8000dd4:	d200      	bcs.n	8000dd8 <__aeabi_ddiv+0x270>
 8000dd6:	e102      	b.n	8000fde <__aeabi_ddiv+0x476>
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_ddiv+0x274>
 8000dda:	e0fd      	b.n	8000fd8 <__aeabi_ddiv+0x470>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <__aeabi_ddiv+0x388>)
 8000de2:	4453      	add	r3, sl
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_ddiv+0x282>
 8000de8:	e0ae      	b.n	8000f48 <__aeabi_ddiv+0x3e0>
 8000dea:	0751      	lsls	r1, r2, #29
 8000dec:	d000      	beq.n	8000df0 <__aeabi_ddiv+0x288>
 8000dee:	e198      	b.n	8001122 <__aeabi_ddiv+0x5ba>
 8000df0:	4659      	mov	r1, fp
 8000df2:	01c9      	lsls	r1, r1, #7
 8000df4:	d506      	bpl.n	8000e04 <__aeabi_ddiv+0x29c>
 8000df6:	4659      	mov	r1, fp
 8000df8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef4 <__aeabi_ddiv+0x38c>)
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	468b      	mov	fp, r1
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4453      	add	r3, sl
 8000e04:	493c      	ldr	r1, [pc, #240]	@ (8000ef8 <__aeabi_ddiv+0x390>)
 8000e06:	428b      	cmp	r3, r1
 8000e08:	dd00      	ble.n	8000e0c <__aeabi_ddiv+0x2a4>
 8000e0a:	e71a      	b.n	8000c42 <__aeabi_ddiv+0xda>
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	0749      	lsls	r1, r1, #29
 8000e12:	4311      	orrs	r1, r2
 8000e14:	465a      	mov	r2, fp
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	0254      	lsls	r4, r2, #9
 8000e1a:	4688      	mov	r8, r1
 8000e1c:	0b24      	lsrs	r4, r4, #12
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	e702      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000e22:	465a      	mov	r2, fp
 8000e24:	9b00      	ldr	r3, [sp, #0]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x2c4>
 8000e2a:	e07e      	b.n	8000f2a <__aeabi_ddiv+0x3c2>
 8000e2c:	465b      	mov	r3, fp
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2cc>
 8000e32:	e100      	b.n	8001036 <__aeabi_ddiv+0x4ce>
 8000e34:	4658      	mov	r0, fp
 8000e36:	f001 f9ef 	bl	8002218 <__clzsi2>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	3a0b      	subs	r2, #11
 8000e40:	271d      	movs	r7, #29
 8000e42:	9e00      	ldr	r6, [sp, #0]
 8000e44:	1aba      	subs	r2, r7, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	4658      	mov	r0, fp
 8000e4a:	40d6      	lsrs	r6, r2
 8000e4c:	3908      	subs	r1, #8
 8000e4e:	4088      	lsls	r0, r1
 8000e50:	0032      	movs	r2, r6
 8000e52:	4302      	orrs	r2, r0
 8000e54:	4693      	mov	fp, r2
 8000e56:	9a00      	ldr	r2, [sp, #0]
 8000e58:	408a      	lsls	r2, r1
 8000e5a:	4928      	ldr	r1, [pc, #160]	@ (8000efc <__aeabi_ddiv+0x394>)
 8000e5c:	4453      	add	r3, sl
 8000e5e:	468a      	mov	sl, r1
 8000e60:	449a      	add	sl, r3
 8000e62:	2300      	movs	r3, #0
 8000e64:	e6c8      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000e66:	465b      	mov	r3, fp
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	d056      	beq.n	8000f1c <__aeabi_ddiv+0x3b4>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x30e>
 8000e74:	e0cd      	b.n	8001012 <__aeabi_ddiv+0x4aa>
 8000e76:	4658      	mov	r0, fp
 8000e78:	f001 f9ce 	bl	8002218 <__clzsi2>
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	425b      	negs	r3, r3
 8000e80:	469c      	mov	ip, r3
 8000e82:	0002      	movs	r2, r0
 8000e84:	4484      	add	ip, r0
 8000e86:	4666      	mov	r6, ip
 8000e88:	231d      	movs	r3, #29
 8000e8a:	1b9b      	subs	r3, r3, r6
 8000e8c:	0026      	movs	r6, r4
 8000e8e:	0011      	movs	r1, r2
 8000e90:	4658      	mov	r0, fp
 8000e92:	40de      	lsrs	r6, r3
 8000e94:	3908      	subs	r1, #8
 8000e96:	4088      	lsls	r0, r1
 8000e98:	0033      	movs	r3, r6
 8000e9a:	4303      	orrs	r3, r0
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	0023      	movs	r3, r4
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	4698      	mov	r8, r3
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <__aeabi_ddiv+0x398>)
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	469a      	mov	sl, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	e682      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000eb2:	465a      	mov	r2, fp
 8000eb4:	4302      	orrs	r2, r0
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	d12a      	bne.n	8000f10 <__aeabi_ddiv+0x3a8>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	469a      	mov	sl, r3
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2408      	movs	r4, #8
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	e677      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000ec8:	465a      	mov	r2, fp
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <__aeabi_ddiv+0x39c>)
 8000ed0:	469c      	mov	ip, r3
 8000ed2:	44e2      	add	sl, ip
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d117      	bne.n	8000f08 <__aeabi_ddiv+0x3a0>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	431c      	orrs	r4, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	469b      	mov	fp, r3
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	e689      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000ee4:	000007ff 	.word	0x000007ff
 8000ee8:	fffffc01 	.word	0xfffffc01
 8000eec:	0800973c 	.word	0x0800973c
 8000ef0:	000003ff 	.word	0x000003ff
 8000ef4:	feffffff 	.word	0xfeffffff
 8000ef8:	000007fe 	.word	0x000007fe
 8000efc:	000003f3 	.word	0x000003f3
 8000f00:	fffffc0d 	.word	0xfffffc0d
 8000f04:	fffff801 	.word	0xfffff801
 8000f08:	2303      	movs	r3, #3
 8000f0a:	0032      	movs	r2, r6
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	e673      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000f10:	469a      	mov	sl, r3
 8000f12:	2303      	movs	r3, #3
 8000f14:	46d9      	mov	r9, fp
 8000f16:	240c      	movs	r4, #12
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	e64d      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4698      	mov	r8, r3
 8000f20:	469a      	mov	sl, r3
 8000f22:	3301      	adds	r3, #1
 8000f24:	2404      	movs	r4, #4
 8000f26:	9303      	str	r3, [sp, #12]
 8000f28:	e646      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	469b      	mov	fp, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	e660      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000f36:	2300      	movs	r3, #0
 8000f38:	2480      	movs	r4, #128	@ 0x80
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	4b92      	ldr	r3, [pc, #584]	@ (8001188 <__aeabi_ddiv+0x620>)
 8000f40:	0324      	lsls	r4, r4, #12
 8000f42:	e671      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000f44:	2201      	movs	r2, #1
 8000f46:	4252      	negs	r2, r2
 8000f48:	2101      	movs	r1, #1
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	2938      	cmp	r1, #56	@ 0x38
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_ddiv+0x3ea>
 8000f50:	e666      	b.n	8000c20 <__aeabi_ddiv+0xb8>
 8000f52:	291f      	cmp	r1, #31
 8000f54:	dc00      	bgt.n	8000f58 <__aeabi_ddiv+0x3f0>
 8000f56:	e0ab      	b.n	80010b0 <__aeabi_ddiv+0x548>
 8000f58:	201f      	movs	r0, #31
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	1ac3      	subs	r3, r0, r3
 8000f5e:	4658      	mov	r0, fp
 8000f60:	40d8      	lsrs	r0, r3
 8000f62:	0003      	movs	r3, r0
 8000f64:	2920      	cmp	r1, #32
 8000f66:	d004      	beq.n	8000f72 <__aeabi_ddiv+0x40a>
 8000f68:	4658      	mov	r0, fp
 8000f6a:	4988      	ldr	r1, [pc, #544]	@ (800118c <__aeabi_ddiv+0x624>)
 8000f6c:	4451      	add	r1, sl
 8000f6e:	4088      	lsls	r0, r1
 8000f70:	4302      	orrs	r2, r0
 8000f72:	1e51      	subs	r1, r2, #1
 8000f74:	418a      	sbcs	r2, r1
 8000f76:	431a      	orrs	r2, r3
 8000f78:	2307      	movs	r3, #7
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	4011      	ands	r1, r2
 8000f80:	4213      	tst	r3, r2
 8000f82:	d00c      	beq.n	8000f9e <__aeabi_ddiv+0x436>
 8000f84:	230f      	movs	r3, #15
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x426>
 8000f8c:	e0f9      	b.n	8001182 <__aeabi_ddiv+0x61a>
 8000f8e:	1d11      	adds	r1, r2, #4
 8000f90:	4291      	cmp	r1, r2
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	000a      	movs	r2, r1
 8000f96:	425b      	negs	r3, r3
 8000f98:	0759      	lsls	r1, r3, #29
 8000f9a:	025b      	lsls	r3, r3, #9
 8000f9c:	0b1c      	lsrs	r4, r3, #12
 8000f9e:	08d2      	lsrs	r2, r2, #3
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	4690      	mov	r8, r2
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e63f      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000fa8:	2480      	movs	r4, #128	@ 0x80
 8000faa:	464b      	mov	r3, r9
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	4223      	tst	r3, r4
 8000fb0:	d009      	beq.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fb2:	465b      	mov	r3, fp
 8000fb4:	4223      	tst	r3, r4
 8000fb6:	d106      	bne.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fb8:	431c      	orrs	r4, r3
 8000fba:	0324      	lsls	r4, r4, #12
 8000fbc:	002e      	movs	r6, r5
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <__aeabi_ddiv+0x620>)
 8000fc2:	0b24      	lsrs	r4, r4, #12
 8000fc4:	e630      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000fc6:	2480      	movs	r4, #128	@ 0x80
 8000fc8:	464b      	mov	r3, r9
 8000fca:	0324      	lsls	r4, r4, #12
 8000fcc:	431c      	orrs	r4, r3
 8000fce:	0324      	lsls	r4, r4, #12
 8000fd0:	9e02      	ldr	r6, [sp, #8]
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001188 <__aeabi_ddiv+0x620>)
 8000fd4:	0b24      	lsrs	r4, r4, #12
 8000fd6:	e627      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x476>
 8000fdc:	e700      	b.n	8000de0 <__aeabi_ddiv+0x278>
 8000fde:	9800      	ldr	r0, [sp, #0]
 8000fe0:	1e51      	subs	r1, r2, #1
 8000fe2:	4684      	mov	ip, r0
 8000fe4:	4464      	add	r4, ip
 8000fe6:	4284      	cmp	r4, r0
 8000fe8:	d200      	bcs.n	8000fec <__aeabi_ddiv+0x484>
 8000fea:	e084      	b.n	80010f6 <__aeabi_ddiv+0x58e>
 8000fec:	42bc      	cmp	r4, r7
 8000fee:	d200      	bcs.n	8000ff2 <__aeabi_ddiv+0x48a>
 8000ff0:	e0ae      	b.n	8001150 <__aeabi_ddiv+0x5e8>
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x48e>
 8000ff4:	e0c1      	b.n	800117a <__aeabi_ddiv+0x612>
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	e6f0      	b.n	8000ddc <__aeabi_ddiv+0x274>
 8000ffa:	4542      	cmp	r2, r8
 8000ffc:	d900      	bls.n	8001000 <__aeabi_ddiv+0x498>
 8000ffe:	e62c      	b.n	8000c5a <__aeabi_ddiv+0xf2>
 8001000:	464b      	mov	r3, r9
 8001002:	07dc      	lsls	r4, r3, #31
 8001004:	0858      	lsrs	r0, r3, #1
 8001006:	4643      	mov	r3, r8
 8001008:	085b      	lsrs	r3, r3, #1
 800100a:	431c      	orrs	r4, r3
 800100c:	4643      	mov	r3, r8
 800100e:	07df      	lsls	r7, r3, #31
 8001010:	e62a      	b.n	8000c68 <__aeabi_ddiv+0x100>
 8001012:	f001 f901 	bl	8002218 <__clzsi2>
 8001016:	2315      	movs	r3, #21
 8001018:	469c      	mov	ip, r3
 800101a:	4484      	add	ip, r0
 800101c:	0002      	movs	r2, r0
 800101e:	4663      	mov	r3, ip
 8001020:	3220      	adds	r2, #32
 8001022:	2b1c      	cmp	r3, #28
 8001024:	dc00      	bgt.n	8001028 <__aeabi_ddiv+0x4c0>
 8001026:	e72e      	b.n	8000e86 <__aeabi_ddiv+0x31e>
 8001028:	0023      	movs	r3, r4
 800102a:	3808      	subs	r0, #8
 800102c:	4083      	lsls	r3, r0
 800102e:	4699      	mov	r9, r3
 8001030:	2300      	movs	r3, #0
 8001032:	4698      	mov	r8, r3
 8001034:	e736      	b.n	8000ea4 <__aeabi_ddiv+0x33c>
 8001036:	f001 f8ef 	bl	8002218 <__clzsi2>
 800103a:	0002      	movs	r2, r0
 800103c:	0003      	movs	r3, r0
 800103e:	3215      	adds	r2, #21
 8001040:	3320      	adds	r3, #32
 8001042:	2a1c      	cmp	r2, #28
 8001044:	dc00      	bgt.n	8001048 <__aeabi_ddiv+0x4e0>
 8001046:	e6fb      	b.n	8000e40 <__aeabi_ddiv+0x2d8>
 8001048:	9900      	ldr	r1, [sp, #0]
 800104a:	3808      	subs	r0, #8
 800104c:	4081      	lsls	r1, r0
 800104e:	2200      	movs	r2, #0
 8001050:	468b      	mov	fp, r1
 8001052:	e702      	b.n	8000e5a <__aeabi_ddiv+0x2f2>
 8001054:	9900      	ldr	r1, [sp, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	468c      	mov	ip, r1
 800105a:	4464      	add	r4, ip
 800105c:	42a1      	cmp	r1, r4
 800105e:	d900      	bls.n	8001062 <__aeabi_ddiv+0x4fa>
 8001060:	e69a      	b.n	8000d98 <__aeabi_ddiv+0x230>
 8001062:	42a2      	cmp	r2, r4
 8001064:	d800      	bhi.n	8001068 <__aeabi_ddiv+0x500>
 8001066:	e697      	b.n	8000d98 <__aeabi_ddiv+0x230>
 8001068:	1e83      	subs	r3, r0, #2
 800106a:	4464      	add	r4, ip
 800106c:	e694      	b.n	8000d98 <__aeabi_ddiv+0x230>
 800106e:	46ac      	mov	ip, r5
 8001070:	4461      	add	r1, ip
 8001072:	3f01      	subs	r7, #1
 8001074:	428d      	cmp	r5, r1
 8001076:	d900      	bls.n	800107a <__aeabi_ddiv+0x512>
 8001078:	e680      	b.n	8000d7c <__aeabi_ddiv+0x214>
 800107a:	428a      	cmp	r2, r1
 800107c:	d800      	bhi.n	8001080 <__aeabi_ddiv+0x518>
 800107e:	e67d      	b.n	8000d7c <__aeabi_ddiv+0x214>
 8001080:	1e87      	subs	r7, r0, #2
 8001082:	4461      	add	r1, ip
 8001084:	e67a      	b.n	8000d7c <__aeabi_ddiv+0x214>
 8001086:	4285      	cmp	r5, r0
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0x524>
 800108a:	e65f      	b.n	8000d4c <__aeabi_ddiv+0x1e4>
 800108c:	45b9      	cmp	r9, r7
 800108e:	d900      	bls.n	8001092 <__aeabi_ddiv+0x52a>
 8001090:	e65c      	b.n	8000d4c <__aeabi_ddiv+0x1e4>
 8001092:	e656      	b.n	8000d42 <__aeabi_ddiv+0x1da>
 8001094:	42a2      	cmp	r2, r4
 8001096:	d800      	bhi.n	800109a <__aeabi_ddiv+0x532>
 8001098:	e61a      	b.n	8000cd0 <__aeabi_ddiv+0x168>
 800109a:	1e83      	subs	r3, r0, #2
 800109c:	4464      	add	r4, ip
 800109e:	e617      	b.n	8000cd0 <__aeabi_ddiv+0x168>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	d800      	bhi.n	80010a6 <__aeabi_ddiv+0x53e>
 80010a4:	e600      	b.n	8000ca8 <__aeabi_ddiv+0x140>
 80010a6:	46ac      	mov	ip, r5
 80010a8:	1e83      	subs	r3, r0, #2
 80010aa:	4698      	mov	r8, r3
 80010ac:	4461      	add	r1, ip
 80010ae:	e5fb      	b.n	8000ca8 <__aeabi_ddiv+0x140>
 80010b0:	4837      	ldr	r0, [pc, #220]	@ (8001190 <__aeabi_ddiv+0x628>)
 80010b2:	0014      	movs	r4, r2
 80010b4:	4450      	add	r0, sl
 80010b6:	4082      	lsls	r2, r0
 80010b8:	465b      	mov	r3, fp
 80010ba:	0017      	movs	r7, r2
 80010bc:	4083      	lsls	r3, r0
 80010be:	40cc      	lsrs	r4, r1
 80010c0:	1e7a      	subs	r2, r7, #1
 80010c2:	4197      	sbcs	r7, r2
 80010c4:	4323      	orrs	r3, r4
 80010c6:	433b      	orrs	r3, r7
 80010c8:	001a      	movs	r2, r3
 80010ca:	465b      	mov	r3, fp
 80010cc:	40cb      	lsrs	r3, r1
 80010ce:	0751      	lsls	r1, r2, #29
 80010d0:	d009      	beq.n	80010e6 <__aeabi_ddiv+0x57e>
 80010d2:	210f      	movs	r1, #15
 80010d4:	4011      	ands	r1, r2
 80010d6:	2904      	cmp	r1, #4
 80010d8:	d005      	beq.n	80010e6 <__aeabi_ddiv+0x57e>
 80010da:	1d11      	adds	r1, r2, #4
 80010dc:	4291      	cmp	r1, r2
 80010de:	4192      	sbcs	r2, r2
 80010e0:	4252      	negs	r2, r2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	000a      	movs	r2, r1
 80010e6:	0219      	lsls	r1, r3, #8
 80010e8:	d400      	bmi.n	80010ec <__aeabi_ddiv+0x584>
 80010ea:	e755      	b.n	8000f98 <__aeabi_ddiv+0x430>
 80010ec:	2200      	movs	r2, #0
 80010ee:	2301      	movs	r3, #1
 80010f0:	2400      	movs	r4, #0
 80010f2:	4690      	mov	r8, r2
 80010f4:	e598      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 80010f6:	000a      	movs	r2, r1
 80010f8:	42bc      	cmp	r4, r7
 80010fa:	d000      	beq.n	80010fe <__aeabi_ddiv+0x596>
 80010fc:	e66e      	b.n	8000ddc <__aeabi_ddiv+0x274>
 80010fe:	454b      	cmp	r3, r9
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0x59c>
 8001102:	e66b      	b.n	8000ddc <__aeabi_ddiv+0x274>
 8001104:	e66c      	b.n	8000de0 <__aeabi_ddiv+0x278>
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <__aeabi_ddiv+0x62c>)
 8001108:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <__aeabi_ddiv+0x630>)
 800110a:	4453      	add	r3, sl
 800110c:	4592      	cmp	sl, r2
 800110e:	da00      	bge.n	8001112 <__aeabi_ddiv+0x5aa>
 8001110:	e718      	b.n	8000f44 <__aeabi_ddiv+0x3dc>
 8001112:	2101      	movs	r1, #1
 8001114:	4249      	negs	r1, r1
 8001116:	1d0a      	adds	r2, r1, #4
 8001118:	428a      	cmp	r2, r1
 800111a:	4189      	sbcs	r1, r1
 800111c:	4249      	negs	r1, r1
 800111e:	448b      	add	fp, r1
 8001120:	e666      	b.n	8000df0 <__aeabi_ddiv+0x288>
 8001122:	210f      	movs	r1, #15
 8001124:	4011      	ands	r1, r2
 8001126:	2904      	cmp	r1, #4
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x5c4>
 800112a:	e661      	b.n	8000df0 <__aeabi_ddiv+0x288>
 800112c:	0011      	movs	r1, r2
 800112e:	e7f2      	b.n	8001116 <__aeabi_ddiv+0x5ae>
 8001130:	42bc      	cmp	r4, r7
 8001132:	d800      	bhi.n	8001136 <__aeabi_ddiv+0x5ce>
 8001134:	e60a      	b.n	8000d4c <__aeabi_ddiv+0x1e4>
 8001136:	2302      	movs	r3, #2
 8001138:	425b      	negs	r3, r3
 800113a:	469c      	mov	ip, r3
 800113c:	9900      	ldr	r1, [sp, #0]
 800113e:	444f      	add	r7, r9
 8001140:	454f      	cmp	r7, r9
 8001142:	419b      	sbcs	r3, r3
 8001144:	44e3      	add	fp, ip
 8001146:	468c      	mov	ip, r1
 8001148:	425b      	negs	r3, r3
 800114a:	4463      	add	r3, ip
 800114c:	18c0      	adds	r0, r0, r3
 800114e:	e5ff      	b.n	8000d50 <__aeabi_ddiv+0x1e8>
 8001150:	4649      	mov	r1, r9
 8001152:	9d00      	ldr	r5, [sp, #0]
 8001154:	0048      	lsls	r0, r1, #1
 8001156:	4548      	cmp	r0, r9
 8001158:	4189      	sbcs	r1, r1
 800115a:	46ac      	mov	ip, r5
 800115c:	4249      	negs	r1, r1
 800115e:	4461      	add	r1, ip
 8001160:	4681      	mov	r9, r0
 8001162:	3a02      	subs	r2, #2
 8001164:	1864      	adds	r4, r4, r1
 8001166:	e7c7      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8001168:	2480      	movs	r4, #128	@ 0x80
 800116a:	465b      	mov	r3, fp
 800116c:	0324      	lsls	r4, r4, #12
 800116e:	431c      	orrs	r4, r3
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	4690      	mov	r8, r2
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <__aeabi_ddiv+0x620>)
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	e556      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 800117a:	4599      	cmp	r9, r3
 800117c:	d3e8      	bcc.n	8001150 <__aeabi_ddiv+0x5e8>
 800117e:	000a      	movs	r2, r1
 8001180:	e7bd      	b.n	80010fe <__aeabi_ddiv+0x596>
 8001182:	2300      	movs	r3, #0
 8001184:	e708      	b.n	8000f98 <__aeabi_ddiv+0x430>
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	000007ff 	.word	0x000007ff
 800118c:	0000043e 	.word	0x0000043e
 8001190:	0000041e 	.word	0x0000041e
 8001194:	000003ff 	.word	0x000003ff
 8001198:	fffffc02 	.word	0xfffffc02

0800119c <__eqdf2>:
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	4657      	mov	r7, sl
 80011a0:	46de      	mov	lr, fp
 80011a2:	464e      	mov	r6, r9
 80011a4:	4645      	mov	r5, r8
 80011a6:	b5e0      	push	{r5, r6, r7, lr}
 80011a8:	000d      	movs	r5, r1
 80011aa:	0004      	movs	r4, r0
 80011ac:	0fe8      	lsrs	r0, r5, #31
 80011ae:	4683      	mov	fp, r0
 80011b0:	0309      	lsls	r1, r1, #12
 80011b2:	0fd8      	lsrs	r0, r3, #31
 80011b4:	0b09      	lsrs	r1, r1, #12
 80011b6:	4682      	mov	sl, r0
 80011b8:	4819      	ldr	r0, [pc, #100]	@ (8001220 <__eqdf2+0x84>)
 80011ba:	468c      	mov	ip, r1
 80011bc:	031f      	lsls	r7, r3, #12
 80011be:	0069      	lsls	r1, r5, #1
 80011c0:	005e      	lsls	r6, r3, #1
 80011c2:	0d49      	lsrs	r1, r1, #21
 80011c4:	0b3f      	lsrs	r7, r7, #12
 80011c6:	0d76      	lsrs	r6, r6, #21
 80011c8:	4281      	cmp	r1, r0
 80011ca:	d018      	beq.n	80011fe <__eqdf2+0x62>
 80011cc:	4286      	cmp	r6, r0
 80011ce:	d00f      	beq.n	80011f0 <__eqdf2+0x54>
 80011d0:	2001      	movs	r0, #1
 80011d2:	42b1      	cmp	r1, r6
 80011d4:	d10d      	bne.n	80011f2 <__eqdf2+0x56>
 80011d6:	45bc      	cmp	ip, r7
 80011d8:	d10b      	bne.n	80011f2 <__eqdf2+0x56>
 80011da:	4294      	cmp	r4, r2
 80011dc:	d109      	bne.n	80011f2 <__eqdf2+0x56>
 80011de:	45d3      	cmp	fp, sl
 80011e0:	d01c      	beq.n	800121c <__eqdf2+0x80>
 80011e2:	2900      	cmp	r1, #0
 80011e4:	d105      	bne.n	80011f2 <__eqdf2+0x56>
 80011e6:	4660      	mov	r0, ip
 80011e8:	4320      	orrs	r0, r4
 80011ea:	1e43      	subs	r3, r0, #1
 80011ec:	4198      	sbcs	r0, r3
 80011ee:	e000      	b.n	80011f2 <__eqdf2+0x56>
 80011f0:	2001      	movs	r0, #1
 80011f2:	bcf0      	pop	{r4, r5, r6, r7}
 80011f4:	46bb      	mov	fp, r7
 80011f6:	46b2      	mov	sl, r6
 80011f8:	46a9      	mov	r9, r5
 80011fa:	46a0      	mov	r8, r4
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	2001      	movs	r0, #1
 8001200:	428e      	cmp	r6, r1
 8001202:	d1f6      	bne.n	80011f2 <__eqdf2+0x56>
 8001204:	4661      	mov	r1, ip
 8001206:	4339      	orrs	r1, r7
 8001208:	000f      	movs	r7, r1
 800120a:	4317      	orrs	r7, r2
 800120c:	4327      	orrs	r7, r4
 800120e:	d1f0      	bne.n	80011f2 <__eqdf2+0x56>
 8001210:	465b      	mov	r3, fp
 8001212:	4652      	mov	r2, sl
 8001214:	1a98      	subs	r0, r3, r2
 8001216:	1e43      	subs	r3, r0, #1
 8001218:	4198      	sbcs	r0, r3
 800121a:	e7ea      	b.n	80011f2 <__eqdf2+0x56>
 800121c:	2000      	movs	r0, #0
 800121e:	e7e8      	b.n	80011f2 <__eqdf2+0x56>
 8001220:	000007ff 	.word	0x000007ff

08001224 <__gedf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	464e      	mov	r6, r9
 800122a:	4645      	mov	r5, r8
 800122c:	46de      	mov	lr, fp
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	000d      	movs	r5, r1
 8001232:	030f      	lsls	r7, r1, #12
 8001234:	0b39      	lsrs	r1, r7, #12
 8001236:	b083      	sub	sp, #12
 8001238:	0004      	movs	r4, r0
 800123a:	4680      	mov	r8, r0
 800123c:	9101      	str	r1, [sp, #4]
 800123e:	0058      	lsls	r0, r3, #1
 8001240:	0fe9      	lsrs	r1, r5, #31
 8001242:	4f31      	ldr	r7, [pc, #196]	@ (8001308 <__gedf2+0xe4>)
 8001244:	0d40      	lsrs	r0, r0, #21
 8001246:	468c      	mov	ip, r1
 8001248:	006e      	lsls	r6, r5, #1
 800124a:	0319      	lsls	r1, r3, #12
 800124c:	4682      	mov	sl, r0
 800124e:	4691      	mov	r9, r2
 8001250:	0d76      	lsrs	r6, r6, #21
 8001252:	0b09      	lsrs	r1, r1, #12
 8001254:	0fd8      	lsrs	r0, r3, #31
 8001256:	42be      	cmp	r6, r7
 8001258:	d01f      	beq.n	800129a <__gedf2+0x76>
 800125a:	45ba      	cmp	sl, r7
 800125c:	d00f      	beq.n	800127e <__gedf2+0x5a>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d12f      	bne.n	80012c2 <__gedf2+0x9e>
 8001262:	4655      	mov	r5, sl
 8001264:	9e01      	ldr	r6, [sp, #4]
 8001266:	4334      	orrs	r4, r6
 8001268:	2d00      	cmp	r5, #0
 800126a:	d127      	bne.n	80012bc <__gedf2+0x98>
 800126c:	430a      	orrs	r2, r1
 800126e:	d03a      	beq.n	80012e6 <__gedf2+0xc2>
 8001270:	2c00      	cmp	r4, #0
 8001272:	d145      	bne.n	8001300 <__gedf2+0xdc>
 8001274:	2800      	cmp	r0, #0
 8001276:	d11a      	bne.n	80012ae <__gedf2+0x8a>
 8001278:	2001      	movs	r0, #1
 800127a:	4240      	negs	r0, r0
 800127c:	e017      	b.n	80012ae <__gedf2+0x8a>
 800127e:	4311      	orrs	r1, r2
 8001280:	d13b      	bne.n	80012fa <__gedf2+0xd6>
 8001282:	2e00      	cmp	r6, #0
 8001284:	d102      	bne.n	800128c <__gedf2+0x68>
 8001286:	9f01      	ldr	r7, [sp, #4]
 8001288:	4327      	orrs	r7, r4
 800128a:	d0f3      	beq.n	8001274 <__gedf2+0x50>
 800128c:	4584      	cmp	ip, r0
 800128e:	d109      	bne.n	80012a4 <__gedf2+0x80>
 8001290:	4663      	mov	r3, ip
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <__gedf2+0x54>
 8001296:	4660      	mov	r0, ip
 8001298:	e009      	b.n	80012ae <__gedf2+0x8a>
 800129a:	9f01      	ldr	r7, [sp, #4]
 800129c:	4327      	orrs	r7, r4
 800129e:	d12c      	bne.n	80012fa <__gedf2+0xd6>
 80012a0:	45b2      	cmp	sl, r6
 80012a2:	d024      	beq.n	80012ee <__gedf2+0xca>
 80012a4:	4663      	mov	r3, ip
 80012a6:	2002      	movs	r0, #2
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4018      	ands	r0, r3
 80012ac:	3801      	subs	r0, #1
 80012ae:	b003      	add	sp, #12
 80012b0:	bcf0      	pop	{r4, r5, r6, r7}
 80012b2:	46bb      	mov	fp, r7
 80012b4:	46b2      	mov	sl, r6
 80012b6:	46a9      	mov	r9, r5
 80012b8:	46a0      	mov	r8, r4
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d0d9      	beq.n	8001274 <__gedf2+0x50>
 80012c0:	e7e4      	b.n	800128c <__gedf2+0x68>
 80012c2:	4654      	mov	r4, sl
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0ed      	beq.n	80012a4 <__gedf2+0x80>
 80012c8:	4584      	cmp	ip, r0
 80012ca:	d1eb      	bne.n	80012a4 <__gedf2+0x80>
 80012cc:	4556      	cmp	r6, sl
 80012ce:	dce9      	bgt.n	80012a4 <__gedf2+0x80>
 80012d0:	dbde      	blt.n	8001290 <__gedf2+0x6c>
 80012d2:	9b01      	ldr	r3, [sp, #4]
 80012d4:	428b      	cmp	r3, r1
 80012d6:	d8e5      	bhi.n	80012a4 <__gedf2+0x80>
 80012d8:	d1da      	bne.n	8001290 <__gedf2+0x6c>
 80012da:	45c8      	cmp	r8, r9
 80012dc:	d8e2      	bhi.n	80012a4 <__gedf2+0x80>
 80012de:	2000      	movs	r0, #0
 80012e0:	45c8      	cmp	r8, r9
 80012e2:	d2e4      	bcs.n	80012ae <__gedf2+0x8a>
 80012e4:	e7d4      	b.n	8001290 <__gedf2+0x6c>
 80012e6:	2000      	movs	r0, #0
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d0e0      	beq.n	80012ae <__gedf2+0x8a>
 80012ec:	e7da      	b.n	80012a4 <__gedf2+0x80>
 80012ee:	4311      	orrs	r1, r2
 80012f0:	d103      	bne.n	80012fa <__gedf2+0xd6>
 80012f2:	4584      	cmp	ip, r0
 80012f4:	d1d6      	bne.n	80012a4 <__gedf2+0x80>
 80012f6:	2000      	movs	r0, #0
 80012f8:	e7d9      	b.n	80012ae <__gedf2+0x8a>
 80012fa:	2002      	movs	r0, #2
 80012fc:	4240      	negs	r0, r0
 80012fe:	e7d6      	b.n	80012ae <__gedf2+0x8a>
 8001300:	4584      	cmp	ip, r0
 8001302:	d0e6      	beq.n	80012d2 <__gedf2+0xae>
 8001304:	e7ce      	b.n	80012a4 <__gedf2+0x80>
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	000007ff 	.word	0x000007ff

0800130c <__ledf2>:
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	4657      	mov	r7, sl
 8001310:	464e      	mov	r6, r9
 8001312:	4645      	mov	r5, r8
 8001314:	46de      	mov	lr, fp
 8001316:	b5e0      	push	{r5, r6, r7, lr}
 8001318:	000d      	movs	r5, r1
 800131a:	030f      	lsls	r7, r1, #12
 800131c:	0004      	movs	r4, r0
 800131e:	4680      	mov	r8, r0
 8001320:	0fe8      	lsrs	r0, r5, #31
 8001322:	0b39      	lsrs	r1, r7, #12
 8001324:	4684      	mov	ip, r0
 8001326:	b083      	sub	sp, #12
 8001328:	0058      	lsls	r0, r3, #1
 800132a:	4f30      	ldr	r7, [pc, #192]	@ (80013ec <__ledf2+0xe0>)
 800132c:	0d40      	lsrs	r0, r0, #21
 800132e:	9101      	str	r1, [sp, #4]
 8001330:	031e      	lsls	r6, r3, #12
 8001332:	0069      	lsls	r1, r5, #1
 8001334:	4682      	mov	sl, r0
 8001336:	4691      	mov	r9, r2
 8001338:	0d49      	lsrs	r1, r1, #21
 800133a:	0b36      	lsrs	r6, r6, #12
 800133c:	0fd8      	lsrs	r0, r3, #31
 800133e:	42b9      	cmp	r1, r7
 8001340:	d020      	beq.n	8001384 <__ledf2+0x78>
 8001342:	45ba      	cmp	sl, r7
 8001344:	d00f      	beq.n	8001366 <__ledf2+0x5a>
 8001346:	2900      	cmp	r1, #0
 8001348:	d12b      	bne.n	80013a2 <__ledf2+0x96>
 800134a:	9901      	ldr	r1, [sp, #4]
 800134c:	430c      	orrs	r4, r1
 800134e:	4651      	mov	r1, sl
 8001350:	2900      	cmp	r1, #0
 8001352:	d137      	bne.n	80013c4 <__ledf2+0xb8>
 8001354:	4332      	orrs	r2, r6
 8001356:	d038      	beq.n	80013ca <__ledf2+0xbe>
 8001358:	2c00      	cmp	r4, #0
 800135a:	d144      	bne.n	80013e6 <__ledf2+0xda>
 800135c:	2800      	cmp	r0, #0
 800135e:	d119      	bne.n	8001394 <__ledf2+0x88>
 8001360:	2001      	movs	r0, #1
 8001362:	4240      	negs	r0, r0
 8001364:	e016      	b.n	8001394 <__ledf2+0x88>
 8001366:	4316      	orrs	r6, r2
 8001368:	d113      	bne.n	8001392 <__ledf2+0x86>
 800136a:	2900      	cmp	r1, #0
 800136c:	d102      	bne.n	8001374 <__ledf2+0x68>
 800136e:	9f01      	ldr	r7, [sp, #4]
 8001370:	4327      	orrs	r7, r4
 8001372:	d0f3      	beq.n	800135c <__ledf2+0x50>
 8001374:	4584      	cmp	ip, r0
 8001376:	d020      	beq.n	80013ba <__ledf2+0xae>
 8001378:	4663      	mov	r3, ip
 800137a:	2002      	movs	r0, #2
 800137c:	3b01      	subs	r3, #1
 800137e:	4018      	ands	r0, r3
 8001380:	3801      	subs	r0, #1
 8001382:	e007      	b.n	8001394 <__ledf2+0x88>
 8001384:	9f01      	ldr	r7, [sp, #4]
 8001386:	4327      	orrs	r7, r4
 8001388:	d103      	bne.n	8001392 <__ledf2+0x86>
 800138a:	458a      	cmp	sl, r1
 800138c:	d1f4      	bne.n	8001378 <__ledf2+0x6c>
 800138e:	4316      	orrs	r6, r2
 8001390:	d01f      	beq.n	80013d2 <__ledf2+0xc6>
 8001392:	2002      	movs	r0, #2
 8001394:	b003      	add	sp, #12
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	4654      	mov	r4, sl
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0e7      	beq.n	8001378 <__ledf2+0x6c>
 80013a8:	4584      	cmp	ip, r0
 80013aa:	d1e5      	bne.n	8001378 <__ledf2+0x6c>
 80013ac:	4551      	cmp	r1, sl
 80013ae:	dce3      	bgt.n	8001378 <__ledf2+0x6c>
 80013b0:	db03      	blt.n	80013ba <__ledf2+0xae>
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	42b3      	cmp	r3, r6
 80013b6:	d8df      	bhi.n	8001378 <__ledf2+0x6c>
 80013b8:	d00f      	beq.n	80013da <__ledf2+0xce>
 80013ba:	4663      	mov	r3, ip
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0cf      	beq.n	8001360 <__ledf2+0x54>
 80013c0:	4660      	mov	r0, ip
 80013c2:	e7e7      	b.n	8001394 <__ledf2+0x88>
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d0c9      	beq.n	800135c <__ledf2+0x50>
 80013c8:	e7d4      	b.n	8001374 <__ledf2+0x68>
 80013ca:	2000      	movs	r0, #0
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0e1      	beq.n	8001394 <__ledf2+0x88>
 80013d0:	e7d2      	b.n	8001378 <__ledf2+0x6c>
 80013d2:	4584      	cmp	ip, r0
 80013d4:	d1d0      	bne.n	8001378 <__ledf2+0x6c>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7dc      	b.n	8001394 <__ledf2+0x88>
 80013da:	45c8      	cmp	r8, r9
 80013dc:	d8cc      	bhi.n	8001378 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	45c8      	cmp	r8, r9
 80013e2:	d2d7      	bcs.n	8001394 <__ledf2+0x88>
 80013e4:	e7e9      	b.n	80013ba <__ledf2+0xae>
 80013e6:	4584      	cmp	ip, r0
 80013e8:	d0e3      	beq.n	80013b2 <__ledf2+0xa6>
 80013ea:	e7c5      	b.n	8001378 <__ledf2+0x6c>
 80013ec:	000007ff 	.word	0x000007ff

080013f0 <__aeabi_dmul>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	4657      	mov	r7, sl
 80013f4:	46de      	mov	lr, fp
 80013f6:	464e      	mov	r6, r9
 80013f8:	4645      	mov	r5, r8
 80013fa:	b5e0      	push	{r5, r6, r7, lr}
 80013fc:	001f      	movs	r7, r3
 80013fe:	030b      	lsls	r3, r1, #12
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	0016      	movs	r6, r2
 8001404:	469a      	mov	sl, r3
 8001406:	0fca      	lsrs	r2, r1, #31
 8001408:	004b      	lsls	r3, r1, #1
 800140a:	0004      	movs	r4, r0
 800140c:	4693      	mov	fp, r2
 800140e:	b087      	sub	sp, #28
 8001410:	0d5b      	lsrs	r3, r3, #21
 8001412:	d100      	bne.n	8001416 <__aeabi_dmul+0x26>
 8001414:	e0d5      	b.n	80015c2 <__aeabi_dmul+0x1d2>
 8001416:	4abb      	ldr	r2, [pc, #748]	@ (8001704 <__aeabi_dmul+0x314>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x2e>
 800141c:	e0f8      	b.n	8001610 <__aeabi_dmul+0x220>
 800141e:	4651      	mov	r1, sl
 8001420:	0f42      	lsrs	r2, r0, #29
 8001422:	00c9      	lsls	r1, r1, #3
 8001424:	430a      	orrs	r2, r1
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	0409      	lsls	r1, r1, #16
 800142a:	4311      	orrs	r1, r2
 800142c:	00c2      	lsls	r2, r0, #3
 800142e:	4691      	mov	r9, r2
 8001430:	4ab5      	ldr	r2, [pc, #724]	@ (8001708 <__aeabi_dmul+0x318>)
 8001432:	468a      	mov	sl, r1
 8001434:	189d      	adds	r5, r3, r2
 8001436:	2300      	movs	r3, #0
 8001438:	4698      	mov	r8, r3
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	033c      	lsls	r4, r7, #12
 800143e:	007b      	lsls	r3, r7, #1
 8001440:	0ffa      	lsrs	r2, r7, #31
 8001442:	0030      	movs	r0, r6
 8001444:	0b24      	lsrs	r4, r4, #12
 8001446:	0d5b      	lsrs	r3, r3, #21
 8001448:	9200      	str	r2, [sp, #0]
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x5e>
 800144c:	e096      	b.n	800157c <__aeabi_dmul+0x18c>
 800144e:	4aad      	ldr	r2, [pc, #692]	@ (8001704 <__aeabi_dmul+0x314>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d031      	beq.n	80014b8 <__aeabi_dmul+0xc8>
 8001454:	0f72      	lsrs	r2, r6, #29
 8001456:	00e4      	lsls	r4, r4, #3
 8001458:	4322      	orrs	r2, r4
 800145a:	2480      	movs	r4, #128	@ 0x80
 800145c:	0424      	lsls	r4, r4, #16
 800145e:	4314      	orrs	r4, r2
 8001460:	4aa9      	ldr	r2, [pc, #676]	@ (8001708 <__aeabi_dmul+0x318>)
 8001462:	00f0      	lsls	r0, r6, #3
 8001464:	4694      	mov	ip, r2
 8001466:	4463      	add	r3, ip
 8001468:	195b      	adds	r3, r3, r5
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	4642      	mov	r2, r8
 8001470:	2600      	movs	r6, #0
 8001472:	2a0a      	cmp	r2, #10
 8001474:	dc42      	bgt.n	80014fc <__aeabi_dmul+0x10c>
 8001476:	465a      	mov	r2, fp
 8001478:	9900      	ldr	r1, [sp, #0]
 800147a:	404a      	eors	r2, r1
 800147c:	4693      	mov	fp, r2
 800147e:	4642      	mov	r2, r8
 8001480:	2a02      	cmp	r2, #2
 8001482:	dc32      	bgt.n	80014ea <__aeabi_dmul+0xfa>
 8001484:	3a01      	subs	r2, #1
 8001486:	2a01      	cmp	r2, #1
 8001488:	d900      	bls.n	800148c <__aeabi_dmul+0x9c>
 800148a:	e149      	b.n	8001720 <__aeabi_dmul+0x330>
 800148c:	2e02      	cmp	r6, #2
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0xa2>
 8001490:	e0ca      	b.n	8001628 <__aeabi_dmul+0x238>
 8001492:	2e01      	cmp	r6, #1
 8001494:	d13d      	bne.n	8001512 <__aeabi_dmul+0x122>
 8001496:	2300      	movs	r3, #0
 8001498:	2400      	movs	r4, #0
 800149a:	2200      	movs	r2, #0
 800149c:	0010      	movs	r0, r2
 800149e:	465a      	mov	r2, fp
 80014a0:	051b      	lsls	r3, r3, #20
 80014a2:	4323      	orrs	r3, r4
 80014a4:	07d2      	lsls	r2, r2, #31
 80014a6:	4313      	orrs	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	b007      	add	sp, #28
 80014ac:	bcf0      	pop	{r4, r5, r6, r7}
 80014ae:	46bb      	mov	fp, r7
 80014b0:	46b2      	mov	sl, r6
 80014b2:	46a9      	mov	r9, r5
 80014b4:	46a0      	mov	r8, r4
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <__aeabi_dmul+0x314>)
 80014ba:	4326      	orrs	r6, r4
 80014bc:	18eb      	adds	r3, r5, r3
 80014be:	2e00      	cmp	r6, #0
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0xd4>
 80014c2:	e0bb      	b.n	800163c <__aeabi_dmul+0x24c>
 80014c4:	2203      	movs	r2, #3
 80014c6:	4641      	mov	r1, r8
 80014c8:	4311      	orrs	r1, r2
 80014ca:	465a      	mov	r2, fp
 80014cc:	4688      	mov	r8, r1
 80014ce:	9900      	ldr	r1, [sp, #0]
 80014d0:	404a      	eors	r2, r1
 80014d2:	2180      	movs	r1, #128	@ 0x80
 80014d4:	0109      	lsls	r1, r1, #4
 80014d6:	468c      	mov	ip, r1
 80014d8:	0029      	movs	r1, r5
 80014da:	4461      	add	r1, ip
 80014dc:	9101      	str	r1, [sp, #4]
 80014de:	4641      	mov	r1, r8
 80014e0:	290a      	cmp	r1, #10
 80014e2:	dd00      	ble.n	80014e6 <__aeabi_dmul+0xf6>
 80014e4:	e233      	b.n	800194e <__aeabi_dmul+0x55e>
 80014e6:	4693      	mov	fp, r2
 80014e8:	2603      	movs	r6, #3
 80014ea:	4642      	mov	r2, r8
 80014ec:	2701      	movs	r7, #1
 80014ee:	4097      	lsls	r7, r2
 80014f0:	21a6      	movs	r1, #166	@ 0xa6
 80014f2:	003a      	movs	r2, r7
 80014f4:	00c9      	lsls	r1, r1, #3
 80014f6:	400a      	ands	r2, r1
 80014f8:	420f      	tst	r7, r1
 80014fa:	d031      	beq.n	8001560 <__aeabi_dmul+0x170>
 80014fc:	9e02      	ldr	r6, [sp, #8]
 80014fe:	2e02      	cmp	r6, #2
 8001500:	d100      	bne.n	8001504 <__aeabi_dmul+0x114>
 8001502:	e235      	b.n	8001970 <__aeabi_dmul+0x580>
 8001504:	2e03      	cmp	r6, #3
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x11a>
 8001508:	e1d2      	b.n	80018b0 <__aeabi_dmul+0x4c0>
 800150a:	4654      	mov	r4, sl
 800150c:	4648      	mov	r0, r9
 800150e:	2e01      	cmp	r6, #1
 8001510:	d0c1      	beq.n	8001496 <__aeabi_dmul+0xa6>
 8001512:	9a01      	ldr	r2, [sp, #4]
 8001514:	4b7d      	ldr	r3, [pc, #500]	@ (800170c <__aeabi_dmul+0x31c>)
 8001516:	4694      	mov	ip, r2
 8001518:	4463      	add	r3, ip
 800151a:	2b00      	cmp	r3, #0
 800151c:	dc00      	bgt.n	8001520 <__aeabi_dmul+0x130>
 800151e:	e0c0      	b.n	80016a2 <__aeabi_dmul+0x2b2>
 8001520:	0742      	lsls	r2, r0, #29
 8001522:	d009      	beq.n	8001538 <__aeabi_dmul+0x148>
 8001524:	220f      	movs	r2, #15
 8001526:	4002      	ands	r2, r0
 8001528:	2a04      	cmp	r2, #4
 800152a:	d005      	beq.n	8001538 <__aeabi_dmul+0x148>
 800152c:	1d02      	adds	r2, r0, #4
 800152e:	4282      	cmp	r2, r0
 8001530:	4180      	sbcs	r0, r0
 8001532:	4240      	negs	r0, r0
 8001534:	1824      	adds	r4, r4, r0
 8001536:	0010      	movs	r0, r2
 8001538:	01e2      	lsls	r2, r4, #7
 800153a:	d506      	bpl.n	800154a <__aeabi_dmul+0x15a>
 800153c:	4b74      	ldr	r3, [pc, #464]	@ (8001710 <__aeabi_dmul+0x320>)
 800153e:	9a01      	ldr	r2, [sp, #4]
 8001540:	401c      	ands	r4, r3
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	4694      	mov	ip, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4463      	add	r3, ip
 800154a:	4a72      	ldr	r2, [pc, #456]	@ (8001714 <__aeabi_dmul+0x324>)
 800154c:	4293      	cmp	r3, r2
 800154e:	dc6b      	bgt.n	8001628 <__aeabi_dmul+0x238>
 8001550:	0762      	lsls	r2, r4, #29
 8001552:	08c0      	lsrs	r0, r0, #3
 8001554:	0264      	lsls	r4, r4, #9
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	4302      	orrs	r2, r0
 800155a:	0b24      	lsrs	r4, r4, #12
 800155c:	0d5b      	lsrs	r3, r3, #21
 800155e:	e79d      	b.n	800149c <__aeabi_dmul+0xac>
 8001560:	2190      	movs	r1, #144	@ 0x90
 8001562:	0089      	lsls	r1, r1, #2
 8001564:	420f      	tst	r7, r1
 8001566:	d163      	bne.n	8001630 <__aeabi_dmul+0x240>
 8001568:	2288      	movs	r2, #136	@ 0x88
 800156a:	423a      	tst	r2, r7
 800156c:	d100      	bne.n	8001570 <__aeabi_dmul+0x180>
 800156e:	e0d7      	b.n	8001720 <__aeabi_dmul+0x330>
 8001570:	9b00      	ldr	r3, [sp, #0]
 8001572:	46a2      	mov	sl, r4
 8001574:	469b      	mov	fp, r3
 8001576:	4681      	mov	r9, r0
 8001578:	9602      	str	r6, [sp, #8]
 800157a:	e7bf      	b.n	80014fc <__aeabi_dmul+0x10c>
 800157c:	0023      	movs	r3, r4
 800157e:	4333      	orrs	r3, r6
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x194>
 8001582:	e07f      	b.n	8001684 <__aeabi_dmul+0x294>
 8001584:	2c00      	cmp	r4, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0x19a>
 8001588:	e1ad      	b.n	80018e6 <__aeabi_dmul+0x4f6>
 800158a:	0020      	movs	r0, r4
 800158c:	f000 fe44 	bl	8002218 <__clzsi2>
 8001590:	0002      	movs	r2, r0
 8001592:	0003      	movs	r3, r0
 8001594:	3a0b      	subs	r2, #11
 8001596:	201d      	movs	r0, #29
 8001598:	0019      	movs	r1, r3
 800159a:	1a82      	subs	r2, r0, r2
 800159c:	0030      	movs	r0, r6
 800159e:	3908      	subs	r1, #8
 80015a0:	40d0      	lsrs	r0, r2
 80015a2:	408c      	lsls	r4, r1
 80015a4:	4304      	orrs	r4, r0
 80015a6:	0030      	movs	r0, r6
 80015a8:	4088      	lsls	r0, r1
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <__aeabi_dmul+0x328>)
 80015ac:	1aeb      	subs	r3, r5, r3
 80015ae:	4694      	mov	ip, r2
 80015b0:	4463      	add	r3, ip
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	4642      	mov	r2, r8
 80015b8:	2600      	movs	r6, #0
 80015ba:	2a0a      	cmp	r2, #10
 80015bc:	dc00      	bgt.n	80015c0 <__aeabi_dmul+0x1d0>
 80015be:	e75a      	b.n	8001476 <__aeabi_dmul+0x86>
 80015c0:	e79c      	b.n	80014fc <__aeabi_dmul+0x10c>
 80015c2:	4653      	mov	r3, sl
 80015c4:	4303      	orrs	r3, r0
 80015c6:	4699      	mov	r9, r3
 80015c8:	d054      	beq.n	8001674 <__aeabi_dmul+0x284>
 80015ca:	4653      	mov	r3, sl
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x1e2>
 80015d0:	e177      	b.n	80018c2 <__aeabi_dmul+0x4d2>
 80015d2:	4650      	mov	r0, sl
 80015d4:	f000 fe20 	bl	8002218 <__clzsi2>
 80015d8:	230b      	movs	r3, #11
 80015da:	425b      	negs	r3, r3
 80015dc:	469c      	mov	ip, r3
 80015de:	0002      	movs	r2, r0
 80015e0:	4484      	add	ip, r0
 80015e2:	0011      	movs	r1, r2
 80015e4:	4650      	mov	r0, sl
 80015e6:	3908      	subs	r1, #8
 80015e8:	4088      	lsls	r0, r1
 80015ea:	231d      	movs	r3, #29
 80015ec:	4680      	mov	r8, r0
 80015ee:	4660      	mov	r0, ip
 80015f0:	1a1b      	subs	r3, r3, r0
 80015f2:	0020      	movs	r0, r4
 80015f4:	40d8      	lsrs	r0, r3
 80015f6:	0003      	movs	r3, r0
 80015f8:	4640      	mov	r0, r8
 80015fa:	4303      	orrs	r3, r0
 80015fc:	469a      	mov	sl, r3
 80015fe:	0023      	movs	r3, r4
 8001600:	408b      	lsls	r3, r1
 8001602:	4699      	mov	r9, r3
 8001604:	2300      	movs	r3, #0
 8001606:	4d44      	ldr	r5, [pc, #272]	@ (8001718 <__aeabi_dmul+0x328>)
 8001608:	4698      	mov	r8, r3
 800160a:	1aad      	subs	r5, r5, r2
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	e715      	b.n	800143c <__aeabi_dmul+0x4c>
 8001610:	4652      	mov	r2, sl
 8001612:	4302      	orrs	r2, r0
 8001614:	4691      	mov	r9, r2
 8001616:	d126      	bne.n	8001666 <__aeabi_dmul+0x276>
 8001618:	2200      	movs	r2, #0
 800161a:	001d      	movs	r5, r3
 800161c:	2302      	movs	r3, #2
 800161e:	4692      	mov	sl, r2
 8001620:	3208      	adds	r2, #8
 8001622:	4690      	mov	r8, r2
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	e709      	b.n	800143c <__aeabi_dmul+0x4c>
 8001628:	2400      	movs	r4, #0
 800162a:	2200      	movs	r2, #0
 800162c:	4b35      	ldr	r3, [pc, #212]	@ (8001704 <__aeabi_dmul+0x314>)
 800162e:	e735      	b.n	800149c <__aeabi_dmul+0xac>
 8001630:	2300      	movs	r3, #0
 8001632:	2480      	movs	r4, #128	@ 0x80
 8001634:	469b      	mov	fp, r3
 8001636:	0324      	lsls	r4, r4, #12
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <__aeabi_dmul+0x314>)
 800163a:	e72f      	b.n	800149c <__aeabi_dmul+0xac>
 800163c:	2202      	movs	r2, #2
 800163e:	4641      	mov	r1, r8
 8001640:	4311      	orrs	r1, r2
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	4694      	mov	ip, r2
 8001648:	002a      	movs	r2, r5
 800164a:	4462      	add	r2, ip
 800164c:	4688      	mov	r8, r1
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	290a      	cmp	r1, #10
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x266>
 8001654:	e752      	b.n	80014fc <__aeabi_dmul+0x10c>
 8001656:	465a      	mov	r2, fp
 8001658:	2000      	movs	r0, #0
 800165a:	9900      	ldr	r1, [sp, #0]
 800165c:	0004      	movs	r4, r0
 800165e:	404a      	eors	r2, r1
 8001660:	4693      	mov	fp, r2
 8001662:	2602      	movs	r6, #2
 8001664:	e70b      	b.n	800147e <__aeabi_dmul+0x8e>
 8001666:	220c      	movs	r2, #12
 8001668:	001d      	movs	r5, r3
 800166a:	2303      	movs	r3, #3
 800166c:	4681      	mov	r9, r0
 800166e:	4690      	mov	r8, r2
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	e6e3      	b.n	800143c <__aeabi_dmul+0x4c>
 8001674:	2300      	movs	r3, #0
 8001676:	469a      	mov	sl, r3
 8001678:	3304      	adds	r3, #4
 800167a:	4698      	mov	r8, r3
 800167c:	3b03      	subs	r3, #3
 800167e:	2500      	movs	r5, #0
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	e6db      	b.n	800143c <__aeabi_dmul+0x4c>
 8001684:	4642      	mov	r2, r8
 8001686:	3301      	adds	r3, #1
 8001688:	431a      	orrs	r2, r3
 800168a:	002b      	movs	r3, r5
 800168c:	4690      	mov	r8, r2
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	4642      	mov	r2, r8
 8001694:	2400      	movs	r4, #0
 8001696:	2000      	movs	r0, #0
 8001698:	2601      	movs	r6, #1
 800169a:	2a0a      	cmp	r2, #10
 800169c:	dc00      	bgt.n	80016a0 <__aeabi_dmul+0x2b0>
 800169e:	e6ea      	b.n	8001476 <__aeabi_dmul+0x86>
 80016a0:	e72c      	b.n	80014fc <__aeabi_dmul+0x10c>
 80016a2:	2201      	movs	r2, #1
 80016a4:	1ad2      	subs	r2, r2, r3
 80016a6:	2a38      	cmp	r2, #56	@ 0x38
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x2bc>
 80016aa:	e6f4      	b.n	8001496 <__aeabi_dmul+0xa6>
 80016ac:	2a1f      	cmp	r2, #31
 80016ae:	dc00      	bgt.n	80016b2 <__aeabi_dmul+0x2c2>
 80016b0:	e12a      	b.n	8001908 <__aeabi_dmul+0x518>
 80016b2:	211f      	movs	r1, #31
 80016b4:	4249      	negs	r1, r1
 80016b6:	1acb      	subs	r3, r1, r3
 80016b8:	0021      	movs	r1, r4
 80016ba:	40d9      	lsrs	r1, r3
 80016bc:	000b      	movs	r3, r1
 80016be:	2a20      	cmp	r2, #32
 80016c0:	d005      	beq.n	80016ce <__aeabi_dmul+0x2de>
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <__aeabi_dmul+0x32c>)
 80016c4:	9d01      	ldr	r5, [sp, #4]
 80016c6:	4694      	mov	ip, r2
 80016c8:	4465      	add	r5, ip
 80016ca:	40ac      	lsls	r4, r5
 80016cc:	4320      	orrs	r0, r4
 80016ce:	1e42      	subs	r2, r0, #1
 80016d0:	4190      	sbcs	r0, r2
 80016d2:	4318      	orrs	r0, r3
 80016d4:	2307      	movs	r3, #7
 80016d6:	0019      	movs	r1, r3
 80016d8:	2400      	movs	r4, #0
 80016da:	4001      	ands	r1, r0
 80016dc:	4203      	tst	r3, r0
 80016de:	d00c      	beq.n	80016fa <__aeabi_dmul+0x30a>
 80016e0:	230f      	movs	r3, #15
 80016e2:	4003      	ands	r3, r0
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x2fa>
 80016e8:	e140      	b.n	800196c <__aeabi_dmul+0x57c>
 80016ea:	1d03      	adds	r3, r0, #4
 80016ec:	4283      	cmp	r3, r0
 80016ee:	41a4      	sbcs	r4, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	4264      	negs	r4, r4
 80016f4:	0761      	lsls	r1, r4, #29
 80016f6:	0264      	lsls	r4, r4, #9
 80016f8:	0b24      	lsrs	r4, r4, #12
 80016fa:	08c2      	lsrs	r2, r0, #3
 80016fc:	2300      	movs	r3, #0
 80016fe:	430a      	orrs	r2, r1
 8001700:	e6cc      	b.n	800149c <__aeabi_dmul+0xac>
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	000007ff 	.word	0x000007ff
 8001708:	fffffc01 	.word	0xfffffc01
 800170c:	000003ff 	.word	0x000003ff
 8001710:	feffffff 	.word	0xfeffffff
 8001714:	000007fe 	.word	0x000007fe
 8001718:	fffffc0d 	.word	0xfffffc0d
 800171c:	0000043e 	.word	0x0000043e
 8001720:	4649      	mov	r1, r9
 8001722:	464a      	mov	r2, r9
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	0c09      	lsrs	r1, r1, #16
 8001728:	000d      	movs	r5, r1
 800172a:	0c16      	lsrs	r6, r2, #16
 800172c:	0c02      	lsrs	r2, r0, #16
 800172e:	0400      	lsls	r0, r0, #16
 8001730:	0c00      	lsrs	r0, r0, #16
 8001732:	4345      	muls	r5, r0
 8001734:	46ac      	mov	ip, r5
 8001736:	0005      	movs	r5, r0
 8001738:	4375      	muls	r5, r6
 800173a:	46a8      	mov	r8, r5
 800173c:	0015      	movs	r5, r2
 800173e:	000f      	movs	r7, r1
 8001740:	4375      	muls	r5, r6
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	9502      	str	r5, [sp, #8]
 8001746:	002a      	movs	r2, r5
 8001748:	9d00      	ldr	r5, [sp, #0]
 800174a:	436f      	muls	r7, r5
 800174c:	4665      	mov	r5, ip
 800174e:	0c2d      	lsrs	r5, r5, #16
 8001750:	46a9      	mov	r9, r5
 8001752:	4447      	add	r7, r8
 8001754:	444f      	add	r7, r9
 8001756:	45b8      	cmp	r8, r7
 8001758:	d905      	bls.n	8001766 <__aeabi_dmul+0x376>
 800175a:	0015      	movs	r5, r2
 800175c:	2280      	movs	r2, #128	@ 0x80
 800175e:	0252      	lsls	r2, r2, #9
 8001760:	4690      	mov	r8, r2
 8001762:	4445      	add	r5, r8
 8001764:	9502      	str	r5, [sp, #8]
 8001766:	0c3d      	lsrs	r5, r7, #16
 8001768:	9503      	str	r5, [sp, #12]
 800176a:	4665      	mov	r5, ip
 800176c:	042d      	lsls	r5, r5, #16
 800176e:	043f      	lsls	r7, r7, #16
 8001770:	0c2d      	lsrs	r5, r5, #16
 8001772:	46ac      	mov	ip, r5
 8001774:	003d      	movs	r5, r7
 8001776:	4465      	add	r5, ip
 8001778:	9504      	str	r5, [sp, #16]
 800177a:	0c25      	lsrs	r5, r4, #16
 800177c:	0424      	lsls	r4, r4, #16
 800177e:	0c24      	lsrs	r4, r4, #16
 8001780:	46ac      	mov	ip, r5
 8001782:	0025      	movs	r5, r4
 8001784:	4375      	muls	r5, r6
 8001786:	46a8      	mov	r8, r5
 8001788:	4665      	mov	r5, ip
 800178a:	000f      	movs	r7, r1
 800178c:	4369      	muls	r1, r5
 800178e:	4441      	add	r1, r8
 8001790:	4689      	mov	r9, r1
 8001792:	4367      	muls	r7, r4
 8001794:	0c39      	lsrs	r1, r7, #16
 8001796:	4449      	add	r1, r9
 8001798:	436e      	muls	r6, r5
 800179a:	4588      	cmp	r8, r1
 800179c:	d903      	bls.n	80017a6 <__aeabi_dmul+0x3b6>
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	0252      	lsls	r2, r2, #9
 80017a2:	4690      	mov	r8, r2
 80017a4:	4446      	add	r6, r8
 80017a6:	0c0d      	lsrs	r5, r1, #16
 80017a8:	46a8      	mov	r8, r5
 80017aa:	0035      	movs	r5, r6
 80017ac:	4445      	add	r5, r8
 80017ae:	9505      	str	r5, [sp, #20]
 80017b0:	9d03      	ldr	r5, [sp, #12]
 80017b2:	043f      	lsls	r7, r7, #16
 80017b4:	46a8      	mov	r8, r5
 80017b6:	0c3f      	lsrs	r7, r7, #16
 80017b8:	0409      	lsls	r1, r1, #16
 80017ba:	19c9      	adds	r1, r1, r7
 80017bc:	4488      	add	r8, r1
 80017be:	4645      	mov	r5, r8
 80017c0:	9503      	str	r5, [sp, #12]
 80017c2:	4655      	mov	r5, sl
 80017c4:	042e      	lsls	r6, r5, #16
 80017c6:	0c36      	lsrs	r6, r6, #16
 80017c8:	0c2f      	lsrs	r7, r5, #16
 80017ca:	0035      	movs	r5, r6
 80017cc:	4345      	muls	r5, r0
 80017ce:	4378      	muls	r0, r7
 80017d0:	4681      	mov	r9, r0
 80017d2:	0038      	movs	r0, r7
 80017d4:	46a8      	mov	r8, r5
 80017d6:	0c2d      	lsrs	r5, r5, #16
 80017d8:	46aa      	mov	sl, r5
 80017da:	9a00      	ldr	r2, [sp, #0]
 80017dc:	4350      	muls	r0, r2
 80017de:	4372      	muls	r2, r6
 80017e0:	444a      	add	r2, r9
 80017e2:	4452      	add	r2, sl
 80017e4:	4591      	cmp	r9, r2
 80017e6:	d903      	bls.n	80017f0 <__aeabi_dmul+0x400>
 80017e8:	2580      	movs	r5, #128	@ 0x80
 80017ea:	026d      	lsls	r5, r5, #9
 80017ec:	46a9      	mov	r9, r5
 80017ee:	4448      	add	r0, r9
 80017f0:	0c15      	lsrs	r5, r2, #16
 80017f2:	46a9      	mov	r9, r5
 80017f4:	4645      	mov	r5, r8
 80017f6:	042d      	lsls	r5, r5, #16
 80017f8:	0c2d      	lsrs	r5, r5, #16
 80017fa:	46a8      	mov	r8, r5
 80017fc:	4665      	mov	r5, ip
 80017fe:	437d      	muls	r5, r7
 8001800:	0412      	lsls	r2, r2, #16
 8001802:	4448      	add	r0, r9
 8001804:	4490      	add	r8, r2
 8001806:	46a9      	mov	r9, r5
 8001808:	0032      	movs	r2, r6
 800180a:	4665      	mov	r5, ip
 800180c:	4362      	muls	r2, r4
 800180e:	436e      	muls	r6, r5
 8001810:	437c      	muls	r4, r7
 8001812:	0c17      	lsrs	r7, r2, #16
 8001814:	1936      	adds	r6, r6, r4
 8001816:	19bf      	adds	r7, r7, r6
 8001818:	42bc      	cmp	r4, r7
 800181a:	d903      	bls.n	8001824 <__aeabi_dmul+0x434>
 800181c:	2480      	movs	r4, #128	@ 0x80
 800181e:	0264      	lsls	r4, r4, #9
 8001820:	46a4      	mov	ip, r4
 8001822:	44e1      	add	r9, ip
 8001824:	9c02      	ldr	r4, [sp, #8]
 8001826:	9e03      	ldr	r6, [sp, #12]
 8001828:	46a4      	mov	ip, r4
 800182a:	9d05      	ldr	r5, [sp, #20]
 800182c:	4466      	add	r6, ip
 800182e:	428e      	cmp	r6, r1
 8001830:	4189      	sbcs	r1, r1
 8001832:	46ac      	mov	ip, r5
 8001834:	0412      	lsls	r2, r2, #16
 8001836:	043c      	lsls	r4, r7, #16
 8001838:	0c12      	lsrs	r2, r2, #16
 800183a:	18a2      	adds	r2, r4, r2
 800183c:	4462      	add	r2, ip
 800183e:	4249      	negs	r1, r1
 8001840:	1854      	adds	r4, r2, r1
 8001842:	4446      	add	r6, r8
 8001844:	46a4      	mov	ip, r4
 8001846:	4546      	cmp	r6, r8
 8001848:	41a4      	sbcs	r4, r4
 800184a:	4682      	mov	sl, r0
 800184c:	4264      	negs	r4, r4
 800184e:	46a0      	mov	r8, r4
 8001850:	42aa      	cmp	r2, r5
 8001852:	4192      	sbcs	r2, r2
 8001854:	458c      	cmp	ip, r1
 8001856:	4189      	sbcs	r1, r1
 8001858:	44e2      	add	sl, ip
 800185a:	44d0      	add	r8, sl
 800185c:	4249      	negs	r1, r1
 800185e:	4252      	negs	r2, r2
 8001860:	430a      	orrs	r2, r1
 8001862:	45a0      	cmp	r8, r4
 8001864:	41a4      	sbcs	r4, r4
 8001866:	4582      	cmp	sl, r0
 8001868:	4189      	sbcs	r1, r1
 800186a:	4264      	negs	r4, r4
 800186c:	4249      	negs	r1, r1
 800186e:	430c      	orrs	r4, r1
 8001870:	4641      	mov	r1, r8
 8001872:	0c3f      	lsrs	r7, r7, #16
 8001874:	19d2      	adds	r2, r2, r7
 8001876:	1912      	adds	r2, r2, r4
 8001878:	0dcc      	lsrs	r4, r1, #23
 800187a:	9904      	ldr	r1, [sp, #16]
 800187c:	0270      	lsls	r0, r6, #9
 800187e:	4308      	orrs	r0, r1
 8001880:	1e41      	subs	r1, r0, #1
 8001882:	4188      	sbcs	r0, r1
 8001884:	4641      	mov	r1, r8
 8001886:	444a      	add	r2, r9
 8001888:	0df6      	lsrs	r6, r6, #23
 800188a:	0252      	lsls	r2, r2, #9
 800188c:	4330      	orrs	r0, r6
 800188e:	0249      	lsls	r1, r1, #9
 8001890:	4314      	orrs	r4, r2
 8001892:	4308      	orrs	r0, r1
 8001894:	01d2      	lsls	r2, r2, #7
 8001896:	d535      	bpl.n	8001904 <__aeabi_dmul+0x514>
 8001898:	2201      	movs	r2, #1
 800189a:	0843      	lsrs	r3, r0, #1
 800189c:	4002      	ands	r2, r0
 800189e:	4313      	orrs	r3, r2
 80018a0:	07e0      	lsls	r0, r4, #31
 80018a2:	4318      	orrs	r0, r3
 80018a4:	0864      	lsrs	r4, r4, #1
 80018a6:	e634      	b.n	8001512 <__aeabi_dmul+0x122>
 80018a8:	9b00      	ldr	r3, [sp, #0]
 80018aa:	46a2      	mov	sl, r4
 80018ac:	469b      	mov	fp, r3
 80018ae:	4681      	mov	r9, r0
 80018b0:	2480      	movs	r4, #128	@ 0x80
 80018b2:	4653      	mov	r3, sl
 80018b4:	0324      	lsls	r4, r4, #12
 80018b6:	431c      	orrs	r4, r3
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	464a      	mov	r2, r9
 80018bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <__aeabi_dmul+0x588>)
 80018be:	0b24      	lsrs	r4, r4, #12
 80018c0:	e5ec      	b.n	800149c <__aeabi_dmul+0xac>
 80018c2:	f000 fca9 	bl	8002218 <__clzsi2>
 80018c6:	2315      	movs	r3, #21
 80018c8:	469c      	mov	ip, r3
 80018ca:	4484      	add	ip, r0
 80018cc:	0002      	movs	r2, r0
 80018ce:	4663      	mov	r3, ip
 80018d0:	3220      	adds	r2, #32
 80018d2:	2b1c      	cmp	r3, #28
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_dmul+0x4e8>
 80018d6:	e684      	b.n	80015e2 <__aeabi_dmul+0x1f2>
 80018d8:	2300      	movs	r3, #0
 80018da:	4699      	mov	r9, r3
 80018dc:	0023      	movs	r3, r4
 80018de:	3808      	subs	r0, #8
 80018e0:	4083      	lsls	r3, r0
 80018e2:	469a      	mov	sl, r3
 80018e4:	e68e      	b.n	8001604 <__aeabi_dmul+0x214>
 80018e6:	f000 fc97 	bl	8002218 <__clzsi2>
 80018ea:	0002      	movs	r2, r0
 80018ec:	0003      	movs	r3, r0
 80018ee:	3215      	adds	r2, #21
 80018f0:	3320      	adds	r3, #32
 80018f2:	2a1c      	cmp	r2, #28
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x508>
 80018f6:	e64e      	b.n	8001596 <__aeabi_dmul+0x1a6>
 80018f8:	0002      	movs	r2, r0
 80018fa:	0034      	movs	r4, r6
 80018fc:	3a08      	subs	r2, #8
 80018fe:	2000      	movs	r0, #0
 8001900:	4094      	lsls	r4, r2
 8001902:	e652      	b.n	80015aa <__aeabi_dmul+0x1ba>
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	e604      	b.n	8001512 <__aeabi_dmul+0x122>
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <__aeabi_dmul+0x58c>)
 800190a:	0021      	movs	r1, r4
 800190c:	469c      	mov	ip, r3
 800190e:	0003      	movs	r3, r0
 8001910:	9d01      	ldr	r5, [sp, #4]
 8001912:	40d3      	lsrs	r3, r2
 8001914:	4465      	add	r5, ip
 8001916:	40a9      	lsls	r1, r5
 8001918:	4319      	orrs	r1, r3
 800191a:	0003      	movs	r3, r0
 800191c:	40ab      	lsls	r3, r5
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	4183      	sbcs	r3, r0
 8001922:	4319      	orrs	r1, r3
 8001924:	0008      	movs	r0, r1
 8001926:	40d4      	lsrs	r4, r2
 8001928:	074b      	lsls	r3, r1, #29
 800192a:	d009      	beq.n	8001940 <__aeabi_dmul+0x550>
 800192c:	230f      	movs	r3, #15
 800192e:	400b      	ands	r3, r1
 8001930:	2b04      	cmp	r3, #4
 8001932:	d005      	beq.n	8001940 <__aeabi_dmul+0x550>
 8001934:	1d0b      	adds	r3, r1, #4
 8001936:	428b      	cmp	r3, r1
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	1824      	adds	r4, r4, r0
 800193e:	0018      	movs	r0, r3
 8001940:	0223      	lsls	r3, r4, #8
 8001942:	d400      	bmi.n	8001946 <__aeabi_dmul+0x556>
 8001944:	e6d6      	b.n	80016f4 <__aeabi_dmul+0x304>
 8001946:	2301      	movs	r3, #1
 8001948:	2400      	movs	r4, #0
 800194a:	2200      	movs	r2, #0
 800194c:	e5a6      	b.n	800149c <__aeabi_dmul+0xac>
 800194e:	290f      	cmp	r1, #15
 8001950:	d1aa      	bne.n	80018a8 <__aeabi_dmul+0x4b8>
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	4652      	mov	r2, sl
 8001956:	031b      	lsls	r3, r3, #12
 8001958:	421a      	tst	r2, r3
 800195a:	d0a9      	beq.n	80018b0 <__aeabi_dmul+0x4c0>
 800195c:	421c      	tst	r4, r3
 800195e:	d1a7      	bne.n	80018b0 <__aeabi_dmul+0x4c0>
 8001960:	431c      	orrs	r4, r3
 8001962:	9b00      	ldr	r3, [sp, #0]
 8001964:	0002      	movs	r2, r0
 8001966:	469b      	mov	fp, r3
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <__aeabi_dmul+0x588>)
 800196a:	e597      	b.n	800149c <__aeabi_dmul+0xac>
 800196c:	2400      	movs	r4, #0
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0x304>
 8001970:	2400      	movs	r4, #0
 8001972:	4b01      	ldr	r3, [pc, #4]	@ (8001978 <__aeabi_dmul+0x588>)
 8001974:	0022      	movs	r2, r4
 8001976:	e591      	b.n	800149c <__aeabi_dmul+0xac>
 8001978:	000007ff 	.word	0x000007ff
 800197c:	0000041e 	.word	0x0000041e

08001980 <__aeabi_dsub>:
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	464e      	mov	r6, r9
 8001984:	4645      	mov	r5, r8
 8001986:	46de      	mov	lr, fp
 8001988:	4657      	mov	r7, sl
 800198a:	b5e0      	push	{r5, r6, r7, lr}
 800198c:	b085      	sub	sp, #20
 800198e:	9000      	str	r0, [sp, #0]
 8001990:	9101      	str	r1, [sp, #4]
 8001992:	030c      	lsls	r4, r1, #12
 8001994:	004f      	lsls	r7, r1, #1
 8001996:	0fce      	lsrs	r6, r1, #31
 8001998:	0a61      	lsrs	r1, r4, #9
 800199a:	9c00      	ldr	r4, [sp, #0]
 800199c:	46b0      	mov	r8, r6
 800199e:	0f64      	lsrs	r4, r4, #29
 80019a0:	430c      	orrs	r4, r1
 80019a2:	9900      	ldr	r1, [sp, #0]
 80019a4:	0d7f      	lsrs	r7, r7, #21
 80019a6:	00c8      	lsls	r0, r1, #3
 80019a8:	0011      	movs	r1, r2
 80019aa:	001a      	movs	r2, r3
 80019ac:	031b      	lsls	r3, r3, #12
 80019ae:	469c      	mov	ip, r3
 80019b0:	9100      	str	r1, [sp, #0]
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	0051      	lsls	r1, r2, #1
 80019b6:	0d4b      	lsrs	r3, r1, #21
 80019b8:	4699      	mov	r9, r3
 80019ba:	9b01      	ldr	r3, [sp, #4]
 80019bc:	9d00      	ldr	r5, [sp, #0]
 80019be:	0fd9      	lsrs	r1, r3, #31
 80019c0:	4663      	mov	r3, ip
 80019c2:	0f6a      	lsrs	r2, r5, #29
 80019c4:	0a5b      	lsrs	r3, r3, #9
 80019c6:	4313      	orrs	r3, r2
 80019c8:	00ea      	lsls	r2, r5, #3
 80019ca:	4694      	mov	ip, r2
 80019cc:	4693      	mov	fp, r2
 80019ce:	4ac1      	ldr	r2, [pc, #772]	@ (8001cd4 <__aeabi_dsub+0x354>)
 80019d0:	9003      	str	r0, [sp, #12]
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	4591      	cmp	r9, r2
 80019d6:	d100      	bne.n	80019da <__aeabi_dsub+0x5a>
 80019d8:	e0cd      	b.n	8001b76 <__aeabi_dsub+0x1f6>
 80019da:	2501      	movs	r5, #1
 80019dc:	4069      	eors	r1, r5
 80019de:	464d      	mov	r5, r9
 80019e0:	1b7d      	subs	r5, r7, r5
 80019e2:	46aa      	mov	sl, r5
 80019e4:	428e      	cmp	r6, r1
 80019e6:	d100      	bne.n	80019ea <__aeabi_dsub+0x6a>
 80019e8:	e080      	b.n	8001aec <__aeabi_dsub+0x16c>
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dsub+0x70>
 80019ee:	e335      	b.n	800205c <__aeabi_dsub+0x6dc>
 80019f0:	4649      	mov	r1, r9
 80019f2:	2900      	cmp	r1, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x78>
 80019f6:	e0df      	b.n	8001bb8 <__aeabi_dsub+0x238>
 80019f8:	4297      	cmp	r7, r2
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x7e>
 80019fc:	e194      	b.n	8001d28 <__aeabi_dsub+0x3a8>
 80019fe:	4652      	mov	r2, sl
 8001a00:	2501      	movs	r5, #1
 8001a02:	2a38      	cmp	r2, #56	@ 0x38
 8001a04:	dc19      	bgt.n	8001a3a <__aeabi_dsub+0xba>
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	9b02      	ldr	r3, [sp, #8]
 8001a0a:	0412      	lsls	r2, r2, #16
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	4652      	mov	r2, sl
 8001a12:	2a1f      	cmp	r2, #31
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dsub+0x98>
 8001a16:	e1e3      	b.n	8001de0 <__aeabi_dsub+0x460>
 8001a18:	4653      	mov	r3, sl
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	4661      	mov	r1, ip
 8001a1e:	9d02      	ldr	r5, [sp, #8]
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	4095      	lsls	r5, r2
 8001a24:	40d9      	lsrs	r1, r3
 8001a26:	430d      	orrs	r5, r1
 8001a28:	4661      	mov	r1, ip
 8001a2a:	4091      	lsls	r1, r2
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	1e51      	subs	r1, r2, #1
 8001a30:	418a      	sbcs	r2, r1
 8001a32:	4315      	orrs	r5, r2
 8001a34:	9a02      	ldr	r2, [sp, #8]
 8001a36:	40da      	lsrs	r2, r3
 8001a38:	1aa4      	subs	r4, r4, r2
 8001a3a:	1b45      	subs	r5, r0, r5
 8001a3c:	42a8      	cmp	r0, r5
 8001a3e:	4180      	sbcs	r0, r0
 8001a40:	4240      	negs	r0, r0
 8001a42:	1a24      	subs	r4, r4, r0
 8001a44:	0223      	lsls	r3, r4, #8
 8001a46:	d400      	bmi.n	8001a4a <__aeabi_dsub+0xca>
 8001a48:	e13d      	b.n	8001cc6 <__aeabi_dsub+0x346>
 8001a4a:	0264      	lsls	r4, r4, #9
 8001a4c:	0a64      	lsrs	r4, r4, #9
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0xd4>
 8001a52:	e147      	b.n	8001ce4 <__aeabi_dsub+0x364>
 8001a54:	0020      	movs	r0, r4
 8001a56:	f000 fbdf 	bl	8002218 <__clzsi2>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	3b08      	subs	r3, #8
 8001a5e:	2120      	movs	r1, #32
 8001a60:	0028      	movs	r0, r5
 8001a62:	1aca      	subs	r2, r1, r3
 8001a64:	40d0      	lsrs	r0, r2
 8001a66:	409c      	lsls	r4, r3
 8001a68:	0002      	movs	r2, r0
 8001a6a:	409d      	lsls	r5, r3
 8001a6c:	4322      	orrs	r2, r4
 8001a6e:	429f      	cmp	r7, r3
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dsub+0xf4>
 8001a72:	e177      	b.n	8001d64 <__aeabi_dsub+0x3e4>
 8001a74:	1bd8      	subs	r0, r3, r7
 8001a76:	3001      	adds	r0, #1
 8001a78:	1a09      	subs	r1, r1, r0
 8001a7a:	002c      	movs	r4, r5
 8001a7c:	408d      	lsls	r5, r1
 8001a7e:	40c4      	lsrs	r4, r0
 8001a80:	1e6b      	subs	r3, r5, #1
 8001a82:	419d      	sbcs	r5, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	40c2      	lsrs	r2, r0
 8001a88:	408b      	lsls	r3, r1
 8001a8a:	4325      	orrs	r5, r4
 8001a8c:	2700      	movs	r7, #0
 8001a8e:	0014      	movs	r4, r2
 8001a90:	431d      	orrs	r5, r3
 8001a92:	076b      	lsls	r3, r5, #29
 8001a94:	d009      	beq.n	8001aaa <__aeabi_dsub+0x12a>
 8001a96:	230f      	movs	r3, #15
 8001a98:	402b      	ands	r3, r5
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d005      	beq.n	8001aaa <__aeabi_dsub+0x12a>
 8001a9e:	1d2b      	adds	r3, r5, #4
 8001aa0:	42ab      	cmp	r3, r5
 8001aa2:	41ad      	sbcs	r5, r5
 8001aa4:	426d      	negs	r5, r5
 8001aa6:	1964      	adds	r4, r4, r5
 8001aa8:	001d      	movs	r5, r3
 8001aaa:	0223      	lsls	r3, r4, #8
 8001aac:	d400      	bmi.n	8001ab0 <__aeabi_dsub+0x130>
 8001aae:	e140      	b.n	8001d32 <__aeabi_dsub+0x3b2>
 8001ab0:	4a88      	ldr	r2, [pc, #544]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001ab2:	3701      	adds	r7, #1
 8001ab4:	4297      	cmp	r7, r2
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0x13a>
 8001ab8:	e101      	b.n	8001cbe <__aeabi_dsub+0x33e>
 8001aba:	2601      	movs	r6, #1
 8001abc:	4643      	mov	r3, r8
 8001abe:	4986      	ldr	r1, [pc, #536]	@ (8001cd8 <__aeabi_dsub+0x358>)
 8001ac0:	08ed      	lsrs	r5, r5, #3
 8001ac2:	4021      	ands	r1, r4
 8001ac4:	074a      	lsls	r2, r1, #29
 8001ac6:	432a      	orrs	r2, r5
 8001ac8:	057c      	lsls	r4, r7, #21
 8001aca:	024d      	lsls	r5, r1, #9
 8001acc:	0b2d      	lsrs	r5, r5, #12
 8001ace:	0d64      	lsrs	r4, r4, #21
 8001ad0:	401e      	ands	r6, r3
 8001ad2:	0524      	lsls	r4, r4, #20
 8001ad4:	432c      	orrs	r4, r5
 8001ad6:	07f6      	lsls	r6, r6, #31
 8001ad8:	4334      	orrs	r4, r6
 8001ada:	0010      	movs	r0, r2
 8001adc:	0021      	movs	r1, r4
 8001ade:	b005      	add	sp, #20
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	46bb      	mov	fp, r7
 8001ae4:	46b2      	mov	sl, r6
 8001ae6:	46a9      	mov	r9, r5
 8001ae8:	46a0      	mov	r8, r4
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dsub+0x172>
 8001af0:	e2d0      	b.n	8002094 <__aeabi_dsub+0x714>
 8001af2:	4649      	mov	r1, r9
 8001af4:	2900      	cmp	r1, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x17a>
 8001af8:	e0d4      	b.n	8001ca4 <__aeabi_dsub+0x324>
 8001afa:	4661      	mov	r1, ip
 8001afc:	9b02      	ldr	r3, [sp, #8]
 8001afe:	4319      	orrs	r1, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x184>
 8001b02:	e12b      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001b04:	1e69      	subs	r1, r5, #1
 8001b06:	2d01      	cmp	r5, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x18c>
 8001b0a:	e1d9      	b.n	8001ec0 <__aeabi_dsub+0x540>
 8001b0c:	4295      	cmp	r5, r2
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x192>
 8001b10:	e10a      	b.n	8001d28 <__aeabi_dsub+0x3a8>
 8001b12:	2501      	movs	r5, #1
 8001b14:	2938      	cmp	r1, #56	@ 0x38
 8001b16:	dc17      	bgt.n	8001b48 <__aeabi_dsub+0x1c8>
 8001b18:	468a      	mov	sl, r1
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dsub+0x1a2>
 8001b20:	e1e7      	b.n	8001ef2 <__aeabi_dsub+0x572>
 8001b22:	2220      	movs	r2, #32
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	9b02      	ldr	r3, [sp, #8]
 8001b28:	4661      	mov	r1, ip
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	001d      	movs	r5, r3
 8001b2e:	4653      	mov	r3, sl
 8001b30:	40d9      	lsrs	r1, r3
 8001b32:	4663      	mov	r3, ip
 8001b34:	4093      	lsls	r3, r2
 8001b36:	001a      	movs	r2, r3
 8001b38:	430d      	orrs	r5, r1
 8001b3a:	1e51      	subs	r1, r2, #1
 8001b3c:	418a      	sbcs	r2, r1
 8001b3e:	4653      	mov	r3, sl
 8001b40:	4315      	orrs	r5, r2
 8001b42:	9a02      	ldr	r2, [sp, #8]
 8001b44:	40da      	lsrs	r2, r3
 8001b46:	18a4      	adds	r4, r4, r2
 8001b48:	182d      	adds	r5, r5, r0
 8001b4a:	4285      	cmp	r5, r0
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	4240      	negs	r0, r0
 8001b50:	1824      	adds	r4, r4, r0
 8001b52:	0223      	lsls	r3, r4, #8
 8001b54:	d400      	bmi.n	8001b58 <__aeabi_dsub+0x1d8>
 8001b56:	e0b6      	b.n	8001cc6 <__aeabi_dsub+0x346>
 8001b58:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001b5a:	3701      	adds	r7, #1
 8001b5c:	429f      	cmp	r7, r3
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x1e2>
 8001b60:	e0ad      	b.n	8001cbe <__aeabi_dsub+0x33e>
 8001b62:	2101      	movs	r1, #1
 8001b64:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd8 <__aeabi_dsub+0x358>)
 8001b66:	086a      	lsrs	r2, r5, #1
 8001b68:	401c      	ands	r4, r3
 8001b6a:	4029      	ands	r1, r5
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	07e5      	lsls	r5, r4, #31
 8001b70:	4315      	orrs	r5, r2
 8001b72:	0864      	lsrs	r4, r4, #1
 8001b74:	e78d      	b.n	8001a92 <__aeabi_dsub+0x112>
 8001b76:	4a59      	ldr	r2, [pc, #356]	@ (8001cdc <__aeabi_dsub+0x35c>)
 8001b78:	9b02      	ldr	r3, [sp, #8]
 8001b7a:	4692      	mov	sl, r2
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	44ba      	add	sl, r7
 8001b80:	431a      	orrs	r2, r3
 8001b82:	d02c      	beq.n	8001bde <__aeabi_dsub+0x25e>
 8001b84:	428e      	cmp	r6, r1
 8001b86:	d02e      	beq.n	8001be6 <__aeabi_dsub+0x266>
 8001b88:	4652      	mov	r2, sl
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d060      	beq.n	8001c50 <__aeabi_dsub+0x2d0>
 8001b8e:	2f00      	cmp	r7, #0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x214>
 8001b92:	e0db      	b.n	8001d4c <__aeabi_dsub+0x3cc>
 8001b94:	4663      	mov	r3, ip
 8001b96:	000e      	movs	r6, r1
 8001b98:	9c02      	ldr	r4, [sp, #8]
 8001b9a:	08d8      	lsrs	r0, r3, #3
 8001b9c:	0762      	lsls	r2, r4, #29
 8001b9e:	4302      	orrs	r2, r0
 8001ba0:	08e4      	lsrs	r4, r4, #3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	4323      	orrs	r3, r4
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x22a>
 8001ba8:	e254      	b.n	8002054 <__aeabi_dsub+0x6d4>
 8001baa:	2580      	movs	r5, #128	@ 0x80
 8001bac:	032d      	lsls	r5, r5, #12
 8001bae:	4325      	orrs	r5, r4
 8001bb0:	032d      	lsls	r5, r5, #12
 8001bb2:	4c48      	ldr	r4, [pc, #288]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001bb4:	0b2d      	lsrs	r5, r5, #12
 8001bb6:	e78c      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001bb8:	4661      	mov	r1, ip
 8001bba:	9b02      	ldr	r3, [sp, #8]
 8001bbc:	4319      	orrs	r1, r3
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x242>
 8001bc0:	e0cc      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001bc2:	0029      	movs	r1, r5
 8001bc4:	3901      	subs	r1, #1
 8001bc6:	2d01      	cmp	r5, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x24c>
 8001bca:	e188      	b.n	8001ede <__aeabi_dsub+0x55e>
 8001bcc:	4295      	cmp	r5, r2
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x252>
 8001bd0:	e0aa      	b.n	8001d28 <__aeabi_dsub+0x3a8>
 8001bd2:	2501      	movs	r5, #1
 8001bd4:	2938      	cmp	r1, #56	@ 0x38
 8001bd6:	dd00      	ble.n	8001bda <__aeabi_dsub+0x25a>
 8001bd8:	e72f      	b.n	8001a3a <__aeabi_dsub+0xba>
 8001bda:	468a      	mov	sl, r1
 8001bdc:	e718      	b.n	8001a10 <__aeabi_dsub+0x90>
 8001bde:	2201      	movs	r2, #1
 8001be0:	4051      	eors	r1, r2
 8001be2:	428e      	cmp	r6, r1
 8001be4:	d1d0      	bne.n	8001b88 <__aeabi_dsub+0x208>
 8001be6:	4653      	mov	r3, sl
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x26e>
 8001bec:	e0be      	b.n	8001d6c <__aeabi_dsub+0x3ec>
 8001bee:	2f00      	cmp	r7, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x274>
 8001bf2:	e138      	b.n	8001e66 <__aeabi_dsub+0x4e6>
 8001bf4:	46ca      	mov	sl, r9
 8001bf6:	0022      	movs	r2, r4
 8001bf8:	4302      	orrs	r2, r0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x27e>
 8001bfc:	e1e2      	b.n	8001fc4 <__aeabi_dsub+0x644>
 8001bfe:	4653      	mov	r3, sl
 8001c00:	1e59      	subs	r1, r3, #1
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x288>
 8001c06:	e20d      	b.n	8002024 <__aeabi_dsub+0x6a4>
 8001c08:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001c0a:	4592      	cmp	sl, r2
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x290>
 8001c0e:	e1d2      	b.n	8001fb6 <__aeabi_dsub+0x636>
 8001c10:	2701      	movs	r7, #1
 8001c12:	2938      	cmp	r1, #56	@ 0x38
 8001c14:	dc13      	bgt.n	8001c3e <__aeabi_dsub+0x2be>
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dsub+0x29c>
 8001c1a:	e1ee      	b.n	8001ffa <__aeabi_dsub+0x67a>
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	9b02      	ldr	r3, [sp, #8]
 8001c20:	1a52      	subs	r2, r2, r1
 8001c22:	0025      	movs	r5, r4
 8001c24:	0007      	movs	r7, r0
 8001c26:	469a      	mov	sl, r3
 8001c28:	40cc      	lsrs	r4, r1
 8001c2a:	4090      	lsls	r0, r2
 8001c2c:	4095      	lsls	r5, r2
 8001c2e:	40cf      	lsrs	r7, r1
 8001c30:	44a2      	add	sl, r4
 8001c32:	1e42      	subs	r2, r0, #1
 8001c34:	4190      	sbcs	r0, r2
 8001c36:	4653      	mov	r3, sl
 8001c38:	432f      	orrs	r7, r5
 8001c3a:	4307      	orrs	r7, r0
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	003d      	movs	r5, r7
 8001c40:	4465      	add	r5, ip
 8001c42:	4565      	cmp	r5, ip
 8001c44:	4192      	sbcs	r2, r2
 8001c46:	9b02      	ldr	r3, [sp, #8]
 8001c48:	4252      	negs	r2, r2
 8001c4a:	464f      	mov	r7, r9
 8001c4c:	18d4      	adds	r4, r2, r3
 8001c4e:	e780      	b.n	8001b52 <__aeabi_dsub+0x1d2>
 8001c50:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <__aeabi_dsub+0x360>)
 8001c52:	1c7d      	adds	r5, r7, #1
 8001c54:	4215      	tst	r5, r2
 8001c56:	d000      	beq.n	8001c5a <__aeabi_dsub+0x2da>
 8001c58:	e0aa      	b.n	8001db0 <__aeabi_dsub+0x430>
 8001c5a:	4662      	mov	r2, ip
 8001c5c:	0025      	movs	r5, r4
 8001c5e:	9b02      	ldr	r3, [sp, #8]
 8001c60:	4305      	orrs	r5, r0
 8001c62:	431a      	orrs	r2, r3
 8001c64:	2f00      	cmp	r7, #0
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x2ea>
 8001c68:	e0f5      	b.n	8001e56 <__aeabi_dsub+0x4d6>
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x2f0>
 8001c6e:	e16b      	b.n	8001f48 <__aeabi_dsub+0x5c8>
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x2f6>
 8001c74:	e152      	b.n	8001f1c <__aeabi_dsub+0x59c>
 8001c76:	4663      	mov	r3, ip
 8001c78:	1ac5      	subs	r5, r0, r3
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	1ae2      	subs	r2, r4, r3
 8001c7e:	42a8      	cmp	r0, r5
 8001c80:	419b      	sbcs	r3, r3
 8001c82:	425b      	negs	r3, r3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	021a      	lsls	r2, r3, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_dsub+0x30c>
 8001c8a:	e1d5      	b.n	8002038 <__aeabi_dsub+0x6b8>
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	1a1d      	subs	r5, r3, r0
 8001c90:	45ac      	cmp	ip, r5
 8001c92:	4192      	sbcs	r2, r2
 8001c94:	2601      	movs	r6, #1
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	4252      	negs	r2, r2
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	4688      	mov	r8, r1
 8001c9e:	1aa4      	subs	r4, r4, r2
 8001ca0:	400e      	ands	r6, r1
 8001ca2:	e6f6      	b.n	8001a92 <__aeabi_dsub+0x112>
 8001ca4:	4297      	cmp	r7, r2
 8001ca6:	d03f      	beq.n	8001d28 <__aeabi_dsub+0x3a8>
 8001ca8:	4652      	mov	r2, sl
 8001caa:	2501      	movs	r5, #1
 8001cac:	2a38      	cmp	r2, #56	@ 0x38
 8001cae:	dd00      	ble.n	8001cb2 <__aeabi_dsub+0x332>
 8001cb0:	e74a      	b.n	8001b48 <__aeabi_dsub+0x1c8>
 8001cb2:	2280      	movs	r2, #128	@ 0x80
 8001cb4:	9b02      	ldr	r3, [sp, #8]
 8001cb6:	0412      	lsls	r2, r2, #16
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dsub+0x19a>
 8001cbe:	003c      	movs	r4, r7
 8001cc0:	2500      	movs	r5, #0
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	e705      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	402b      	ands	r3, r5
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dsub+0x350>
 8001cce:	e6e2      	b.n	8001a96 <__aeabi_dsub+0x116>
 8001cd0:	e06b      	b.n	8001daa <__aeabi_dsub+0x42a>
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	ff7fffff 	.word	0xff7fffff
 8001cdc:	fffff801 	.word	0xfffff801
 8001ce0:	000007fe 	.word	0x000007fe
 8001ce4:	0028      	movs	r0, r5
 8001ce6:	f000 fa97 	bl	8002218 <__clzsi2>
 8001cea:	0003      	movs	r3, r0
 8001cec:	3318      	adds	r3, #24
 8001cee:	2b1f      	cmp	r3, #31
 8001cf0:	dc00      	bgt.n	8001cf4 <__aeabi_dsub+0x374>
 8001cf2:	e6b4      	b.n	8001a5e <__aeabi_dsub+0xde>
 8001cf4:	002a      	movs	r2, r5
 8001cf6:	3808      	subs	r0, #8
 8001cf8:	4082      	lsls	r2, r0
 8001cfa:	429f      	cmp	r7, r3
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dsub+0x380>
 8001cfe:	e0b9      	b.n	8001e74 <__aeabi_dsub+0x4f4>
 8001d00:	1bdb      	subs	r3, r3, r7
 8001d02:	1c58      	adds	r0, r3, #1
 8001d04:	281f      	cmp	r0, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x38a>
 8001d08:	e1a0      	b.n	800204c <__aeabi_dsub+0x6cc>
 8001d0a:	0015      	movs	r5, r2
 8001d0c:	3b1f      	subs	r3, #31
 8001d0e:	40dd      	lsrs	r5, r3
 8001d10:	2820      	cmp	r0, #32
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x3a0>
 8001d14:	2340      	movs	r3, #64	@ 0x40
 8001d16:	1a1b      	subs	r3, r3, r0
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	1e53      	subs	r3, r2, #1
 8001d1c:	419a      	sbcs	r2, r3
 8001d1e:	4315      	orrs	r5, r2
 8001d20:	2307      	movs	r3, #7
 8001d22:	2700      	movs	r7, #0
 8001d24:	402b      	ands	r3, r5
 8001d26:	e7d0      	b.n	8001cca <__aeabi_dsub+0x34a>
 8001d28:	08c0      	lsrs	r0, r0, #3
 8001d2a:	0762      	lsls	r2, r4, #29
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	08e4      	lsrs	r4, r4, #3
 8001d30:	e737      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001d32:	08ea      	lsrs	r2, r5, #3
 8001d34:	0763      	lsls	r3, r4, #29
 8001d36:	431a      	orrs	r2, r3
 8001d38:	4bd3      	ldr	r3, [pc, #844]	@ (8002088 <__aeabi_dsub+0x708>)
 8001d3a:	08e4      	lsrs	r4, r4, #3
 8001d3c:	429f      	cmp	r7, r3
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x3c2>
 8001d40:	e72f      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001d42:	0324      	lsls	r4, r4, #12
 8001d44:	0b25      	lsrs	r5, r4, #12
 8001d46:	057c      	lsls	r4, r7, #21
 8001d48:	0d64      	lsrs	r4, r4, #21
 8001d4a:	e6c2      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001d4c:	46ca      	mov	sl, r9
 8001d4e:	0022      	movs	r2, r4
 8001d50:	4302      	orrs	r2, r0
 8001d52:	d158      	bne.n	8001e06 <__aeabi_dsub+0x486>
 8001d54:	4663      	mov	r3, ip
 8001d56:	000e      	movs	r6, r1
 8001d58:	9c02      	ldr	r4, [sp, #8]
 8001d5a:	9303      	str	r3, [sp, #12]
 8001d5c:	9b03      	ldr	r3, [sp, #12]
 8001d5e:	4657      	mov	r7, sl
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	e7e7      	b.n	8001d34 <__aeabi_dsub+0x3b4>
 8001d64:	4cc9      	ldr	r4, [pc, #804]	@ (800208c <__aeabi_dsub+0x70c>)
 8001d66:	1aff      	subs	r7, r7, r3
 8001d68:	4014      	ands	r4, r2
 8001d6a:	e692      	b.n	8001a92 <__aeabi_dsub+0x112>
 8001d6c:	4dc8      	ldr	r5, [pc, #800]	@ (8002090 <__aeabi_dsub+0x710>)
 8001d6e:	1c7a      	adds	r2, r7, #1
 8001d70:	422a      	tst	r2, r5
 8001d72:	d000      	beq.n	8001d76 <__aeabi_dsub+0x3f6>
 8001d74:	e084      	b.n	8001e80 <__aeabi_dsub+0x500>
 8001d76:	0022      	movs	r2, r4
 8001d78:	4302      	orrs	r2, r0
 8001d7a:	2f00      	cmp	r7, #0
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dsub+0x400>
 8001d7e:	e0ef      	b.n	8001f60 <__aeabi_dsub+0x5e0>
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x406>
 8001d84:	e0e5      	b.n	8001f52 <__aeabi_dsub+0x5d2>
 8001d86:	4662      	mov	r2, ip
 8001d88:	9902      	ldr	r1, [sp, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x410>
 8001d8e:	e0c5      	b.n	8001f1c <__aeabi_dsub+0x59c>
 8001d90:	4663      	mov	r3, ip
 8001d92:	18c5      	adds	r5, r0, r3
 8001d94:	468c      	mov	ip, r1
 8001d96:	4285      	cmp	r5, r0
 8001d98:	4180      	sbcs	r0, r0
 8001d9a:	4464      	add	r4, ip
 8001d9c:	4240      	negs	r0, r0
 8001d9e:	1824      	adds	r4, r4, r0
 8001da0:	0223      	lsls	r3, r4, #8
 8001da2:	d502      	bpl.n	8001daa <__aeabi_dsub+0x42a>
 8001da4:	4bb9      	ldr	r3, [pc, #740]	@ (800208c <__aeabi_dsub+0x70c>)
 8001da6:	3701      	adds	r7, #1
 8001da8:	401c      	ands	r4, r3
 8001daa:	46ba      	mov	sl, r7
 8001dac:	9503      	str	r5, [sp, #12]
 8001dae:	e7d5      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001db0:	4662      	mov	r2, ip
 8001db2:	1a85      	subs	r5, r0, r2
 8001db4:	42a8      	cmp	r0, r5
 8001db6:	4192      	sbcs	r2, r2
 8001db8:	4252      	negs	r2, r2
 8001dba:	4691      	mov	r9, r2
 8001dbc:	9b02      	ldr	r3, [sp, #8]
 8001dbe:	1ae3      	subs	r3, r4, r3
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	4691      	mov	r9, r2
 8001dca:	021a      	lsls	r2, r3, #8
 8001dcc:	d46c      	bmi.n	8001ea8 <__aeabi_dsub+0x528>
 8001dce:	464a      	mov	r2, r9
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	432a      	orrs	r2, r5
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x458>
 8001dd6:	e63a      	b.n	8001a4e <__aeabi_dsub+0xce>
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e678      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001de0:	9902      	ldr	r1, [sp, #8]
 8001de2:	4653      	mov	r3, sl
 8001de4:	000d      	movs	r5, r1
 8001de6:	3a20      	subs	r2, #32
 8001de8:	40d5      	lsrs	r5, r2
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d006      	beq.n	8001dfc <__aeabi_dsub+0x47c>
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	000b      	movs	r3, r1
 8001df4:	4093      	lsls	r3, r2
 8001df6:	4662      	mov	r2, ip
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	4693      	mov	fp, r2
 8001dfc:	465b      	mov	r3, fp
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	4193      	sbcs	r3, r2
 8001e02:	431d      	orrs	r5, r3
 8001e04:	e619      	b.n	8001a3a <__aeabi_dsub+0xba>
 8001e06:	4653      	mov	r3, sl
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x490>
 8001e0e:	e0c6      	b.n	8001f9e <__aeabi_dsub+0x61e>
 8001e10:	4e9d      	ldr	r6, [pc, #628]	@ (8002088 <__aeabi_dsub+0x708>)
 8001e12:	45b2      	cmp	sl, r6
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x498>
 8001e16:	e6bd      	b.n	8001b94 <__aeabi_dsub+0x214>
 8001e18:	4688      	mov	r8, r1
 8001e1a:	000e      	movs	r6, r1
 8001e1c:	2501      	movs	r5, #1
 8001e1e:	2a38      	cmp	r2, #56	@ 0x38
 8001e20:	dc10      	bgt.n	8001e44 <__aeabi_dsub+0x4c4>
 8001e22:	2a1f      	cmp	r2, #31
 8001e24:	dc7f      	bgt.n	8001f26 <__aeabi_dsub+0x5a6>
 8001e26:	2120      	movs	r1, #32
 8001e28:	0025      	movs	r5, r4
 8001e2a:	1a89      	subs	r1, r1, r2
 8001e2c:	0007      	movs	r7, r0
 8001e2e:	4088      	lsls	r0, r1
 8001e30:	408d      	lsls	r5, r1
 8001e32:	40d7      	lsrs	r7, r2
 8001e34:	40d4      	lsrs	r4, r2
 8001e36:	1e41      	subs	r1, r0, #1
 8001e38:	4188      	sbcs	r0, r1
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	433d      	orrs	r5, r7
 8001e3e:	1b1b      	subs	r3, r3, r4
 8001e40:	4305      	orrs	r5, r0
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	4662      	mov	r2, ip
 8001e46:	1b55      	subs	r5, r2, r5
 8001e48:	45ac      	cmp	ip, r5
 8001e4a:	4192      	sbcs	r2, r2
 8001e4c:	9b02      	ldr	r3, [sp, #8]
 8001e4e:	4252      	negs	r2, r2
 8001e50:	464f      	mov	r7, r9
 8001e52:	1a9c      	subs	r4, r3, r2
 8001e54:	e5f6      	b.n	8001a44 <__aeabi_dsub+0xc4>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d000      	beq.n	8001e5c <__aeabi_dsub+0x4dc>
 8001e5a:	e0b7      	b.n	8001fcc <__aeabi_dsub+0x64c>
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x4e2>
 8001e60:	e0f0      	b.n	8002044 <__aeabi_dsub+0x6c4>
 8001e62:	2601      	movs	r6, #1
 8001e64:	400e      	ands	r6, r1
 8001e66:	4663      	mov	r3, ip
 8001e68:	9802      	ldr	r0, [sp, #8]
 8001e6a:	08d9      	lsrs	r1, r3, #3
 8001e6c:	0742      	lsls	r2, r0, #29
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	08c4      	lsrs	r4, r0, #3
 8001e72:	e696      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001e74:	4c85      	ldr	r4, [pc, #532]	@ (800208c <__aeabi_dsub+0x70c>)
 8001e76:	1aff      	subs	r7, r7, r3
 8001e78:	4014      	ands	r4, r2
 8001e7a:	0762      	lsls	r2, r4, #29
 8001e7c:	08e4      	lsrs	r4, r4, #3
 8001e7e:	e760      	b.n	8001d42 <__aeabi_dsub+0x3c2>
 8001e80:	4981      	ldr	r1, [pc, #516]	@ (8002088 <__aeabi_dsub+0x708>)
 8001e82:	428a      	cmp	r2, r1
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x508>
 8001e86:	e0c9      	b.n	800201c <__aeabi_dsub+0x69c>
 8001e88:	4663      	mov	r3, ip
 8001e8a:	18c1      	adds	r1, r0, r3
 8001e8c:	4281      	cmp	r1, r0
 8001e8e:	4180      	sbcs	r0, r0
 8001e90:	9b02      	ldr	r3, [sp, #8]
 8001e92:	4240      	negs	r0, r0
 8001e94:	18e3      	adds	r3, r4, r3
 8001e96:	181b      	adds	r3, r3, r0
 8001e98:	07dd      	lsls	r5, r3, #31
 8001e9a:	085c      	lsrs	r4, r3, #1
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	0849      	lsrs	r1, r1, #1
 8001ea0:	430d      	orrs	r5, r1
 8001ea2:	0017      	movs	r7, r2
 8001ea4:	402b      	ands	r3, r5
 8001ea6:	e710      	b.n	8001cca <__aeabi_dsub+0x34a>
 8001ea8:	4663      	mov	r3, ip
 8001eaa:	1a1d      	subs	r5, r3, r0
 8001eac:	45ac      	cmp	ip, r5
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	9b02      	ldr	r3, [sp, #8]
 8001eb4:	4252      	negs	r2, r2
 8001eb6:	1b1c      	subs	r4, r3, r4
 8001eb8:	4688      	mov	r8, r1
 8001eba:	1aa4      	subs	r4, r4, r2
 8001ebc:	400e      	ands	r6, r1
 8001ebe:	e5c6      	b.n	8001a4e <__aeabi_dsub+0xce>
 8001ec0:	4663      	mov	r3, ip
 8001ec2:	18c5      	adds	r5, r0, r3
 8001ec4:	9b02      	ldr	r3, [sp, #8]
 8001ec6:	4285      	cmp	r5, r0
 8001ec8:	4180      	sbcs	r0, r0
 8001eca:	469c      	mov	ip, r3
 8001ecc:	4240      	negs	r0, r0
 8001ece:	4464      	add	r4, ip
 8001ed0:	1824      	adds	r4, r4, r0
 8001ed2:	2701      	movs	r7, #1
 8001ed4:	0223      	lsls	r3, r4, #8
 8001ed6:	d400      	bmi.n	8001eda <__aeabi_dsub+0x55a>
 8001ed8:	e6f5      	b.n	8001cc6 <__aeabi_dsub+0x346>
 8001eda:	2702      	movs	r7, #2
 8001edc:	e641      	b.n	8001b62 <__aeabi_dsub+0x1e2>
 8001ede:	4663      	mov	r3, ip
 8001ee0:	1ac5      	subs	r5, r0, r3
 8001ee2:	42a8      	cmp	r0, r5
 8001ee4:	4180      	sbcs	r0, r0
 8001ee6:	9b02      	ldr	r3, [sp, #8]
 8001ee8:	4240      	negs	r0, r0
 8001eea:	1ae4      	subs	r4, r4, r3
 8001eec:	2701      	movs	r7, #1
 8001eee:	1a24      	subs	r4, r4, r0
 8001ef0:	e5a8      	b.n	8001a44 <__aeabi_dsub+0xc4>
 8001ef2:	9d02      	ldr	r5, [sp, #8]
 8001ef4:	4652      	mov	r2, sl
 8001ef6:	002b      	movs	r3, r5
 8001ef8:	3a20      	subs	r2, #32
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	4653      	mov	r3, sl
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d006      	beq.n	8001f12 <__aeabi_dsub+0x592>
 8001f04:	2240      	movs	r2, #64	@ 0x40
 8001f06:	1ad2      	subs	r2, r2, r3
 8001f08:	002b      	movs	r3, r5
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	4693      	mov	fp, r2
 8001f12:	465d      	mov	r5, fp
 8001f14:	1e6b      	subs	r3, r5, #1
 8001f16:	419d      	sbcs	r5, r3
 8001f18:	430d      	orrs	r5, r1
 8001f1a:	e615      	b.n	8001b48 <__aeabi_dsub+0x1c8>
 8001f1c:	0762      	lsls	r2, r4, #29
 8001f1e:	08c0      	lsrs	r0, r0, #3
 8001f20:	4302      	orrs	r2, r0
 8001f22:	08e4      	lsrs	r4, r4, #3
 8001f24:	e70d      	b.n	8001d42 <__aeabi_dsub+0x3c2>
 8001f26:	0011      	movs	r1, r2
 8001f28:	0027      	movs	r7, r4
 8001f2a:	3920      	subs	r1, #32
 8001f2c:	40cf      	lsrs	r7, r1
 8001f2e:	2a20      	cmp	r2, #32
 8001f30:	d005      	beq.n	8001f3e <__aeabi_dsub+0x5be>
 8001f32:	2140      	movs	r1, #64	@ 0x40
 8001f34:	1a8a      	subs	r2, r1, r2
 8001f36:	4094      	lsls	r4, r2
 8001f38:	0025      	movs	r5, r4
 8001f3a:	4305      	orrs	r5, r0
 8001f3c:	9503      	str	r5, [sp, #12]
 8001f3e:	9d03      	ldr	r5, [sp, #12]
 8001f40:	1e6a      	subs	r2, r5, #1
 8001f42:	4195      	sbcs	r5, r2
 8001f44:	433d      	orrs	r5, r7
 8001f46:	e77d      	b.n	8001e44 <__aeabi_dsub+0x4c4>
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x5ce>
 8001f4c:	e744      	b.n	8001dd8 <__aeabi_dsub+0x458>
 8001f4e:	2601      	movs	r6, #1
 8001f50:	400e      	ands	r6, r1
 8001f52:	4663      	mov	r3, ip
 8001f54:	08d9      	lsrs	r1, r3, #3
 8001f56:	9b02      	ldr	r3, [sp, #8]
 8001f58:	075a      	lsls	r2, r3, #29
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	08dc      	lsrs	r4, r3, #3
 8001f5e:	e6f0      	b.n	8001d42 <__aeabi_dsub+0x3c2>
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d028      	beq.n	8001fb6 <__aeabi_dsub+0x636>
 8001f64:	4662      	mov	r2, ip
 8001f66:	9f02      	ldr	r7, [sp, #8]
 8001f68:	08c0      	lsrs	r0, r0, #3
 8001f6a:	433a      	orrs	r2, r7
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x5f0>
 8001f6e:	e6dc      	b.n	8001d2a <__aeabi_dsub+0x3aa>
 8001f70:	0762      	lsls	r2, r4, #29
 8001f72:	4310      	orrs	r0, r2
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	08e4      	lsrs	r4, r4, #3
 8001f78:	0312      	lsls	r2, r2, #12
 8001f7a:	4214      	tst	r4, r2
 8001f7c:	d009      	beq.n	8001f92 <__aeabi_dsub+0x612>
 8001f7e:	08fd      	lsrs	r5, r7, #3
 8001f80:	4215      	tst	r5, r2
 8001f82:	d106      	bne.n	8001f92 <__aeabi_dsub+0x612>
 8001f84:	4663      	mov	r3, ip
 8001f86:	2601      	movs	r6, #1
 8001f88:	002c      	movs	r4, r5
 8001f8a:	08d8      	lsrs	r0, r3, #3
 8001f8c:	077b      	lsls	r3, r7, #29
 8001f8e:	4318      	orrs	r0, r3
 8001f90:	400e      	ands	r6, r1
 8001f92:	0f42      	lsrs	r2, r0, #29
 8001f94:	00c0      	lsls	r0, r0, #3
 8001f96:	08c0      	lsrs	r0, r0, #3
 8001f98:	0752      	lsls	r2, r2, #29
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	e601      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	1a1d      	subs	r5, r3, r0
 8001fa2:	45ac      	cmp	ip, r5
 8001fa4:	4192      	sbcs	r2, r2
 8001fa6:	9b02      	ldr	r3, [sp, #8]
 8001fa8:	4252      	negs	r2, r2
 8001faa:	1b1c      	subs	r4, r3, r4
 8001fac:	000e      	movs	r6, r1
 8001fae:	4688      	mov	r8, r1
 8001fb0:	2701      	movs	r7, #1
 8001fb2:	1aa4      	subs	r4, r4, r2
 8001fb4:	e546      	b.n	8001a44 <__aeabi_dsub+0xc4>
 8001fb6:	4663      	mov	r3, ip
 8001fb8:	08d9      	lsrs	r1, r3, #3
 8001fba:	9b02      	ldr	r3, [sp, #8]
 8001fbc:	075a      	lsls	r2, r3, #29
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	08dc      	lsrs	r4, r3, #3
 8001fc2:	e5ee      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001fc4:	4663      	mov	r3, ip
 8001fc6:	9c02      	ldr	r4, [sp, #8]
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	e6c7      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001fcc:	08c0      	lsrs	r0, r0, #3
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x654>
 8001fd2:	e6aa      	b.n	8001d2a <__aeabi_dsub+0x3aa>
 8001fd4:	0762      	lsls	r2, r4, #29
 8001fd6:	4310      	orrs	r0, r2
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	0312      	lsls	r2, r2, #12
 8001fde:	4214      	tst	r4, r2
 8001fe0:	d0d7      	beq.n	8001f92 <__aeabi_dsub+0x612>
 8001fe2:	9f02      	ldr	r7, [sp, #8]
 8001fe4:	08fd      	lsrs	r5, r7, #3
 8001fe6:	4215      	tst	r5, r2
 8001fe8:	d1d3      	bne.n	8001f92 <__aeabi_dsub+0x612>
 8001fea:	4663      	mov	r3, ip
 8001fec:	2601      	movs	r6, #1
 8001fee:	08d8      	lsrs	r0, r3, #3
 8001ff0:	077b      	lsls	r3, r7, #29
 8001ff2:	002c      	movs	r4, r5
 8001ff4:	4318      	orrs	r0, r3
 8001ff6:	400e      	ands	r6, r1
 8001ff8:	e7cb      	b.n	8001f92 <__aeabi_dsub+0x612>
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	0027      	movs	r7, r4
 8001ffe:	3a20      	subs	r2, #32
 8002000:	40d7      	lsrs	r7, r2
 8002002:	2920      	cmp	r1, #32
 8002004:	d005      	beq.n	8002012 <__aeabi_dsub+0x692>
 8002006:	2240      	movs	r2, #64	@ 0x40
 8002008:	1a52      	subs	r2, r2, r1
 800200a:	4094      	lsls	r4, r2
 800200c:	0025      	movs	r5, r4
 800200e:	4305      	orrs	r5, r0
 8002010:	9503      	str	r5, [sp, #12]
 8002012:	9d03      	ldr	r5, [sp, #12]
 8002014:	1e6a      	subs	r2, r5, #1
 8002016:	4195      	sbcs	r5, r2
 8002018:	432f      	orrs	r7, r5
 800201a:	e610      	b.n	8001c3e <__aeabi_dsub+0x2be>
 800201c:	0014      	movs	r4, r2
 800201e:	2500      	movs	r5, #0
 8002020:	2200      	movs	r2, #0
 8002022:	e556      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8002024:	9b02      	ldr	r3, [sp, #8]
 8002026:	4460      	add	r0, ip
 8002028:	4699      	mov	r9, r3
 800202a:	4560      	cmp	r0, ip
 800202c:	4192      	sbcs	r2, r2
 800202e:	444c      	add	r4, r9
 8002030:	4252      	negs	r2, r2
 8002032:	0005      	movs	r5, r0
 8002034:	18a4      	adds	r4, r4, r2
 8002036:	e74c      	b.n	8001ed2 <__aeabi_dsub+0x552>
 8002038:	001a      	movs	r2, r3
 800203a:	001c      	movs	r4, r3
 800203c:	432a      	orrs	r2, r5
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x6c2>
 8002040:	e6b3      	b.n	8001daa <__aeabi_dsub+0x42a>
 8002042:	e6c9      	b.n	8001dd8 <__aeabi_dsub+0x458>
 8002044:	2480      	movs	r4, #128	@ 0x80
 8002046:	2600      	movs	r6, #0
 8002048:	0324      	lsls	r4, r4, #12
 800204a:	e5ae      	b.n	8001baa <__aeabi_dsub+0x22a>
 800204c:	2120      	movs	r1, #32
 800204e:	2500      	movs	r5, #0
 8002050:	1a09      	subs	r1, r1, r0
 8002052:	e517      	b.n	8001a84 <__aeabi_dsub+0x104>
 8002054:	2200      	movs	r2, #0
 8002056:	2500      	movs	r5, #0
 8002058:	4c0b      	ldr	r4, [pc, #44]	@ (8002088 <__aeabi_dsub+0x708>)
 800205a:	e53a      	b.n	8001ad2 <__aeabi_dsub+0x152>
 800205c:	2d00      	cmp	r5, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x6e2>
 8002060:	e5f6      	b.n	8001c50 <__aeabi_dsub+0x2d0>
 8002062:	464b      	mov	r3, r9
 8002064:	1bda      	subs	r2, r3, r7
 8002066:	4692      	mov	sl, r2
 8002068:	2f00      	cmp	r7, #0
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x6ee>
 800206c:	e66f      	b.n	8001d4e <__aeabi_dsub+0x3ce>
 800206e:	2a38      	cmp	r2, #56	@ 0x38
 8002070:	dc05      	bgt.n	800207e <__aeabi_dsub+0x6fe>
 8002072:	2680      	movs	r6, #128	@ 0x80
 8002074:	0436      	lsls	r6, r6, #16
 8002076:	4334      	orrs	r4, r6
 8002078:	4688      	mov	r8, r1
 800207a:	000e      	movs	r6, r1
 800207c:	e6d1      	b.n	8001e22 <__aeabi_dsub+0x4a2>
 800207e:	4688      	mov	r8, r1
 8002080:	000e      	movs	r6, r1
 8002082:	2501      	movs	r5, #1
 8002084:	e6de      	b.n	8001e44 <__aeabi_dsub+0x4c4>
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	000007ff 	.word	0x000007ff
 800208c:	ff7fffff 	.word	0xff7fffff
 8002090:	000007fe 	.word	0x000007fe
 8002094:	2d00      	cmp	r5, #0
 8002096:	d100      	bne.n	800209a <__aeabi_dsub+0x71a>
 8002098:	e668      	b.n	8001d6c <__aeabi_dsub+0x3ec>
 800209a:	464b      	mov	r3, r9
 800209c:	1bd9      	subs	r1, r3, r7
 800209e:	2f00      	cmp	r7, #0
 80020a0:	d101      	bne.n	80020a6 <__aeabi_dsub+0x726>
 80020a2:	468a      	mov	sl, r1
 80020a4:	e5a7      	b.n	8001bf6 <__aeabi_dsub+0x276>
 80020a6:	2701      	movs	r7, #1
 80020a8:	2938      	cmp	r1, #56	@ 0x38
 80020aa:	dd00      	ble.n	80020ae <__aeabi_dsub+0x72e>
 80020ac:	e5c7      	b.n	8001c3e <__aeabi_dsub+0x2be>
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	0412      	lsls	r2, r2, #16
 80020b2:	4314      	orrs	r4, r2
 80020b4:	e5af      	b.n	8001c16 <__aeabi_dsub+0x296>
 80020b6:	46c0      	nop			@ (mov r8, r8)

080020b8 <__aeabi_dcmpun>:
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	46c6      	mov	lr, r8
 80020bc:	031e      	lsls	r6, r3, #12
 80020be:	0b36      	lsrs	r6, r6, #12
 80020c0:	46b0      	mov	r8, r6
 80020c2:	4e0d      	ldr	r6, [pc, #52]	@ (80020f8 <__aeabi_dcmpun+0x40>)
 80020c4:	030c      	lsls	r4, r1, #12
 80020c6:	004d      	lsls	r5, r1, #1
 80020c8:	005f      	lsls	r7, r3, #1
 80020ca:	b500      	push	{lr}
 80020cc:	0b24      	lsrs	r4, r4, #12
 80020ce:	0d6d      	lsrs	r5, r5, #21
 80020d0:	0d7f      	lsrs	r7, r7, #21
 80020d2:	42b5      	cmp	r5, r6
 80020d4:	d00b      	beq.n	80020ee <__aeabi_dcmpun+0x36>
 80020d6:	4908      	ldr	r1, [pc, #32]	@ (80020f8 <__aeabi_dcmpun+0x40>)
 80020d8:	2000      	movs	r0, #0
 80020da:	428f      	cmp	r7, r1
 80020dc:	d104      	bne.n	80020e8 <__aeabi_dcmpun+0x30>
 80020de:	4646      	mov	r6, r8
 80020e0:	4316      	orrs	r6, r2
 80020e2:	0030      	movs	r0, r6
 80020e4:	1e43      	subs	r3, r0, #1
 80020e6:	4198      	sbcs	r0, r3
 80020e8:	bc80      	pop	{r7}
 80020ea:	46b8      	mov	r8, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	4304      	orrs	r4, r0
 80020f0:	2001      	movs	r0, #1
 80020f2:	2c00      	cmp	r4, #0
 80020f4:	d1f8      	bne.n	80020e8 <__aeabi_dcmpun+0x30>
 80020f6:	e7ee      	b.n	80020d6 <__aeabi_dcmpun+0x1e>
 80020f8:	000007ff 	.word	0x000007ff

080020fc <__aeabi_d2iz>:
 80020fc:	000b      	movs	r3, r1
 80020fe:	0002      	movs	r2, r0
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	4d16      	ldr	r5, [pc, #88]	@ (800215c <__aeabi_d2iz+0x60>)
 8002104:	030c      	lsls	r4, r1, #12
 8002106:	b082      	sub	sp, #8
 8002108:	0049      	lsls	r1, r1, #1
 800210a:	2000      	movs	r0, #0
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	0b24      	lsrs	r4, r4, #12
 8002112:	0d49      	lsrs	r1, r1, #21
 8002114:	0fde      	lsrs	r6, r3, #31
 8002116:	42a9      	cmp	r1, r5
 8002118:	dd04      	ble.n	8002124 <__aeabi_d2iz+0x28>
 800211a:	4811      	ldr	r0, [pc, #68]	@ (8002160 <__aeabi_d2iz+0x64>)
 800211c:	4281      	cmp	r1, r0
 800211e:	dd03      	ble.n	8002128 <__aeabi_d2iz+0x2c>
 8002120:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <__aeabi_d2iz+0x68>)
 8002122:	18f0      	adds	r0, r6, r3
 8002124:	b002      	add	sp, #8
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	2080      	movs	r0, #128	@ 0x80
 800212a:	0340      	lsls	r0, r0, #13
 800212c:	4320      	orrs	r0, r4
 800212e:	4c0e      	ldr	r4, [pc, #56]	@ (8002168 <__aeabi_d2iz+0x6c>)
 8002130:	1a64      	subs	r4, r4, r1
 8002132:	2c1f      	cmp	r4, #31
 8002134:	dd08      	ble.n	8002148 <__aeabi_d2iz+0x4c>
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <__aeabi_d2iz+0x70>)
 8002138:	1a5b      	subs	r3, r3, r1
 800213a:	40d8      	lsrs	r0, r3
 800213c:	0003      	movs	r3, r0
 800213e:	4258      	negs	r0, r3
 8002140:	2e00      	cmp	r6, #0
 8002142:	d1ef      	bne.n	8002124 <__aeabi_d2iz+0x28>
 8002144:	0018      	movs	r0, r3
 8002146:	e7ed      	b.n	8002124 <__aeabi_d2iz+0x28>
 8002148:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <__aeabi_d2iz+0x74>)
 800214a:	9a00      	ldr	r2, [sp, #0]
 800214c:	469c      	mov	ip, r3
 800214e:	0003      	movs	r3, r0
 8002150:	4461      	add	r1, ip
 8002152:	408b      	lsls	r3, r1
 8002154:	40e2      	lsrs	r2, r4
 8002156:	4313      	orrs	r3, r2
 8002158:	e7f1      	b.n	800213e <__aeabi_d2iz+0x42>
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	000003fe 	.word	0x000003fe
 8002160:	0000041d 	.word	0x0000041d
 8002164:	7fffffff 	.word	0x7fffffff
 8002168:	00000433 	.word	0x00000433
 800216c:	00000413 	.word	0x00000413
 8002170:	fffffbed 	.word	0xfffffbed

08002174 <__aeabi_i2d>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	2800      	cmp	r0, #0
 8002178:	d016      	beq.n	80021a8 <__aeabi_i2d+0x34>
 800217a:	17c3      	asrs	r3, r0, #31
 800217c:	18c5      	adds	r5, r0, r3
 800217e:	405d      	eors	r5, r3
 8002180:	0fc4      	lsrs	r4, r0, #31
 8002182:	0028      	movs	r0, r5
 8002184:	f000 f848 	bl	8002218 <__clzsi2>
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <__aeabi_i2d+0x58>)
 800218a:	1a1b      	subs	r3, r3, r0
 800218c:	055b      	lsls	r3, r3, #21
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	280a      	cmp	r0, #10
 8002192:	dc14      	bgt.n	80021be <__aeabi_i2d+0x4a>
 8002194:	0002      	movs	r2, r0
 8002196:	002e      	movs	r6, r5
 8002198:	3215      	adds	r2, #21
 800219a:	4096      	lsls	r6, r2
 800219c:	220b      	movs	r2, #11
 800219e:	1a12      	subs	r2, r2, r0
 80021a0:	40d5      	lsrs	r5, r2
 80021a2:	032d      	lsls	r5, r5, #12
 80021a4:	0b2d      	lsrs	r5, r5, #12
 80021a6:	e003      	b.n	80021b0 <__aeabi_i2d+0x3c>
 80021a8:	2400      	movs	r4, #0
 80021aa:	2300      	movs	r3, #0
 80021ac:	2500      	movs	r5, #0
 80021ae:	2600      	movs	r6, #0
 80021b0:	051b      	lsls	r3, r3, #20
 80021b2:	432b      	orrs	r3, r5
 80021b4:	07e4      	lsls	r4, r4, #31
 80021b6:	4323      	orrs	r3, r4
 80021b8:	0030      	movs	r0, r6
 80021ba:	0019      	movs	r1, r3
 80021bc:	bd70      	pop	{r4, r5, r6, pc}
 80021be:	380b      	subs	r0, #11
 80021c0:	4085      	lsls	r5, r0
 80021c2:	032d      	lsls	r5, r5, #12
 80021c4:	2600      	movs	r6, #0
 80021c6:	0b2d      	lsrs	r5, r5, #12
 80021c8:	e7f2      	b.n	80021b0 <__aeabi_i2d+0x3c>
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	0000041e 	.word	0x0000041e

080021d0 <__aeabi_ui2d>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	1e04      	subs	r4, r0, #0
 80021d4:	d010      	beq.n	80021f8 <__aeabi_ui2d+0x28>
 80021d6:	f000 f81f 	bl	8002218 <__clzsi2>
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <__aeabi_ui2d+0x44>)
 80021dc:	1a1b      	subs	r3, r3, r0
 80021de:	055b      	lsls	r3, r3, #21
 80021e0:	0d5b      	lsrs	r3, r3, #21
 80021e2:	280a      	cmp	r0, #10
 80021e4:	dc0f      	bgt.n	8002206 <__aeabi_ui2d+0x36>
 80021e6:	220b      	movs	r2, #11
 80021e8:	0021      	movs	r1, r4
 80021ea:	1a12      	subs	r2, r2, r0
 80021ec:	40d1      	lsrs	r1, r2
 80021ee:	3015      	adds	r0, #21
 80021f0:	030a      	lsls	r2, r1, #12
 80021f2:	4084      	lsls	r4, r0
 80021f4:	0b12      	lsrs	r2, r2, #12
 80021f6:	e001      	b.n	80021fc <__aeabi_ui2d+0x2c>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2200      	movs	r2, #0
 80021fc:	051b      	lsls	r3, r3, #20
 80021fe:	4313      	orrs	r3, r2
 8002200:	0020      	movs	r0, r4
 8002202:	0019      	movs	r1, r3
 8002204:	bd10      	pop	{r4, pc}
 8002206:	0022      	movs	r2, r4
 8002208:	380b      	subs	r0, #11
 800220a:	4082      	lsls	r2, r0
 800220c:	0312      	lsls	r2, r2, #12
 800220e:	2400      	movs	r4, #0
 8002210:	0b12      	lsrs	r2, r2, #12
 8002212:	e7f3      	b.n	80021fc <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__clzsi2>:
 8002218:	211c      	movs	r1, #28
 800221a:	2301      	movs	r3, #1
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	4298      	cmp	r0, r3
 8002220:	d301      	bcc.n	8002226 <__clzsi2+0xe>
 8002222:	0c00      	lsrs	r0, r0, #16
 8002224:	3910      	subs	r1, #16
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	4298      	cmp	r0, r3
 800222a:	d301      	bcc.n	8002230 <__clzsi2+0x18>
 800222c:	0a00      	lsrs	r0, r0, #8
 800222e:	3908      	subs	r1, #8
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	4298      	cmp	r0, r3
 8002234:	d301      	bcc.n	800223a <__clzsi2+0x22>
 8002236:	0900      	lsrs	r0, r0, #4
 8002238:	3904      	subs	r1, #4
 800223a:	a202      	add	r2, pc, #8	@ (adr r2, 8002244 <__clzsi2+0x2c>)
 800223c:	5c10      	ldrb	r0, [r2, r0]
 800223e:	1840      	adds	r0, r0, r1
 8002240:	4770      	bx	lr
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	02020304 	.word	0x02020304
 8002248:	01010101 	.word	0x01010101
	...

08002254 <termistor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double termistor(uint32_t analogValue)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	double temperature;
	uint32_t adcval = 4096-analogValue;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	0152      	lsls	r2, r2, #5
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
	temperature = log((adcval*10000)/(4095-adcval));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4a2b      	ldr	r2, [pc, #172]	@ (8002318 <termistor+0xc4>)
 800226a:	435a      	muls	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	492b      	ldr	r1, [pc, #172]	@ (800231c <termistor+0xc8>)
 8002270:	1acb      	subs	r3, r1, r3
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f7fd ff5f 	bl	8000138 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff ffa7 	bl	80021d0 <__aeabi_ui2d>
 8002282:	0002      	movs	r2, r0
 8002284:	000b      	movs	r3, r1
 8002286:	0010      	movs	r0, r2
 8002288:	0019      	movs	r1, r3
 800228a:	f007 f84f 	bl	800932c <log>
 800228e:	0002      	movs	r2, r0
 8002290:	000b      	movs	r3, r1
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	60fb      	str	r3, [r7, #12]
	temperature = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temperature * temperature)) * temperature);
 8002296:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <termistor+0xcc>)
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <termistor+0xd0>)
 800229a:	68b8      	ldr	r0, [r7, #8]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	f7ff f8a7 	bl	80013f0 <__aeabi_dmul>
 80022a2:	0002      	movs	r2, r0
 80022a4:	000b      	movs	r3, r1
 80022a6:	0010      	movs	r0, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f7ff f89f 	bl	80013f0 <__aeabi_dmul>
 80022b2:	0002      	movs	r2, r0
 80022b4:	000b      	movs	r3, r1
 80022b6:	0010      	movs	r0, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <termistor+0xd4>)
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <termistor+0xd8>)
 80022be:	f7fe f8ef 	bl	80004a0 <__aeabi_dadd>
 80022c2:	0002      	movs	r2, r0
 80022c4:	000b      	movs	r3, r1
 80022c6:	0010      	movs	r0, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f7ff f88f 	bl	80013f0 <__aeabi_dmul>
 80022d2:	0002      	movs	r2, r0
 80022d4:	000b      	movs	r3, r1
 80022d6:	0010      	movs	r0, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	4a15      	ldr	r2, [pc, #84]	@ (8002330 <termistor+0xdc>)
 80022dc:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <termistor+0xe0>)
 80022de:	f7fe f8df 	bl	80004a0 <__aeabi_dadd>
 80022e2:	0002      	movs	r2, r0
 80022e4:	000b      	movs	r3, r1
 80022e6:	2000      	movs	r0, #0
 80022e8:	4913      	ldr	r1, [pc, #76]	@ (8002338 <termistor+0xe4>)
 80022ea:	f7fe fc3d 	bl	8000b68 <__aeabi_ddiv>
 80022ee:	0002      	movs	r2, r0
 80022f0:	000b      	movs	r3, r1
 80022f2:	60ba      	str	r2, [r7, #8]
 80022f4:	60fb      	str	r3, [r7, #12]
	temperature = temperature - 273.15;
 80022f6:	4a11      	ldr	r2, [pc, #68]	@ (800233c <termistor+0xe8>)
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <termistor+0xec>)
 80022fa:	68b8      	ldr	r0, [r7, #8]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	f7ff fb3f 	bl	8001980 <__aeabi_dsub>
 8002302:	0002      	movs	r2, r0
 8002304:	000b      	movs	r3, r1
 8002306:	60ba      	str	r2, [r7, #8]
 8002308:	60fb      	str	r3, [r7, #12]
	return temperature;
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]

}
 800230e:	0010      	movs	r0, r2
 8002310:	0019      	movs	r1, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b006      	add	sp, #24
 8002316:	bd80      	pop	{r7, pc}
 8002318:	00002710 	.word	0x00002710
 800231c:	00000fff 	.word	0x00000fff
 8002320:	14170d19 	.word	0x14170d19
 8002324:	3e7788eb 	.word	0x3e7788eb
 8002328:	6fb4c3c2 	.word	0x6fb4c3c2
 800232c:	3f2eafee 	.word	0x3f2eafee
 8002330:	6edeb890 	.word	0x6edeb890
 8002334:	3f527ffd 	.word	0x3f527ffd
 8002338:	3ff00000 	.word	0x3ff00000
 800233c:	66666666 	.word	0x66666666
 8002340:	40711266 	.word	0x40711266

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	@ 0x30
 8002348:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234a:	f000 fc59 	bl	8002c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234e:	f000 f895 	bl	800247c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002352:	f000 f9df 	bl	8002714 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002356:	f000 f8e7 	bl	8002528 <MX_ADC1_Init>
  MX_I2C1_Init();
 800235a:	f000 f94d 	bl	80025f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800235e:	f000 f98b 	bl	8002678 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  volatile uint32_t adcValues[10];
  ssd1306_Init();
 8002362:	f003 fe8f 	bl	8006084 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002366:	2000      	movs	r0, #0
 8002368:	f003 fef8 	bl	800615c <ssd1306_Fill>
  HAL_Delay(200);
 800236c:	20c8      	movs	r0, #200	@ 0xc8
 800236e:	f000 fccd 	bl	8002d0c <HAL_Delay>
  ssd1306_SetCursor(5, 2);
 8002372:	2102      	movs	r1, #2
 8002374:	2005      	movs	r0, #5
 8002376:	f004 f867 	bl	8006448 <ssd1306_SetCursor>
  ssd1306_WriteString("Wi-Fi", Font_7x10, White);
 800237a:	4a34      	ldr	r2, [pc, #208]	@ (800244c <main+0x108>)
 800237c:	4834      	ldr	r0, [pc, #208]	@ (8002450 <main+0x10c>)
 800237e:	2301      	movs	r3, #1
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	6852      	ldr	r2, [r2, #4]
 8002384:	f004 f836 	bl	80063f4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002388:	f003 ff0c 	bl	80061a4 <ssd1306_UpdateScreen>
  HAL_ADC_Start(&hadc1);
 800238c:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <main+0x110>)
 800238e:	0018      	movs	r0, r3
 8002390:	f000 ffbe 	bl	8003310 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TxData[10] = 0x0A;
 8002394:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <main+0x114>)
 8002396:	220a      	movs	r2, #10
 8002398:	729a      	strb	r2, [r3, #10]
	  HAL_ADC_PollForConversion(&hadc1, 50);
 800239a:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <main+0x110>)
 800239c:	2132      	movs	r1, #50	@ 0x32
 800239e:	0018      	movs	r0, r3
 80023a0:	f001 f804 	bl	80033ac <HAL_ADC_PollForConversion>
	  adcValues[2] = HAL_ADC_GetValue(&hadc1);
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <main+0x110>)
 80023a6:	0018      	movs	r0, r3
 80023a8:	f001 f894 	bl	80034d4 <HAL_ADC_GetValue>
 80023ac:	0002      	movs	r2, r0
 80023ae:	003b      	movs	r3, r7
 80023b0:	609a      	str	r2, [r3, #8]
	  temp1 = (termistor(adcValues[2]) - 10);
 80023b2:	003b      	movs	r3, r7
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff ff4c 	bl	8002254 <termistor>
 80023bc:	2200      	movs	r2, #0
 80023be:	4b27      	ldr	r3, [pc, #156]	@ (800245c <main+0x118>)
 80023c0:	f7ff fade 	bl	8001980 <__aeabi_dsub>
 80023c4:	0002      	movs	r2, r0
 80023c6:	000b      	movs	r3, r1
 80023c8:	4925      	ldr	r1, [pc, #148]	@ (8002460 <main+0x11c>)
 80023ca:	600a      	str	r2, [r1, #0]
 80023cc:	604b      	str	r3, [r1, #4]
	  snprintf(buffer, 10, "%f", temp1);
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <main+0x11c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4923      	ldr	r1, [pc, #140]	@ (8002464 <main+0x120>)
 80023d6:	4824      	ldr	r0, [pc, #144]	@ (8002468 <main+0x124>)
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	000a      	movs	r2, r1
 80023de:	210a      	movs	r1, #10
 80023e0:	f004 fdb0 	bl	8006f44 <sniprintf>
	  ssd1306_SetCursor(15, 2);
 80023e4:	2102      	movs	r1, #2
 80023e6:	200f      	movs	r0, #15
 80023e8:	f004 f82e 	bl	8006448 <ssd1306_SetCursor>
	  ssd1306_WriteString("SICAKLIK", Font_11x18, White);
 80023ec:	4a1f      	ldr	r2, [pc, #124]	@ (800246c <main+0x128>)
 80023ee:	4820      	ldr	r0, [pc, #128]	@ (8002470 <main+0x12c>)
 80023f0:	2301      	movs	r3, #1
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	6852      	ldr	r2, [r2, #4]
 80023f6:	f003 fffd 	bl	80063f4 <ssd1306_WriteString>
	  ssd1306_SetCursor(14, 27);
 80023fa:	211b      	movs	r1, #27
 80023fc:	200e      	movs	r0, #14
 80023fe:	f004 f823 	bl	8006448 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer, Font_11x18, White);
 8002402:	4a1a      	ldr	r2, [pc, #104]	@ (800246c <main+0x128>)
 8002404:	4818      	ldr	r0, [pc, #96]	@ (8002468 <main+0x124>)
 8002406:	2301      	movs	r3, #1
 8002408:	6811      	ldr	r1, [r2, #0]
 800240a:	6852      	ldr	r2, [r2, #4]
 800240c:	f003 fff2 	bl	80063f4 <ssd1306_WriteString>
	  ssd1306_SetCursor(45, 46);
 8002410:	212e      	movs	r1, #46	@ 0x2e
 8002412:	202d      	movs	r0, #45	@ 0x2d
 8002414:	f004 f818 	bl	8006448 <ssd1306_SetCursor>
	  ssd1306_UpdateScreen();
 8002418:	f003 fec4 	bl	80061a4 <ssd1306_UpdateScreen>

	  snprintf(TxData, 10, "%d", (int)temp1);
 800241c:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <main+0x11c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0010      	movs	r0, r2
 8002424:	0019      	movs	r1, r3
 8002426:	f7ff fe69 	bl	80020fc <__aeabi_d2iz>
 800242a:	0003      	movs	r3, r0
 800242c:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <main+0x130>)
 800242e:	480a      	ldr	r0, [pc, #40]	@ (8002458 <main+0x114>)
 8002430:	210a      	movs	r1, #10
 8002432:	f004 fd87 	bl	8006f44 <sniprintf>
	  TxData[9] = 0x0A;
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <main+0x114>)
 8002438:	220a      	movs	r2, #10
 800243a:	725a      	strb	r2, [r3, #9]
	  HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 10, 50);
 800243c:	4906      	ldr	r1, [pc, #24]	@ (8002458 <main+0x114>)
 800243e:	480e      	ldr	r0, [pc, #56]	@ (8002478 <main+0x134>)
 8002440:	2332      	movs	r3, #50	@ 0x32
 8002442:	220a      	movs	r2, #10
 8002444:	f003 f888 	bl	8005558 <HAL_UART_Transmit>
	  TxData[10] = 0x0A;
 8002448:	46c0      	nop			@ (mov r8, r8)
 800244a:	e7a3      	b.n	8002394 <main+0x50>
 800244c:	2000000c 	.word	0x2000000c
 8002450:	08009720 	.word	0x08009720
 8002454:	20000204 	.word	0x20000204
 8002458:	20000358 	.word	0x20000358
 800245c:	40240000 	.word	0x40240000
 8002460:	20000350 	.word	0x20000350
 8002464:	08009728 	.word	0x08009728
 8002468:	20000364 	.word	0x20000364
 800246c:	20000014 	.word	0x20000014
 8002470:	0800972c 	.word	0x0800972c
 8002474:	08009738 	.word	0x08009738
 8002478:	200002bc 	.word	0x200002bc

0800247c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b093      	sub	sp, #76	@ 0x4c
 8002480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002482:	2414      	movs	r4, #20
 8002484:	193b      	adds	r3, r7, r4
 8002486:	0018      	movs	r0, r3
 8002488:	2334      	movs	r3, #52	@ 0x34
 800248a:	001a      	movs	r2, r3
 800248c:	2100      	movs	r1, #0
 800248e:	f004 fdec 	bl	800706a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	0018      	movs	r0, r3
 8002496:	2310      	movs	r3, #16
 8002498:	001a      	movs	r2, r3
 800249a:	2100      	movs	r1, #0
 800249c:	f004 fde5 	bl	800706a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f002 f99d 	bl	80047e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024aa:	193b      	adds	r3, r7, r4
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	0252      	lsls	r2, r2, #9
 80024b6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b8:	0021      	movs	r1, r4
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	2202      	movs	r2, #2
 80024be:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2203      	movs	r2, #3
 80024c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	2210      	movs	r2, #16
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2280      	movs	r2, #128	@ 0x80
 80024d6:	0292      	lsls	r2, r2, #10
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2280      	movs	r2, #128	@ 0x80
 80024de:	0592      	lsls	r2, r2, #22
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	0018      	movs	r0, r3
 80024e6:	f002 f9c9 	bl	800487c <HAL_RCC_OscConfig>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80024ee:	f000 f94b 	bl	8002788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2202      	movs	r2, #2
 80024fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2102      	movs	r1, #2
 800250e:	0018      	movs	r0, r3
 8002510:	f002 fcc4 	bl	8004e9c <HAL_RCC_ClockConfig>
 8002514:	1e03      	subs	r3, r0, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002518:	f000 f936 	bl	8002788 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800251c:	f002 fe68 	bl	80051f0 <HAL_RCC_EnableCSS>
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b013      	add	sp, #76	@ 0x4c
 8002526:	bd90      	pop	{r4, r7, pc}

08002528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	0018      	movs	r0, r3
 8002532:	230c      	movs	r3, #12
 8002534:	001a      	movs	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	f004 fd97 	bl	800706a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800253c:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <MX_ADC1_Init+0xc4>)
 800253e:	4a2c      	ldr	r2, [pc, #176]	@ (80025f0 <MX_ADC1_Init+0xc8>)
 8002540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002542:	4b2a      	ldr	r3, [pc, #168]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	05d2      	lsls	r2, r2, #23
 8002548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800254a:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <MX_ADC1_Init+0xc4>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002550:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002556:	4b25      	ldr	r3, [pc, #148]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800255c:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <MX_ADC1_Init+0xc4>)
 800255e:	2204      	movs	r2, #4
 8002560:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002562:	4b22      	ldr	r3, [pc, #136]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002564:	2200      	movs	r2, #0
 8002566:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002568:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <MX_ADC1_Init+0xc4>)
 800256a:	2200      	movs	r2, #0
 800256c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800256e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002570:	2201      	movs	r2, #1
 8002572:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002574:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002576:	2201      	movs	r2, #1
 8002578:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800257a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <MX_ADC1_Init+0xc4>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002580:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002586:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002588:	222c      	movs	r2, #44	@ 0x2c
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002594:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <MX_ADC1_Init+0xc4>)
 8002596:	2200      	movs	r2, #0
 8002598:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800259a:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <MX_ADC1_Init+0xc4>)
 800259c:	2200      	movs	r2, #0
 800259e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <MX_ADC1_Init+0xc4>)
 80025a2:	223c      	movs	r2, #60	@ 0x3c
 80025a4:	2100      	movs	r1, #0
 80025a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80025a8:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <MX_ADC1_Init+0xc4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025ae:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <MX_ADC1_Init+0xc4>)
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 fd05 	bl	8002fc0 <HAL_ADC_Init>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d001      	beq.n	80025be <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80025ba:	f000 f8e5 	bl	8002788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4a0c      	ldr	r2, [pc, #48]	@ (80025f4 <MX_ADC1_Init+0xcc>)
 80025c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025d0:	1d3a      	adds	r2, r7, #4
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <MX_ADC1_Init+0xc4>)
 80025d4:	0011      	movs	r1, r2
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 ff88 	bl	80034ec <HAL_ADC_ConfigChannel>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80025e0:	f000 f8d2 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000204 	.word	0x20000204
 80025f0:	40012400 	.word	0x40012400
 80025f4:	10000010 	.word	0x10000010

080025f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <MX_I2C1_Init+0x74>)
 80025fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002670 <MX_I2C1_Init+0x78>)
 8002600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8002602:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <MX_I2C1_Init+0x74>)
 8002604:	4a1b      	ldr	r2, [pc, #108]	@ (8002674 <MX_I2C1_Init+0x7c>)
 8002606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <MX_I2C1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800260e:	4b17      	ldr	r3, [pc, #92]	@ (800266c <MX_I2C1_Init+0x74>)
 8002610:	2201      	movs	r2, #1
 8002612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002614:	4b15      	ldr	r3, [pc, #84]	@ (800266c <MX_I2C1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <MX_I2C1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <MX_I2C1_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002626:	4b11      	ldr	r3, [pc, #68]	@ (800266c <MX_I2C1_Init+0x74>)
 8002628:	2200      	movs	r2, #0
 800262a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <MX_I2C1_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <MX_I2C1_Init+0x74>)
 8002634:	0018      	movs	r0, r3
 8002636:	f001 fbcf 	bl	8003dd8 <HAL_I2C_Init>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800263e:	f000 f8a3 	bl	8002788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002642:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <MX_I2C1_Init+0x74>)
 8002644:	2100      	movs	r1, #0
 8002646:	0018      	movs	r0, r3
 8002648:	f002 f834 	bl	80046b4 <HAL_I2CEx_ConfigAnalogFilter>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d001      	beq.n	8002654 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002650:	f000 f89a 	bl	8002788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <MX_I2C1_Init+0x74>)
 8002656:	2100      	movs	r1, #0
 8002658:	0018      	movs	r0, r3
 800265a:	f002 f877 	bl	800474c <HAL_I2CEx_ConfigDigitalFilter>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d001      	beq.n	8002666 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002662:	f000 f891 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000268 	.word	0x20000268
 8002670:	40005400 	.word	0x40005400
 8002674:	10b17db5 	.word	0x10b17db5

08002678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800267c:	4b23      	ldr	r3, [pc, #140]	@ (800270c <MX_USART1_UART_Init+0x94>)
 800267e:	4a24      	ldr	r2, [pc, #144]	@ (8002710 <MX_USART1_UART_Init+0x98>)
 8002680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <MX_USART1_UART_Init+0x94>)
 8002684:	22e1      	movs	r2, #225	@ 0xe1
 8002686:	0252      	lsls	r2, r2, #9
 8002688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <MX_USART1_UART_Init+0x94>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <MX_USART1_UART_Init+0x94>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002696:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <MX_USART1_UART_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <MX_USART1_UART_Init+0x94>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ae:	4b17      	ldr	r3, [pc, #92]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ba:	4b14      	ldr	r3, [pc, #80]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f002 fef2 	bl	80054ac <HAL_UART_Init>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80026cc:	f000 f85c 	bl	8002788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026d2:	2100      	movs	r1, #0
 80026d4:	0018      	movs	r0, r3
 80026d6:	f003 fbbb 	bl	8005e50 <HAL_UARTEx_SetTxFifoThreshold>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026de:	f000 f853 	bl	8002788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026e4:	2100      	movs	r1, #0
 80026e6:	0018      	movs	r0, r3
 80026e8:	f003 fbf2 	bl	8005ed0 <HAL_UARTEx_SetRxFifoThreshold>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026f0:	f000 f84a 	bl	8002788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <MX_USART1_UART_Init+0x94>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f003 fb70 	bl	8005ddc <HAL_UARTEx_DisableFifoMode>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002700:	f000 f842 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	200002bc 	.word	0x200002bc
 8002710:	40013800 	.word	0x40013800

08002714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <MX_GPIO_Init+0x70>)
 800271c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800271e:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002720:	2104      	movs	r1, #4
 8002722:	430a      	orrs	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34
 8002726:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272a:	2204      	movs	r2, #4
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002732:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002738:	2120      	movs	r1, #32
 800273a:	430a      	orrs	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	2220      	movs	r2, #32
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <MX_GPIO_Init+0x70>)
 800274c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274e:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002750:	2101      	movs	r1, #1
 8002752:	430a      	orrs	r2, r1
 8002754:	635a      	str	r2, [r3, #52]	@ 0x34
 8002756:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275a:	2201      	movs	r2, #1
 800275c:	4013      	ands	r3, r2
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002768:	2102      	movs	r1, #2
 800276a:	430a      	orrs	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	@ 0x34
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <MX_GPIO_Init+0x70>)
 8002770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	40021000 	.word	0x40021000

08002788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
}
 800278e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002790:	46c0      	nop			@ (mov r8, r8)
 8002792:	e7fd      	b.n	8002790 <Error_Handler+0x8>

08002794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <HAL_MspInit+0x44>)
 800279c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800279e:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_MspInit+0x44>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80027a6:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <HAL_MspInit+0x44>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2201      	movs	r2, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_MspInit+0x44>)
 80027b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027b6:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_MspInit+0x44>)
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	0549      	lsls	r1, r1, #21
 80027bc:	430a      	orrs	r2, r1
 80027be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_MspInit+0x44>)
 80027c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	055b      	lsls	r3, r3, #21
 80027c8:	4013      	ands	r3, r2
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b08b      	sub	sp, #44	@ 0x2c
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	2414      	movs	r4, #20
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	0018      	movs	r0, r3
 80027ea:	2314      	movs	r3, #20
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f004 fc3b 	bl	800706a <memset>
  if(hadc->Instance==ADC1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a18      	ldr	r2, [pc, #96]	@ (800285c <HAL_ADC_MspInit+0x80>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d129      	bne.n	8002852 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80027fe:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_ADC_MspInit+0x84>)
 8002800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002802:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <HAL_ADC_MspInit+0x84>)
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	0349      	lsls	r1, r1, #13
 8002808:	430a      	orrs	r2, r1
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <HAL_ADC_MspInit+0x84>)
 800280e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	035b      	lsls	r3, r3, #13
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_ADC_MspInit+0x84>)
 800281c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_ADC_MspInit+0x84>)
 8002820:	2101      	movs	r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34
 8002826:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_ADC_MspInit+0x84>)
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002832:	193b      	adds	r3, r7, r4
 8002834:	2210      	movs	r2, #16
 8002836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002838:	193b      	adds	r3, r7, r4
 800283a:	2203      	movs	r2, #3
 800283c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	193b      	adds	r3, r7, r4
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	193a      	adds	r2, r7, r4
 8002846:	23a0      	movs	r3, #160	@ 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f001 f95f 	bl	8003b10 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b00b      	add	sp, #44	@ 0x2c
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	40012400 	.word	0x40012400
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b091      	sub	sp, #68	@ 0x44
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	232c      	movs	r3, #44	@ 0x2c
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	0018      	movs	r0, r3
 8002872:	2314      	movs	r3, #20
 8002874:	001a      	movs	r2, r3
 8002876:	2100      	movs	r1, #0
 8002878:	f004 fbf7 	bl	800706a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800287c:	2414      	movs	r4, #20
 800287e:	193b      	adds	r3, r7, r4
 8002880:	0018      	movs	r0, r3
 8002882:	2318      	movs	r3, #24
 8002884:	001a      	movs	r2, r3
 8002886:	2100      	movs	r1, #0
 8002888:	f004 fbef 	bl	800706a <memset>
  if(hi2c->Instance==I2C1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_I2C_MspInit+0xb8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d13d      	bne.n	8002912 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002896:	193b      	adds	r3, r7, r4
 8002898:	2220      	movs	r2, #32
 800289a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 fcdb 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028ae:	f7ff ff6b 	bl	8002788 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_I2C_MspInit+0xbc>)
 80028b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <HAL_I2C_MspInit+0xbc>)
 80028b8:	2102      	movs	r1, #2
 80028ba:	430a      	orrs	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <HAL_I2C_MspInit+0xbc>)
 80028c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c2:	2202      	movs	r2, #2
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ca:	212c      	movs	r1, #44	@ 0x2c
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	22c0      	movs	r2, #192	@ 0xc0
 80028d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2212      	movs	r2, #18
 80028d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	2206      	movs	r2, #6
 80028e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <HAL_I2C_MspInit+0xc0>)
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f001 f90d 	bl	8003b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_I2C_MspInit+0xbc>)
 80028f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_I2C_MspInit+0xbc>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0389      	lsls	r1, r1, #14
 8002900:	430a      	orrs	r2, r1
 8002902:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_I2C_MspInit+0xbc>)
 8002906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	039b      	lsls	r3, r3, #14
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b011      	add	sp, #68	@ 0x44
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	40005400 	.word	0x40005400
 8002920:	40021000 	.word	0x40021000
 8002924:	50000400 	.word	0x50000400

08002928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b091      	sub	sp, #68	@ 0x44
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	232c      	movs	r3, #44	@ 0x2c
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	0018      	movs	r0, r3
 8002936:	2314      	movs	r3, #20
 8002938:	001a      	movs	r2, r3
 800293a:	2100      	movs	r1, #0
 800293c:	f004 fb95 	bl	800706a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002940:	2414      	movs	r4, #20
 8002942:	193b      	adds	r3, r7, r4
 8002944:	0018      	movs	r0, r3
 8002946:	2318      	movs	r3, #24
 8002948:	001a      	movs	r2, r3
 800294a:	2100      	movs	r1, #0
 800294c:	f004 fb8d 	bl	800706a <memset>
  if(huart->Instance==USART1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a23      	ldr	r2, [pc, #140]	@ (80029e4 <HAL_UART_MspInit+0xbc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d13f      	bne.n	80029da <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2200      	movs	r2, #0
 8002964:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002966:	193b      	adds	r3, r7, r4
 8002968:	0018      	movs	r0, r3
 800296a:	f002 fc79 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002972:	f7ff ff09 	bl	8002788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002976:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <HAL_UART_MspInit+0xc0>)
 8002978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_UART_MspInit+0xc0>)
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	01c9      	lsls	r1, r1, #7
 8002980:	430a      	orrs	r2, r1
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40
 8002984:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <HAL_UART_MspInit+0xc0>)
 8002986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	01db      	lsls	r3, r3, #7
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <HAL_UART_MspInit+0xc0>)
 8002994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <HAL_UART_MspInit+0xc0>)
 8002998:	2101      	movs	r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
 800299e:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <HAL_UART_MspInit+0xc0>)
 80029a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029aa:	212c      	movs	r1, #44	@ 0x2c
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	22c0      	movs	r2, #192	@ 0xc0
 80029b0:	00d2      	lsls	r2, r2, #3
 80029b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2202      	movs	r2, #2
 80029b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2201      	movs	r2, #1
 80029ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	187a      	adds	r2, r7, r1
 80029ce:	23a0      	movs	r3, #160	@ 0xa0
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	0011      	movs	r1, r2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f001 f89b 	bl	8003b10 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b011      	add	sp, #68	@ 0x44
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	40013800 	.word	0x40013800
 80029e8:	40021000 	.word	0x40021000

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80029f0:	f002 fc0c 	bl	800520c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	e7fd      	b.n	80029f4 <NMI_Handler+0x8>

080029f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	e7fd      	b.n	80029fc <HardFault_Handler+0x4>

08002a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a18:	f000 f95c 	bl	8002cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
  return 1;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_kill>:

int _kill(int pid, int sig)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a38:	f004 fb72 	bl	8007120 <__errno>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	2216      	movs	r2, #22
 8002a40:	601a      	str	r2, [r3, #0]
  return -1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	425b      	negs	r3, r3
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_exit>:

void _exit (int status)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a56:	2301      	movs	r3, #1
 8002a58:	425a      	negs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ffe5 	bl	8002a2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	e7fd      	b.n	8002a64 <_exit+0x16>

08002a68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e00a      	b.n	8002a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a7a:	e000      	b.n	8002a7e <_read+0x16>
 8002a7c:	bf00      	nop
 8002a7e:	0001      	movs	r1, r0
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	b2ca      	uxtb	r2, r1
 8002a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	dbf0      	blt.n	8002a7a <_read+0x12>
  }

  return len;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b006      	add	sp, #24
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e009      	b.n	8002ac8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	60ba      	str	r2, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	0018      	movs	r0, r3
 8002abe:	e000      	b.n	8002ac2 <_write+0x20>
 8002ac0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dbf1      	blt.n	8002ab4 <_write+0x12>
  }
  return len;
 8002ad0:	687b      	ldr	r3, [r7, #4]
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b006      	add	sp, #24
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <_close>:

int _close(int file)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	425b      	negs	r3, r3
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	0192      	lsls	r2, r2, #6
 8002afe:	605a      	str	r2, [r3, #4]
  return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_isatty>:

int _isatty(int file)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	18d3      	adds	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f004 fadc 	bl	8007120 <__errno>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	425b      	negs	r3, r3
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	18d2      	adds	r2, r2, r3
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <_sbrk+0x64>)
 8002b84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20002000 	.word	0x20002000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	20000370 	.word	0x20000370
 8002b9c:	200008d0 	.word	0x200008d0

08002ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bac:	480d      	ldr	r0, [pc, #52]	@ (8002be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bb0:	f7ff fff6 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb4:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb6:	490d      	ldr	r1, [pc, #52]	@ (8002bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <LoopForever+0xe>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bbc:	e002      	b.n	8002bc4 <LoopCopyDataInit>

08002bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc2:	3304      	adds	r3, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc8:	d3f9      	bcc.n	8002bbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bca:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf8 <LoopForever+0x16>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd0:	e001      	b.n	8002bd6 <LoopFillZerobss>

08002bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd4:	3204      	adds	r2, #4

08002bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd8:	d3fb      	bcc.n	8002bd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bda:	f004 faa7 	bl	800712c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002bde:	f7ff fbb1 	bl	8002344 <main>

08002be2 <LoopForever>:

LoopForever:
  b LoopForever
 8002be2:	e7fe      	b.n	8002be2 <LoopForever>
  ldr   r0, =_estack
 8002be4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002bf0:	0800b048 	.word	0x0800b048
  ldr r2, =_sbss
 8002bf4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002bf8:	200008cc 	.word	0x200008cc

08002bfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC1_IRQHandler>
	...

08002c00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_Init+0x3c>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <HAL_Init+0x3c>)
 8002c12:	2180      	movs	r1, #128	@ 0x80
 8002c14:	0049      	lsls	r1, r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f000 f810 	bl	8002c40 <HAL_InitTick>
 8002c20:	1e03      	subs	r3, r0, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e001      	b.n	8002c30 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c2c:	f7ff fdb2 	bl	8002794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c30:	1dfb      	adds	r3, r7, #7
 8002c32:	781b      	ldrb	r3, [r3, #0]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40022000 	.word	0x40022000

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c48:	230f      	movs	r3, #15
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_InitTick+0x88>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02b      	beq.n	8002cb0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <HAL_InitTick+0x8c>)
 8002c5a:	681c      	ldr	r4, [r3, #0]
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <HAL_InitTick+0x88>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	0019      	movs	r1, r3
 8002c62:	23fa      	movs	r3, #250	@ 0xfa
 8002c64:	0098      	lsls	r0, r3, #2
 8002c66:	f7fd fa67 	bl	8000138 <__udivsi3>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	0020      	movs	r0, r4
 8002c70:	f7fd fa62 	bl	8000138 <__udivsi3>
 8002c74:	0003      	movs	r3, r0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 ff3d 	bl	8003af6 <HAL_SYSTICK_Config>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d112      	bne.n	8002ca6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d80a      	bhi.n	8002c9c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	425b      	negs	r3, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 ff1c 	bl	8003acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_InitTick+0x90>)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e00d      	b.n	8002cb8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e008      	b.n	8002cb8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ca6:	230f      	movs	r3, #15
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e003      	b.n	8002cb8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002cb8:	230f      	movs	r3, #15
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b005      	add	sp, #20
 8002cc4:	bd90      	pop	{r4, r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_IncTick+0x1c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	001a      	movs	r2, r3
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_IncTick+0x20>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	18d2      	adds	r2, r2, r3
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_IncTick+0x20>)
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	20000374 	.word	0x20000374

08002cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cfc:	4b02      	ldr	r3, [pc, #8]	@ (8002d08 <HAL_GetTick+0x10>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	20000374 	.word	0x20000374

08002d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <HAL_Delay+0x44>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	f7ff ffe0 	bl	8002cf8 <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d8f7      	bhi.n	8002d34 <HAL_Delay+0x28>
  {
  }
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b004      	add	sp, #16
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	20000008 	.word	0x20000008

08002d54 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a05      	ldr	r2, [pc, #20]	@ (8002d78 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002d64:	401a      	ands	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	fe3fffff 	.word	0xfe3fffff

08002d7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	23e0      	movs	r3, #224	@ 0xe0
 8002d8a:	045b      	lsls	r3, r3, #17
 8002d8c:	4013      	ands	r3, r2
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	2104      	movs	r1, #4
 8002daa:	400a      	ands	r2, r1
 8002dac:	2107      	movs	r1, #7
 8002dae:	4091      	lsls	r1, r2
 8002db0:	000a      	movs	r2, r1
 8002db2:	43d2      	mvns	r2, r2
 8002db4:	401a      	ands	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2104      	movs	r1, #4
 8002dba:	400b      	ands	r3, r1
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4099      	lsls	r1, r3
 8002dc0:	000b      	movs	r3, r1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	2104      	movs	r1, #4
 8002de2:	400a      	ands	r2, r1
 8002de4:	2107      	movs	r1, #7
 8002de6:	4091      	lsls	r1, r2
 8002de8:	000a      	movs	r2, r1
 8002dea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2104      	movs	r1, #4
 8002df0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002df2:	40da      	lsrs	r2, r3
 8002df4:	0013      	movs	r3, r2
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	23c0      	movs	r3, #192	@ 0xc0
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d101      	bne.n	8002e16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	211f      	movs	r1, #31
 8002e34:	400a      	ands	r2, r1
 8002e36:	210f      	movs	r1, #15
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	210f      	movs	r1, #15
 8002e46:	4019      	ands	r1, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	201f      	movs	r0, #31
 8002e4c:	4003      	ands	r3, r0
 8002e4e:	4099      	lsls	r1, r3
 8002e50:	000b      	movs	r3, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e58:	46c0      	nop			@ (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	035b      	lsls	r3, r3, #13
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	0352      	lsls	r2, r2, #13
 8002e94:	0b52      	lsrs	r2, r2, #13
 8002e96:	43d2      	mvns	r2, r2
 8002e98:	401a      	ands	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	0212      	lsls	r2, r2, #8
 8002ebc:	43d2      	mvns	r2, r2
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	4904      	ldr	r1, [pc, #16]	@ (8002edc <LL_ADC_SetChannelSamplingTime+0x34>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	07ffff00 	.word	0x07ffff00

08002ee0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <LL_ADC_EnableInternalRegulator+0x24>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2280      	movs	r2, #128	@ 0x80
 8002ef2:	0552      	lsls	r2, r2, #21
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	6fffffe8 	.word	0x6fffffe8

08002f08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	055b      	lsls	r3, r3, #21
 8002f18:	401a      	ands	r2, r3
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	055b      	lsls	r3, r3, #21
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d101      	bne.n	8002f26 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <LL_ADC_Enable+0x20>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2201      	movs	r2, #1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	7fffffe8 	.word	0x7fffffe8

08002f54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <LL_ADC_IsEnabled+0x18>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <LL_ADC_IsEnabled+0x1a>
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <LL_ADC_REG_StartConversion+0x20>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	2204      	movs	r2, #4
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	7fffffe8 	.word	0x7fffffe8

08002f9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d101      	bne.n	8002fb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc8:	231f      	movs	r3, #31
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e17f      	b.n	80032e6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fbf3 	bl	80027dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2254      	movs	r2, #84	@ 0x54
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff ff7d 	bl	8002f08 <LL_ADC_IsInternalRegulatorEnabled>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d115      	bne.n	800303e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff ff62 	bl	8002ee0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800301c:	4bb4      	ldr	r3, [pc, #720]	@ (80032f0 <HAL_ADC_Init+0x330>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	49b4      	ldr	r1, [pc, #720]	@ (80032f4 <HAL_ADC_Init+0x334>)
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd f888 	bl	8000138 <__udivsi3>
 8003028:	0003      	movs	r3, r0
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003030:	e002      	b.n	8003038 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b01      	subs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0018      	movs	r0, r3
 8003044:	f7ff ff60 	bl	8002f08 <LL_ADC_IsInternalRegulatorEnabled>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d10f      	bne.n	800306c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	2210      	movs	r2, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	2201      	movs	r2, #1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003064:	231f      	movs	r3, #31
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff ff93 	bl	8002f9c <LL_ADC_REG_IsConversionOngoing>
 8003076:	0003      	movs	r3, r0
 8003078:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307e:	2210      	movs	r2, #16
 8003080:	4013      	ands	r3, r2
 8003082:	d000      	beq.n	8003086 <HAL_ADC_Init+0xc6>
 8003084:	e122      	b.n	80032cc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d000      	beq.n	800308e <HAL_ADC_Init+0xce>
 800308c:	e11e      	b.n	80032cc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	4a99      	ldr	r2, [pc, #612]	@ (80032f8 <HAL_ADC_Init+0x338>)
 8003094:	4013      	ands	r3, r2
 8003096:	2202      	movs	r2, #2
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff ff56 	bl	8002f54 <LL_ADC_IsEnabled>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d000      	beq.n	80030ae <HAL_ADC_Init+0xee>
 80030ac:	e0ad      	b.n	800320a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
 80030b6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80030b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7e5b      	ldrb	r3, [r3, #25]
 80030be:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7e9b      	ldrb	r3, [r3, #26]
 80030c6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_ADC_Init+0x118>
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	015b      	lsls	r3, r3, #5
 80030d6:	e000      	b.n	80030da <HAL_ADC_Init+0x11a>
 80030d8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030da:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030e0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da04      	bge.n	80030f4 <HAL_ADC_Init+0x134>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	e001      	b.n	80030f8 <HAL_ADC_Init+0x138>
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80030f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	212c      	movs	r1, #44	@ 0x2c
 80030fe:	5c5b      	ldrb	r3, [r3, r1]
 8003100:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003102:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d115      	bne.n	8003140 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7e9b      	ldrb	r3, [r3, #26]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	0252      	lsls	r2, r2, #9
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e00b      	b.n	8003140 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	2220      	movs	r2, #32
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	2201      	movs	r2, #1
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800314c:	23e0      	movs	r3, #224	@ 0xe0
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003156:	4313      	orrs	r3, r2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a65      	ldr	r2, [pc, #404]	@ (80032fc <HAL_ADC_Init+0x33c>)
 8003166:	4013      	ands	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0f9b      	lsrs	r3, r3, #30
 800317a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003180:	4313      	orrs	r3, r2
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	223c      	movs	r2, #60	@ 0x3c
 800318c:	5c9b      	ldrb	r3, [r3, r2]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d111      	bne.n	80031b6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	0f9b      	lsrs	r3, r3, #30
 8003198:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800319e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80031a4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80031aa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	2201      	movs	r2, #1
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4a50      	ldr	r2, [pc, #320]	@ (8003300 <HAL_ADC_Init+0x340>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	23c0      	movs	r3, #192	@ 0xc0
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d018      	beq.n	800320a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	05db      	lsls	r3, r3, #23
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d012      	beq.n	800320a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d00c      	beq.n	800320a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80031f0:	4b44      	ldr	r3, [pc, #272]	@ (8003304 <HAL_ADC_Init+0x344>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a44      	ldr	r2, [pc, #272]	@ (8003308 <HAL_ADC_Init+0x348>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	23f0      	movs	r3, #240	@ 0xf0
 8003200:	039b      	lsls	r3, r3, #14
 8003202:	401a      	ands	r2, r3
 8003204:	4b3f      	ldr	r3, [pc, #252]	@ (8003304 <HAL_ADC_Init+0x344>)
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	001a      	movs	r2, r3
 8003214:	2100      	movs	r1, #0
 8003216:	f7ff fdbe 	bl	8002d96 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	493a      	ldr	r1, [pc, #232]	@ (800330c <HAL_ADC_Init+0x34c>)
 8003224:	001a      	movs	r2, r3
 8003226:	f7ff fdb6 	bl	8002d96 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2110      	movs	r1, #16
 800323e:	4249      	negs	r1, r1
 8003240:	430a      	orrs	r2, r1
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28
 8003244:	e018      	b.n	8003278 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	039b      	lsls	r3, r3, #14
 800324e:	429a      	cmp	r2, r3
 8003250:	d112      	bne.n	8003278 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	3b01      	subs	r3, #1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	221c      	movs	r2, #28
 8003262:	4013      	ands	r3, r2
 8003264:	2210      	movs	r2, #16
 8003266:	4252      	negs	r2, r2
 8003268:	409a      	lsls	r2, r3
 800326a:	0011      	movs	r1, r2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2100      	movs	r1, #0
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff fda6 	bl	8002dd0 <LL_ADC_GetSamplingTimeCommonChannels>
 8003284:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800328a:	429a      	cmp	r2, r3
 800328c:	d10b      	bne.n	80032a6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	2203      	movs	r2, #3
 800329a:	4393      	bics	r3, r2
 800329c:	2201      	movs	r2, #1
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032a4:	e01c      	b.n	80032e0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	2212      	movs	r2, #18
 80032ac:	4393      	bics	r3, r2
 80032ae:	2210      	movs	r2, #16
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ba:	2201      	movs	r2, #1
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80032c2:	231f      	movs	r3, #31
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032ca:	e009      	b.n	80032e0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	2210      	movs	r2, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80032d8:	231f      	movs	r3, #31
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80032e0:	231f      	movs	r3, #31
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	781b      	ldrb	r3, [r3, #0]
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b008      	add	sp, #32
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	20000000 	.word	0x20000000
 80032f4:	00030d40 	.word	0x00030d40
 80032f8:	fffffefd 	.word	0xfffffefd
 80032fc:	ffde0201 	.word	0xffde0201
 8003300:	1ffffc02 	.word	0x1ffffc02
 8003304:	40012708 	.word	0x40012708
 8003308:	ffc3ffff 	.word	0xffc3ffff
 800330c:	07ffff04 	.word	0x07ffff04

08003310 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff fe3d 	bl	8002f9c <LL_ADC_REG_IsConversionOngoing>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d135      	bne.n	8003392 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2254      	movs	r2, #84	@ 0x54
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_ADC_Start+0x24>
 8003330:	2302      	movs	r3, #2
 8003332:	e035      	b.n	80033a0 <HAL_ADC_Start+0x90>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2254      	movs	r2, #84	@ 0x54
 8003338:	2101      	movs	r1, #1
 800333a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800333c:	250f      	movs	r5, #15
 800333e:	197c      	adds	r4, r7, r5
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 faaa 	bl	800389c <ADC_Enable>
 8003348:	0003      	movs	r3, r0
 800334a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800334c:	197b      	adds	r3, r7, r5
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d119      	bne.n	8003388 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_ADC_Start+0x98>)
 800335a:	4013      	ands	r3, r2
 800335c:	2280      	movs	r2, #128	@ 0x80
 800335e:	0052      	lsls	r2, r2, #1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	221c      	movs	r2, #28
 8003372:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2254      	movs	r2, #84	@ 0x54
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fdf9 	bl	8002f78 <LL_ADC_REG_StartConversion>
 8003386:	e008      	b.n	800339a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2254      	movs	r2, #84	@ 0x54
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]
 8003390:	e003      	b.n	800339a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003392:	230f      	movs	r3, #15
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800339a:	230f      	movs	r3, #15
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b004      	add	sp, #16
 80033a6:	bdb0      	pop	{r4, r5, r7, pc}
 80033a8:	fffff0fe 	.word	0xfffff0fe

080033ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d102      	bne.n	80033c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80033be:	2308      	movs	r3, #8
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e00f      	b.n	80033e4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	d007      	beq.n	80033e0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	2220      	movs	r2, #32
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e072      	b.n	80034c6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033e0:	2304      	movs	r3, #4
 80033e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033e4:	f7ff fc88 	bl	8002cf8 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033ec:	e01f      	b.n	800342e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	d01c      	beq.n	800342e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033f4:	f7ff fc80 	bl	8002cf8 <HAL_GetTick>
 80033f8:	0002      	movs	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <HAL_ADC_PollForConversion+0x5e>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d111      	bne.n	800342e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	d10b      	bne.n	800342e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	2204      	movs	r2, #4
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2254      	movs	r2, #84	@ 0x54
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e04b      	b.n	80034c6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	d0d9      	beq.n	80033ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	2280      	movs	r2, #128	@ 0x80
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff fcd6 	bl	8002dfe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d02e      	beq.n	80034b4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7e9b      	ldrb	r3, [r3, #26]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d12a      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2208      	movs	r2, #8
 8003466:	4013      	ands	r3, r2
 8003468:	2b08      	cmp	r3, #8
 800346a:	d123      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fd93 	bl	8002f9c <LL_ADC_REG_IsConversionOngoing>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d110      	bne.n	800349c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	210c      	movs	r1, #12
 8003486:	438a      	bics	r2, r1
 8003488:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_ADC_PollForConversion+0x124>)
 8003490:	4013      	ands	r3, r2
 8003492:	2201      	movs	r2, #1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58
 800349a:	e00b      	b.n	80034b4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	2220      	movs	r2, #32
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	2201      	movs	r2, #1
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7e1b      	ldrb	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	220c      	movs	r2, #12
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	fffffefe 	.word	0xfffffefe

080034d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f6:	2317      	movs	r3, #23
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2254      	movs	r2, #84	@ 0x54
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x24>
 800350c:	2302      	movs	r3, #2
 800350e:	e1c0      	b.n	8003892 <HAL_ADC_ConfigChannel+0x3a6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2254      	movs	r2, #84	@ 0x54
 8003514:	2101      	movs	r1, #1
 8003516:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff fd3d 	bl	8002f9c <LL_ADC_REG_IsConversionOngoing>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d000      	beq.n	8003528 <HAL_ADC_ConfigChannel+0x3c>
 8003526:	e1a3      	b.n	8003870 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d100      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x46>
 8003530:	e143      	b.n	80037ba <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	429a      	cmp	r2, r3
 800353c:	d004      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003542:	4ac1      	ldr	r2, [pc, #772]	@ (8003848 <HAL_ADC_ConfigChannel+0x35c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0019      	movs	r1, r3
 8003552:	0010      	movs	r0, r2
 8003554:	f7ff fc84 	bl	8002e60 <LL_ADC_REG_SetSequencerChAdd>
 8003558:	e0c9      	b.n	80036ee <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	211f      	movs	r1, #31
 8003564:	400b      	ands	r3, r1
 8003566:	210f      	movs	r1, #15
 8003568:	4099      	lsls	r1, r3
 800356a:	000b      	movs	r3, r1
 800356c:	43db      	mvns	r3, r3
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	035b      	lsls	r3, r3, #13
 8003578:	0b5b      	lsrs	r3, r3, #13
 800357a:	d105      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x9c>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	221f      	movs	r2, #31
 8003584:	4013      	ands	r3, r2
 8003586:	e098      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2201      	movs	r2, #1
 800358e:	4013      	ands	r3, r2
 8003590:	d000      	beq.n	8003594 <HAL_ADC_ConfigChannel+0xa8>
 8003592:	e091      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x1cc>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2202      	movs	r2, #2
 800359a:	4013      	ands	r3, r2
 800359c:	d000      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0xb4>
 800359e:	e089      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x1c8>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2204      	movs	r2, #4
 80035a6:	4013      	ands	r3, r2
 80035a8:	d000      	beq.n	80035ac <HAL_ADC_ConfigChannel+0xc0>
 80035aa:	e081      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x1c4>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2208      	movs	r2, #8
 80035b2:	4013      	ands	r3, r2
 80035b4:	d000      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0xcc>
 80035b6:	e079      	b.n	80036ac <HAL_ADC_ConfigChannel+0x1c0>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2210      	movs	r2, #16
 80035be:	4013      	ands	r3, r2
 80035c0:	d000      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0xd8>
 80035c2:	e071      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x1bc>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	4013      	ands	r3, r2
 80035cc:	d000      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0xe4>
 80035ce:	e069      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x1b8>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2240      	movs	r2, #64	@ 0x40
 80035d6:	4013      	ands	r3, r2
 80035d8:	d000      	beq.n	80035dc <HAL_ADC_ConfigChannel+0xf0>
 80035da:	e061      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x1b4>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2280      	movs	r2, #128	@ 0x80
 80035e2:	4013      	ands	r3, r2
 80035e4:	d000      	beq.n	80035e8 <HAL_ADC_ConfigChannel+0xfc>
 80035e6:	e059      	b.n	800369c <HAL_ADC_ConfigChannel+0x1b0>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	d151      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1ac>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	@ 0x80
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d149      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1a8>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4013      	ands	r3, r2
 800360a:	d141      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x1a4>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	4013      	ands	r3, r2
 8003616:	d139      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1a0>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	4013      	ands	r3, r2
 8003622:	d131      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x19c>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	019b      	lsls	r3, r3, #6
 800362c:	4013      	ands	r3, r2
 800362e:	d129      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x198>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	01db      	lsls	r3, r3, #7
 8003638:	4013      	ands	r3, r2
 800363a:	d121      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x194>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	@ 0x80
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	4013      	ands	r3, r2
 8003646:	d119      	bne.n	800367c <HAL_ADC_ConfigChannel+0x190>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	025b      	lsls	r3, r3, #9
 8003650:	4013      	ands	r3, r2
 8003652:	d111      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x18c>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	d109      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x188>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	02db      	lsls	r3, r3, #11
 8003668:	4013      	ands	r3, r2
 800366a:	d001      	beq.n	8003670 <HAL_ADC_ConfigChannel+0x184>
 800366c:	2312      	movs	r3, #18
 800366e:	e024      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003670:	2300      	movs	r3, #0
 8003672:	e022      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003674:	2311      	movs	r3, #17
 8003676:	e020      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003678:	2310      	movs	r3, #16
 800367a:	e01e      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 800367c:	230f      	movs	r3, #15
 800367e:	e01c      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003680:	230e      	movs	r3, #14
 8003682:	e01a      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003684:	230d      	movs	r3, #13
 8003686:	e018      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003688:	230c      	movs	r3, #12
 800368a:	e016      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 800368c:	230b      	movs	r3, #11
 800368e:	e014      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003690:	230a      	movs	r3, #10
 8003692:	e012      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003694:	2309      	movs	r3, #9
 8003696:	e010      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 8003698:	2308      	movs	r3, #8
 800369a:	e00e      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 800369c:	2307      	movs	r3, #7
 800369e:	e00c      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036a0:	2306      	movs	r3, #6
 80036a2:	e00a      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036a4:	2305      	movs	r3, #5
 80036a6:	e008      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036a8:	2304      	movs	r3, #4
 80036aa:	e006      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036ac:	2303      	movs	r3, #3
 80036ae:	e004      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e002      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_ADC_ConfigChannel+0x1ce>
 80036b8:	2300      	movs	r3, #0
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6852      	ldr	r2, [r2, #4]
 80036be:	201f      	movs	r0, #31
 80036c0:	4002      	ands	r2, r0
 80036c2:	4093      	lsls	r3, r2
 80036c4:	000a      	movs	r2, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d808      	bhi.n	80036ee <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	001a      	movs	r2, r3
 80036ea:	f7ff fb99 	bl	8002e20 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	001a      	movs	r2, r3
 80036fc:	f7ff fbd4 	bl	8002ea8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db00      	blt.n	800370a <HAL_ADC_ConfigChannel+0x21e>
 8003708:	e0bc      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370a:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff fb35 	bl	8002d7c <LL_ADC_GetCommonPathInternalCh>
 8003712:	0003      	movs	r3, r0
 8003714:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4d      	ldr	r2, [pc, #308]	@ (8003850 <HAL_ADC_ConfigChannel+0x364>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d122      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003728:	d11d      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2280      	movs	r2, #128	@ 0x80
 800372e:	0412      	lsls	r2, r2, #16
 8003730:	4313      	orrs	r3, r2
 8003732:	4a46      	ldr	r2, [pc, #280]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 8003734:	0019      	movs	r1, r3
 8003736:	0010      	movs	r0, r2
 8003738:	f7ff fb0c 	bl	8002d54 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373c:	4b45      	ldr	r3, [pc, #276]	@ (8003854 <HAL_ADC_ConfigChannel+0x368>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4945      	ldr	r1, [pc, #276]	@ (8003858 <HAL_ADC_ConfigChannel+0x36c>)
 8003742:	0018      	movs	r0, r3
 8003744:	f7fc fcf8 	bl	8000138 <__udivsi3>
 8003748:	0003      	movs	r3, r0
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	0013      	movs	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	189b      	adds	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003756:	e002      	b.n	800375e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3b01      	subs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f9      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003764:	e08e      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3c      	ldr	r2, [pc, #240]	@ (800385c <HAL_ADC_ConfigChannel+0x370>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10e      	bne.n	800378e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	045b      	lsls	r3, r3, #17
 8003776:	4013      	ands	r3, r2
 8003778:	d109      	bne.n	800378e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2280      	movs	r2, #128	@ 0x80
 800377e:	0452      	lsls	r2, r2, #17
 8003780:	4313      	orrs	r3, r2
 8003782:	4a32      	ldr	r2, [pc, #200]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 8003784:	0019      	movs	r1, r3
 8003786:	0010      	movs	r0, r2
 8003788:	f7ff fae4 	bl	8002d54 <LL_ADC_SetCommonPathInternalCh>
 800378c:	e07a      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a33      	ldr	r2, [pc, #204]	@ (8003860 <HAL_ADC_ConfigChannel+0x374>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d000      	beq.n	800379a <HAL_ADC_ConfigChannel+0x2ae>
 8003798:	e074      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	03db      	lsls	r3, r3, #15
 80037a0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037a2:	d000      	beq.n	80037a6 <HAL_ADC_ConfigChannel+0x2ba>
 80037a4:	e06e      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	03d2      	lsls	r2, r2, #15
 80037ac:	4313      	orrs	r3, r2
 80037ae:	4a27      	ldr	r2, [pc, #156]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 80037b0:	0019      	movs	r1, r3
 80037b2:	0010      	movs	r0, r2
 80037b4:	f7ff face 	bl	8002d54 <LL_ADC_SetCommonPathInternalCh>
 80037b8:	e064      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d004      	beq.n	80037d0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <HAL_ADC_ConfigChannel+0x35c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d107      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0019      	movs	r1, r3
 80037da:	0010      	movs	r0, r2
 80037dc:	f7ff fb51 	bl	8002e82 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da4d      	bge.n	8003884 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e8:	4b18      	ldr	r3, [pc, #96]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7ff fac6 	bl	8002d7c <LL_ADC_GetCommonPathInternalCh>
 80037f0:	0003      	movs	r3, r0
 80037f2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <HAL_ADC_ConfigChannel+0x364>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <HAL_ADC_ConfigChannel+0x378>)
 8003802:	4013      	ands	r3, r2
 8003804:	4a11      	ldr	r2, [pc, #68]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 8003806:	0019      	movs	r1, r3
 8003808:	0010      	movs	r0, r2
 800380a:	f7ff faa3 	bl	8002d54 <LL_ADC_SetCommonPathInternalCh>
 800380e:	e039      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a11      	ldr	r2, [pc, #68]	@ (800385c <HAL_ADC_ConfigChannel+0x370>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4a12      	ldr	r2, [pc, #72]	@ (8003868 <HAL_ADC_ConfigChannel+0x37c>)
 800381e:	4013      	ands	r3, r2
 8003820:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 8003822:	0019      	movs	r1, r3
 8003824:	0010      	movs	r0, r2
 8003826:	f7ff fa95 	bl	8002d54 <LL_ADC_SetCommonPathInternalCh>
 800382a:	e02b      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0b      	ldr	r2, [pc, #44]	@ (8003860 <HAL_ADC_ConfigChannel+0x374>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d126      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <HAL_ADC_ConfigChannel+0x380>)
 800383a:	4013      	ands	r3, r2
 800383c:	4a03      	ldr	r2, [pc, #12]	@ (800384c <HAL_ADC_ConfigChannel+0x360>)
 800383e:	0019      	movs	r1, r3
 8003840:	0010      	movs	r0, r2
 8003842:	f7ff fa87 	bl	8002d54 <LL_ADC_SetCommonPathInternalCh>
 8003846:	e01d      	b.n	8003884 <HAL_ADC_ConfigChannel+0x398>
 8003848:	80000004 	.word	0x80000004
 800384c:	40012708 	.word	0x40012708
 8003850:	b0001000 	.word	0xb0001000
 8003854:	20000000 	.word	0x20000000
 8003858:	00030d40 	.word	0x00030d40
 800385c:	b8004000 	.word	0xb8004000
 8003860:	b4002000 	.word	0xb4002000
 8003864:	ff7fffff 	.word	0xff7fffff
 8003868:	feffffff 	.word	0xfeffffff
 800386c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	2220      	movs	r2, #32
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800387c:	2317      	movs	r3, #23
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2254      	movs	r2, #84	@ 0x54
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800388c:	2317      	movs	r3, #23
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b006      	add	sp, #24
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)

0800389c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fb51 	bl	8002f54 <LL_ADC_IsEnabled>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d000      	beq.n	80038b8 <ADC_Enable+0x1c>
 80038b6:	e069      	b.n	800398c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a36      	ldr	r2, [pc, #216]	@ (8003998 <ADC_Enable+0xfc>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	d00d      	beq.n	80038e0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	2210      	movs	r2, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	2201      	movs	r2, #1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e056      	b.n	800398e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff fb23 	bl	8002f30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80038ea:	4b2c      	ldr	r3, [pc, #176]	@ (800399c <ADC_Enable+0x100>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7ff fa45 	bl	8002d7c <LL_ADC_GetCommonPathInternalCh>
 80038f2:	0002      	movs	r2, r0
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	4013      	ands	r3, r2
 80038fa:	d00f      	beq.n	800391c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038fc:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <ADC_Enable+0x104>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4928      	ldr	r1, [pc, #160]	@ (80039a4 <ADC_Enable+0x108>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fc fc18 	bl	8000138 <__udivsi3>
 8003908:	0003      	movs	r3, r0
 800390a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800390c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800390e:	e002      	b.n	8003916 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3b01      	subs	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f9      	bne.n	8003910 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7e5b      	ldrb	r3, [r3, #25]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d033      	beq.n	800398c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003924:	f7ff f9e8 	bl	8002cf8 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392c:	e027      	b.n	800397e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff fb0e 	bl	8002f54 <LL_ADC_IsEnabled>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d104      	bne.n	8003946 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0018      	movs	r0, r3
 8003942:	f7ff faf5 	bl	8002f30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003946:	f7ff f9d7 	bl	8002cf8 <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d914      	bls.n	800397e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	2b01      	cmp	r3, #1
 8003960:	d00d      	beq.n	800397e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	2210      	movs	r2, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	2201      	movs	r2, #1
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e007      	b.n	800398e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	4013      	ands	r3, r2
 8003988:	2b01      	cmp	r3, #1
 800398a:	d1d0      	bne.n	800392e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b004      	add	sp, #16
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	80000017 	.word	0x80000017
 800399c:	40012708 	.word	0x40012708
 80039a0:	20000000 	.word	0x20000000
 80039a4:	00030d40 	.word	0x00030d40

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	0002      	movs	r2, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80039bc:	d828      	bhi.n	8003a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039be:	4a2f      	ldr	r2, [pc, #188]	@ (8003a7c <__NVIC_SetPriority+0xd4>)
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	33c0      	adds	r3, #192	@ 0xc0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	589b      	ldr	r3, [r3, r2]
 80039ce:	1dfa      	adds	r2, r7, #7
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	0011      	movs	r1, r2
 80039d4:	2203      	movs	r2, #3
 80039d6:	400a      	ands	r2, r1
 80039d8:	00d2      	lsls	r2, r2, #3
 80039da:	21ff      	movs	r1, #255	@ 0xff
 80039dc:	4091      	lsls	r1, r2
 80039de:	000a      	movs	r2, r1
 80039e0:	43d2      	mvns	r2, r2
 80039e2:	401a      	ands	r2, r3
 80039e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	019b      	lsls	r3, r3, #6
 80039ea:	22ff      	movs	r2, #255	@ 0xff
 80039ec:	401a      	ands	r2, r3
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	0018      	movs	r0, r3
 80039f4:	2303      	movs	r3, #3
 80039f6:	4003      	ands	r3, r0
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039fc:	481f      	ldr	r0, [pc, #124]	@ (8003a7c <__NVIC_SetPriority+0xd4>)
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	430a      	orrs	r2, r1
 8003a08:	33c0      	adds	r3, #192	@ 0xc0
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a0e:	e031      	b.n	8003a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a10:	4a1b      	ldr	r2, [pc, #108]	@ (8003a80 <__NVIC_SetPriority+0xd8>)
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	0019      	movs	r1, r3
 8003a18:	230f      	movs	r3, #15
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	3b08      	subs	r3, #8
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3306      	adds	r3, #6
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	3304      	adds	r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1dfa      	adds	r2, r7, #7
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	2203      	movs	r2, #3
 8003a32:	400a      	ands	r2, r1
 8003a34:	00d2      	lsls	r2, r2, #3
 8003a36:	21ff      	movs	r1, #255	@ 0xff
 8003a38:	4091      	lsls	r1, r2
 8003a3a:	000a      	movs	r2, r1
 8003a3c:	43d2      	mvns	r2, r2
 8003a3e:	401a      	ands	r2, r3
 8003a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	22ff      	movs	r2, #255	@ 0xff
 8003a48:	401a      	ands	r2, r3
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	2303      	movs	r3, #3
 8003a52:	4003      	ands	r3, r0
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a58:	4809      	ldr	r0, [pc, #36]	@ (8003a80 <__NVIC_SetPriority+0xd8>)
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	001c      	movs	r4, r3
 8003a60:	230f      	movs	r3, #15
 8003a62:	4023      	ands	r3, r4
 8003a64:	3b08      	subs	r3, #8
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	3306      	adds	r3, #6
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	18c3      	adds	r3, r0, r3
 8003a70:	3304      	adds	r3, #4
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1e5a      	subs	r2, r3, #1
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	045b      	lsls	r3, r3, #17
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d301      	bcc.n	8003a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e010      	b.n	8003abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <SysTick_Config+0x44>)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	425b      	negs	r3, r3
 8003aa8:	2103      	movs	r1, #3
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7ff ff7c 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <SysTick_Config+0x44>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab6:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <SysTick_Config+0x44>)
 8003ab8:	2207      	movs	r2, #7
 8003aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	e000e010 	.word	0xe000e010

08003acc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	1c02      	adds	r2, r0, #0
 8003adc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7ff ffbf 	bl	8003a84 <SysTick_Config>
 8003b06:	0003      	movs	r3, r0
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1e:	e147      	b.n	8003db0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4091      	lsls	r1, r2
 8003b2a:	000a      	movs	r2, r1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d100      	bne.n	8003b38 <HAL_GPIO_Init+0x28>
 8003b36:	e138      	b.n	8003daa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d005      	beq.n	8003b50 <HAL_GPIO_Init+0x40>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d130      	bne.n	8003bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	43da      	mvns	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	0013      	movs	r3, r2
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b86:	2201      	movs	r2, #1
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d017      	beq.n	8003bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	0013      	movs	r3, r2
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d123      	bne.n	8003c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	58d3      	ldr	r3, [r2, r3]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	409a      	lsls	r2, r3
 8003c14:	0013      	movs	r3, r2
 8003c16:	43da      	mvns	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2107      	movs	r1, #7
 8003c26:	400b      	ands	r3, r1
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	0092      	lsls	r2, r2, #2
 8003c3e:	6939      	ldr	r1, [r7, #16]
 8003c40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	43da      	mvns	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	401a      	ands	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	23c0      	movs	r3, #192	@ 0xc0
 8003c7c:	029b      	lsls	r3, r3, #10
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d100      	bne.n	8003c84 <HAL_GPIO_Init+0x174>
 8003c82:	e092      	b.n	8003daa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c84:	4a50      	ldr	r2, [pc, #320]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	589b      	ldr	r3, [r3, r2]
 8003c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2203      	movs	r2, #3
 8003c96:	4013      	ands	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	0013      	movs	r3, r2
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	23a0      	movs	r3, #160	@ 0xa0
 8003cac:	05db      	lsls	r3, r3, #23
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x1ca>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a45      	ldr	r2, [pc, #276]	@ (8003dcc <HAL_GPIO_Init+0x2bc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x1c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a44      	ldr	r2, [pc, #272]	@ (8003dd0 <HAL_GPIO_Init+0x2c0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x1c2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a43      	ldr	r2, [pc, #268]	@ (8003dd4 <HAL_GPIO_Init+0x2c4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x1be>
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x1cc>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x1cc>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x1cc>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x1cc>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	2103      	movs	r1, #3
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	00d2      	lsls	r2, r2, #3
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cec:	4936      	ldr	r1, [pc, #216]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cfa:	4b33      	ldr	r3, [pc, #204]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	2380      	movs	r3, #128	@ 0x80
 8003d10:	035b      	lsls	r3, r3, #13
 8003d12:	4013      	ands	r3, r2
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d24:	4b28      	ldr	r3, [pc, #160]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	039b      	lsls	r3, r3, #14
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d48:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003d50:	2384      	movs	r3, #132	@ 0x84
 8003d52:	58d3      	ldr	r3, [r2, r3]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43da      	mvns	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d74:	4914      	ldr	r1, [pc, #80]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003d76:	2284      	movs	r2, #132	@ 0x84
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d7c:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	58d3      	ldr	r3, [r2, r3]
 8003d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	025b      	lsls	r3, r3, #9
 8003d96:	4013      	ands	r3, r2
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003da2:	4909      	ldr	r1, [pc, #36]	@ (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3301      	adds	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	40da      	lsrs	r2, r3
 8003db8:	1e13      	subs	r3, r2, #0
 8003dba:	d000      	beq.n	8003dbe <HAL_GPIO_Init+0x2ae>
 8003dbc:	e6b0      	b.n	8003b20 <HAL_GPIO_Init+0x10>
  }
}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b006      	add	sp, #24
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	50000400 	.word	0x50000400
 8003dd0:	50000800 	.word	0x50000800
 8003dd4:	50000c00 	.word	0x50000c00

08003dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e08f      	b.n	8003f0a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2241      	movs	r2, #65	@ 0x41
 8003dee:	5c9b      	ldrb	r3, [r3, r2]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2240      	movs	r2, #64	@ 0x40
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7fe fd2f 	bl	8002864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2241      	movs	r2, #65	@ 0x41
 8003e0a:	2124      	movs	r1, #36	@ 0x24
 8003e0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	493b      	ldr	r1, [pc, #236]	@ (8003f14 <HAL_I2C_Init+0x13c>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4938      	ldr	r1, [pc, #224]	@ (8003f18 <HAL_I2C_Init+0x140>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d108      	bne.n	8003e56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2180      	movs	r1, #128	@ 0x80
 8003e4e:	0209      	lsls	r1, r1, #8
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e007      	b.n	8003e66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2184      	movs	r1, #132	@ 0x84
 8003e60:	0209      	lsls	r1, r1, #8
 8003e62:	430a      	orrs	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d109      	bne.n	8003e82 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2180      	movs	r1, #128	@ 0x80
 8003e7a:	0109      	lsls	r1, r1, #4
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	e007      	b.n	8003e92 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4923      	ldr	r1, [pc, #140]	@ (8003f1c <HAL_I2C_Init+0x144>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4920      	ldr	r1, [pc, #128]	@ (8003f20 <HAL_I2C_Init+0x148>)
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	491a      	ldr	r1, [pc, #104]	@ (8003f18 <HAL_I2C_Init+0x140>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2241      	movs	r2, #65	@ 0x41
 8003ef6:	2120      	movs	r1, #32
 8003ef8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2242      	movs	r2, #66	@ 0x42
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	f0ffffff 	.word	0xf0ffffff
 8003f18:	ffff7fff 	.word	0xffff7fff
 8003f1c:	fffff7ff 	.word	0xfffff7ff
 8003f20:	02008000 	.word	0x02008000

08003f24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b089      	sub	sp, #36	@ 0x24
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	000c      	movs	r4, r1
 8003f2e:	0010      	movs	r0, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	230a      	movs	r3, #10
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	1c22      	adds	r2, r4, #0
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	1c02      	adds	r2, r0, #0
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	1dbb      	adds	r3, r7, #6
 8003f44:	1c0a      	adds	r2, r1, #0
 8003f46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2241      	movs	r2, #65	@ 0x41
 8003f4c:	5c9b      	ldrb	r3, [r3, r2]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d000      	beq.n	8003f56 <HAL_I2C_Mem_Write+0x32>
 8003f54:	e10c      	b.n	8004170 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_I2C_Mem_Write+0x42>
 8003f5c:	232c      	movs	r3, #44	@ 0x2c
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2280      	movs	r2, #128	@ 0x80
 8003f6a:	0092      	lsls	r2, r2, #2
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0ff      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	5c9b      	ldrb	r3, [r3, r2]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2C_Mem_Write+0x5c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0f8      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	2101      	movs	r1, #1
 8003f86:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f88:	f7fe feb6 	bl	8002cf8 <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	0219      	lsls	r1, r3, #8
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2319      	movs	r3, #25
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f000 f975 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0e3      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2241      	movs	r2, #65	@ 0x41
 8003fae:	2121      	movs	r1, #33	@ 0x21
 8003fb0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2242      	movs	r2, #66	@ 0x42
 8003fb6:	2140      	movs	r1, #64	@ 0x40
 8003fb8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	222c      	movs	r2, #44	@ 0x2c
 8003fca:	18ba      	adds	r2, r7, r2
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd6:	1dbb      	adds	r3, r7, #6
 8003fd8:	881c      	ldrh	r4, [r3, #0]
 8003fda:	2308      	movs	r3, #8
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	8819      	ldrh	r1, [r3, #0]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	0023      	movs	r3, r4
 8003ff2:	f000 f8c5 	bl	8004180 <I2C_RequestMemoryWrite>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2240      	movs	r2, #64	@ 0x40
 8003ffe:	2100      	movs	r1, #0
 8004000:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0b5      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2bff      	cmp	r3, #255	@ 0xff
 800400e:	d911      	bls.n	8004034 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	22ff      	movs	r2, #255	@ 0xff
 8004014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	b2da      	uxtb	r2, r3
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	045c      	lsls	r4, r3, #17
 8004020:	230a      	movs	r3, #10
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	8819      	ldrh	r1, [r3, #0]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	0023      	movs	r3, r4
 800402e:	f000 fb07 	bl	8004640 <I2C_TransferConfig>
 8004032:	e012      	b.n	800405a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004042:	b2da      	uxtb	r2, r3
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	049c      	lsls	r4, r3, #18
 8004048:	230a      	movs	r3, #10
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	8819      	ldrh	r1, [r3, #0]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	2300      	movs	r3, #0
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	0023      	movs	r3, r4
 8004056:	f000 faf3 	bl	8004640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0018      	movs	r0, r3
 8004062:	f000 f96b 	bl	800433c <I2C_WaitOnTXISFlagUntilTimeout>
 8004066:	1e03      	subs	r3, r0, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e081      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	781a      	ldrb	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d03a      	beq.n	800411e <HAL_I2C_Mem_Write+0x1fa>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d136      	bne.n	800411e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	0013      	movs	r3, r2
 80040ba:	2200      	movs	r2, #0
 80040bc:	2180      	movs	r1, #128	@ 0x80
 80040be:	f000 f8e5 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 80040c2:	1e03      	subs	r3, r0, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e053      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2bff      	cmp	r3, #255	@ 0xff
 80040d2:	d911      	bls.n	80040f8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	045c      	lsls	r4, r3, #17
 80040e4:	230a      	movs	r3, #10
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	8819      	ldrh	r1, [r3, #0]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	0023      	movs	r3, r4
 80040f2:	f000 faa5 	bl	8004640 <I2C_TransferConfig>
 80040f6:	e012      	b.n	800411e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004106:	b2da      	uxtb	r2, r3
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	049c      	lsls	r4, r3, #18
 800410c:	230a      	movs	r3, #10
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	8819      	ldrh	r1, [r3, #0]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	2300      	movs	r3, #0
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	0023      	movs	r3, r4
 800411a:	f000 fa91 	bl	8004640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d198      	bne.n	800405a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f94a 	bl	80043c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004134:	1e03      	subs	r3, r0, #0
 8004136:	d001      	beq.n	800413c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e01a      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2220      	movs	r2, #32
 8004142:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	490b      	ldr	r1, [pc, #44]	@ (800417c <HAL_I2C_Mem_Write+0x258>)
 8004150:	400a      	ands	r2, r1
 8004152:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2241      	movs	r2, #65	@ 0x41
 8004158:	2120      	movs	r1, #32
 800415a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2242      	movs	r2, #66	@ 0x42
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2240      	movs	r2, #64	@ 0x40
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b007      	add	sp, #28
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	000c      	movs	r4, r1
 800418a:	0010      	movs	r0, r2
 800418c:	0019      	movs	r1, r3
 800418e:	250a      	movs	r5, #10
 8004190:	197b      	adds	r3, r7, r5
 8004192:	1c22      	adds	r2, r4, #0
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	2308      	movs	r3, #8
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	1c02      	adds	r2, r0, #0
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	1dbb      	adds	r3, r7, #6
 80041a0:	1c0a      	adds	r2, r1, #0
 80041a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	045c      	lsls	r4, r3, #17
 80041ae:	197b      	adds	r3, r7, r5
 80041b0:	8819      	ldrh	r1, [r3, #0]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <I2C_RequestMemoryWrite+0xc4>)
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	0023      	movs	r3, r4
 80041ba:	f000 fa41 	bl	8004640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 f8b9 	bl	800433c <I2C_WaitOnTXISFlagUntilTimeout>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e033      	b.n	800423a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041d2:	1dbb      	adds	r3, r7, #6
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041da:	2308      	movs	r3, #8
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041e8:	e019      	b.n	800421e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041ea:	2308      	movs	r3, #8
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fe:	6a39      	ldr	r1, [r7, #32]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	0018      	movs	r0, r3
 8004204:	f000 f89a 	bl	800433c <I2C_WaitOnTXISFlagUntilTimeout>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d001      	beq.n	8004210 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e014      	b.n	800423a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004210:	2308      	movs	r3, #8
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	0013      	movs	r3, r2
 8004228:	2200      	movs	r2, #0
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	f000 f82e 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b004      	add	sp, #16
 8004240:	bdb0      	pop	{r4, r5, r7, pc}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	80002000 	.word	0x80002000

08004248 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2202      	movs	r2, #2
 8004258:	4013      	ands	r3, r2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d103      	bne.n	8004266 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2201      	movs	r2, #1
 800426e:	4013      	ands	r3, r2
 8004270:	2b01      	cmp	r3, #1
 8004272:	d007      	beq.n	8004284 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2101      	movs	r1, #1
 8004280:	430a      	orrs	r2, r1
 8004282:	619a      	str	r2, [r3, #24]
  }
}
 8004284:	46c0      	nop			@ (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429c:	e03a      	b.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f000 f8d3 	bl	8004450 <I2C_IsErrorOccurred>
 80042aa:	1e03      	subs	r3, r0, #0
 80042ac:	d001      	beq.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e040      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	d02d      	beq.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fe fd1e 	bl	8002cf8 <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x42>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d122      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	425a      	negs	r2, r3
 80042de:	4153      	adcs	r3, r2
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	001a      	movs	r2, r3
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d113      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f0:	2220      	movs	r2, #32
 80042f2:	431a      	orrs	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2241      	movs	r2, #65	@ 0x41
 80042fc:	2120      	movs	r1, #32
 80042fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2242      	movs	r2, #66	@ 0x42
 8004304:	2100      	movs	r1, #0
 8004306:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2240      	movs	r2, #64	@ 0x40
 800430c:	2100      	movs	r1, #0
 800430e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e00f      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	425a      	negs	r2, r3
 8004324:	4153      	adcs	r3, r2
 8004326:	b2db      	uxtb	r3, r3
 8004328:	001a      	movs	r2, r3
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d0b5      	beq.n	800429e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b004      	add	sp, #16
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004348:	e032      	b.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f87d 	bl	8004450 <I2C_IsErrorOccurred>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e030      	b.n	80043c0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	d025      	beq.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fe fcc8 	bl	8002cf8 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11a      	bne.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2202      	movs	r2, #2
 8004382:	4013      	ands	r3, r2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d013      	beq.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438c:	2220      	movs	r2, #32
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2241      	movs	r2, #65	@ 0x41
 8004398:	2120      	movs	r1, #32
 800439a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2242      	movs	r2, #66	@ 0x42
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2240      	movs	r2, #64	@ 0x40
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e007      	b.n	80043c0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d1c5      	bne.n	800434a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b004      	add	sp, #16
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d4:	e02f      	b.n	8004436 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f837 	bl	8004450 <I2C_IsErrorOccurred>
 80043e2:	1e03      	subs	r3, r0, #0
 80043e4:	d001      	beq.n	80043ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e02d      	b.n	8004446 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fe fc85 	bl	8002cf8 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11a      	bne.n	8004436 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2220      	movs	r2, #32
 8004408:	4013      	ands	r3, r2
 800440a:	2b20      	cmp	r3, #32
 800440c:	d013      	beq.n	8004436 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	2220      	movs	r2, #32
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2241      	movs	r2, #65	@ 0x41
 800441e:	2120      	movs	r1, #32
 8004420:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2242      	movs	r2, #66	@ 0x42
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2240      	movs	r2, #64	@ 0x40
 800442e:	2100      	movs	r1, #0
 8004430:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e007      	b.n	8004446 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2220      	movs	r2, #32
 800443e:	4013      	ands	r3, r2
 8004440:	2b20      	cmp	r3, #32
 8004442:	d1c8      	bne.n	80043d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2327      	movs	r3, #39	@ 0x27
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2210      	movs	r2, #16
 8004478:	4013      	ands	r3, r2
 800447a:	d100      	bne.n	800447e <I2C_IsErrorOccurred+0x2e>
 800447c:	e079      	b.n	8004572 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004486:	e057      	b.n	8004538 <I2C_IsErrorOccurred+0xe8>
 8004488:	2227      	movs	r2, #39	@ 0x27
 800448a:	18bb      	adds	r3, r7, r2
 800448c:	18ba      	adds	r2, r7, r2
 800448e:	7812      	ldrb	r2, [r2, #0]
 8004490:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	d04f      	beq.n	8004538 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fe fc2e 	bl	8002cf8 <HAL_GetTick>
 800449c:	0002      	movs	r2, r0
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <I2C_IsErrorOccurred+0x5e>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d144      	bne.n	8004538 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	01db      	lsls	r3, r3, #7
 80044b8:	4013      	ands	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044bc:	2013      	movs	r0, #19
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	2142      	movs	r1, #66	@ 0x42
 80044c4:	5c52      	ldrb	r2, [r2, r1]
 80044c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	2380      	movs	r3, #128	@ 0x80
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	401a      	ands	r2, r3
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	429a      	cmp	r2, r3
 80044da:	d126      	bne.n	800452a <I2C_IsErrorOccurred+0xda>
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	2380      	movs	r3, #128	@ 0x80
 80044e0:	01db      	lsls	r3, r3, #7
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d021      	beq.n	800452a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d01d      	beq.n	800452a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2180      	movs	r1, #128	@ 0x80
 80044fa:	01c9      	lsls	r1, r1, #7
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004500:	f7fe fbfa 	bl	8002cf8 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004508:	e00f      	b.n	800452a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800450a:	f7fe fbf5 	bl	8002cf8 <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b19      	cmp	r3, #25
 8004516:	d908      	bls.n	800452a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2220      	movs	r2, #32
 800451c:	4313      	orrs	r3, r2
 800451e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004520:	2327      	movs	r3, #39	@ 0x27
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]

              break;
 8004528:	e006      	b.n	8004538 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2220      	movs	r2, #32
 8004532:	4013      	ands	r3, r2
 8004534:	2b20      	cmp	r3, #32
 8004536:	d1e8      	bne.n	800450a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2220      	movs	r2, #32
 8004540:	4013      	ands	r3, r2
 8004542:	2b20      	cmp	r3, #32
 8004544:	d004      	beq.n	8004550 <I2C_IsErrorOccurred+0x100>
 8004546:	2327      	movs	r3, #39	@ 0x27
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d09b      	beq.n	8004488 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004550:	2327      	movs	r3, #39	@ 0x27
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2220      	movs	r2, #32
 8004560:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2204      	movs	r2, #4
 8004566:	4313      	orrs	r3, r2
 8004568:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800456a:	2327      	movs	r3, #39	@ 0x27
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	2380      	movs	r3, #128	@ 0x80
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4013      	ands	r3, r2
 8004582:	d00c      	beq.n	800459e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2201      	movs	r2, #1
 8004588:	4313      	orrs	r3, r2
 800458a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2280      	movs	r2, #128	@ 0x80
 8004592:	0052      	lsls	r2, r2, #1
 8004594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004596:	2327      	movs	r3, #39	@ 0x27
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4013      	ands	r3, r2
 80045a6:	d00c      	beq.n	80045c2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2208      	movs	r2, #8
 80045ac:	4313      	orrs	r3, r2
 80045ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2280      	movs	r2, #128	@ 0x80
 80045b6:	00d2      	lsls	r2, r2, #3
 80045b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ba:	2327      	movs	r3, #39	@ 0x27
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4013      	ands	r3, r2
 80045ca:	d00c      	beq.n	80045e6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2202      	movs	r2, #2
 80045d0:	4313      	orrs	r3, r2
 80045d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2280      	movs	r2, #128	@ 0x80
 80045da:	0092      	lsls	r2, r2, #2
 80045dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045de:	2327      	movs	r3, #39	@ 0x27
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80045e6:	2327      	movs	r3, #39	@ 0x27
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01d      	beq.n	800462c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7ff fe28 	bl	8004248 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	490e      	ldr	r1, [pc, #56]	@ (800463c <I2C_IsErrorOccurred+0x1ec>)
 8004604:	400a      	ands	r2, r1
 8004606:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	431a      	orrs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2241      	movs	r2, #65	@ 0x41
 8004618:	2120      	movs	r1, #32
 800461a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2242      	movs	r2, #66	@ 0x42
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2240      	movs	r2, #64	@ 0x40
 8004628:	2100      	movs	r1, #0
 800462a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800462c:	2327      	movs	r3, #39	@ 0x27
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	781b      	ldrb	r3, [r3, #0]
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b00a      	add	sp, #40	@ 0x28
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	0008      	movs	r0, r1
 800464a:	0011      	movs	r1, r2
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	240a      	movs	r4, #10
 8004650:	193b      	adds	r3, r7, r4
 8004652:	1c02      	adds	r2, r0, #0
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	2009      	movs	r0, #9
 8004658:	183b      	adds	r3, r7, r0
 800465a:	1c0a      	adds	r2, r1, #0
 800465c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800465e:	193b      	adds	r3, r7, r4
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	059b      	lsls	r3, r3, #22
 8004664:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004666:	183b      	adds	r3, r7, r0
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	0419      	lsls	r1, r3, #16
 800466c:	23ff      	movs	r3, #255	@ 0xff
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004672:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	4313      	orrs	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800468a:	0d51      	lsrs	r1, r2, #21
 800468c:	2280      	movs	r2, #128	@ 0x80
 800468e:	00d2      	lsls	r2, r2, #3
 8004690:	400a      	ands	r2, r1
 8004692:	4907      	ldr	r1, [pc, #28]	@ (80046b0 <I2C_TransferConfig+0x70>)
 8004694:	430a      	orrs	r2, r1
 8004696:	43d2      	mvns	r2, r2
 8004698:	401a      	ands	r2, r3
 800469a:	0011      	movs	r1, r2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b007      	add	sp, #28
 80046ac:	bd90      	pop	{r4, r7, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	03ff63ff 	.word	0x03ff63ff

080046b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2241      	movs	r2, #65	@ 0x41
 80046c2:	5c9b      	ldrb	r3, [r3, r2]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d138      	bne.n	800473c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2240      	movs	r2, #64	@ 0x40
 80046ce:	5c9b      	ldrb	r3, [r3, r2]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e032      	b.n	800473e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2240      	movs	r2, #64	@ 0x40
 80046dc:	2101      	movs	r1, #1
 80046de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2241      	movs	r2, #65	@ 0x41
 80046e4:	2124      	movs	r1, #36	@ 0x24
 80046e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2101      	movs	r1, #1
 80046f4:	438a      	bics	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4911      	ldr	r1, [pc, #68]	@ (8004748 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2101      	movs	r1, #1
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2241      	movs	r2, #65	@ 0x41
 800472c:	2120      	movs	r1, #32
 800472e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2240      	movs	r2, #64	@ 0x40
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	ffffefff 	.word	0xffffefff

0800474c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2241      	movs	r2, #65	@ 0x41
 800475a:	5c9b      	ldrb	r3, [r3, r2]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b20      	cmp	r3, #32
 8004760:	d139      	bne.n	80047d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2240      	movs	r2, #64	@ 0x40
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800476c:	2302      	movs	r3, #2
 800476e:	e033      	b.n	80047d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2240      	movs	r2, #64	@ 0x40
 8004774:	2101      	movs	r1, #1
 8004776:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2241      	movs	r2, #65	@ 0x41
 800477c:	2124      	movs	r1, #36	@ 0x24
 800477e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2101      	movs	r1, #1
 800478c:	438a      	bics	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a11      	ldr	r2, [pc, #68]	@ (80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2241      	movs	r2, #65	@ 0x41
 80047c6:	2120      	movs	r1, #32
 80047c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2240      	movs	r2, #64	@ 0x40
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b004      	add	sp, #16
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	fffff0ff 	.word	0xfffff0ff

080047e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80047ec:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	0019      	movs	r1, r3
 80047f6:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	429a      	cmp	r2, r3
 8004806:	d11f      	bne.n	8004848 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004808:	4b14      	ldr	r3, [pc, #80]	@ (800485c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	0013      	movs	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	189b      	adds	r3, r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4912      	ldr	r1, [pc, #72]	@ (8004860 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004816:	0018      	movs	r0, r3
 8004818:	f7fb fc8e 	bl	8000138 <__udivsi3>
 800481c:	0003      	movs	r3, r0
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004822:	e008      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b01      	subs	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e001      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e009      	b.n	800484a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004836:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	2380      	movs	r3, #128	@ 0x80
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	401a      	ands	r2, r3
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	429a      	cmp	r2, r3
 8004846:	d0ed      	beq.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	40007000 	.word	0x40007000
 8004858:	fffff9ff 	.word	0xfffff9ff
 800485c:	20000000 	.word	0x20000000
 8004860:	000f4240 	.word	0x000f4240

08004864 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004868:	4b03      	ldr	r3, [pc, #12]	@ (8004878 <LL_RCC_GetAPB1Prescaler+0x14>)
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	23e0      	movs	r3, #224	@ 0xe0
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4013      	ands	r3, r2
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e2f3      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d100      	bne.n	800489a <HAL_RCC_OscConfig+0x1e>
 8004898:	e07c      	b.n	8004994 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	4bc3      	ldr	r3, [pc, #780]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2238      	movs	r2, #56	@ 0x38
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a4:	4bc0      	ldr	r3, [pc, #768]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2203      	movs	r2, #3
 80048aa:	4013      	ands	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_OscConfig+0x3e>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d10b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	4bb9      	ldr	r3, [pc, #740]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	4013      	ands	r3, r2
 80048ca:	d062      	beq.n	8004992 <HAL_RCC_OscConfig+0x116>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d15e      	bne.n	8004992 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e2ce      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	025b      	lsls	r3, r3, #9
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_OscConfig+0x78>
 80048e4:	4bb0      	ldr	r3, [pc, #704]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4baf      	ldr	r3, [pc, #700]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80048ea:	2180      	movs	r1, #128	@ 0x80
 80048ec:	0249      	lsls	r1, r1, #9
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e020      	b.n	8004936 <HAL_RCC_OscConfig+0xba>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	23a0      	movs	r3, #160	@ 0xa0
 80048fa:	02db      	lsls	r3, r3, #11
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d10e      	bne.n	800491e <HAL_RCC_OscConfig+0xa2>
 8004900:	4ba9      	ldr	r3, [pc, #676]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4ba8      	ldr	r3, [pc, #672]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	02c9      	lsls	r1, r1, #11
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	4ba6      	ldr	r3, [pc, #664]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4ba5      	ldr	r3, [pc, #660]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004914:	2180      	movs	r1, #128	@ 0x80
 8004916:	0249      	lsls	r1, r1, #9
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e00b      	b.n	8004936 <HAL_RCC_OscConfig+0xba>
 800491e:	4ba2      	ldr	r3, [pc, #648]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4ba1      	ldr	r3, [pc, #644]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004924:	49a1      	ldr	r1, [pc, #644]	@ (8004bac <HAL_RCC_OscConfig+0x330>)
 8004926:	400a      	ands	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004930:	499f      	ldr	r1, [pc, #636]	@ (8004bb0 <HAL_RCC_OscConfig+0x334>)
 8004932:	400a      	ands	r2, r1
 8004934:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fe f9db 	bl	8002cf8 <HAL_GetTick>
 8004942:	0003      	movs	r3, r0
 8004944:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004948:	f7fe f9d6 	bl	8002cf8 <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	@ 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e28d      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800495a:	4b93      	ldr	r3, [pc, #588]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	@ 0x80
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	4013      	ands	r3, r2
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0xcc>
 8004966:	e015      	b.n	8004994 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe f9c6 	bl	8002cf8 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004972:	f7fe f9c1 	bl	8002cf8 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	@ 0x64
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e278      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004984:	4b88      	ldr	r3, [pc, #544]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	4013      	ands	r3, r2
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0xf6>
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004992:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2202      	movs	r2, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d100      	bne.n	80049a0 <HAL_RCC_OscConfig+0x124>
 800499e:	e099      	b.n	8004ad4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a0:	4b81      	ldr	r3, [pc, #516]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2238      	movs	r2, #56	@ 0x38
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049aa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2203      	movs	r2, #3
 80049b0:	4013      	ands	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d102      	bne.n	80049c0 <HAL_RCC_OscConfig+0x144>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d002      	beq.n	80049c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d135      	bne.n	8004a32 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c6:	4b78      	ldr	r3, [pc, #480]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4013      	ands	r3, r2
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x162>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e24b      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b72      	ldr	r3, [pc, #456]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a74      	ldr	r2, [pc, #464]	@ (8004bb4 <HAL_RCC_OscConfig+0x338>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	4b6e      	ldr	r3, [pc, #440]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d112      	bne.n	8004a20 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049fa:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6e      	ldr	r2, [pc, #440]	@ (8004bb8 <HAL_RCC_OscConfig+0x33c>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	4b67      	ldr	r3, [pc, #412]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a0e:	4b66      	ldr	r3, [pc, #408]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	0adb      	lsrs	r3, r3, #11
 8004a14:	2207      	movs	r2, #7
 8004a16:	4013      	ands	r3, r2
 8004a18:	4a68      	ldr	r2, [pc, #416]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a1a:	40da      	lsrs	r2, r3
 8004a1c:	4b68      	ldr	r3, [pc, #416]	@ (8004bc0 <HAL_RCC_OscConfig+0x344>)
 8004a1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a20:	4b68      	ldr	r3, [pc, #416]	@ (8004bc4 <HAL_RCC_OscConfig+0x348>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fe f90b 	bl	8002c40 <HAL_InitTick>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d051      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e221      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d030      	beq.n	8004a9c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb8 <HAL_RCC_OscConfig+0x33c>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	4b57      	ldr	r3, [pc, #348]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a4e:	4b56      	ldr	r3, [pc, #344]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b55      	ldr	r3, [pc, #340]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a54:	2180      	movs	r1, #128	@ 0x80
 8004a56:	0049      	lsls	r1, r1, #1
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fe f94c 	bl	8002cf8 <HAL_GetTick>
 8004a60:	0003      	movs	r3, r0
 8004a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a66:	f7fe f947 	bl	8002cf8 <HAL_GetTick>
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e1fe      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b48      	ldr	r3, [pc, #288]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb4 <HAL_RCC_OscConfig+0x338>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	4b44      	ldr	r3, [pc, #272]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	e01b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004a9c:	4b42      	ldr	r3, [pc, #264]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004aa2:	4949      	ldr	r1, [pc, #292]	@ (8004bc8 <HAL_RCC_OscConfig+0x34c>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fe f926 	bl	8002cf8 <HAL_GetTick>
 8004aac:	0003      	movs	r3, r0
 8004aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab2:	f7fe f921 	bl	8002cf8 <HAL_GetTick>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e1d8      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ac4:	4b38      	ldr	r3, [pc, #224]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4013      	ands	r3, r2
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x236>
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2208      	movs	r2, #8
 8004ada:	4013      	ands	r3, r2
 8004adc:	d047      	beq.n	8004b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ade:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2238      	movs	r2, #56	@ 0x38
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b18      	cmp	r3, #24
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004aea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d03c      	beq.n	8004b6e <HAL_RCC_OscConfig+0x2f2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d138      	bne.n	8004b6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e1ba      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d019      	beq.n	8004b3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b08:	4b27      	ldr	r3, [pc, #156]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b0c:	4b26      	ldr	r3, [pc, #152]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b0e:	2101      	movs	r1, #1
 8004b10:	430a      	orrs	r2, r1
 8004b12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fe f8f0 	bl	8002cf8 <HAL_GetTick>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fe f8eb 	bl	8002cf8 <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e1a2      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b34:	2202      	movs	r2, #2
 8004b36:	4013      	ands	r3, r2
 8004b38:	d0f1      	beq.n	8004b1e <HAL_RCC_OscConfig+0x2a2>
 8004b3a:	e018      	b.n	8004b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b40:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	2101      	movs	r1, #1
 8004b44:	438a      	bics	r2, r1
 8004b46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe f8d6 	bl	8002cf8 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fe f8d1 	bl	8002cf8 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e188      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b64:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b68:	2202      	movs	r2, #2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d1f1      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2204      	movs	r2, #4
 8004b74:	4013      	ands	r3, r2
 8004b76:	d100      	bne.n	8004b7a <HAL_RCC_OscConfig+0x2fe>
 8004b78:	e0c6      	b.n	8004d08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7a:	231f      	movs	r3, #31
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b82:	4b09      	ldr	r3, [pc, #36]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2238      	movs	r2, #56	@ 0x38
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d11e      	bne.n	8004bcc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RCC_OscConfig+0x32c>)
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	2202      	movs	r2, #2
 8004b94:	4013      	ands	r3, r2
 8004b96:	d100      	bne.n	8004b9a <HAL_RCC_OscConfig+0x31e>
 8004b98:	e0b6      	b.n	8004d08 <HAL_RCC_OscConfig+0x48c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d000      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x328>
 8004ba2:	e0b1      	b.n	8004d08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e166      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	fffeffff 	.word	0xfffeffff
 8004bb0:	fffbffff 	.word	0xfffbffff
 8004bb4:	ffff80ff 	.word	0xffff80ff
 8004bb8:	ffffc7ff 	.word	0xffffc7ff
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	20000000 	.word	0x20000000
 8004bc4:	20000004 	.word	0x20000004
 8004bc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bcc:	4bac      	ldr	r3, [pc, #688]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd0:	2380      	movs	r3, #128	@ 0x80
 8004bd2:	055b      	lsls	r3, r3, #21
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_OscConfig+0x360>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x362>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004be2:	4ba7      	ldr	r3, [pc, #668]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be6:	4ba6      	ldr	r3, [pc, #664]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004be8:	2180      	movs	r1, #128	@ 0x80
 8004bea:	0549      	lsls	r1, r1, #21
 8004bec:	430a      	orrs	r2, r1
 8004bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004bf0:	4ba3      	ldr	r3, [pc, #652]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf4:	2380      	movs	r3, #128	@ 0x80
 8004bf6:	055b      	lsls	r3, r3, #21
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004bfe:	231f      	movs	r3, #31
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c06:	4b9f      	ldr	r3, [pc, #636]	@ (8004e84 <HAL_RCC_OscConfig+0x608>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d11a      	bne.n	8004c48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c12:	4b9c      	ldr	r3, [pc, #624]	@ (8004e84 <HAL_RCC_OscConfig+0x608>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b9b      	ldr	r3, [pc, #620]	@ (8004e84 <HAL_RCC_OscConfig+0x608>)
 8004c18:	2180      	movs	r1, #128	@ 0x80
 8004c1a:	0049      	lsls	r1, r1, #1
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004c20:	f7fe f86a 	bl	8002cf8 <HAL_GetTick>
 8004c24:	0003      	movs	r3, r0
 8004c26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fe f865 	bl	8002cf8 <HAL_GetTick>
 8004c2e:	0002      	movs	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e11c      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3c:	4b91      	ldr	r3, [pc, #580]	@ (8004e84 <HAL_RCC_OscConfig+0x608>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3e2>
 8004c50:	4b8b      	ldr	r3, [pc, #556]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c54:	4b8a      	ldr	r3, [pc, #552]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c56:	2101      	movs	r1, #1
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x41c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x404>
 8004c66:	4b86      	ldr	r3, [pc, #536]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c6a:	4b85      	ldr	r3, [pc, #532]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c72:	4b83      	ldr	r3, [pc, #524]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c76:	4b82      	ldr	r3, [pc, #520]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c78:	2101      	movs	r1, #1
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x41c>
 8004c80:	4b7f      	ldr	r3, [pc, #508]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c84:	4b7e      	ldr	r3, [pc, #504]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c86:	2101      	movs	r1, #1
 8004c88:	438a      	bics	r2, r1
 8004c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c90:	4b7b      	ldr	r3, [pc, #492]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004c92:	2104      	movs	r1, #4
 8004c94:	438a      	bics	r2, r1
 8004c96:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d014      	beq.n	8004cca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fe f82a 	bl	8002cf8 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca8:	e009      	b.n	8004cbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004caa:	f7fe f825 	bl	8002cf8 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	4a74      	ldr	r2, [pc, #464]	@ (8004e88 <HAL_RCC_OscConfig+0x60c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0db      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbe:	4b70      	ldr	r3, [pc, #448]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x42e>
 8004cc8:	e013      	b.n	8004cf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe f815 	bl	8002cf8 <HAL_GetTick>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd2:	e009      	b.n	8004ce8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fe f810 	bl	8002cf8 <HAL_GetTick>
 8004cd8:	0002      	movs	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	4a6a      	ldr	r2, [pc, #424]	@ (8004e88 <HAL_RCC_OscConfig+0x60c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0c6      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce8:	4b65      	ldr	r3, [pc, #404]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cec:	2202      	movs	r2, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004cfc:	4b60      	ldr	r3, [pc, #384]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d00:	4b5f      	ldr	r3, [pc, #380]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d02:	4962      	ldr	r1, [pc, #392]	@ (8004e8c <HAL_RCC_OscConfig+0x610>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d100      	bne.n	8004d12 <HAL_RCC_OscConfig+0x496>
 8004d10:	e0b0      	b.n	8004e74 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d12:	4b5b      	ldr	r3, [pc, #364]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2238      	movs	r2, #56	@ 0x38
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d100      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4a4>
 8004d1e:	e078      	b.n	8004e12 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d153      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b55      	ldr	r3, [pc, #340]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b54      	ldr	r3, [pc, #336]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d2e:	4958      	ldr	r1, [pc, #352]	@ (8004e90 <HAL_RCC_OscConfig+0x614>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd ffe0 	bl	8002cf8 <HAL_GetTick>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3e:	f7fd ffdb 	bl	8002cf8 <HAL_GetTick>
 8004d42:	0002      	movs	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e092      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d50:	4b4b      	ldr	r3, [pc, #300]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	049b      	lsls	r3, r3, #18
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d1f0      	bne.n	8004d3e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d5c:	4b48      	ldr	r3, [pc, #288]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a4c      	ldr	r2, [pc, #304]	@ (8004e94 <HAL_RCC_OscConfig+0x618>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	431a      	orrs	r2, r3
 8004d84:	4b3e      	ldr	r3, [pc, #248]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d86:	430a      	orrs	r2, r1
 8004d88:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d90:	2180      	movs	r1, #128	@ 0x80
 8004d92:	0449      	lsls	r1, r1, #17
 8004d94:	430a      	orrs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d98:	4b39      	ldr	r3, [pc, #228]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	4b38      	ldr	r3, [pc, #224]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004d9e:	2180      	movs	r1, #128	@ 0x80
 8004da0:	0549      	lsls	r1, r1, #21
 8004da2:	430a      	orrs	r2, r1
 8004da4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fd ffa7 	bl	8002cf8 <HAL_GetTick>
 8004daa:	0003      	movs	r3, r0
 8004dac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fd ffa2 	bl	8002cf8 <HAL_GetTick>
 8004db4:	0002      	movs	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e059      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	049b      	lsls	r3, r3, #18
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x534>
 8004dce:	e051      	b.n	8004e74 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004dd6:	492e      	ldr	r1, [pc, #184]	@ (8004e90 <HAL_RCC_OscConfig+0x614>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fd ff8c 	bl	8002cf8 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fd ff87 	bl	8002cf8 <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e03e      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df8:	4b21      	ldr	r3, [pc, #132]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	049b      	lsls	r3, r3, #18
 8004e00:	4013      	ands	r3, r2
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004e04:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004e0a:	4923      	ldr	r1, [pc, #140]	@ (8004e98 <HAL_RCC_OscConfig+0x61c>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	e030      	b.n	8004e74 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e02b      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	@ (8004e80 <HAL_RCC_OscConfig+0x604>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2203      	movs	r2, #3
 8004e28:	401a      	ands	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d11e      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2270      	movs	r2, #112	@ 0x70
 8004e36:	401a      	ands	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d117      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	23fe      	movs	r3, #254	@ 0xfe
 8004e44:	01db      	lsls	r3, r3, #7
 8004e46:	401a      	ands	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d10e      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	23f8      	movs	r3, #248	@ 0xf8
 8004e56:	039b      	lsls	r3, r3, #14
 8004e58:	401a      	ands	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	0f5b      	lsrs	r3, r3, #29
 8004e66:	075a      	lsls	r2, r3, #29
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	0018      	movs	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b008      	add	sp, #32
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40007000 	.word	0x40007000
 8004e88:	00001388 	.word	0x00001388
 8004e8c:	efffffff 	.word	0xefffffff
 8004e90:	feffffff 	.word	0xfeffffff
 8004e94:	1fc1808c 	.word	0x1fc1808c
 8004e98:	effefffc 	.word	0xeffefffc

08004e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0e9      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b76      	ldr	r3, [pc, #472]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d91e      	bls.n	8004efc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b73      	ldr	r3, [pc, #460]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2207      	movs	r2, #7
 8004ec4:	4393      	bics	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	4b70      	ldr	r3, [pc, #448]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ed0:	f7fd ff12 	bl	8002cf8 <HAL_GetTick>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ed8:	e009      	b.n	8004eee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eda:	f7fd ff0d 	bl	8002cf8 <HAL_GetTick>
 8004ede:	0002      	movs	r2, r0
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8005090 <HAL_RCC_ClockConfig+0x1f4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e0ca      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004eee:	4b67      	ldr	r3, [pc, #412]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1ee      	bne.n	8004eda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2202      	movs	r2, #2
 8004f02:	4013      	ands	r3, r2
 8004f04:	d015      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d006      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f10:	4b60      	ldr	r3, [pc, #384]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b5f      	ldr	r3, [pc, #380]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f16:	21e0      	movs	r1, #224	@ 0xe0
 8004f18:	01c9      	lsls	r1, r1, #7
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4a5d      	ldr	r2, [pc, #372]	@ (8005098 <HAL_RCC_ClockConfig+0x1fc>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	4b59      	ldr	r3, [pc, #356]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d057      	beq.n	8004fec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f44:	4b53      	ldr	r3, [pc, #332]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2380      	movs	r3, #128	@ 0x80
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d12b      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e097      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d107      	bne.n	8004f6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	049b      	lsls	r3, r3, #18
 8004f64:	4013      	ands	r3, r2
 8004f66:	d11f      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e08b      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f74:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	2380      	movs	r3, #128	@ 0x80
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d113      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e07f      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d106      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f8c:	4b41      	ldr	r3, [pc, #260]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f90:	2202      	movs	r2, #2
 8004f92:	4013      	ands	r3, r2
 8004f94:	d108      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e074      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e06d      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2207      	movs	r2, #7
 8004fae:	4393      	bics	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fe9c 	bl	8002cf8 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc4:	e009      	b.n	8004fda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc6:	f7fd fe97 	bl	8002cf8 <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <HAL_RCC_ClockConfig+0x1f4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e054      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b2e      	ldr	r3, [pc, #184]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2238      	movs	r2, #56	@ 0x38
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1ec      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b27      	ldr	r3, [pc, #156]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d21e      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b24      	ldr	r3, [pc, #144]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2207      	movs	r2, #7
 8005000:	4393      	bics	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	4b21      	ldr	r3, [pc, #132]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800500c:	f7fd fe74 	bl	8002cf8 <HAL_GetTick>
 8005010:	0003      	movs	r3, r0
 8005012:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005014:	e009      	b.n	800502a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005016:	f7fd fe6f 	bl	8002cf8 <HAL_GetTick>
 800501a:	0002      	movs	r2, r0
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <HAL_RCC_ClockConfig+0x1f4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e02c      	b.n	8005084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800502a:	4b18      	ldr	r3, [pc, #96]	@ (800508c <HAL_RCC_ClockConfig+0x1f0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2207      	movs	r2, #7
 8005030:	4013      	ands	r3, r2
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d1ee      	bne.n	8005016 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2204      	movs	r2, #4
 800503e:	4013      	ands	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <HAL_RCC_ClockConfig+0x200>)
 8005048:	4013      	ands	r3, r2
 800504a:	0019      	movs	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005056:	f000 f829 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800505a:	0001      	movs	r1, r0
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <HAL_RCC_ClockConfig+0x1f8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	0a1b      	lsrs	r3, r3, #8
 8005062:	220f      	movs	r2, #15
 8005064:	401a      	ands	r2, r3
 8005066:	4b0e      	ldr	r3, [pc, #56]	@ (80050a0 <HAL_RCC_ClockConfig+0x204>)
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	58d3      	ldr	r3, [r2, r3]
 800506c:	221f      	movs	r2, #31
 800506e:	4013      	ands	r3, r2
 8005070:	000a      	movs	r2, r1
 8005072:	40da      	lsrs	r2, r3
 8005074:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_RCC_ClockConfig+0x208>)
 8005076:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005078:	4b0b      	ldr	r3, [pc, #44]	@ (80050a8 <HAL_RCC_ClockConfig+0x20c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0018      	movs	r0, r3
 800507e:	f7fd fddf 	bl	8002c40 <HAL_InitTick>
 8005082:	0003      	movs	r3, r0
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40022000 	.word	0x40022000
 8005090:	00001388 	.word	0x00001388
 8005094:	40021000 	.word	0x40021000
 8005098:	fffff0ff 	.word	0xfffff0ff
 800509c:	ffff8fff 	.word	0xffff8fff
 80050a0:	0800977c 	.word	0x0800977c
 80050a4:	20000000 	.word	0x20000000
 80050a8:	20000004 	.word	0x20000004

080050ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050b2:	4b3c      	ldr	r3, [pc, #240]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2238      	movs	r2, #56	@ 0x38
 80050b8:	4013      	ands	r3, r2
 80050ba:	d10f      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80050bc:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0adb      	lsrs	r3, r3, #11
 80050c2:	2207      	movs	r2, #7
 80050c4:	4013      	ands	r3, r2
 80050c6:	2201      	movs	r2, #1
 80050c8:	409a      	lsls	r2, r3
 80050ca:	0013      	movs	r3, r2
 80050cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	4835      	ldr	r0, [pc, #212]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80050d2:	f7fb f831 	bl	8000138 <__udivsi3>
 80050d6:	0003      	movs	r3, r0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e05d      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050dc:	4b31      	ldr	r3, [pc, #196]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2238      	movs	r2, #56	@ 0x38
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050e8:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x100>)
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e054      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ee:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2238      	movs	r2, #56	@ 0x38
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d138      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80050fa:	4b2a      	ldr	r3, [pc, #168]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2203      	movs	r2, #3
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005104:	4b27      	ldr	r3, [pc, #156]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	2207      	movs	r2, #7
 800510c:	4013      	ands	r3, r2
 800510e:	3301      	adds	r3, #1
 8005110:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d10d      	bne.n	8005134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4824      	ldr	r0, [pc, #144]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x100>)
 800511c:	f7fb f80c 	bl	8000138 <__udivsi3>
 8005120:	0003      	movs	r3, r0
 8005122:	0019      	movs	r1, r3
 8005124:	4b1f      	ldr	r3, [pc, #124]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	227f      	movs	r2, #127	@ 0x7f
 800512c:	4013      	ands	r3, r2
 800512e:	434b      	muls	r3, r1
 8005130:	617b      	str	r3, [r7, #20]
        break;
 8005132:	e00d      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	481c      	ldr	r0, [pc, #112]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005138:	f7fa fffe 	bl	8000138 <__udivsi3>
 800513c:	0003      	movs	r3, r0
 800513e:	0019      	movs	r1, r3
 8005140:	4b18      	ldr	r3, [pc, #96]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	0a1b      	lsrs	r3, r3, #8
 8005146:	227f      	movs	r2, #127	@ 0x7f
 8005148:	4013      	ands	r3, r2
 800514a:	434b      	muls	r3, r1
 800514c:	617b      	str	r3, [r7, #20]
        break;
 800514e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	0f5b      	lsrs	r3, r3, #29
 8005156:	2207      	movs	r2, #7
 8005158:	4013      	ands	r3, r2
 800515a:	3301      	adds	r3, #1
 800515c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	6978      	ldr	r0, [r7, #20]
 8005162:	f7fa ffe9 	bl	8000138 <__udivsi3>
 8005166:	0003      	movs	r3, r0
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	e015      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800516c:	4b0d      	ldr	r3, [pc, #52]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2238      	movs	r2, #56	@ 0x38
 8005172:	4013      	ands	r3, r2
 8005174:	2b20      	cmp	r3, #32
 8005176:	d103      	bne.n	8005180 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005178:	2380      	movs	r3, #128	@ 0x80
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e00b      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005180:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2238      	movs	r2, #56	@ 0x38
 8005186:	4013      	ands	r3, r2
 8005188:	2b18      	cmp	r3, #24
 800518a:	d103      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800518c:	23fa      	movs	r3, #250	@ 0xfa
 800518e:	01db      	lsls	r3, r3, #7
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e001      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005198:	693b      	ldr	r3, [r7, #16]
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b006      	add	sp, #24
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	40021000 	.word	0x40021000
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	007a1200 	.word	0x007a1200

080051b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b4:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80051b6:	681b      	ldr	r3, [r3, #0]
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	20000000 	.word	0x20000000

080051c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051c8:	f7ff fff2 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 80051cc:	0004      	movs	r4, r0
 80051ce:	f7ff fb49 	bl	8004864 <LL_RCC_GetAPB1Prescaler>
 80051d2:	0003      	movs	r3, r0
 80051d4:	0b1a      	lsrs	r2, r3, #12
 80051d6:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80051d8:	0092      	lsls	r2, r2, #2
 80051da:	58d3      	ldr	r3, [r2, r3]
 80051dc:	221f      	movs	r2, #31
 80051de:	4013      	ands	r3, r2
 80051e0:	40dc      	lsrs	r4, r3
 80051e2:	0023      	movs	r3, r4
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	080097bc 	.word	0x080097bc

080051f0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80051f4:	4b04      	ldr	r3, [pc, #16]	@ (8005208 <HAL_RCC_EnableCSS+0x18>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b03      	ldr	r3, [pc, #12]	@ (8005208 <HAL_RCC_EnableCSS+0x18>)
 80051fa:	2180      	movs	r1, #128	@ 0x80
 80051fc:	0309      	lsls	r1, r1, #12
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000

0800520c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	22c0      	movs	r2, #192	@ 0xc0
 800521e:	0092      	lsls	r2, r2, #2
 8005220:	400a      	ands	r2, r1
 8005222:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4013      	ands	r3, r2
 800522c:	d001      	beq.n	8005232 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800522e:	f000 f80d 	bl	800524c <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	2380      	movs	r3, #128	@ 0x80
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4013      	ands	r3, r2
 800523a:	d001      	beq.n	8005240 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800523c:	f000 f80b 	bl	8005256 <HAL_RCC_LSECSSCallback>
  }
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b002      	add	sp, #8
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40021000 	.word	0x40021000

0800524c <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005268:	2313      	movs	r3, #19
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005270:	2312      	movs	r3, #18
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	029b      	lsls	r3, r3, #10
 8005280:	4013      	ands	r3, r2
 8005282:	d100      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005284:	e0a3      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005286:	2011      	movs	r0, #17
 8005288:	183b      	adds	r3, r7, r0
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800528e:	4b7f      	ldr	r3, [pc, #508]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005292:	2380      	movs	r3, #128	@ 0x80
 8005294:	055b      	lsls	r3, r3, #21
 8005296:	4013      	ands	r3, r2
 8005298:	d110      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529a:	4b7c      	ldr	r3, [pc, #496]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800529c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800529e:	4b7b      	ldr	r3, [pc, #492]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052a0:	2180      	movs	r1, #128	@ 0x80
 80052a2:	0549      	lsls	r1, r1, #21
 80052a4:	430a      	orrs	r2, r1
 80052a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052a8:	4b78      	ldr	r3, [pc, #480]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ac:	2380      	movs	r3, #128	@ 0x80
 80052ae:	055b      	lsls	r3, r3, #21
 80052b0:	4013      	ands	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052bc:	4b74      	ldr	r3, [pc, #464]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b73      	ldr	r3, [pc, #460]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80052c2:	2180      	movs	r1, #128	@ 0x80
 80052c4:	0049      	lsls	r1, r1, #1
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ca:	f7fd fd15 	bl	8002cf8 <HAL_GetTick>
 80052ce:	0003      	movs	r3, r0
 80052d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052d2:	e00b      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d4:	f7fd fd10 	bl	8002cf8 <HAL_GetTick>
 80052d8:	0002      	movs	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d904      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80052e2:	2313      	movs	r3, #19
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	2203      	movs	r2, #3
 80052e8:	701a      	strb	r2, [r3, #0]
        break;
 80052ea:	e005      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ec:	4b68      	ldr	r3, [pc, #416]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	d0ed      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80052f8:	2313      	movs	r3, #19
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d154      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005302:	4b62      	ldr	r3, [pc, #392]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005304:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005306:	23c0      	movs	r3, #192	@ 0xc0
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4013      	ands	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	429a      	cmp	r2, r3
 800531c:	d014      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800531e:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005322:	4a5c      	ldr	r2, [pc, #368]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005324:	4013      	ands	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005328:	4b58      	ldr	r3, [pc, #352]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800532a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800532c:	4b57      	ldr	r3, [pc, #348]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800532e:	2180      	movs	r1, #128	@ 0x80
 8005330:	0249      	lsls	r1, r1, #9
 8005332:	430a      	orrs	r2, r1
 8005334:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005336:	4b55      	ldr	r3, [pc, #340]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005338:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800533a:	4b54      	ldr	r3, [pc, #336]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800533c:	4956      	ldr	r1, [pc, #344]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800533e:	400a      	ands	r2, r1
 8005340:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005342:	4b52      	ldr	r3, [pc, #328]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2201      	movs	r2, #1
 800534c:	4013      	ands	r3, r2
 800534e:	d016      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd fcd2 	bl	8002cf8 <HAL_GetTick>
 8005354:	0003      	movs	r3, r0
 8005356:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005358:	e00c      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535a:	f7fd fccd 	bl	8002cf8 <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	4a4d      	ldr	r2, [pc, #308]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d904      	bls.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800536a:	2313      	movs	r3, #19
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	2203      	movs	r2, #3
 8005370:	701a      	strb	r2, [r3, #0]
            break;
 8005372:	e004      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005374:	4b45      	ldr	r3, [pc, #276]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	2202      	movs	r2, #2
 800537a:	4013      	ands	r3, r2
 800537c:	d0ed      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800537e:	2313      	movs	r3, #19
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005388:	4b40      	ldr	r3, [pc, #256]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800538a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538c:	4a41      	ldr	r2, [pc, #260]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800538e:	4013      	ands	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	4b3d      	ldr	r3, [pc, #244]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005398:	430a      	orrs	r2, r1
 800539a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800539c:	e00c      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800539e:	2312      	movs	r3, #18
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2213      	movs	r2, #19
 80053a4:	18ba      	adds	r2, r7, r2
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e005      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	2312      	movs	r3, #18
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2213      	movs	r2, #19
 80053b2:	18ba      	adds	r2, r7, r2
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053b8:	2311      	movs	r3, #17
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c2:	4b32      	ldr	r3, [pc, #200]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053c6:	4b31      	ldr	r3, [pc, #196]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053c8:	4935      	ldr	r1, [pc, #212]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053ca:	400a      	ands	r2, r1
 80053cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	4013      	ands	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053d8:	4b2c      	ldr	r3, [pc, #176]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053dc:	2203      	movs	r2, #3
 80053de:	4393      	bics	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4b29      	ldr	r3, [pc, #164]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2220      	movs	r2, #32
 80053f2:	4013      	ands	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f6:	4b25      	ldr	r3, [pc, #148]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fa:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	4b21      	ldr	r3, [pc, #132]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005406:	430a      	orrs	r2, r1
 8005408:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	01db      	lsls	r3, r3, #7
 8005412:	4013      	ands	r3, r2
 8005414:	d015      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005416:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	0899      	lsrs	r1, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005424:	430a      	orrs	r2, r1
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	05db      	lsls	r3, r3, #23
 8005430:	429a      	cmp	r2, r3
 8005432:	d106      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	4b14      	ldr	r3, [pc, #80]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800543a:	2180      	movs	r1, #128	@ 0x80
 800543c:	0249      	lsls	r1, r1, #9
 800543e:	430a      	orrs	r2, r1
 8005440:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	4013      	ands	r3, r2
 800544c:	d016      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800544e:	4b0f      	ldr	r3, [pc, #60]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	4a15      	ldr	r2, [pc, #84]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800545e:	430a      	orrs	r2, r1
 8005460:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	2380      	movs	r3, #128	@ 0x80
 8005468:	01db      	lsls	r3, r3, #7
 800546a:	429a      	cmp	r2, r3
 800546c:	d106      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005474:	2180      	movs	r1, #128	@ 0x80
 8005476:	0249      	lsls	r1, r1, #9
 8005478:	430a      	orrs	r2, r1
 800547a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800547c:	2312      	movs	r3, #18
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	781b      	ldrb	r3, [r3, #0]
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b006      	add	sp, #24
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	40021000 	.word	0x40021000
 8005490:	40007000 	.word	0x40007000
 8005494:	fffffcff 	.word	0xfffffcff
 8005498:	fffeffff 	.word	0xfffeffff
 800549c:	00001388 	.word	0x00001388
 80054a0:	efffffff 	.word	0xefffffff
 80054a4:	ffffcfff 	.word	0xffffcfff
 80054a8:	ffff3fff 	.word	0xffff3fff

080054ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e046      	b.n	800554c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2288      	movs	r2, #136	@ 0x88
 80054c2:	589b      	ldr	r3, [r3, r2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d107      	bne.n	80054d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2284      	movs	r2, #132	@ 0x84
 80054cc:	2100      	movs	r1, #0
 80054ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f7fd fa28 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2288      	movs	r2, #136	@ 0x88
 80054dc:	2124      	movs	r1, #36	@ 0x24
 80054de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2101      	movs	r1, #1
 80054ec:	438a      	bics	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 fa3a 	bl	8005974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0018      	movs	r0, r3
 8005504:	f000 f8cc 	bl	80056a0 <UART_SetConfig>
 8005508:	0003      	movs	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e01c      	b.n	800554c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	490d      	ldr	r1, [pc, #52]	@ (8005554 <HAL_UART_Init+0xa8>)
 800551e:	400a      	ands	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	212a      	movs	r1, #42	@ 0x2a
 800552e:	438a      	bics	r2, r1
 8005530:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2101      	movs	r1, #1
 800553e:	430a      	orrs	r2, r1
 8005540:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 fac9 	bl	8005adc <UART_CheckIdleState>
 800554a:	0003      	movs	r3, r0
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b002      	add	sp, #8
 8005552:	bd80      	pop	{r7, pc}
 8005554:	ffffb7ff 	.word	0xffffb7ff

08005558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	1dbb      	adds	r3, r7, #6
 8005566:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2288      	movs	r2, #136	@ 0x88
 800556c:	589b      	ldr	r3, [r3, r2]
 800556e:	2b20      	cmp	r3, #32
 8005570:	d000      	beq.n	8005574 <HAL_UART_Transmit+0x1c>
 8005572:	e090      	b.n	8005696 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_UART_Transmit+0x2a>
 800557a:	1dbb      	adds	r3, r7, #6
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e088      	b.n	8005698 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	2380      	movs	r3, #128	@ 0x80
 800558c:	015b      	lsls	r3, r3, #5
 800558e:	429a      	cmp	r2, r3
 8005590:	d109      	bne.n	80055a6 <HAL_UART_Transmit+0x4e>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	d001      	beq.n	80055a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e078      	b.n	8005698 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2290      	movs	r2, #144	@ 0x90
 80055aa:	2100      	movs	r1, #0
 80055ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2288      	movs	r2, #136	@ 0x88
 80055b2:	2121      	movs	r1, #33	@ 0x21
 80055b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b6:	f7fd fb9f 	bl	8002cf8 <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1dba      	adds	r2, r7, #6
 80055c2:	2154      	movs	r1, #84	@ 0x54
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1dba      	adds	r2, r7, #6
 80055cc:	2156      	movs	r1, #86	@ 0x56
 80055ce:	8812      	ldrh	r2, [r2, #0]
 80055d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	2380      	movs	r3, #128	@ 0x80
 80055d8:	015b      	lsls	r3, r3, #5
 80055da:	429a      	cmp	r2, r3
 80055dc:	d108      	bne.n	80055f0 <HAL_UART_Transmit+0x98>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	e003      	b.n	80055f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055f8:	e030      	b.n	800565c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	0013      	movs	r3, r2
 8005604:	2200      	movs	r2, #0
 8005606:	2180      	movs	r1, #128	@ 0x80
 8005608:	f000 fb12 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 800560c:	1e03      	subs	r3, r0, #0
 800560e:	d005      	beq.n	800561c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2288      	movs	r2, #136	@ 0x88
 8005614:	2120      	movs	r1, #32
 8005616:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e03d      	b.n	8005698 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	001a      	movs	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	05d2      	lsls	r2, r2, #23
 800562e:	0dd2      	lsrs	r2, r2, #23
 8005630:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	3302      	adds	r3, #2
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	e007      	b.n	800564a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	3301      	adds	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2256      	movs	r2, #86	@ 0x56
 800564e:	5a9b      	ldrh	r3, [r3, r2]
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b299      	uxth	r1, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2256      	movs	r2, #86	@ 0x56
 800565a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2256      	movs	r2, #86	@ 0x56
 8005660:	5a9b      	ldrh	r3, [r3, r2]
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1c8      	bne.n	80055fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	0013      	movs	r3, r2
 8005672:	2200      	movs	r2, #0
 8005674:	2140      	movs	r1, #64	@ 0x40
 8005676:	f000 fadb 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 800567a:	1e03      	subs	r3, r0, #0
 800567c:	d005      	beq.n	800568a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2288      	movs	r2, #136	@ 0x88
 8005682:	2120      	movs	r1, #32
 8005684:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e006      	b.n	8005698 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2288      	movs	r2, #136	@ 0x88
 800568e:	2120      	movs	r1, #32
 8005690:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b008      	add	sp, #32
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a8:	231a      	movs	r3, #26
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4aa1      	ldr	r2, [pc, #644]	@ (8005954 <UART_SetConfig+0x2b4>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	0019      	movs	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005958 <UART_SetConfig+0x2b8>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	0019      	movs	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	4313      	orrs	r3, r2
 8005704:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a93      	ldr	r2, [pc, #588]	@ (800595c <UART_SetConfig+0x2bc>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	430a      	orrs	r2, r1
 800571a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005722:	220f      	movs	r2, #15
 8005724:	4393      	bics	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a89      	ldr	r2, [pc, #548]	@ (8005960 <UART_SetConfig+0x2c0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d127      	bne.n	800578e <UART_SetConfig+0xee>
 800573e:	4b89      	ldr	r3, [pc, #548]	@ (8005964 <UART_SetConfig+0x2c4>)
 8005740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005742:	2203      	movs	r2, #3
 8005744:	4013      	ands	r3, r2
 8005746:	2b03      	cmp	r3, #3
 8005748:	d017      	beq.n	800577a <UART_SetConfig+0xda>
 800574a:	d81b      	bhi.n	8005784 <UART_SetConfig+0xe4>
 800574c:	2b02      	cmp	r3, #2
 800574e:	d00a      	beq.n	8005766 <UART_SetConfig+0xc6>
 8005750:	d818      	bhi.n	8005784 <UART_SetConfig+0xe4>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <UART_SetConfig+0xbc>
 8005756:	2b01      	cmp	r3, #1
 8005758:	d00a      	beq.n	8005770 <UART_SetConfig+0xd0>
 800575a:	e013      	b.n	8005784 <UART_SetConfig+0xe4>
 800575c:	231b      	movs	r3, #27
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e021      	b.n	80057aa <UART_SetConfig+0x10a>
 8005766:	231b      	movs	r3, #27
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	2202      	movs	r2, #2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e01c      	b.n	80057aa <UART_SetConfig+0x10a>
 8005770:	231b      	movs	r3, #27
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	2204      	movs	r2, #4
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e017      	b.n	80057aa <UART_SetConfig+0x10a>
 800577a:	231b      	movs	r3, #27
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	2208      	movs	r2, #8
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e012      	b.n	80057aa <UART_SetConfig+0x10a>
 8005784:	231b      	movs	r3, #27
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	2210      	movs	r2, #16
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e00d      	b.n	80057aa <UART_SetConfig+0x10a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a75      	ldr	r2, [pc, #468]	@ (8005968 <UART_SetConfig+0x2c8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d104      	bne.n	80057a2 <UART_SetConfig+0x102>
 8005798:	231b      	movs	r3, #27
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e003      	b.n	80057aa <UART_SetConfig+0x10a>
 80057a2:	231b      	movs	r3, #27
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2210      	movs	r2, #16
 80057a8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	2380      	movs	r3, #128	@ 0x80
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d000      	beq.n	80057b8 <UART_SetConfig+0x118>
 80057b6:	e065      	b.n	8005884 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80057b8:	231b      	movs	r3, #27
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d015      	beq.n	80057ee <UART_SetConfig+0x14e>
 80057c2:	dc18      	bgt.n	80057f6 <UART_SetConfig+0x156>
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d00d      	beq.n	80057e4 <UART_SetConfig+0x144>
 80057c8:	dc15      	bgt.n	80057f6 <UART_SetConfig+0x156>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <UART_SetConfig+0x134>
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d005      	beq.n	80057de <UART_SetConfig+0x13e>
 80057d2:	e010      	b.n	80057f6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7ff fcf6 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80057d8:	0003      	movs	r3, r0
 80057da:	617b      	str	r3, [r7, #20]
        break;
 80057dc:	e012      	b.n	8005804 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057de:	4b63      	ldr	r3, [pc, #396]	@ (800596c <UART_SetConfig+0x2cc>)
 80057e0:	617b      	str	r3, [r7, #20]
        break;
 80057e2:	e00f      	b.n	8005804 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e4:	f7ff fc62 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 80057e8:	0003      	movs	r3, r0
 80057ea:	617b      	str	r3, [r7, #20]
        break;
 80057ec:	e00a      	b.n	8005804 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	2380      	movs	r3, #128	@ 0x80
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
        break;
 80057f4:	e006      	b.n	8005804 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057fa:	231a      	movs	r3, #26
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
        break;
 8005802:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d100      	bne.n	800580c <UART_SetConfig+0x16c>
 800580a:	e08d      	b.n	8005928 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005810:	4b57      	ldr	r3, [pc, #348]	@ (8005970 <UART_SetConfig+0x2d0>)
 8005812:	0052      	lsls	r2, r2, #1
 8005814:	5ad3      	ldrh	r3, [r2, r3]
 8005816:	0019      	movs	r1, r3
 8005818:	6978      	ldr	r0, [r7, #20]
 800581a:	f7fa fc8d 	bl	8000138 <__udivsi3>
 800581e:	0003      	movs	r3, r0
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	18d2      	adds	r2, r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	0019      	movs	r1, r3
 8005830:	0010      	movs	r0, r2
 8005832:	f7fa fc81 	bl	8000138 <__udivsi3>
 8005836:	0003      	movs	r3, r0
 8005838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d91c      	bls.n	800587a <UART_SetConfig+0x1da>
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	025b      	lsls	r3, r3, #9
 8005846:	429a      	cmp	r2, r3
 8005848:	d217      	bcs.n	800587a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	b29a      	uxth	r2, r3
 800584e:	200e      	movs	r0, #14
 8005850:	183b      	adds	r3, r7, r0
 8005852:	210f      	movs	r1, #15
 8005854:	438a      	bics	r2, r1
 8005856:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	b29b      	uxth	r3, r3
 800585e:	2207      	movs	r2, #7
 8005860:	4013      	ands	r3, r2
 8005862:	b299      	uxth	r1, r3
 8005864:	183b      	adds	r3, r7, r0
 8005866:	183a      	adds	r2, r7, r0
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	183a      	adds	r2, r7, r0
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	e056      	b.n	8005928 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800587a:	231a      	movs	r3, #26
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e051      	b.n	8005928 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005884:	231b      	movs	r3, #27
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b08      	cmp	r3, #8
 800588c:	d015      	beq.n	80058ba <UART_SetConfig+0x21a>
 800588e:	dc18      	bgt.n	80058c2 <UART_SetConfig+0x222>
 8005890:	2b04      	cmp	r3, #4
 8005892:	d00d      	beq.n	80058b0 <UART_SetConfig+0x210>
 8005894:	dc15      	bgt.n	80058c2 <UART_SetConfig+0x222>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <UART_SetConfig+0x200>
 800589a:	2b02      	cmp	r3, #2
 800589c:	d005      	beq.n	80058aa <UART_SetConfig+0x20a>
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7ff fc90 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80058a4:	0003      	movs	r3, r0
 80058a6:	617b      	str	r3, [r7, #20]
        break;
 80058a8:	e012      	b.n	80058d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058aa:	4b30      	ldr	r3, [pc, #192]	@ (800596c <UART_SetConfig+0x2cc>)
 80058ac:	617b      	str	r3, [r7, #20]
        break;
 80058ae:	e00f      	b.n	80058d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b0:	f7ff fbfc 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 80058b4:	0003      	movs	r3, r0
 80058b6:	617b      	str	r3, [r7, #20]
        break;
 80058b8:	e00a      	b.n	80058d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ba:	2380      	movs	r3, #128	@ 0x80
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	617b      	str	r3, [r7, #20]
        break;
 80058c0:	e006      	b.n	80058d0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058c6:	231a      	movs	r3, #26
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	2201      	movs	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
        break;
 80058ce:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d028      	beq.n	8005928 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058da:	4b25      	ldr	r3, [pc, #148]	@ (8005970 <UART_SetConfig+0x2d0>)
 80058dc:	0052      	lsls	r2, r2, #1
 80058de:	5ad3      	ldrh	r3, [r2, r3]
 80058e0:	0019      	movs	r1, r3
 80058e2:	6978      	ldr	r0, [r7, #20]
 80058e4:	f7fa fc28 	bl	8000138 <__udivsi3>
 80058e8:	0003      	movs	r3, r0
 80058ea:	001a      	movs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	18d2      	adds	r2, r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	0019      	movs	r1, r3
 80058fa:	0010      	movs	r0, r2
 80058fc:	f7fa fc1c 	bl	8000138 <__udivsi3>
 8005900:	0003      	movs	r3, r0
 8005902:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d90a      	bls.n	8005920 <UART_SetConfig+0x280>
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	025b      	lsls	r3, r3, #9
 8005910:	429a      	cmp	r2, r3
 8005912:	d205      	bcs.n	8005920 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e003      	b.n	8005928 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005920:	231a      	movs	r3, #26
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	226a      	movs	r2, #106	@ 0x6a
 800592c:	2101      	movs	r1, #1
 800592e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2268      	movs	r2, #104	@ 0x68
 8005934:	2101      	movs	r1, #1
 8005936:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005944:	231a      	movs	r3, #26
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	781b      	ldrb	r3, [r3, #0]
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	b008      	add	sp, #32
 8005950:	bd80      	pop	{r7, pc}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	cfff69f3 	.word	0xcfff69f3
 8005958:	ffffcfff 	.word	0xffffcfff
 800595c:	11fff4ff 	.word	0x11fff4ff
 8005960:	40013800 	.word	0x40013800
 8005964:	40021000 	.word	0x40021000
 8005968:	40004400 	.word	0x40004400
 800596c:	00f42400 	.word	0x00f42400
 8005970:	080097dc 	.word	0x080097dc

08005974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	2208      	movs	r2, #8
 8005982:	4013      	ands	r3, r2
 8005984:	d00b      	beq.n	800599e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ab8 <UART_AdvFeatureConfig+0x144>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a2:	2201      	movs	r2, #1
 80059a4:	4013      	ands	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4a43      	ldr	r2, [pc, #268]	@ (8005abc <UART_AdvFeatureConfig+0x148>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	0019      	movs	r1, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	2202      	movs	r2, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac0 <UART_AdvFeatureConfig+0x14c>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	2204      	movs	r2, #4
 80059e8:	4013      	ands	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4a34      	ldr	r2, [pc, #208]	@ (8005ac4 <UART_AdvFeatureConfig+0x150>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	2210      	movs	r2, #16
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac8 <UART_AdvFeatureConfig+0x154>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4a25      	ldr	r2, [pc, #148]	@ (8005acc <UART_AdvFeatureConfig+0x158>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	2240      	movs	r2, #64	@ 0x40
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d01d      	beq.n	8005a8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad0 <UART_AdvFeatureConfig+0x15c>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6e:	2380      	movs	r3, #128	@ 0x80
 8005a70:	035b      	lsls	r3, r3, #13
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d10b      	bne.n	8005a8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	@ (8005ad4 <UART_AdvFeatureConfig+0x160>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	0019      	movs	r1, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	2280      	movs	r2, #128	@ 0x80
 8005a94:	4013      	ands	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad8 <UART_AdvFeatureConfig+0x164>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }
}
 8005ab0:	46c0      	nop			@ (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b002      	add	sp, #8
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	ffff7fff 	.word	0xffff7fff
 8005abc:	fffdffff 	.word	0xfffdffff
 8005ac0:	fffeffff 	.word	0xfffeffff
 8005ac4:	fffbffff 	.word	0xfffbffff
 8005ac8:	ffffefff 	.word	0xffffefff
 8005acc:	ffffdfff 	.word	0xffffdfff
 8005ad0:	ffefffff 	.word	0xffefffff
 8005ad4:	ff9fffff 	.word	0xff9fffff
 8005ad8:	fff7ffff 	.word	0xfff7ffff

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b092      	sub	sp, #72	@ 0x48
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2290      	movs	r2, #144	@ 0x90
 8005ae8:	2100      	movs	r1, #0
 8005aea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fd f904 	bl	8002cf8 <HAL_GetTick>
 8005af0:	0003      	movs	r3, r0
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2208      	movs	r2, #8
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d12d      	bne.n	8005b5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b04:	2280      	movs	r2, #128	@ 0x80
 8005b06:	0391      	lsls	r1, r2, #14
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4a47      	ldr	r2, [pc, #284]	@ (8005c28 <UART_CheckIdleState+0x14c>)
 8005b0c:	9200      	str	r2, [sp, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f000 f88e 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005b14:	1e03      	subs	r3, r0, #0
 8005b16:	d022      	beq.n	8005b5e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b18:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b22:	2301      	movs	r3, #1
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	f383 8810 	msr	PRIMASK, r3
}
 8005b2c:	46c0      	nop			@ (mov r8, r8)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2180      	movs	r1, #128	@ 0x80
 8005b3a:	438a      	bics	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2288      	movs	r2, #136	@ 0x88
 8005b4e:	2120      	movs	r1, #32
 8005b50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2284      	movs	r2, #132	@ 0x84
 8005b56:	2100      	movs	r1, #0
 8005b58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e060      	b.n	8005c20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2204      	movs	r2, #4
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d146      	bne.n	8005bfa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6e:	2280      	movs	r2, #128	@ 0x80
 8005b70:	03d1      	lsls	r1, r2, #15
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <UART_CheckIdleState+0x14c>)
 8005b76:	9200      	str	r2, [sp, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f000 f859 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005b7e:	1e03      	subs	r3, r0, #0
 8005b80:	d03b      	beq.n	8005bfa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b82:	f3ef 8310 	mrs	r3, PRIMASK
 8005b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4922      	ldr	r1, [pc, #136]	@ (8005c2c <UART_CheckIdleState+0x150>)
 8005ba4:	400a      	ands	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f383 8810 	msr	PRIMASK, r3
}
 8005bc8:	46c0      	nop			@ (mov r8, r8)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	438a      	bics	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f383 8810 	msr	PRIMASK, r3
}
 8005be4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	228c      	movs	r2, #140	@ 0x8c
 8005bea:	2120      	movs	r1, #32
 8005bec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2284      	movs	r2, #132	@ 0x84
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e012      	b.n	8005c20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2288      	movs	r2, #136	@ 0x88
 8005bfe:	2120      	movs	r1, #32
 8005c00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	228c      	movs	r2, #140	@ 0x8c
 8005c06:	2120      	movs	r1, #32
 8005c08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2284      	movs	r2, #132	@ 0x84
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	0018      	movs	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b010      	add	sp, #64	@ 0x40
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	01ffffff 	.word	0x01ffffff
 8005c2c:	fffffedf 	.word	0xfffffedf

08005c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	1dfb      	adds	r3, r7, #7
 8005c3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	e051      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	3301      	adds	r3, #1
 8005c46:	d04e      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c48:	f7fd f856 	bl	8002cf8 <HAL_GetTick>
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e051      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d03b      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b80      	cmp	r3, #128	@ 0x80
 8005c72:	d038      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b40      	cmp	r3, #64	@ 0x40
 8005c78:	d035      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	2208      	movs	r2, #8
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d111      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 f83c 	bl	8005d10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2290      	movs	r2, #144	@ 0x90
 8005c9c:	2108      	movs	r1, #8
 8005c9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2284      	movs	r2, #132	@ 0x84
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e02c      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	2380      	movs	r3, #128	@ 0x80
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d112      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2280      	movs	r2, #128	@ 0x80
 8005cc6:	0112      	lsls	r2, r2, #4
 8005cc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 f81f 	bl	8005d10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2290      	movs	r2, #144	@ 0x90
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2284      	movs	r2, #132	@ 0x84
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	425a      	negs	r2, r3
 8005cf6:	4153      	adcs	r3, r2
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d09e      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	0018      	movs	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	@ 0x38
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d18:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d22:	2301      	movs	r3, #1
 8005d24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	46c0      	nop			@ (mov r8, r8)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4926      	ldr	r1, [pc, #152]	@ (8005dd4 <UART_EndRxTransfer+0xc4>)
 8005d3a:	400a      	ands	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4e:	623b      	str	r3, [r7, #32]
  return(result);
 8005d50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d54:	2301      	movs	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	46c0      	nop			@ (mov r8, r8)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	491b      	ldr	r1, [pc, #108]	@ (8005dd8 <UART_EndRxTransfer+0xc8>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d118      	bne.n	8005db6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d84:	f3ef 8310 	mrs	r3, PRIMASK
 8005d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d8e:	2301      	movs	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2110      	movs	r1, #16
 8005da6:	438a      	bics	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f383 8810 	msr	PRIMASK, r3
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	228c      	movs	r2, #140	@ 0x8c
 8005dba:	2120      	movs	r1, #32
 8005dbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b00e      	add	sp, #56	@ 0x38
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	fffffedf 	.word	0xfffffedf
 8005dd8:	effffffe 	.word	0xeffffffe

08005ddc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2284      	movs	r2, #132	@ 0x84
 8005de8:	5c9b      	ldrb	r3, [r3, r2]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e027      	b.n	8005e42 <HAL_UARTEx_DisableFifoMode+0x66>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2284      	movs	r2, #132	@ 0x84
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2288      	movs	r2, #136	@ 0x88
 8005dfe:	2124      	movs	r1, #36	@ 0x24
 8005e00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	438a      	bics	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2288      	movs	r2, #136	@ 0x88
 8005e34:	2120      	movs	r1, #32
 8005e36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2284      	movs	r2, #132	@ 0x84
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b004      	add	sp, #16
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	dfffffff 	.word	0xdfffffff

08005e50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2284      	movs	r2, #132	@ 0x84
 8005e5e:	5c9b      	ldrb	r3, [r3, r2]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e02e      	b.n	8005ec6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2284      	movs	r2, #132	@ 0x84
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2288      	movs	r2, #136	@ 0x88
 8005e74:	2124      	movs	r1, #36	@ 0x24
 8005e76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	438a      	bics	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	08d9      	lsrs	r1, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f000 f854 	bl	8005f54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2288      	movs	r2, #136	@ 0x88
 8005eb8:	2120      	movs	r1, #32
 8005eba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2284      	movs	r2, #132	@ 0x84
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2284      	movs	r2, #132	@ 0x84
 8005ede:	5c9b      	ldrb	r3, [r3, r2]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e02f      	b.n	8005f48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2284      	movs	r2, #132	@ 0x84
 8005eec:	2101      	movs	r1, #1
 8005eee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2288      	movs	r2, #136	@ 0x88
 8005ef4:	2124      	movs	r1, #36	@ 0x24
 8005ef6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a0e      	ldr	r2, [pc, #56]	@ (8005f50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 f813 	bl	8005f54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2288      	movs	r2, #136	@ 0x88
 8005f3a:	2120      	movs	r1, #32
 8005f3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2284      	movs	r2, #132	@ 0x84
 8005f42:	2100      	movs	r1, #0
 8005f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b004      	add	sp, #16
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	f1ffffff 	.word	0xf1ffffff

08005f54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d108      	bne.n	8005f76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	226a      	movs	r2, #106	@ 0x6a
 8005f68:	2101      	movs	r1, #1
 8005f6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2268      	movs	r2, #104	@ 0x68
 8005f70:	2101      	movs	r1, #1
 8005f72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f74:	e043      	b.n	8005ffe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f76:	260f      	movs	r6, #15
 8005f78:	19bb      	adds	r3, r7, r6
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f7e:	200e      	movs	r0, #14
 8005f80:	183b      	adds	r3, r7, r0
 8005f82:	2208      	movs	r2, #8
 8005f84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	0e5b      	lsrs	r3, r3, #25
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	240d      	movs	r4, #13
 8005f92:	193b      	adds	r3, r7, r4
 8005f94:	2107      	movs	r1, #7
 8005f96:	400a      	ands	r2, r1
 8005f98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	0f5b      	lsrs	r3, r3, #29
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	250c      	movs	r5, #12
 8005fa6:	197b      	adds	r3, r7, r5
 8005fa8:	2107      	movs	r1, #7
 8005faa:	400a      	ands	r2, r1
 8005fac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fae:	183b      	adds	r3, r7, r0
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	197a      	adds	r2, r7, r5
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	4914      	ldr	r1, [pc, #80]	@ (8006008 <UARTEx_SetNbDataToProcess+0xb4>)
 8005fb8:	5c8a      	ldrb	r2, [r1, r2]
 8005fba:	435a      	muls	r2, r3
 8005fbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fbe:	197b      	adds	r3, r7, r5
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	@ (800600c <UARTEx_SetNbDataToProcess+0xb8>)
 8005fc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fc6:	0019      	movs	r1, r3
 8005fc8:	f7fa f940 	bl	800024c <__divsi3>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	b299      	uxth	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	226a      	movs	r2, #106	@ 0x6a
 8005fd4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fd6:	19bb      	adds	r3, r7, r6
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	193a      	adds	r2, r7, r4
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	490a      	ldr	r1, [pc, #40]	@ (8006008 <UARTEx_SetNbDataToProcess+0xb4>)
 8005fe0:	5c8a      	ldrb	r2, [r1, r2]
 8005fe2:	435a      	muls	r2, r3
 8005fe4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fe6:	193b      	adds	r3, r7, r4
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4a08      	ldr	r2, [pc, #32]	@ (800600c <UARTEx_SetNbDataToProcess+0xb8>)
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fee:	0019      	movs	r1, r3
 8005ff0:	f7fa f92c 	bl	800024c <__divsi3>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	b299      	uxth	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2268      	movs	r2, #104	@ 0x68
 8005ffc:	5299      	strh	r1, [r3, r2]
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	46bd      	mov	sp, r7
 8006002:	b005      	add	sp, #20
 8006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	080097f4 	.word	0x080097f4
 800600c:	080097fc 	.word	0x080097fc

08006010 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006014:	46c0      	nop			@ (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af04      	add	r7, sp, #16
 8006022:	0002      	movs	r2, r0
 8006024:	1dfb      	adds	r3, r7, #7
 8006026:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006028:	4808      	ldr	r0, [pc, #32]	@ (800604c <ssd1306_WriteCommand+0x30>)
 800602a:	2301      	movs	r3, #1
 800602c:	425b      	negs	r3, r3
 800602e:	9302      	str	r3, [sp, #8]
 8006030:	2301      	movs	r3, #1
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2301      	movs	r3, #1
 800603a:	2200      	movs	r2, #0
 800603c:	2178      	movs	r1, #120	@ 0x78
 800603e:	f7fd ff71 	bl	8003f24 <HAL_I2C_Mem_Write>
}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	46bd      	mov	sp, r7
 8006046:	b002      	add	sp, #8
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	20000268 	.word	0x20000268

08006050 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af04      	add	r7, sp, #16
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	4808      	ldr	r0, [pc, #32]	@ (8006080 <ssd1306_WriteData+0x30>)
 8006060:	2201      	movs	r2, #1
 8006062:	4252      	negs	r2, r2
 8006064:	9202      	str	r2, [sp, #8]
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2301      	movs	r3, #1
 800606e:	2240      	movs	r2, #64	@ 0x40
 8006070:	2178      	movs	r1, #120	@ 0x78
 8006072:	f7fd ff57 	bl	8003f24 <HAL_I2C_Mem_Write>
}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	46bd      	mov	sp, r7
 800607a:	b002      	add	sp, #8
 800607c:	bd80      	pop	{r7, pc}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	20000268 	.word	0x20000268

08006084 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006088:	f7ff ffc2 	bl	8006010 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800608c:	2064      	movs	r0, #100	@ 0x64
 800608e:	f7fc fe3d 	bl	8002d0c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006092:	2000      	movs	r0, #0
 8006094:	f000 fa0a 	bl	80064ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006098:	2020      	movs	r0, #32
 800609a:	f7ff ffbf 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800609e:	2000      	movs	r0, #0
 80060a0:	f7ff ffbc 	bl	800601c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80060a4:	20b0      	movs	r0, #176	@ 0xb0
 80060a6:	f7ff ffb9 	bl	800601c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80060aa:	20c8      	movs	r0, #200	@ 0xc8
 80060ac:	f7ff ffb6 	bl	800601c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7ff ffb3 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80060b6:	2010      	movs	r0, #16
 80060b8:	f7ff ffb0 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80060bc:	2040      	movs	r0, #64	@ 0x40
 80060be:	f7ff ffad 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80060c2:	20ff      	movs	r0, #255	@ 0xff
 80060c4:	f000 f9da 	bl	800647c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80060c8:	20a1      	movs	r0, #161	@ 0xa1
 80060ca:	f7ff ffa7 	bl	800601c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80060ce:	20a6      	movs	r0, #166	@ 0xa6
 80060d0:	f7ff ffa4 	bl	800601c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80060d4:	20a8      	movs	r0, #168	@ 0xa8
 80060d6:	f7ff ffa1 	bl	800601c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80060da:	203f      	movs	r0, #63	@ 0x3f
 80060dc:	f7ff ff9e 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80060e0:	20a4      	movs	r0, #164	@ 0xa4
 80060e2:	f7ff ff9b 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80060e6:	20d3      	movs	r0, #211	@ 0xd3
 80060e8:	f7ff ff98 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7ff ff95 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80060f2:	20d5      	movs	r0, #213	@ 0xd5
 80060f4:	f7ff ff92 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80060f8:	20f0      	movs	r0, #240	@ 0xf0
 80060fa:	f7ff ff8f 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80060fe:	20d9      	movs	r0, #217	@ 0xd9
 8006100:	f7ff ff8c 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006104:	2022      	movs	r0, #34	@ 0x22
 8006106:	f7ff ff89 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800610a:	20da      	movs	r0, #218	@ 0xda
 800610c:	f7ff ff86 	bl	800601c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006110:	2012      	movs	r0, #18
 8006112:	f7ff ff83 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006116:	20db      	movs	r0, #219	@ 0xdb
 8006118:	f7ff ff80 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800611c:	2020      	movs	r0, #32
 800611e:	f7ff ff7d 	bl	800601c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006122:	208d      	movs	r0, #141	@ 0x8d
 8006124:	f7ff ff7a 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006128:	2014      	movs	r0, #20
 800612a:	f7ff ff77 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800612e:	2001      	movs	r0, #1
 8006130:	f000 f9bc 	bl	80064ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006134:	2000      	movs	r0, #0
 8006136:	f000 f811 	bl	800615c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800613a:	f000 f833 	bl	80061a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800613e:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <ssd1306_Init+0xd4>)
 8006140:	2200      	movs	r2, #0
 8006142:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006144:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <ssd1306_Init+0xd4>)
 8006146:	2200      	movs	r2, #0
 8006148:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800614a:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <ssd1306_Init+0xd4>)
 800614c:	2201      	movs	r2, #1
 800614e:	711a      	strb	r2, [r3, #4]
}
 8006150:	46c0      	nop			@ (mov r8, r8)
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	20000778 	.word	0x20000778

0800615c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	0002      	movs	r2, r0
 8006164:	1dfb      	adds	r3, r7, #7
 8006166:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e00e      	b.n	800618c <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800616e:	1dfb      	adds	r3, r7, #7
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <ssd1306_Fill+0x1e>
 8006176:	2100      	movs	r1, #0
 8006178:	e000      	b.n	800617c <ssd1306_Fill+0x20>
 800617a:	21ff      	movs	r1, #255	@ 0xff
 800617c:	4a08      	ldr	r2, [pc, #32]	@ (80061a0 <ssd1306_Fill+0x44>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	18d3      	adds	r3, r2, r3
 8006182:	1c0a      	adds	r2, r1, #0
 8006184:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	2380      	movs	r3, #128	@ 0x80
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	429a      	cmp	r2, r3
 8006194:	d3eb      	bcc.n	800616e <ssd1306_Fill+0x12>
    }
}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	46c0      	nop			@ (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	b004      	add	sp, #16
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000378 	.word	0x20000378

080061a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80061aa:	1dfb      	adds	r3, r7, #7
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e01a      	b.n	80061e8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80061b2:	1dfb      	adds	r3, r7, #7
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	3b50      	subs	r3, #80	@ 0x50
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	0018      	movs	r0, r3
 80061bc:	f7ff ff2e 	bl	800601c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80061c0:	2000      	movs	r0, #0
 80061c2:	f7ff ff2b 	bl	800601c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80061c6:	2010      	movs	r0, #16
 80061c8:	f7ff ff28 	bl	800601c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	01da      	lsls	r2, r3, #7
 80061d2:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <ssd1306_UpdateScreen+0x58>)
 80061d4:	18d3      	adds	r3, r2, r3
 80061d6:	2180      	movs	r1, #128	@ 0x80
 80061d8:	0018      	movs	r0, r3
 80061da:	f7ff ff39 	bl	8006050 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80061de:	1dfb      	adds	r3, r7, #7
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	1dfb      	adds	r3, r7, #7
 80061e4:	3201      	adds	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b07      	cmp	r3, #7
 80061ee:	d9e0      	bls.n	80061b2 <ssd1306_UpdateScreen+0xe>
    }
}
 80061f0:	46c0      	nop			@ (mov r8, r8)
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b002      	add	sp, #8
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	20000378 	.word	0x20000378

08006200 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	0004      	movs	r4, r0
 8006208:	0008      	movs	r0, r1
 800620a:	0011      	movs	r1, r2
 800620c:	1dfb      	adds	r3, r7, #7
 800620e:	1c22      	adds	r2, r4, #0
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	1dbb      	adds	r3, r7, #6
 8006214:	1c02      	adds	r2, r0, #0
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	1d7b      	adds	r3, r7, #5
 800621a:	1c0a      	adds	r2, r1, #0
 800621c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800621e:	1dfb      	adds	r3, r7, #7
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	b25b      	sxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	db47      	blt.n	80062b8 <ssd1306_DrawPixel+0xb8>
 8006228:	1dbb      	adds	r3, r7, #6
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b3f      	cmp	r3, #63	@ 0x3f
 800622e:	d843      	bhi.n	80062b8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006230:	1d7b      	adds	r3, r7, #5
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d11e      	bne.n	8006276 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006238:	1dfb      	adds	r3, r7, #7
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	1dbb      	adds	r3, r7, #6
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	b2d8      	uxtb	r0, r3
 8006244:	0003      	movs	r3, r0
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	18d3      	adds	r3, r2, r3
 800624a:	4a1d      	ldr	r2, [pc, #116]	@ (80062c0 <ssd1306_DrawPixel+0xc0>)
 800624c:	5cd3      	ldrb	r3, [r2, r3]
 800624e:	b25a      	sxtb	r2, r3
 8006250:	1dbb      	adds	r3, r7, #6
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2107      	movs	r1, #7
 8006256:	400b      	ands	r3, r1
 8006258:	2101      	movs	r1, #1
 800625a:	4099      	lsls	r1, r3
 800625c:	000b      	movs	r3, r1
 800625e:	b25b      	sxtb	r3, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	b259      	sxtb	r1, r3
 8006264:	1dfb      	adds	r3, r7, #7
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	0003      	movs	r3, r0
 800626a:	01db      	lsls	r3, r3, #7
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	b2c9      	uxtb	r1, r1
 8006270:	4a13      	ldr	r2, [pc, #76]	@ (80062c0 <ssd1306_DrawPixel+0xc0>)
 8006272:	54d1      	strb	r1, [r2, r3]
 8006274:	e021      	b.n	80062ba <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006276:	1dfb      	adds	r3, r7, #7
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	1dbb      	adds	r3, r7, #6
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	b2d8      	uxtb	r0, r3
 8006282:	0003      	movs	r3, r0
 8006284:	01db      	lsls	r3, r3, #7
 8006286:	18d3      	adds	r3, r2, r3
 8006288:	4a0d      	ldr	r2, [pc, #52]	@ (80062c0 <ssd1306_DrawPixel+0xc0>)
 800628a:	5cd3      	ldrb	r3, [r2, r3]
 800628c:	b25b      	sxtb	r3, r3
 800628e:	1dba      	adds	r2, r7, #6
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	2107      	movs	r1, #7
 8006294:	400a      	ands	r2, r1
 8006296:	2101      	movs	r1, #1
 8006298:	4091      	lsls	r1, r2
 800629a:	000a      	movs	r2, r1
 800629c:	b252      	sxtb	r2, r2
 800629e:	43d2      	mvns	r2, r2
 80062a0:	b252      	sxtb	r2, r2
 80062a2:	4013      	ands	r3, r2
 80062a4:	b259      	sxtb	r1, r3
 80062a6:	1dfb      	adds	r3, r7, #7
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	0003      	movs	r3, r0
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	b2c9      	uxtb	r1, r1
 80062b2:	4a03      	ldr	r2, [pc, #12]	@ (80062c0 <ssd1306_DrawPixel+0xc0>)
 80062b4:	54d1      	strb	r1, [r2, r3]
 80062b6:	e000      	b.n	80062ba <ssd1306_DrawPixel+0xba>
        return;
 80062b8:	46c0      	nop			@ (mov r8, r8)
    }
}
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b003      	add	sp, #12
 80062be:	bd90      	pop	{r4, r7, pc}
 80062c0:	20000378 	.word	0x20000378

080062c4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b089      	sub	sp, #36	@ 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0004      	movs	r4, r0
 80062cc:	1d38      	adds	r0, r7, #4
 80062ce:	6001      	str	r1, [r0, #0]
 80062d0:	6042      	str	r2, [r0, #4]
 80062d2:	0019      	movs	r1, r3
 80062d4:	200f      	movs	r0, #15
 80062d6:	183b      	adds	r3, r7, r0
 80062d8:	1c22      	adds	r2, r4, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	230e      	movs	r3, #14
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	1c0a      	adds	r2, r1, #0
 80062e2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80062e4:	183b      	adds	r3, r7, r0
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b1f      	cmp	r3, #31
 80062ea:	d903      	bls.n	80062f4 <ssd1306_WriteChar+0x30>
 80062ec:	183b      	adds	r3, r7, r0
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80062f2:	d901      	bls.n	80062f8 <ssd1306_WriteChar+0x34>
        return 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e077      	b.n	80063e8 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80062f8:	4b3d      	ldr	r3, [pc, #244]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	001a      	movs	r2, r3
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	2b80      	cmp	r3, #128	@ 0x80
 8006306:	dc07      	bgt.n	8006318 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006308:	4b39      	ldr	r3, [pc, #228]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 800630a:	885b      	ldrh	r3, [r3, #2]
 800630c:	001a      	movs	r2, r3
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006314:	2b40      	cmp	r3, #64	@ 0x40
 8006316:	dd01      	ble.n	800631c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8006318:	2300      	movs	r3, #0
 800631a:	e065      	b.n	80063e8 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e051      	b.n	80063c6 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006322:	1d3b      	adds	r3, r7, #4
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	230f      	movs	r3, #15
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	3b20      	subs	r3, #32
 800632e:	1d39      	adds	r1, r7, #4
 8006330:	7849      	ldrb	r1, [r1, #1]
 8006332:	434b      	muls	r3, r1
 8006334:	0019      	movs	r1, r3
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	18cb      	adds	r3, r1, r3
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	18d3      	adds	r3, r2, r3
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006342:	2300      	movs	r3, #0
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	e035      	b.n	80063b4 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	409a      	lsls	r2, r3
 800634e:	2380      	movs	r3, #128	@ 0x80
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	4013      	ands	r3, r2
 8006354:	d014      	beq.n	8006380 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006356:	4b26      	ldr	r3, [pc, #152]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	18d3      	adds	r3, r2, r3
 8006362:	b2d8      	uxtb	r0, r3
 8006364:	4b22      	ldr	r3, [pc, #136]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 8006366:	885b      	ldrh	r3, [r3, #2]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	18d3      	adds	r3, r2, r3
 8006370:	b2d9      	uxtb	r1, r3
 8006372:	230e      	movs	r3, #14
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	001a      	movs	r2, r3
 800637a:	f7ff ff41 	bl	8006200 <ssd1306_DrawPixel>
 800637e:	e016      	b.n	80063ae <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006380:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	18d3      	adds	r3, r2, r3
 800638c:	b2d8      	uxtb	r0, r3
 800638e:	4b18      	ldr	r3, [pc, #96]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 8006390:	885b      	ldrh	r3, [r3, #2]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	18d3      	adds	r3, r2, r3
 800639a:	b2d9      	uxtb	r1, r3
 800639c:	230e      	movs	r3, #14
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	425a      	negs	r2, r3
 80063a4:	4153      	adcs	r3, r2
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	001a      	movs	r2, r3
 80063aa:	f7ff ff29 	bl	8006200 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	3301      	adds	r3, #1
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	001a      	movs	r2, r3
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4293      	cmp	r3, r2
 80063be:	d3c3      	bcc.n	8006348 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	001a      	movs	r2, r3
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d3a7      	bcc.n	8006322 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80063d2:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	1d3a      	adds	r2, r7, #4
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	189b      	adds	r3, r3, r2
 80063dc:	b29a      	uxth	r2, r3
 80063de:	4b04      	ldr	r3, [pc, #16]	@ (80063f0 <ssd1306_WriteChar+0x12c>)
 80063e0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80063e2:	230f      	movs	r3, #15
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	781b      	ldrb	r3, [r3, #0]
}
 80063e8:	0018      	movs	r0, r3
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b009      	add	sp, #36	@ 0x24
 80063ee:	bd90      	pop	{r4, r7, pc}
 80063f0:	20000778 	.word	0x20000778

080063f4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	1d38      	adds	r0, r7, #4
 80063fe:	6001      	str	r1, [r0, #0]
 8006400:	6042      	str	r2, [r0, #4]
 8006402:	001a      	movs	r2, r3
 8006404:	1cfb      	adds	r3, r7, #3
 8006406:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8006408:	e014      	b.n	8006434 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	7818      	ldrb	r0, [r3, #0]
 800640e:	1cfb      	adds	r3, r7, #3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	1d3a      	adds	r2, r7, #4
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	f7ff ff54 	bl	80062c4 <ssd1306_WriteChar>
 800641c:	0003      	movs	r3, r0
 800641e:	001a      	movs	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d002      	beq.n	800642e <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	e008      	b.n	8006440 <ssd1306_WriteString+0x4c>
        }
        str++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b004      	add	sp, #16
 8006446:	bd80      	pop	{r7, pc}

08006448 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	0002      	movs	r2, r0
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	1dbb      	adds	r3, r7, #6
 8006456:	1c0a      	adds	r2, r1, #0
 8006458:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800645a:	1dfb      	adds	r3, r7, #7
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b29a      	uxth	r2, r3
 8006460:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <ssd1306_SetCursor+0x30>)
 8006462:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006464:	1dbb      	adds	r3, r7, #6
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	4b03      	ldr	r3, [pc, #12]	@ (8006478 <ssd1306_SetCursor+0x30>)
 800646c:	805a      	strh	r2, [r3, #2]
}
 800646e:	46c0      	nop			@ (mov r8, r8)
 8006470:	46bd      	mov	sp, r7
 8006472:	b002      	add	sp, #8
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	20000778 	.word	0x20000778

0800647c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	0002      	movs	r2, r0
 8006484:	1dfb      	adds	r3, r7, #7
 8006486:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006488:	210f      	movs	r1, #15
 800648a:	187b      	adds	r3, r7, r1
 800648c:	2281      	movs	r2, #129	@ 0x81
 800648e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006490:	187b      	adds	r3, r7, r1
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	0018      	movs	r0, r3
 8006496:	f7ff fdc1 	bl	800601c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800649a:	1dfb      	adds	r3, r7, #7
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	0018      	movs	r0, r3
 80064a0:	f7ff fdbc 	bl	800601c <ssd1306_WriteCommand>
}
 80064a4:	46c0      	nop			@ (mov r8, r8)
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b004      	add	sp, #16
 80064aa:	bd80      	pop	{r7, pc}

080064ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	0002      	movs	r2, r0
 80064b4:	1dfb      	adds	r3, r7, #7
 80064b6:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80064b8:	1dfb      	adds	r3, r7, #7
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80064c0:	230f      	movs	r3, #15
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	22af      	movs	r2, #175	@ 0xaf
 80064c6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <ssd1306_SetDisplayOn+0x48>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	715a      	strb	r2, [r3, #5]
 80064ce:	e006      	b.n	80064de <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80064d0:	230f      	movs	r3, #15
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	22ae      	movs	r2, #174	@ 0xae
 80064d6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80064d8:	4b06      	ldr	r3, [pc, #24]	@ (80064f4 <ssd1306_SetDisplayOn+0x48>)
 80064da:	2200      	movs	r2, #0
 80064dc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80064de:	230f      	movs	r3, #15
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7ff fd99 	bl	800601c <ssd1306_WriteCommand>
}
 80064ea:	46c0      	nop			@ (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	20000778 	.word	0x20000778

080064f8 <__cvt>:
 80064f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fa:	001f      	movs	r7, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	0016      	movs	r6, r2
 8006500:	b08b      	sub	sp, #44	@ 0x2c
 8006502:	429f      	cmp	r7, r3
 8006504:	da04      	bge.n	8006510 <__cvt+0x18>
 8006506:	2180      	movs	r1, #128	@ 0x80
 8006508:	0609      	lsls	r1, r1, #24
 800650a:	187b      	adds	r3, r7, r1
 800650c:	001f      	movs	r7, r3
 800650e:	232d      	movs	r3, #45	@ 0x2d
 8006510:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006512:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006514:	7013      	strb	r3, [r2, #0]
 8006516:	2320      	movs	r3, #32
 8006518:	2203      	movs	r2, #3
 800651a:	439d      	bics	r5, r3
 800651c:	2d46      	cmp	r5, #70	@ 0x46
 800651e:	d007      	beq.n	8006530 <__cvt+0x38>
 8006520:	002b      	movs	r3, r5
 8006522:	3b45      	subs	r3, #69	@ 0x45
 8006524:	4259      	negs	r1, r3
 8006526:	414b      	adcs	r3, r1
 8006528:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800652a:	3a01      	subs	r2, #1
 800652c:	18cb      	adds	r3, r1, r3
 800652e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006530:	ab09      	add	r3, sp, #36	@ 0x24
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	ab08      	add	r3, sp, #32
 8006536:	9303      	str	r3, [sp, #12]
 8006538:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800653a:	9200      	str	r2, [sp, #0]
 800653c:	9302      	str	r3, [sp, #8]
 800653e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006540:	0032      	movs	r2, r6
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	003b      	movs	r3, r7
 8006546:	f000 febb 	bl	80072c0 <_dtoa_r>
 800654a:	0004      	movs	r4, r0
 800654c:	2d47      	cmp	r5, #71	@ 0x47
 800654e:	d11b      	bne.n	8006588 <__cvt+0x90>
 8006550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006552:	07db      	lsls	r3, r3, #31
 8006554:	d511      	bpl.n	800657a <__cvt+0x82>
 8006556:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006558:	18c3      	adds	r3, r0, r3
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	0030      	movs	r0, r6
 8006562:	0039      	movs	r1, r7
 8006564:	f7f9 ff6e 	bl	8000444 <__aeabi_dcmpeq>
 8006568:	2800      	cmp	r0, #0
 800656a:	d001      	beq.n	8006570 <__cvt+0x78>
 800656c:	9b07      	ldr	r3, [sp, #28]
 800656e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006570:	2230      	movs	r2, #48	@ 0x30
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	9907      	ldr	r1, [sp, #28]
 8006576:	428b      	cmp	r3, r1
 8006578:	d320      	bcc.n	80065bc <__cvt+0xc4>
 800657a:	0020      	movs	r0, r4
 800657c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006580:	1b1b      	subs	r3, r3, r4
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	b00b      	add	sp, #44	@ 0x2c
 8006586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006588:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800658a:	18c3      	adds	r3, r0, r3
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	2d46      	cmp	r5, #70	@ 0x46
 8006590:	d1e4      	bne.n	800655c <__cvt+0x64>
 8006592:	7803      	ldrb	r3, [r0, #0]
 8006594:	2b30      	cmp	r3, #48	@ 0x30
 8006596:	d10c      	bne.n	80065b2 <__cvt+0xba>
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	0030      	movs	r0, r6
 800659e:	0039      	movs	r1, r7
 80065a0:	f7f9 ff50 	bl	8000444 <__aeabi_dcmpeq>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d104      	bne.n	80065b2 <__cvt+0xba>
 80065a8:	2301      	movs	r3, #1
 80065aa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065b4:	9a07      	ldr	r2, [sp, #28]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	18d3      	adds	r3, r2, r3
 80065ba:	e7ce      	b.n	800655a <__cvt+0x62>
 80065bc:	1c59      	adds	r1, r3, #1
 80065be:	9109      	str	r1, [sp, #36]	@ 0x24
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	e7d6      	b.n	8006572 <__cvt+0x7a>

080065c4 <__exponent>:
 80065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c6:	232b      	movs	r3, #43	@ 0x2b
 80065c8:	0005      	movs	r5, r0
 80065ca:	000c      	movs	r4, r1
 80065cc:	b085      	sub	sp, #20
 80065ce:	7002      	strb	r2, [r0, #0]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	da01      	bge.n	80065d8 <__exponent+0x14>
 80065d4:	424c      	negs	r4, r1
 80065d6:	3302      	adds	r3, #2
 80065d8:	706b      	strb	r3, [r5, #1]
 80065da:	2c09      	cmp	r4, #9
 80065dc:	dd2c      	ble.n	8006638 <__exponent+0x74>
 80065de:	ab02      	add	r3, sp, #8
 80065e0:	1dde      	adds	r6, r3, #7
 80065e2:	0020      	movs	r0, r4
 80065e4:	210a      	movs	r1, #10
 80065e6:	f7f9 ff17 	bl	8000418 <__aeabi_idivmod>
 80065ea:	0037      	movs	r7, r6
 80065ec:	3130      	adds	r1, #48	@ 0x30
 80065ee:	3e01      	subs	r6, #1
 80065f0:	0020      	movs	r0, r4
 80065f2:	7031      	strb	r1, [r6, #0]
 80065f4:	210a      	movs	r1, #10
 80065f6:	9401      	str	r4, [sp, #4]
 80065f8:	f7f9 fe28 	bl	800024c <__divsi3>
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	0004      	movs	r4, r0
 8006600:	2b63      	cmp	r3, #99	@ 0x63
 8006602:	dcee      	bgt.n	80065e2 <__exponent+0x1e>
 8006604:	1eba      	subs	r2, r7, #2
 8006606:	1ca8      	adds	r0, r5, #2
 8006608:	0001      	movs	r1, r0
 800660a:	0013      	movs	r3, r2
 800660c:	3430      	adds	r4, #48	@ 0x30
 800660e:	7014      	strb	r4, [r2, #0]
 8006610:	ac02      	add	r4, sp, #8
 8006612:	3407      	adds	r4, #7
 8006614:	429c      	cmp	r4, r3
 8006616:	d80a      	bhi.n	800662e <__exponent+0x6a>
 8006618:	2300      	movs	r3, #0
 800661a:	42a2      	cmp	r2, r4
 800661c:	d803      	bhi.n	8006626 <__exponent+0x62>
 800661e:	3309      	adds	r3, #9
 8006620:	aa02      	add	r2, sp, #8
 8006622:	189b      	adds	r3, r3, r2
 8006624:	1bdb      	subs	r3, r3, r7
 8006626:	18c0      	adds	r0, r0, r3
 8006628:	1b40      	subs	r0, r0, r5
 800662a:	b005      	add	sp, #20
 800662c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800662e:	781c      	ldrb	r4, [r3, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	700c      	strb	r4, [r1, #0]
 8006634:	3101      	adds	r1, #1
 8006636:	e7eb      	b.n	8006610 <__exponent+0x4c>
 8006638:	2330      	movs	r3, #48	@ 0x30
 800663a:	18e4      	adds	r4, r4, r3
 800663c:	70ab      	strb	r3, [r5, #2]
 800663e:	1d28      	adds	r0, r5, #4
 8006640:	70ec      	strb	r4, [r5, #3]
 8006642:	e7f1      	b.n	8006628 <__exponent+0x64>

08006644 <_printf_float>:
 8006644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006646:	b097      	sub	sp, #92	@ 0x5c
 8006648:	000d      	movs	r5, r1
 800664a:	920a      	str	r2, [sp, #40]	@ 0x28
 800664c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800664e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006650:	9009      	str	r0, [sp, #36]	@ 0x24
 8006652:	f000 fd13 	bl	800707c <_localeconv_r>
 8006656:	6803      	ldr	r3, [r0, #0]
 8006658:	0018      	movs	r0, r3
 800665a:	930d      	str	r3, [sp, #52]	@ 0x34
 800665c:	f7f9 fd50 	bl	8000100 <strlen>
 8006660:	2300      	movs	r3, #0
 8006662:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006664:	9314      	str	r3, [sp, #80]	@ 0x50
 8006666:	7e2b      	ldrb	r3, [r5, #24]
 8006668:	2207      	movs	r2, #7
 800666a:	930c      	str	r3, [sp, #48]	@ 0x30
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006670:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	05c9      	lsls	r1, r1, #23
 8006676:	d545      	bpl.n	8006704 <_printf_float+0xc0>
 8006678:	189b      	adds	r3, r3, r2
 800667a:	4393      	bics	r3, r2
 800667c:	001a      	movs	r2, r3
 800667e:	3208      	adds	r2, #8
 8006680:	6022      	str	r2, [r4, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	681e      	ldr	r6, [r3, #0]
 8006686:	685f      	ldr	r7, [r3, #4]
 8006688:	007b      	lsls	r3, r7, #1
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	9311      	str	r3, [sp, #68]	@ 0x44
 800668e:	9610      	str	r6, [sp, #64]	@ 0x40
 8006690:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006692:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006694:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006696:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006698:	4ba7      	ldr	r3, [pc, #668]	@ (8006938 <_printf_float+0x2f4>)
 800669a:	4252      	negs	r2, r2
 800669c:	f7fb fd0c 	bl	80020b8 <__aeabi_dcmpun>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d131      	bne.n	8006708 <_printf_float+0xc4>
 80066a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80066a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80066a8:	2201      	movs	r2, #1
 80066aa:	4ba3      	ldr	r3, [pc, #652]	@ (8006938 <_printf_float+0x2f4>)
 80066ac:	4252      	negs	r2, r2
 80066ae:	f7f9 fed9 	bl	8000464 <__aeabi_dcmple>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d128      	bne.n	8006708 <_printf_float+0xc4>
 80066b6:	2200      	movs	r2, #0
 80066b8:	2300      	movs	r3, #0
 80066ba:	0030      	movs	r0, r6
 80066bc:	0039      	movs	r1, r7
 80066be:	f7f9 fec7 	bl	8000450 <__aeabi_dcmplt>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d003      	beq.n	80066ce <_printf_float+0x8a>
 80066c6:	002b      	movs	r3, r5
 80066c8:	222d      	movs	r2, #45	@ 0x2d
 80066ca:	3343      	adds	r3, #67	@ 0x43
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066d0:	4f9a      	ldr	r7, [pc, #616]	@ (800693c <_printf_float+0x2f8>)
 80066d2:	2b47      	cmp	r3, #71	@ 0x47
 80066d4:	d900      	bls.n	80066d8 <_printf_float+0x94>
 80066d6:	4f9a      	ldr	r7, [pc, #616]	@ (8006940 <_printf_float+0x2fc>)
 80066d8:	2303      	movs	r3, #3
 80066da:	2400      	movs	r4, #0
 80066dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066de:	612b      	str	r3, [r5, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	439a      	bics	r2, r3
 80066e4:	602a      	str	r2, [r5, #0]
 80066e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066e8:	0029      	movs	r1, r5
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066f0:	aa15      	add	r2, sp, #84	@ 0x54
 80066f2:	f000 f9e5 	bl	8006ac0 <_printf_common>
 80066f6:	3001      	adds	r0, #1
 80066f8:	d000      	beq.n	80066fc <_printf_float+0xb8>
 80066fa:	e09f      	b.n	800683c <_printf_float+0x1f8>
 80066fc:	2001      	movs	r0, #1
 80066fe:	4240      	negs	r0, r0
 8006700:	b017      	add	sp, #92	@ 0x5c
 8006702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006704:	3307      	adds	r3, #7
 8006706:	e7b8      	b.n	800667a <_printf_float+0x36>
 8006708:	0032      	movs	r2, r6
 800670a:	003b      	movs	r3, r7
 800670c:	0030      	movs	r0, r6
 800670e:	0039      	movs	r1, r7
 8006710:	f7fb fcd2 	bl	80020b8 <__aeabi_dcmpun>
 8006714:	2800      	cmp	r0, #0
 8006716:	d00b      	beq.n	8006730 <_printf_float+0xec>
 8006718:	2f00      	cmp	r7, #0
 800671a:	da03      	bge.n	8006724 <_printf_float+0xe0>
 800671c:	002b      	movs	r3, r5
 800671e:	222d      	movs	r2, #45	@ 0x2d
 8006720:	3343      	adds	r3, #67	@ 0x43
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006726:	4f87      	ldr	r7, [pc, #540]	@ (8006944 <_printf_float+0x300>)
 8006728:	2b47      	cmp	r3, #71	@ 0x47
 800672a:	d9d5      	bls.n	80066d8 <_printf_float+0x94>
 800672c:	4f86      	ldr	r7, [pc, #536]	@ (8006948 <_printf_float+0x304>)
 800672e:	e7d3      	b.n	80066d8 <_printf_float+0x94>
 8006730:	2220      	movs	r2, #32
 8006732:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006734:	686b      	ldr	r3, [r5, #4]
 8006736:	4394      	bics	r4, r2
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	d146      	bne.n	80067ca <_printf_float+0x186>
 800673c:	3307      	adds	r3, #7
 800673e:	606b      	str	r3, [r5, #4]
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4313      	orrs	r3, r2
 8006748:	2200      	movs	r2, #0
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	9206      	str	r2, [sp, #24]
 800674e:	aa14      	add	r2, sp, #80	@ 0x50
 8006750:	9205      	str	r2, [sp, #20]
 8006752:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006754:	a90a      	add	r1, sp, #40	@ 0x28
 8006756:	9204      	str	r2, [sp, #16]
 8006758:	aa13      	add	r2, sp, #76	@ 0x4c
 800675a:	9203      	str	r2, [sp, #12]
 800675c:	2223      	movs	r2, #35	@ 0x23
 800675e:	1852      	adds	r2, r2, r1
 8006760:	9202      	str	r2, [sp, #8]
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	686b      	ldr	r3, [r5, #4]
 8006766:	0032      	movs	r2, r6
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800676c:	003b      	movs	r3, r7
 800676e:	f7ff fec3 	bl	80064f8 <__cvt>
 8006772:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006774:	0007      	movs	r7, r0
 8006776:	2c47      	cmp	r4, #71	@ 0x47
 8006778:	d12d      	bne.n	80067d6 <_printf_float+0x192>
 800677a:	1cd3      	adds	r3, r2, #3
 800677c:	db02      	blt.n	8006784 <_printf_float+0x140>
 800677e:	686b      	ldr	r3, [r5, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	dd48      	ble.n	8006816 <_printf_float+0x1d2>
 8006784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006786:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006788:	3b02      	subs	r3, #2
 800678a:	b2db      	uxtb	r3, r3
 800678c:	930c      	str	r3, [sp, #48]	@ 0x30
 800678e:	0028      	movs	r0, r5
 8006790:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006792:	3901      	subs	r1, #1
 8006794:	3050      	adds	r0, #80	@ 0x50
 8006796:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006798:	f7ff ff14 	bl	80065c4 <__exponent>
 800679c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800679e:	0004      	movs	r4, r0
 80067a0:	1813      	adds	r3, r2, r0
 80067a2:	612b      	str	r3, [r5, #16]
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	dc02      	bgt.n	80067ae <_printf_float+0x16a>
 80067a8:	682a      	ldr	r2, [r5, #0]
 80067aa:	07d2      	lsls	r2, r2, #31
 80067ac:	d501      	bpl.n	80067b2 <_printf_float+0x16e>
 80067ae:	3301      	adds	r3, #1
 80067b0:	612b      	str	r3, [r5, #16]
 80067b2:	2323      	movs	r3, #35	@ 0x23
 80067b4:	aa0a      	add	r2, sp, #40	@ 0x28
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d100      	bne.n	80067c0 <_printf_float+0x17c>
 80067be:	e792      	b.n	80066e6 <_printf_float+0xa2>
 80067c0:	002b      	movs	r3, r5
 80067c2:	222d      	movs	r2, #45	@ 0x2d
 80067c4:	3343      	adds	r3, #67	@ 0x43
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e78d      	b.n	80066e6 <_printf_float+0xa2>
 80067ca:	2c47      	cmp	r4, #71	@ 0x47
 80067cc:	d1b8      	bne.n	8006740 <_printf_float+0xfc>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1b6      	bne.n	8006740 <_printf_float+0xfc>
 80067d2:	3301      	adds	r3, #1
 80067d4:	e7b3      	b.n	800673e <_printf_float+0xfa>
 80067d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067d8:	0011      	movs	r1, r2
 80067da:	2b65      	cmp	r3, #101	@ 0x65
 80067dc:	d9d7      	bls.n	800678e <_printf_float+0x14a>
 80067de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067e0:	2b66      	cmp	r3, #102	@ 0x66
 80067e2:	d11a      	bne.n	800681a <_printf_float+0x1d6>
 80067e4:	686b      	ldr	r3, [r5, #4]
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	dd09      	ble.n	80067fe <_printf_float+0x1ba>
 80067ea:	612a      	str	r2, [r5, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <_printf_float+0x1b2>
 80067f0:	6829      	ldr	r1, [r5, #0]
 80067f2:	07c9      	lsls	r1, r1, #31
 80067f4:	d50b      	bpl.n	800680e <_printf_float+0x1ca>
 80067f6:	3301      	adds	r3, #1
 80067f8:	189b      	adds	r3, r3, r2
 80067fa:	612b      	str	r3, [r5, #16]
 80067fc:	e007      	b.n	800680e <_printf_float+0x1ca>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <_printf_float+0x1c6>
 8006802:	2201      	movs	r2, #1
 8006804:	6829      	ldr	r1, [r5, #0]
 8006806:	4211      	tst	r1, r2
 8006808:	d000      	beq.n	800680c <_printf_float+0x1c8>
 800680a:	1c9a      	adds	r2, r3, #2
 800680c:	612a      	str	r2, [r5, #16]
 800680e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006810:	2400      	movs	r4, #0
 8006812:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006814:	e7cd      	b.n	80067b2 <_printf_float+0x16e>
 8006816:	2367      	movs	r3, #103	@ 0x67
 8006818:	930c      	str	r3, [sp, #48]	@ 0x30
 800681a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800681c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800681e:	4299      	cmp	r1, r3
 8006820:	db06      	blt.n	8006830 <_printf_float+0x1ec>
 8006822:	682b      	ldr	r3, [r5, #0]
 8006824:	6129      	str	r1, [r5, #16]
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d5f1      	bpl.n	800680e <_printf_float+0x1ca>
 800682a:	3101      	adds	r1, #1
 800682c:	6129      	str	r1, [r5, #16]
 800682e:	e7ee      	b.n	800680e <_printf_float+0x1ca>
 8006830:	2201      	movs	r2, #1
 8006832:	2900      	cmp	r1, #0
 8006834:	dce0      	bgt.n	80067f8 <_printf_float+0x1b4>
 8006836:	1892      	adds	r2, r2, r2
 8006838:	1a52      	subs	r2, r2, r1
 800683a:	e7dd      	b.n	80067f8 <_printf_float+0x1b4>
 800683c:	682a      	ldr	r2, [r5, #0]
 800683e:	0553      	lsls	r3, r2, #21
 8006840:	d408      	bmi.n	8006854 <_printf_float+0x210>
 8006842:	692b      	ldr	r3, [r5, #16]
 8006844:	003a      	movs	r2, r7
 8006846:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006848:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800684a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800684c:	47a0      	blx	r4
 800684e:	3001      	adds	r0, #1
 8006850:	d129      	bne.n	80068a6 <_printf_float+0x262>
 8006852:	e753      	b.n	80066fc <_printf_float+0xb8>
 8006854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006856:	2b65      	cmp	r3, #101	@ 0x65
 8006858:	d800      	bhi.n	800685c <_printf_float+0x218>
 800685a:	e0da      	b.n	8006a12 <_printf_float+0x3ce>
 800685c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800685e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006860:	2200      	movs	r2, #0
 8006862:	2300      	movs	r3, #0
 8006864:	f7f9 fdee 	bl	8000444 <__aeabi_dcmpeq>
 8006868:	2800      	cmp	r0, #0
 800686a:	d033      	beq.n	80068d4 <_printf_float+0x290>
 800686c:	2301      	movs	r3, #1
 800686e:	4a37      	ldr	r2, [pc, #220]	@ (800694c <_printf_float+0x308>)
 8006870:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006874:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006876:	47a0      	blx	r4
 8006878:	3001      	adds	r0, #1
 800687a:	d100      	bne.n	800687e <_printf_float+0x23a>
 800687c:	e73e      	b.n	80066fc <_printf_float+0xb8>
 800687e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006880:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006882:	42b3      	cmp	r3, r6
 8006884:	db02      	blt.n	800688c <_printf_float+0x248>
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	07db      	lsls	r3, r3, #31
 800688a:	d50c      	bpl.n	80068a6 <_printf_float+0x262>
 800688c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800688e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006890:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006892:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006894:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006896:	47a0      	blx	r4
 8006898:	2400      	movs	r4, #0
 800689a:	3001      	adds	r0, #1
 800689c:	d100      	bne.n	80068a0 <_printf_float+0x25c>
 800689e:	e72d      	b.n	80066fc <_printf_float+0xb8>
 80068a0:	1e73      	subs	r3, r6, #1
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	dc0a      	bgt.n	80068bc <_printf_float+0x278>
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	079b      	lsls	r3, r3, #30
 80068aa:	d500      	bpl.n	80068ae <_printf_float+0x26a>
 80068ac:	e105      	b.n	8006aba <_printf_float+0x476>
 80068ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068b0:	68e8      	ldr	r0, [r5, #12]
 80068b2:	4298      	cmp	r0, r3
 80068b4:	db00      	blt.n	80068b8 <_printf_float+0x274>
 80068b6:	e723      	b.n	8006700 <_printf_float+0xbc>
 80068b8:	0018      	movs	r0, r3
 80068ba:	e721      	b.n	8006700 <_printf_float+0xbc>
 80068bc:	002a      	movs	r2, r5
 80068be:	2301      	movs	r3, #1
 80068c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80068c6:	321a      	adds	r2, #26
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	d100      	bne.n	80068d0 <_printf_float+0x28c>
 80068ce:	e715      	b.n	80066fc <_printf_float+0xb8>
 80068d0:	3401      	adds	r4, #1
 80068d2:	e7e5      	b.n	80068a0 <_printf_float+0x25c>
 80068d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc3a      	bgt.n	8006950 <_printf_float+0x30c>
 80068da:	2301      	movs	r3, #1
 80068dc:	4a1b      	ldr	r2, [pc, #108]	@ (800694c <_printf_float+0x308>)
 80068de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80068e4:	47a0      	blx	r4
 80068e6:	3001      	adds	r0, #1
 80068e8:	d100      	bne.n	80068ec <_printf_float+0x2a8>
 80068ea:	e707      	b.n	80066fc <_printf_float+0xb8>
 80068ec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80068ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068f0:	4333      	orrs	r3, r6
 80068f2:	d102      	bne.n	80068fa <_printf_float+0x2b6>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	07db      	lsls	r3, r3, #31
 80068f8:	d5d5      	bpl.n	80068a6 <_printf_float+0x262>
 80068fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006900:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006902:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006904:	47a0      	blx	r4
 8006906:	2300      	movs	r3, #0
 8006908:	3001      	adds	r0, #1
 800690a:	d100      	bne.n	800690e <_printf_float+0x2ca>
 800690c:	e6f6      	b.n	80066fc <_printf_float+0xb8>
 800690e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006910:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006912:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006914:	425b      	negs	r3, r3
 8006916:	4293      	cmp	r3, r2
 8006918:	dc01      	bgt.n	800691e <_printf_float+0x2da>
 800691a:	0033      	movs	r3, r6
 800691c:	e792      	b.n	8006844 <_printf_float+0x200>
 800691e:	002a      	movs	r2, r5
 8006920:	2301      	movs	r3, #1
 8006922:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006924:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006926:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006928:	321a      	adds	r2, #26
 800692a:	47a0      	blx	r4
 800692c:	3001      	adds	r0, #1
 800692e:	d100      	bne.n	8006932 <_printf_float+0x2ee>
 8006930:	e6e4      	b.n	80066fc <_printf_float+0xb8>
 8006932:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006934:	3301      	adds	r3, #1
 8006936:	e7ea      	b.n	800690e <_printf_float+0x2ca>
 8006938:	7fefffff 	.word	0x7fefffff
 800693c:	0800accc 	.word	0x0800accc
 8006940:	0800acd0 	.word	0x0800acd0
 8006944:	0800acd4 	.word	0x0800acd4
 8006948:	0800acd8 	.word	0x0800acd8
 800694c:	0800acdc 	.word	0x0800acdc
 8006950:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006952:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006954:	930c      	str	r3, [sp, #48]	@ 0x30
 8006956:	429e      	cmp	r6, r3
 8006958:	dd00      	ble.n	800695c <_printf_float+0x318>
 800695a:	001e      	movs	r6, r3
 800695c:	2e00      	cmp	r6, #0
 800695e:	dc31      	bgt.n	80069c4 <_printf_float+0x380>
 8006960:	43f3      	mvns	r3, r6
 8006962:	2400      	movs	r4, #0
 8006964:	17db      	asrs	r3, r3, #31
 8006966:	4033      	ands	r3, r6
 8006968:	930e      	str	r3, [sp, #56]	@ 0x38
 800696a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800696c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800696e:	1af3      	subs	r3, r6, r3
 8006970:	42a3      	cmp	r3, r4
 8006972:	dc30      	bgt.n	80069d6 <_printf_float+0x392>
 8006974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006976:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006978:	429a      	cmp	r2, r3
 800697a:	dc38      	bgt.n	80069ee <_printf_float+0x3aa>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	07db      	lsls	r3, r3, #31
 8006980:	d435      	bmi.n	80069ee <_printf_float+0x3aa>
 8006982:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006986:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006988:	1b9b      	subs	r3, r3, r6
 800698a:	1b14      	subs	r4, r2, r4
 800698c:	429c      	cmp	r4, r3
 800698e:	dd00      	ble.n	8006992 <_printf_float+0x34e>
 8006990:	001c      	movs	r4, r3
 8006992:	2c00      	cmp	r4, #0
 8006994:	dc34      	bgt.n	8006a00 <_printf_float+0x3bc>
 8006996:	43e3      	mvns	r3, r4
 8006998:	2600      	movs	r6, #0
 800699a:	17db      	asrs	r3, r3, #31
 800699c:	401c      	ands	r4, r3
 800699e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	1b1b      	subs	r3, r3, r4
 80069a6:	42b3      	cmp	r3, r6
 80069a8:	dc00      	bgt.n	80069ac <_printf_float+0x368>
 80069aa:	e77c      	b.n	80068a6 <_printf_float+0x262>
 80069ac:	002a      	movs	r2, r5
 80069ae:	2301      	movs	r3, #1
 80069b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80069b6:	321a      	adds	r2, #26
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	d100      	bne.n	80069c0 <_printf_float+0x37c>
 80069be:	e69d      	b.n	80066fc <_printf_float+0xb8>
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7ec      	b.n	800699e <_printf_float+0x35a>
 80069c4:	0033      	movs	r3, r6
 80069c6:	003a      	movs	r2, r7
 80069c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80069ce:	47a0      	blx	r4
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1c5      	bne.n	8006960 <_printf_float+0x31c>
 80069d4:	e692      	b.n	80066fc <_printf_float+0xb8>
 80069d6:	002a      	movs	r2, r5
 80069d8:	2301      	movs	r3, #1
 80069da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069de:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069e0:	321a      	adds	r2, #26
 80069e2:	47b0      	blx	r6
 80069e4:	3001      	adds	r0, #1
 80069e6:	d100      	bne.n	80069ea <_printf_float+0x3a6>
 80069e8:	e688      	b.n	80066fc <_printf_float+0xb8>
 80069ea:	3401      	adds	r4, #1
 80069ec:	e7bd      	b.n	800696a <_printf_float+0x326>
 80069ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80069f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80069f8:	47a0      	blx	r4
 80069fa:	3001      	adds	r0, #1
 80069fc:	d1c1      	bne.n	8006982 <_printf_float+0x33e>
 80069fe:	e67d      	b.n	80066fc <_printf_float+0xb8>
 8006a00:	19ba      	adds	r2, r7, r6
 8006a02:	0023      	movs	r3, r4
 8006a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a08:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a0a:	47b0      	blx	r6
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d1c2      	bne.n	8006996 <_printf_float+0x352>
 8006a10:	e674      	b.n	80066fc <_printf_float+0xb8>
 8006a12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a14:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	dc02      	bgt.n	8006a20 <_printf_float+0x3dc>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	421a      	tst	r2, r3
 8006a1e:	d039      	beq.n	8006a94 <_printf_float+0x450>
 8006a20:	2301      	movs	r3, #1
 8006a22:	003a      	movs	r2, r7
 8006a24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a2a:	47b0      	blx	r6
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d100      	bne.n	8006a32 <_printf_float+0x3ee>
 8006a30:	e664      	b.n	80066fc <_printf_float+0xb8>
 8006a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a3c:	47b0      	blx	r6
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d100      	bne.n	8006a44 <_printf_float+0x400>
 8006a42:	e65b      	b.n	80066fc <_printf_float+0xb8>
 8006a44:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006a46:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a50:	2300      	movs	r3, #0
 8006a52:	f7f9 fcf7 	bl	8000444 <__aeabi_dcmpeq>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d11a      	bne.n	8006a90 <_printf_float+0x44c>
 8006a5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a5c:	1c7a      	adds	r2, r7, #1
 8006a5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a62:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a64:	47b0      	blx	r6
 8006a66:	3001      	adds	r0, #1
 8006a68:	d10e      	bne.n	8006a88 <_printf_float+0x444>
 8006a6a:	e647      	b.n	80066fc <_printf_float+0xb8>
 8006a6c:	002a      	movs	r2, r5
 8006a6e:	2301      	movs	r3, #1
 8006a70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006a76:	321a      	adds	r2, #26
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d100      	bne.n	8006a80 <_printf_float+0x43c>
 8006a7e:	e63d      	b.n	80066fc <_printf_float+0xb8>
 8006a80:	3601      	adds	r6, #1
 8006a82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a84:	429e      	cmp	r6, r3
 8006a86:	dbf1      	blt.n	8006a6c <_printf_float+0x428>
 8006a88:	002a      	movs	r2, r5
 8006a8a:	0023      	movs	r3, r4
 8006a8c:	3250      	adds	r2, #80	@ 0x50
 8006a8e:	e6da      	b.n	8006846 <_printf_float+0x202>
 8006a90:	2600      	movs	r6, #0
 8006a92:	e7f6      	b.n	8006a82 <_printf_float+0x43e>
 8006a94:	003a      	movs	r2, r7
 8006a96:	e7e2      	b.n	8006a5e <_printf_float+0x41a>
 8006a98:	002a      	movs	r2, r5
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006aa0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006aa2:	3219      	adds	r2, #25
 8006aa4:	47b0      	blx	r6
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d100      	bne.n	8006aac <_printf_float+0x468>
 8006aaa:	e627      	b.n	80066fc <_printf_float+0xb8>
 8006aac:	3401      	adds	r4, #1
 8006aae:	68eb      	ldr	r3, [r5, #12]
 8006ab0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	dcef      	bgt.n	8006a98 <_printf_float+0x454>
 8006ab8:	e6f9      	b.n	80068ae <_printf_float+0x26a>
 8006aba:	2400      	movs	r4, #0
 8006abc:	e7f7      	b.n	8006aae <_printf_float+0x46a>
 8006abe:	46c0      	nop			@ (mov r8, r8)

08006ac0 <_printf_common>:
 8006ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac2:	0016      	movs	r6, r2
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	688a      	ldr	r2, [r1, #8]
 8006ac8:	690b      	ldr	r3, [r1, #16]
 8006aca:	000c      	movs	r4, r1
 8006acc:	9000      	str	r0, [sp, #0]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	da00      	bge.n	8006ad4 <_printf_common+0x14>
 8006ad2:	0013      	movs	r3, r2
 8006ad4:	0022      	movs	r2, r4
 8006ad6:	6033      	str	r3, [r6, #0]
 8006ad8:	3243      	adds	r2, #67	@ 0x43
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d001      	beq.n	8006ae4 <_printf_common+0x24>
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	069b      	lsls	r3, r3, #26
 8006ae8:	d502      	bpl.n	8006af0 <_printf_common+0x30>
 8006aea:	6833      	ldr	r3, [r6, #0]
 8006aec:	3302      	adds	r3, #2
 8006aee:	6033      	str	r3, [r6, #0]
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	2306      	movs	r3, #6
 8006af4:	0015      	movs	r5, r2
 8006af6:	401d      	ands	r5, r3
 8006af8:	421a      	tst	r2, r3
 8006afa:	d027      	beq.n	8006b4c <_printf_common+0x8c>
 8006afc:	0023      	movs	r3, r4
 8006afe:	3343      	adds	r3, #67	@ 0x43
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	1e5a      	subs	r2, r3, #1
 8006b04:	4193      	sbcs	r3, r2
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	0692      	lsls	r2, r2, #26
 8006b0a:	d430      	bmi.n	8006b6e <_printf_common+0xae>
 8006b0c:	0022      	movs	r2, r4
 8006b0e:	9901      	ldr	r1, [sp, #4]
 8006b10:	9800      	ldr	r0, [sp, #0]
 8006b12:	9d08      	ldr	r5, [sp, #32]
 8006b14:	3243      	adds	r2, #67	@ 0x43
 8006b16:	47a8      	blx	r5
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d025      	beq.n	8006b68 <_printf_common+0xa8>
 8006b1c:	2206      	movs	r2, #6
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	2500      	movs	r5, #0
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d105      	bne.n	8006b34 <_printf_common+0x74>
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	68e5      	ldr	r5, [r4, #12]
 8006b2c:	1aed      	subs	r5, r5, r3
 8006b2e:	43eb      	mvns	r3, r5
 8006b30:	17db      	asrs	r3, r3, #31
 8006b32:	401d      	ands	r5, r3
 8006b34:	68a3      	ldr	r3, [r4, #8]
 8006b36:	6922      	ldr	r2, [r4, #16]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	dd01      	ble.n	8006b40 <_printf_common+0x80>
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	18ed      	adds	r5, r5, r3
 8006b40:	2600      	movs	r6, #0
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	d120      	bne.n	8006b88 <_printf_common+0xc8>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e010      	b.n	8006b6c <_printf_common+0xac>
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	68e3      	ldr	r3, [r4, #12]
 8006b4e:	6832      	ldr	r2, [r6, #0]
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	42ab      	cmp	r3, r5
 8006b54:	ddd2      	ble.n	8006afc <_printf_common+0x3c>
 8006b56:	0022      	movs	r2, r4
 8006b58:	2301      	movs	r3, #1
 8006b5a:	9901      	ldr	r1, [sp, #4]
 8006b5c:	9800      	ldr	r0, [sp, #0]
 8006b5e:	9f08      	ldr	r7, [sp, #32]
 8006b60:	3219      	adds	r2, #25
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	d1f0      	bne.n	8006b4a <_printf_common+0x8a>
 8006b68:	2001      	movs	r0, #1
 8006b6a:	4240      	negs	r0, r0
 8006b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b6e:	2030      	movs	r0, #48	@ 0x30
 8006b70:	18e1      	adds	r1, r4, r3
 8006b72:	3143      	adds	r1, #67	@ 0x43
 8006b74:	7008      	strb	r0, [r1, #0]
 8006b76:	0021      	movs	r1, r4
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	3145      	adds	r1, #69	@ 0x45
 8006b7c:	7809      	ldrb	r1, [r1, #0]
 8006b7e:	18a2      	adds	r2, r4, r2
 8006b80:	3243      	adds	r2, #67	@ 0x43
 8006b82:	3302      	adds	r3, #2
 8006b84:	7011      	strb	r1, [r2, #0]
 8006b86:	e7c1      	b.n	8006b0c <_printf_common+0x4c>
 8006b88:	0022      	movs	r2, r4
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	9901      	ldr	r1, [sp, #4]
 8006b8e:	9800      	ldr	r0, [sp, #0]
 8006b90:	9f08      	ldr	r7, [sp, #32]
 8006b92:	321a      	adds	r2, #26
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	d0e6      	beq.n	8006b68 <_printf_common+0xa8>
 8006b9a:	3601      	adds	r6, #1
 8006b9c:	e7d1      	b.n	8006b42 <_printf_common+0x82>
	...

08006ba0 <_printf_i>:
 8006ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba2:	b08b      	sub	sp, #44	@ 0x2c
 8006ba4:	9206      	str	r2, [sp, #24]
 8006ba6:	000a      	movs	r2, r1
 8006ba8:	3243      	adds	r2, #67	@ 0x43
 8006baa:	9307      	str	r3, [sp, #28]
 8006bac:	9005      	str	r0, [sp, #20]
 8006bae:	9203      	str	r2, [sp, #12]
 8006bb0:	7e0a      	ldrb	r2, [r1, #24]
 8006bb2:	000c      	movs	r4, r1
 8006bb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bb6:	2a78      	cmp	r2, #120	@ 0x78
 8006bb8:	d809      	bhi.n	8006bce <_printf_i+0x2e>
 8006bba:	2a62      	cmp	r2, #98	@ 0x62
 8006bbc:	d80b      	bhi.n	8006bd6 <_printf_i+0x36>
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d100      	bne.n	8006bc4 <_printf_i+0x24>
 8006bc2:	e0bc      	b.n	8006d3e <_printf_i+0x19e>
 8006bc4:	497b      	ldr	r1, [pc, #492]	@ (8006db4 <_printf_i+0x214>)
 8006bc6:	9104      	str	r1, [sp, #16]
 8006bc8:	2a58      	cmp	r2, #88	@ 0x58
 8006bca:	d100      	bne.n	8006bce <_printf_i+0x2e>
 8006bcc:	e090      	b.n	8006cf0 <_printf_i+0x150>
 8006bce:	0025      	movs	r5, r4
 8006bd0:	3542      	adds	r5, #66	@ 0x42
 8006bd2:	702a      	strb	r2, [r5, #0]
 8006bd4:	e022      	b.n	8006c1c <_printf_i+0x7c>
 8006bd6:	0010      	movs	r0, r2
 8006bd8:	3863      	subs	r0, #99	@ 0x63
 8006bda:	2815      	cmp	r0, #21
 8006bdc:	d8f7      	bhi.n	8006bce <_printf_i+0x2e>
 8006bde:	f7f9 faa1 	bl	8000124 <__gnu_thumb1_case_shi>
 8006be2:	0016      	.short	0x0016
 8006be4:	fff6001f 	.word	0xfff6001f
 8006be8:	fff6fff6 	.word	0xfff6fff6
 8006bec:	001ffff6 	.word	0x001ffff6
 8006bf0:	fff6fff6 	.word	0xfff6fff6
 8006bf4:	fff6fff6 	.word	0xfff6fff6
 8006bf8:	003600a1 	.word	0x003600a1
 8006bfc:	fff60080 	.word	0xfff60080
 8006c00:	00b2fff6 	.word	0x00b2fff6
 8006c04:	0036fff6 	.word	0x0036fff6
 8006c08:	fff6fff6 	.word	0xfff6fff6
 8006c0c:	0084      	.short	0x0084
 8006c0e:	0025      	movs	r5, r4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	3542      	adds	r5, #66	@ 0x42
 8006c14:	1d11      	adds	r1, r2, #4
 8006c16:	6019      	str	r1, [r3, #0]
 8006c18:	6813      	ldr	r3, [r2, #0]
 8006c1a:	702b      	strb	r3, [r5, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0a0      	b.n	8006d62 <_printf_i+0x1c2>
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	6809      	ldr	r1, [r1, #0]
 8006c24:	1d02      	adds	r2, r0, #4
 8006c26:	060d      	lsls	r5, r1, #24
 8006c28:	d50b      	bpl.n	8006c42 <_printf_i+0xa2>
 8006c2a:	6806      	ldr	r6, [r0, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	da03      	bge.n	8006c3a <_printf_i+0x9a>
 8006c32:	232d      	movs	r3, #45	@ 0x2d
 8006c34:	9a03      	ldr	r2, [sp, #12]
 8006c36:	4276      	negs	r6, r6
 8006c38:	7013      	strb	r3, [r2, #0]
 8006c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8006db4 <_printf_i+0x214>)
 8006c3c:	270a      	movs	r7, #10
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	e018      	b.n	8006c74 <_printf_i+0xd4>
 8006c42:	6806      	ldr	r6, [r0, #0]
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	0649      	lsls	r1, r1, #25
 8006c48:	d5f1      	bpl.n	8006c2e <_printf_i+0x8e>
 8006c4a:	b236      	sxth	r6, r6
 8006c4c:	e7ef      	b.n	8006c2e <_printf_i+0x8e>
 8006c4e:	6808      	ldr	r0, [r1, #0]
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	c940      	ldmia	r1!, {r6}
 8006c54:	0605      	lsls	r5, r0, #24
 8006c56:	d402      	bmi.n	8006c5e <_printf_i+0xbe>
 8006c58:	0640      	lsls	r0, r0, #25
 8006c5a:	d500      	bpl.n	8006c5e <_printf_i+0xbe>
 8006c5c:	b2b6      	uxth	r6, r6
 8006c5e:	6019      	str	r1, [r3, #0]
 8006c60:	4b54      	ldr	r3, [pc, #336]	@ (8006db4 <_printf_i+0x214>)
 8006c62:	270a      	movs	r7, #10
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	2a6f      	cmp	r2, #111	@ 0x6f
 8006c68:	d100      	bne.n	8006c6c <_printf_i+0xcc>
 8006c6a:	3f02      	subs	r7, #2
 8006c6c:	0023      	movs	r3, r4
 8006c6e:	2200      	movs	r2, #0
 8006c70:	3343      	adds	r3, #67	@ 0x43
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	60a3      	str	r3, [r4, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	db03      	blt.n	8006c84 <_printf_i+0xe4>
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	438a      	bics	r2, r1
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	d102      	bne.n	8006c8e <_printf_i+0xee>
 8006c88:	9d03      	ldr	r5, [sp, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00c      	beq.n	8006ca8 <_printf_i+0x108>
 8006c8e:	9d03      	ldr	r5, [sp, #12]
 8006c90:	0030      	movs	r0, r6
 8006c92:	0039      	movs	r1, r7
 8006c94:	f7f9 fad6 	bl	8000244 <__aeabi_uidivmod>
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	3d01      	subs	r5, #1
 8006c9c:	5c5b      	ldrb	r3, [r3, r1]
 8006c9e:	702b      	strb	r3, [r5, #0]
 8006ca0:	0033      	movs	r3, r6
 8006ca2:	0006      	movs	r6, r0
 8006ca4:	429f      	cmp	r7, r3
 8006ca6:	d9f3      	bls.n	8006c90 <_printf_i+0xf0>
 8006ca8:	2f08      	cmp	r7, #8
 8006caa:	d109      	bne.n	8006cc0 <_printf_i+0x120>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07db      	lsls	r3, r3, #31
 8006cb0:	d506      	bpl.n	8006cc0 <_printf_i+0x120>
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	dc02      	bgt.n	8006cc0 <_printf_i+0x120>
 8006cba:	2330      	movs	r3, #48	@ 0x30
 8006cbc:	3d01      	subs	r5, #1
 8006cbe:	702b      	strb	r3, [r5, #0]
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	1b5b      	subs	r3, r3, r5
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	0021      	movs	r1, r4
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	9805      	ldr	r0, [sp, #20]
 8006cce:	9b06      	ldr	r3, [sp, #24]
 8006cd0:	aa09      	add	r2, sp, #36	@ 0x24
 8006cd2:	f7ff fef5 	bl	8006ac0 <_printf_common>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d148      	bne.n	8006d6c <_printf_i+0x1cc>
 8006cda:	2001      	movs	r0, #1
 8006cdc:	4240      	negs	r0, r0
 8006cde:	b00b      	add	sp, #44	@ 0x2c
 8006ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	6809      	ldr	r1, [r1, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	2278      	movs	r2, #120	@ 0x78
 8006cec:	4932      	ldr	r1, [pc, #200]	@ (8006db8 <_printf_i+0x218>)
 8006cee:	9104      	str	r1, [sp, #16]
 8006cf0:	0021      	movs	r1, r4
 8006cf2:	3145      	adds	r1, #69	@ 0x45
 8006cf4:	700a      	strb	r2, [r1, #0]
 8006cf6:	6819      	ldr	r1, [r3, #0]
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	c940      	ldmia	r1!, {r6}
 8006cfc:	0610      	lsls	r0, r2, #24
 8006cfe:	d402      	bmi.n	8006d06 <_printf_i+0x166>
 8006d00:	0650      	lsls	r0, r2, #25
 8006d02:	d500      	bpl.n	8006d06 <_printf_i+0x166>
 8006d04:	b2b6      	uxth	r6, r6
 8006d06:	6019      	str	r1, [r3, #0]
 8006d08:	07d3      	lsls	r3, r2, #31
 8006d0a:	d502      	bpl.n	8006d12 <_printf_i+0x172>
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d001      	beq.n	8006d1a <_printf_i+0x17a>
 8006d16:	2710      	movs	r7, #16
 8006d18:	e7a8      	b.n	8006c6c <_printf_i+0xcc>
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	4393      	bics	r3, r2
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	e7f8      	b.n	8006d16 <_printf_i+0x176>
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	680d      	ldr	r5, [r1, #0]
 8006d28:	1d10      	adds	r0, r2, #4
 8006d2a:	6949      	ldr	r1, [r1, #20]
 8006d2c:	6018      	str	r0, [r3, #0]
 8006d2e:	6813      	ldr	r3, [r2, #0]
 8006d30:	062e      	lsls	r6, r5, #24
 8006d32:	d501      	bpl.n	8006d38 <_printf_i+0x198>
 8006d34:	6019      	str	r1, [r3, #0]
 8006d36:	e002      	b.n	8006d3e <_printf_i+0x19e>
 8006d38:	066d      	lsls	r5, r5, #25
 8006d3a:	d5fb      	bpl.n	8006d34 <_printf_i+0x194>
 8006d3c:	8019      	strh	r1, [r3, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9d03      	ldr	r5, [sp, #12]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	e7bf      	b.n	8006cc6 <_printf_i+0x126>
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	1d11      	adds	r1, r2, #4
 8006d4a:	6019      	str	r1, [r3, #0]
 8006d4c:	6815      	ldr	r5, [r2, #0]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	0028      	movs	r0, r5
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	f000 fa11 	bl	800717a <memchr>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d001      	beq.n	8006d60 <_printf_i+0x1c0>
 8006d5c:	1b40      	subs	r0, r0, r5
 8006d5e:	6060      	str	r0, [r4, #4]
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	2300      	movs	r3, #0
 8006d66:	9a03      	ldr	r2, [sp, #12]
 8006d68:	7013      	strb	r3, [r2, #0]
 8006d6a:	e7ac      	b.n	8006cc6 <_printf_i+0x126>
 8006d6c:	002a      	movs	r2, r5
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	9906      	ldr	r1, [sp, #24]
 8006d72:	9805      	ldr	r0, [sp, #20]
 8006d74:	9d07      	ldr	r5, [sp, #28]
 8006d76:	47a8      	blx	r5
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d0ae      	beq.n	8006cda <_printf_i+0x13a>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	d415      	bmi.n	8006dae <_printf_i+0x20e>
 8006d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d84:	68e0      	ldr	r0, [r4, #12]
 8006d86:	4298      	cmp	r0, r3
 8006d88:	daa9      	bge.n	8006cde <_printf_i+0x13e>
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	e7a7      	b.n	8006cde <_printf_i+0x13e>
 8006d8e:	0022      	movs	r2, r4
 8006d90:	2301      	movs	r3, #1
 8006d92:	9906      	ldr	r1, [sp, #24]
 8006d94:	9805      	ldr	r0, [sp, #20]
 8006d96:	9e07      	ldr	r6, [sp, #28]
 8006d98:	3219      	adds	r2, #25
 8006d9a:	47b0      	blx	r6
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d09c      	beq.n	8006cda <_printf_i+0x13a>
 8006da0:	3501      	adds	r5, #1
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	42ab      	cmp	r3, r5
 8006daa:	dcf0      	bgt.n	8006d8e <_printf_i+0x1ee>
 8006dac:	e7e9      	b.n	8006d82 <_printf_i+0x1e2>
 8006dae:	2500      	movs	r5, #0
 8006db0:	e7f7      	b.n	8006da2 <_printf_i+0x202>
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	0800acde 	.word	0x0800acde
 8006db8:	0800acef 	.word	0x0800acef

08006dbc <std>:
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	0004      	movs	r4, r0
 8006dc2:	6003      	str	r3, [r0, #0]
 8006dc4:	6043      	str	r3, [r0, #4]
 8006dc6:	6083      	str	r3, [r0, #8]
 8006dc8:	8181      	strh	r1, [r0, #12]
 8006dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dcc:	81c2      	strh	r2, [r0, #14]
 8006dce:	6103      	str	r3, [r0, #16]
 8006dd0:	6143      	str	r3, [r0, #20]
 8006dd2:	6183      	str	r3, [r0, #24]
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	305c      	adds	r0, #92	@ 0x5c
 8006dda:	f000 f946 	bl	800706a <memset>
 8006dde:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <std+0x50>)
 8006de0:	6224      	str	r4, [r4, #32]
 8006de2:	6263      	str	r3, [r4, #36]	@ 0x24
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <std+0x54>)
 8006de6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <std+0x58>)
 8006dea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dec:	4b0a      	ldr	r3, [pc, #40]	@ (8006e18 <std+0x5c>)
 8006dee:	6323      	str	r3, [r4, #48]	@ 0x30
 8006df0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e1c <std+0x60>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d005      	beq.n	8006e02 <std+0x46>
 8006df6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e20 <std+0x64>)
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	d002      	beq.n	8006e02 <std+0x46>
 8006dfc:	4b09      	ldr	r3, [pc, #36]	@ (8006e24 <std+0x68>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d103      	bne.n	8006e0a <std+0x4e>
 8006e02:	0020      	movs	r0, r4
 8006e04:	3058      	adds	r0, #88	@ 0x58
 8006e06:	f000 f9b5 	bl	8007174 <__retarget_lock_init_recursive>
 8006e0a:	bd10      	pop	{r4, pc}
 8006e0c:	08006fad 	.word	0x08006fad
 8006e10:	08006fd5 	.word	0x08006fd5
 8006e14:	0800700d 	.word	0x0800700d
 8006e18:	08007039 	.word	0x08007039
 8006e1c:	20000780 	.word	0x20000780
 8006e20:	200007e8 	.word	0x200007e8
 8006e24:	20000850 	.word	0x20000850

08006e28 <stdio_exit_handler>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4a03      	ldr	r2, [pc, #12]	@ (8006e38 <stdio_exit_handler+0x10>)
 8006e2c:	4903      	ldr	r1, [pc, #12]	@ (8006e3c <stdio_exit_handler+0x14>)
 8006e2e:	4804      	ldr	r0, [pc, #16]	@ (8006e40 <stdio_exit_handler+0x18>)
 8006e30:	f000 f86c 	bl	8006f0c <_fwalk_sglue>
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	2000001c 	.word	0x2000001c
 8006e3c:	08008bc5 	.word	0x08008bc5
 8006e40:	2000002c 	.word	0x2000002c

08006e44 <cleanup_stdio>:
 8006e44:	6841      	ldr	r1, [r0, #4]
 8006e46:	4b0b      	ldr	r3, [pc, #44]	@ (8006e74 <cleanup_stdio+0x30>)
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	0004      	movs	r4, r0
 8006e4c:	4299      	cmp	r1, r3
 8006e4e:	d001      	beq.n	8006e54 <cleanup_stdio+0x10>
 8006e50:	f001 feb8 	bl	8008bc4 <_fflush_r>
 8006e54:	68a1      	ldr	r1, [r4, #8]
 8006e56:	4b08      	ldr	r3, [pc, #32]	@ (8006e78 <cleanup_stdio+0x34>)
 8006e58:	4299      	cmp	r1, r3
 8006e5a:	d002      	beq.n	8006e62 <cleanup_stdio+0x1e>
 8006e5c:	0020      	movs	r0, r4
 8006e5e:	f001 feb1 	bl	8008bc4 <_fflush_r>
 8006e62:	68e1      	ldr	r1, [r4, #12]
 8006e64:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <cleanup_stdio+0x38>)
 8006e66:	4299      	cmp	r1, r3
 8006e68:	d002      	beq.n	8006e70 <cleanup_stdio+0x2c>
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	f001 feaa 	bl	8008bc4 <_fflush_r>
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	20000780 	.word	0x20000780
 8006e78:	200007e8 	.word	0x200007e8
 8006e7c:	20000850 	.word	0x20000850

08006e80 <global_stdio_init.part.0>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4b09      	ldr	r3, [pc, #36]	@ (8006ea8 <global_stdio_init.part.0+0x28>)
 8006e84:	4a09      	ldr	r2, [pc, #36]	@ (8006eac <global_stdio_init.part.0+0x2c>)
 8006e86:	2104      	movs	r1, #4
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	4809      	ldr	r0, [pc, #36]	@ (8006eb0 <global_stdio_init.part.0+0x30>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f7ff ff95 	bl	8006dbc <std>
 8006e92:	2201      	movs	r2, #1
 8006e94:	2109      	movs	r1, #9
 8006e96:	4807      	ldr	r0, [pc, #28]	@ (8006eb4 <global_stdio_init.part.0+0x34>)
 8006e98:	f7ff ff90 	bl	8006dbc <std>
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	2112      	movs	r1, #18
 8006ea0:	4805      	ldr	r0, [pc, #20]	@ (8006eb8 <global_stdio_init.part.0+0x38>)
 8006ea2:	f7ff ff8b 	bl	8006dbc <std>
 8006ea6:	bd10      	pop	{r4, pc}
 8006ea8:	200008b8 	.word	0x200008b8
 8006eac:	08006e29 	.word	0x08006e29
 8006eb0:	20000780 	.word	0x20000780
 8006eb4:	200007e8 	.word	0x200007e8
 8006eb8:	20000850 	.word	0x20000850

08006ebc <__sfp_lock_acquire>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4802      	ldr	r0, [pc, #8]	@ (8006ec8 <__sfp_lock_acquire+0xc>)
 8006ec0:	f000 f959 	bl	8007176 <__retarget_lock_acquire_recursive>
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	200008c1 	.word	0x200008c1

08006ecc <__sfp_lock_release>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	4802      	ldr	r0, [pc, #8]	@ (8006ed8 <__sfp_lock_release+0xc>)
 8006ed0:	f000 f952 	bl	8007178 <__retarget_lock_release_recursive>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	46c0      	nop			@ (mov r8, r8)
 8006ed8:	200008c1 	.word	0x200008c1

08006edc <__sinit>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	0004      	movs	r4, r0
 8006ee0:	f7ff ffec 	bl	8006ebc <__sfp_lock_acquire>
 8006ee4:	6a23      	ldr	r3, [r4, #32]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <__sinit+0x14>
 8006eea:	f7ff ffef 	bl	8006ecc <__sfp_lock_release>
 8006eee:	bd10      	pop	{r4, pc}
 8006ef0:	4b04      	ldr	r3, [pc, #16]	@ (8006f04 <__sinit+0x28>)
 8006ef2:	6223      	str	r3, [r4, #32]
 8006ef4:	4b04      	ldr	r3, [pc, #16]	@ (8006f08 <__sinit+0x2c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f6      	bne.n	8006eea <__sinit+0xe>
 8006efc:	f7ff ffc0 	bl	8006e80 <global_stdio_init.part.0>
 8006f00:	e7f3      	b.n	8006eea <__sinit+0xe>
 8006f02:	46c0      	nop			@ (mov r8, r8)
 8006f04:	08006e45 	.word	0x08006e45
 8006f08:	200008b8 	.word	0x200008b8

08006f0c <_fwalk_sglue>:
 8006f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f0e:	0014      	movs	r4, r2
 8006f10:	2600      	movs	r6, #0
 8006f12:	9000      	str	r0, [sp, #0]
 8006f14:	9101      	str	r1, [sp, #4]
 8006f16:	68a5      	ldr	r5, [r4, #8]
 8006f18:	6867      	ldr	r7, [r4, #4]
 8006f1a:	3f01      	subs	r7, #1
 8006f1c:	d504      	bpl.n	8006f28 <_fwalk_sglue+0x1c>
 8006f1e:	6824      	ldr	r4, [r4, #0]
 8006f20:	2c00      	cmp	r4, #0
 8006f22:	d1f8      	bne.n	8006f16 <_fwalk_sglue+0xa>
 8006f24:	0030      	movs	r0, r6
 8006f26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f28:	89ab      	ldrh	r3, [r5, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d908      	bls.n	8006f40 <_fwalk_sglue+0x34>
 8006f2e:	220e      	movs	r2, #14
 8006f30:	5eab      	ldrsh	r3, [r5, r2]
 8006f32:	3301      	adds	r3, #1
 8006f34:	d004      	beq.n	8006f40 <_fwalk_sglue+0x34>
 8006f36:	0029      	movs	r1, r5
 8006f38:	9800      	ldr	r0, [sp, #0]
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	4798      	blx	r3
 8006f3e:	4306      	orrs	r6, r0
 8006f40:	3568      	adds	r5, #104	@ 0x68
 8006f42:	e7ea      	b.n	8006f1a <_fwalk_sglue+0xe>

08006f44 <sniprintf>:
 8006f44:	b40c      	push	{r2, r3}
 8006f46:	b530      	push	{r4, r5, lr}
 8006f48:	4b17      	ldr	r3, [pc, #92]	@ (8006fa8 <sniprintf+0x64>)
 8006f4a:	000c      	movs	r4, r1
 8006f4c:	681d      	ldr	r5, [r3, #0]
 8006f4e:	b09d      	sub	sp, #116	@ 0x74
 8006f50:	2900      	cmp	r1, #0
 8006f52:	da08      	bge.n	8006f66 <sniprintf+0x22>
 8006f54:	238b      	movs	r3, #139	@ 0x8b
 8006f56:	2001      	movs	r0, #1
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	4240      	negs	r0, r0
 8006f5c:	b01d      	add	sp, #116	@ 0x74
 8006f5e:	bc30      	pop	{r4, r5}
 8006f60:	bc08      	pop	{r3}
 8006f62:	b002      	add	sp, #8
 8006f64:	4718      	bx	r3
 8006f66:	2382      	movs	r3, #130	@ 0x82
 8006f68:	466a      	mov	r2, sp
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	8293      	strh	r3, [r2, #20]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9002      	str	r0, [sp, #8]
 8006f72:	9006      	str	r0, [sp, #24]
 8006f74:	4299      	cmp	r1, r3
 8006f76:	d000      	beq.n	8006f7a <sniprintf+0x36>
 8006f78:	1e4b      	subs	r3, r1, #1
 8006f7a:	9304      	str	r3, [sp, #16]
 8006f7c:	9307      	str	r3, [sp, #28]
 8006f7e:	2301      	movs	r3, #1
 8006f80:	466a      	mov	r2, sp
 8006f82:	425b      	negs	r3, r3
 8006f84:	82d3      	strh	r3, [r2, #22]
 8006f86:	0028      	movs	r0, r5
 8006f88:	ab21      	add	r3, sp, #132	@ 0x84
 8006f8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f8c:	a902      	add	r1, sp, #8
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	f001 fc94 	bl	80088bc <_svfiprintf_r>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	da01      	bge.n	8006f9c <sniprintf+0x58>
 8006f98:	238b      	movs	r3, #139	@ 0x8b
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	2c00      	cmp	r4, #0
 8006f9e:	d0dd      	beq.n	8006f5c <sniprintf+0x18>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	9b02      	ldr	r3, [sp, #8]
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	e7d9      	b.n	8006f5c <sniprintf+0x18>
 8006fa8:	20000028 	.word	0x20000028

08006fac <__sread>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	000c      	movs	r4, r1
 8006fb0:	250e      	movs	r5, #14
 8006fb2:	5f49      	ldrsh	r1, [r1, r5]
 8006fb4:	f000 f88c 	bl	80070d0 <_read_r>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	db03      	blt.n	8006fc4 <__sread+0x18>
 8006fbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006fbe:	181b      	adds	r3, r3, r0
 8006fc0:	6563      	str	r3, [r4, #84]	@ 0x54
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	4a02      	ldr	r2, [pc, #8]	@ (8006fd0 <__sread+0x24>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	e7f9      	b.n	8006fc2 <__sread+0x16>
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	ffffefff 	.word	0xffffefff

08006fd4 <__swrite>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	001f      	movs	r7, r3
 8006fd8:	898b      	ldrh	r3, [r1, #12]
 8006fda:	0005      	movs	r5, r0
 8006fdc:	000c      	movs	r4, r1
 8006fde:	0016      	movs	r6, r2
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	d505      	bpl.n	8006ff0 <__swrite+0x1c>
 8006fe4:	230e      	movs	r3, #14
 8006fe6:	5ec9      	ldrsh	r1, [r1, r3]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2302      	movs	r3, #2
 8006fec:	f000 f85c 	bl	80070a8 <_lseek_r>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	4a05      	ldr	r2, [pc, #20]	@ (8007008 <__swrite+0x34>)
 8006ff4:	0028      	movs	r0, r5
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	0032      	movs	r2, r6
 8006ffc:	230e      	movs	r3, #14
 8006ffe:	5ee1      	ldrsh	r1, [r4, r3]
 8007000:	003b      	movs	r3, r7
 8007002:	f000 f879 	bl	80070f8 <_write_r>
 8007006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007008:	ffffefff 	.word	0xffffefff

0800700c <__sseek>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	000c      	movs	r4, r1
 8007010:	250e      	movs	r5, #14
 8007012:	5f49      	ldrsh	r1, [r1, r5]
 8007014:	f000 f848 	bl	80070a8 <_lseek_r>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	1c42      	adds	r2, r0, #1
 800701c:	d103      	bne.n	8007026 <__sseek+0x1a>
 800701e:	4a05      	ldr	r2, [pc, #20]	@ (8007034 <__sseek+0x28>)
 8007020:	4013      	ands	r3, r2
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	2280      	movs	r2, #128	@ 0x80
 8007028:	0152      	lsls	r2, r2, #5
 800702a:	4313      	orrs	r3, r2
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007030:	e7f8      	b.n	8007024 <__sseek+0x18>
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	ffffefff 	.word	0xffffefff

08007038 <__sclose>:
 8007038:	b510      	push	{r4, lr}
 800703a:	230e      	movs	r3, #14
 800703c:	5ec9      	ldrsh	r1, [r1, r3]
 800703e:	f000 f821 	bl	8007084 <_close_r>
 8007042:	bd10      	pop	{r4, pc}

08007044 <memmove>:
 8007044:	b510      	push	{r4, lr}
 8007046:	4288      	cmp	r0, r1
 8007048:	d806      	bhi.n	8007058 <memmove+0x14>
 800704a:	2300      	movs	r3, #0
 800704c:	429a      	cmp	r2, r3
 800704e:	d008      	beq.n	8007062 <memmove+0x1e>
 8007050:	5ccc      	ldrb	r4, [r1, r3]
 8007052:	54c4      	strb	r4, [r0, r3]
 8007054:	3301      	adds	r3, #1
 8007056:	e7f9      	b.n	800704c <memmove+0x8>
 8007058:	188b      	adds	r3, r1, r2
 800705a:	4298      	cmp	r0, r3
 800705c:	d2f5      	bcs.n	800704a <memmove+0x6>
 800705e:	3a01      	subs	r2, #1
 8007060:	d200      	bcs.n	8007064 <memmove+0x20>
 8007062:	bd10      	pop	{r4, pc}
 8007064:	5c8b      	ldrb	r3, [r1, r2]
 8007066:	5483      	strb	r3, [r0, r2]
 8007068:	e7f9      	b.n	800705e <memmove+0x1a>

0800706a <memset>:
 800706a:	0003      	movs	r3, r0
 800706c:	1882      	adds	r2, r0, r2
 800706e:	4293      	cmp	r3, r2
 8007070:	d100      	bne.n	8007074 <memset+0xa>
 8007072:	4770      	bx	lr
 8007074:	7019      	strb	r1, [r3, #0]
 8007076:	3301      	adds	r3, #1
 8007078:	e7f9      	b.n	800706e <memset+0x4>
	...

0800707c <_localeconv_r>:
 800707c:	4800      	ldr	r0, [pc, #0]	@ (8007080 <_localeconv_r+0x4>)
 800707e:	4770      	bx	lr
 8007080:	20000168 	.word	0x20000168

08007084 <_close_r>:
 8007084:	2300      	movs	r3, #0
 8007086:	b570      	push	{r4, r5, r6, lr}
 8007088:	4d06      	ldr	r5, [pc, #24]	@ (80070a4 <_close_r+0x20>)
 800708a:	0004      	movs	r4, r0
 800708c:	0008      	movs	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7fb fd23 	bl	8002ada <_close>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d103      	bne.n	80070a0 <_close_r+0x1c>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d000      	beq.n	80070a0 <_close_r+0x1c>
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	46c0      	nop			@ (mov r8, r8)
 80070a4:	200008bc 	.word	0x200008bc

080070a8 <_lseek_r>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	0004      	movs	r4, r0
 80070ac:	0008      	movs	r0, r1
 80070ae:	0011      	movs	r1, r2
 80070b0:	001a      	movs	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	4d05      	ldr	r5, [pc, #20]	@ (80070cc <_lseek_r+0x24>)
 80070b6:	602b      	str	r3, [r5, #0]
 80070b8:	f7fb fd30 	bl	8002b1c <_lseek>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d103      	bne.n	80070c8 <_lseek_r+0x20>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d000      	beq.n	80070c8 <_lseek_r+0x20>
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	200008bc 	.word	0x200008bc

080070d0 <_read_r>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	0004      	movs	r4, r0
 80070d4:	0008      	movs	r0, r1
 80070d6:	0011      	movs	r1, r2
 80070d8:	001a      	movs	r2, r3
 80070da:	2300      	movs	r3, #0
 80070dc:	4d05      	ldr	r5, [pc, #20]	@ (80070f4 <_read_r+0x24>)
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f7fb fcc2 	bl	8002a68 <_read>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d103      	bne.n	80070f0 <_read_r+0x20>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d000      	beq.n	80070f0 <_read_r+0x20>
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	200008bc 	.word	0x200008bc

080070f8 <_write_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	0004      	movs	r4, r0
 80070fc:	0008      	movs	r0, r1
 80070fe:	0011      	movs	r1, r2
 8007100:	001a      	movs	r2, r3
 8007102:	2300      	movs	r3, #0
 8007104:	4d05      	ldr	r5, [pc, #20]	@ (800711c <_write_r+0x24>)
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fb fccb 	bl	8002aa2 <_write>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d103      	bne.n	8007118 <_write_r+0x20>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d000      	beq.n	8007118 <_write_r+0x20>
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	bd70      	pop	{r4, r5, r6, pc}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	200008bc 	.word	0x200008bc

08007120 <__errno>:
 8007120:	4b01      	ldr	r3, [pc, #4]	@ (8007128 <__errno+0x8>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	4770      	bx	lr
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	20000028 	.word	0x20000028

0800712c <__libc_init_array>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	2600      	movs	r6, #0
 8007130:	4c0c      	ldr	r4, [pc, #48]	@ (8007164 <__libc_init_array+0x38>)
 8007132:	4d0d      	ldr	r5, [pc, #52]	@ (8007168 <__libc_init_array+0x3c>)
 8007134:	1b64      	subs	r4, r4, r5
 8007136:	10a4      	asrs	r4, r4, #2
 8007138:	42a6      	cmp	r6, r4
 800713a:	d109      	bne.n	8007150 <__libc_init_array+0x24>
 800713c:	2600      	movs	r6, #0
 800713e:	f002 fae3 	bl	8009708 <_init>
 8007142:	4c0a      	ldr	r4, [pc, #40]	@ (800716c <__libc_init_array+0x40>)
 8007144:	4d0a      	ldr	r5, [pc, #40]	@ (8007170 <__libc_init_array+0x44>)
 8007146:	1b64      	subs	r4, r4, r5
 8007148:	10a4      	asrs	r4, r4, #2
 800714a:	42a6      	cmp	r6, r4
 800714c:	d105      	bne.n	800715a <__libc_init_array+0x2e>
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	00b3      	lsls	r3, r6, #2
 8007152:	58eb      	ldr	r3, [r5, r3]
 8007154:	4798      	blx	r3
 8007156:	3601      	adds	r6, #1
 8007158:	e7ee      	b.n	8007138 <__libc_init_array+0xc>
 800715a:	00b3      	lsls	r3, r6, #2
 800715c:	58eb      	ldr	r3, [r5, r3]
 800715e:	4798      	blx	r3
 8007160:	3601      	adds	r6, #1
 8007162:	e7f2      	b.n	800714a <__libc_init_array+0x1e>
 8007164:	0800b040 	.word	0x0800b040
 8007168:	0800b040 	.word	0x0800b040
 800716c:	0800b044 	.word	0x0800b044
 8007170:	0800b040 	.word	0x0800b040

08007174 <__retarget_lock_init_recursive>:
 8007174:	4770      	bx	lr

08007176 <__retarget_lock_acquire_recursive>:
 8007176:	4770      	bx	lr

08007178 <__retarget_lock_release_recursive>:
 8007178:	4770      	bx	lr

0800717a <memchr>:
 800717a:	b2c9      	uxtb	r1, r1
 800717c:	1882      	adds	r2, r0, r2
 800717e:	4290      	cmp	r0, r2
 8007180:	d101      	bne.n	8007186 <memchr+0xc>
 8007182:	2000      	movs	r0, #0
 8007184:	4770      	bx	lr
 8007186:	7803      	ldrb	r3, [r0, #0]
 8007188:	428b      	cmp	r3, r1
 800718a:	d0fb      	beq.n	8007184 <memchr+0xa>
 800718c:	3001      	adds	r0, #1
 800718e:	e7f6      	b.n	800717e <memchr+0x4>

08007190 <memcpy>:
 8007190:	2300      	movs	r3, #0
 8007192:	b510      	push	{r4, lr}
 8007194:	429a      	cmp	r2, r3
 8007196:	d100      	bne.n	800719a <memcpy+0xa>
 8007198:	bd10      	pop	{r4, pc}
 800719a:	5ccc      	ldrb	r4, [r1, r3]
 800719c:	54c4      	strb	r4, [r0, r3]
 800719e:	3301      	adds	r3, #1
 80071a0:	e7f8      	b.n	8007194 <memcpy+0x4>

080071a2 <quorem>:
 80071a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a4:	6902      	ldr	r2, [r0, #16]
 80071a6:	690f      	ldr	r7, [r1, #16]
 80071a8:	b087      	sub	sp, #28
 80071aa:	0006      	movs	r6, r0
 80071ac:	000b      	movs	r3, r1
 80071ae:	2000      	movs	r0, #0
 80071b0:	9102      	str	r1, [sp, #8]
 80071b2:	42ba      	cmp	r2, r7
 80071b4:	db6d      	blt.n	8007292 <quorem+0xf0>
 80071b6:	3f01      	subs	r7, #1
 80071b8:	00bc      	lsls	r4, r7, #2
 80071ba:	3314      	adds	r3, #20
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	191b      	adds	r3, r3, r4
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	0033      	movs	r3, r6
 80071c4:	3314      	adds	r3, #20
 80071c6:	191c      	adds	r4, r3, r4
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	9304      	str	r3, [sp, #16]
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	9804      	ldr	r0, [sp, #16]
 80071d2:	681d      	ldr	r5, [r3, #0]
 80071d4:	3501      	adds	r5, #1
 80071d6:	0029      	movs	r1, r5
 80071d8:	f7f8 ffae 	bl	8000138 <__udivsi3>
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	9000      	str	r0, [sp, #0]
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	d32b      	bcc.n	800723c <quorem+0x9a>
 80071e4:	9b05      	ldr	r3, [sp, #20]
 80071e6:	9d01      	ldr	r5, [sp, #4]
 80071e8:	469c      	mov	ip, r3
 80071ea:	2300      	movs	r3, #0
 80071ec:	9305      	str	r3, [sp, #20]
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	4662      	mov	r2, ip
 80071f2:	ca08      	ldmia	r2!, {r3}
 80071f4:	6828      	ldr	r0, [r5, #0]
 80071f6:	4694      	mov	ip, r2
 80071f8:	9a00      	ldr	r2, [sp, #0]
 80071fa:	b299      	uxth	r1, r3
 80071fc:	4351      	muls	r1, r2
 80071fe:	9a05      	ldr	r2, [sp, #20]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	1889      	adds	r1, r1, r2
 8007204:	9a00      	ldr	r2, [sp, #0]
 8007206:	4353      	muls	r3, r2
 8007208:	0c0a      	lsrs	r2, r1, #16
 800720a:	189b      	adds	r3, r3, r2
 800720c:	0c1a      	lsrs	r2, r3, #16
 800720e:	b289      	uxth	r1, r1
 8007210:	9205      	str	r2, [sp, #20]
 8007212:	b282      	uxth	r2, r0
 8007214:	1a52      	subs	r2, r2, r1
 8007216:	9904      	ldr	r1, [sp, #16]
 8007218:	0c00      	lsrs	r0, r0, #16
 800721a:	1852      	adds	r2, r2, r1
 800721c:	b29b      	uxth	r3, r3
 800721e:	1411      	asrs	r1, r2, #16
 8007220:	1ac3      	subs	r3, r0, r3
 8007222:	185b      	adds	r3, r3, r1
 8007224:	1419      	asrs	r1, r3, #16
 8007226:	b292      	uxth	r2, r2
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	431a      	orrs	r2, r3
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	9104      	str	r1, [sp, #16]
 8007230:	c504      	stmia	r5!, {r2}
 8007232:	4563      	cmp	r3, ip
 8007234:	d2dc      	bcs.n	80071f0 <quorem+0x4e>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d030      	beq.n	800729e <quorem+0xfc>
 800723c:	0030      	movs	r0, r6
 800723e:	9902      	ldr	r1, [sp, #8]
 8007240:	f001 f9c6 	bl	80085d0 <__mcmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	db23      	blt.n	8007290 <quorem+0xee>
 8007248:	0034      	movs	r4, r6
 800724a:	2500      	movs	r5, #0
 800724c:	9902      	ldr	r1, [sp, #8]
 800724e:	3414      	adds	r4, #20
 8007250:	3114      	adds	r1, #20
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	c901      	ldmia	r1!, {r0}
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	466b      	mov	r3, sp
 800725a:	891b      	ldrh	r3, [r3, #8]
 800725c:	b282      	uxth	r2, r0
 800725e:	1a9a      	subs	r2, r3, r2
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	1952      	adds	r2, r2, r5
 8007264:	0c00      	lsrs	r0, r0, #16
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	1a1b      	subs	r3, r3, r0
 800726a:	1410      	asrs	r0, r2, #16
 800726c:	181b      	adds	r3, r3, r0
 800726e:	141d      	asrs	r5, r3, #16
 8007270:	b292      	uxth	r2, r2
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	431a      	orrs	r2, r3
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	c404      	stmia	r4!, {r2}
 800727a:	428b      	cmp	r3, r1
 800727c:	d2e9      	bcs.n	8007252 <quorem+0xb0>
 800727e:	9a01      	ldr	r2, [sp, #4]
 8007280:	00bb      	lsls	r3, r7, #2
 8007282:	18d3      	adds	r3, r2, r3
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	2a00      	cmp	r2, #0
 8007288:	d013      	beq.n	80072b2 <quorem+0x110>
 800728a:	9b00      	ldr	r3, [sp, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	9800      	ldr	r0, [sp, #0]
 8007292:	b007      	add	sp, #28
 8007294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <quorem+0x104>
 800729c:	3f01      	subs	r7, #1
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	3c04      	subs	r4, #4
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	d3f7      	bcc.n	8007296 <quorem+0xf4>
 80072a6:	6137      	str	r7, [r6, #16]
 80072a8:	e7c8      	b.n	800723c <quorem+0x9a>
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	d104      	bne.n	80072ba <quorem+0x118>
 80072b0:	3f01      	subs	r7, #1
 80072b2:	9a01      	ldr	r2, [sp, #4]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3f7      	bcc.n	80072aa <quorem+0x108>
 80072ba:	6137      	str	r7, [r6, #16]
 80072bc:	e7e5      	b.n	800728a <quorem+0xe8>
	...

080072c0 <_dtoa_r>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	0014      	movs	r4, r2
 80072c4:	001d      	movs	r5, r3
 80072c6:	69c6      	ldr	r6, [r0, #28]
 80072c8:	b09d      	sub	sp, #116	@ 0x74
 80072ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80072cc:	950b      	str	r5, [sp, #44]	@ 0x2c
 80072ce:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80072d0:	9003      	str	r0, [sp, #12]
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	d10f      	bne.n	80072f6 <_dtoa_r+0x36>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f000 fe30 	bl	8007f3c <malloc>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	1e02      	subs	r2, r0, #0
 80072e0:	61d8      	str	r0, [r3, #28]
 80072e2:	d104      	bne.n	80072ee <_dtoa_r+0x2e>
 80072e4:	21ef      	movs	r1, #239	@ 0xef
 80072e6:	4bc7      	ldr	r3, [pc, #796]	@ (8007604 <_dtoa_r+0x344>)
 80072e8:	48c7      	ldr	r0, [pc, #796]	@ (8007608 <_dtoa_r+0x348>)
 80072ea:	f001 fca9 	bl	8008c40 <__assert_func>
 80072ee:	6046      	str	r6, [r0, #4]
 80072f0:	6086      	str	r6, [r0, #8]
 80072f2:	6006      	str	r6, [r0, #0]
 80072f4:	60c6      	str	r6, [r0, #12]
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d00b      	beq.n	8007318 <_dtoa_r+0x58>
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	2301      	movs	r3, #1
 8007304:	4093      	lsls	r3, r2
 8007306:	604a      	str	r2, [r1, #4]
 8007308:	608b      	str	r3, [r1, #8]
 800730a:	9803      	ldr	r0, [sp, #12]
 800730c:	f000 ff16 	bl	800813c <_Bfree>
 8007310:	2200      	movs	r2, #0
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	2d00      	cmp	r5, #0
 800731a:	da1e      	bge.n	800735a <_dtoa_r+0x9a>
 800731c:	2301      	movs	r3, #1
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	006b      	lsls	r3, r5, #1
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007326:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007328:	4bb8      	ldr	r3, [pc, #736]	@ (800760c <_dtoa_r+0x34c>)
 800732a:	4ab8      	ldr	r2, [pc, #736]	@ (800760c <_dtoa_r+0x34c>)
 800732c:	403b      	ands	r3, r7
 800732e:	4293      	cmp	r3, r2
 8007330:	d116      	bne.n	8007360 <_dtoa_r+0xa0>
 8007332:	4bb7      	ldr	r3, [pc, #732]	@ (8007610 <_dtoa_r+0x350>)
 8007334:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	033b      	lsls	r3, r7, #12
 800733a:	0b1b      	lsrs	r3, r3, #12
 800733c:	4323      	orrs	r3, r4
 800733e:	d101      	bne.n	8007344 <_dtoa_r+0x84>
 8007340:	f000 fd83 	bl	8007e4a <_dtoa_r+0xb8a>
 8007344:	4bb3      	ldr	r3, [pc, #716]	@ (8007614 <_dtoa_r+0x354>)
 8007346:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007348:	9308      	str	r3, [sp, #32]
 800734a:	2a00      	cmp	r2, #0
 800734c:	d002      	beq.n	8007354 <_dtoa_r+0x94>
 800734e:	4bb2      	ldr	r3, [pc, #712]	@ (8007618 <_dtoa_r+0x358>)
 8007350:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	9808      	ldr	r0, [sp, #32]
 8007356:	b01d      	add	sp, #116	@ 0x74
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735a:	2300      	movs	r3, #0
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	e7e2      	b.n	8007326 <_dtoa_r+0x66>
 8007360:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007364:	9212      	str	r2, [sp, #72]	@ 0x48
 8007366:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007368:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800736a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	f7f9 f868 	bl	8000444 <__aeabi_dcmpeq>
 8007374:	1e06      	subs	r6, r0, #0
 8007376:	d00b      	beq.n	8007390 <_dtoa_r+0xd0>
 8007378:	2301      	movs	r3, #1
 800737a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <_dtoa_r+0xca>
 8007384:	4ba5      	ldr	r3, [pc, #660]	@ (800761c <_dtoa_r+0x35c>)
 8007386:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4ba5      	ldr	r3, [pc, #660]	@ (8007620 <_dtoa_r+0x360>)
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	e7e1      	b.n	8007354 <_dtoa_r+0x94>
 8007390:	ab1a      	add	r3, sp, #104	@ 0x68
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	9803      	ldr	r0, [sp, #12]
 800739a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800739c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800739e:	f001 f9cd 	bl	800873c <__d2b>
 80073a2:	007a      	lsls	r2, r7, #1
 80073a4:	9005      	str	r0, [sp, #20]
 80073a6:	0d52      	lsrs	r2, r2, #21
 80073a8:	d100      	bne.n	80073ac <_dtoa_r+0xec>
 80073aa:	e07b      	b.n	80074a4 <_dtoa_r+0x1e4>
 80073ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073ae:	9618      	str	r6, [sp, #96]	@ 0x60
 80073b0:	0319      	lsls	r1, r3, #12
 80073b2:	4b9c      	ldr	r3, [pc, #624]	@ (8007624 <_dtoa_r+0x364>)
 80073b4:	0b09      	lsrs	r1, r1, #12
 80073b6:	430b      	orrs	r3, r1
 80073b8:	499b      	ldr	r1, [pc, #620]	@ (8007628 <_dtoa_r+0x368>)
 80073ba:	1857      	adds	r7, r2, r1
 80073bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80073be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80073c0:	0019      	movs	r1, r3
 80073c2:	2200      	movs	r2, #0
 80073c4:	4b99      	ldr	r3, [pc, #612]	@ (800762c <_dtoa_r+0x36c>)
 80073c6:	f7fa fadb 	bl	8001980 <__aeabi_dsub>
 80073ca:	4a99      	ldr	r2, [pc, #612]	@ (8007630 <_dtoa_r+0x370>)
 80073cc:	4b99      	ldr	r3, [pc, #612]	@ (8007634 <_dtoa_r+0x374>)
 80073ce:	f7fa f80f 	bl	80013f0 <__aeabi_dmul>
 80073d2:	4a99      	ldr	r2, [pc, #612]	@ (8007638 <_dtoa_r+0x378>)
 80073d4:	4b99      	ldr	r3, [pc, #612]	@ (800763c <_dtoa_r+0x37c>)
 80073d6:	f7f9 f863 	bl	80004a0 <__aeabi_dadd>
 80073da:	0004      	movs	r4, r0
 80073dc:	0038      	movs	r0, r7
 80073de:	000d      	movs	r5, r1
 80073e0:	f7fa fec8 	bl	8002174 <__aeabi_i2d>
 80073e4:	4a96      	ldr	r2, [pc, #600]	@ (8007640 <_dtoa_r+0x380>)
 80073e6:	4b97      	ldr	r3, [pc, #604]	@ (8007644 <_dtoa_r+0x384>)
 80073e8:	f7fa f802 	bl	80013f0 <__aeabi_dmul>
 80073ec:	0002      	movs	r2, r0
 80073ee:	000b      	movs	r3, r1
 80073f0:	0020      	movs	r0, r4
 80073f2:	0029      	movs	r1, r5
 80073f4:	f7f9 f854 	bl	80004a0 <__aeabi_dadd>
 80073f8:	0004      	movs	r4, r0
 80073fa:	000d      	movs	r5, r1
 80073fc:	f7fa fe7e 	bl	80020fc <__aeabi_d2iz>
 8007400:	2200      	movs	r2, #0
 8007402:	9004      	str	r0, [sp, #16]
 8007404:	2300      	movs	r3, #0
 8007406:	0020      	movs	r0, r4
 8007408:	0029      	movs	r1, r5
 800740a:	f7f9 f821 	bl	8000450 <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d00b      	beq.n	800742a <_dtoa_r+0x16a>
 8007412:	9804      	ldr	r0, [sp, #16]
 8007414:	f7fa feae 	bl	8002174 <__aeabi_i2d>
 8007418:	002b      	movs	r3, r5
 800741a:	0022      	movs	r2, r4
 800741c:	f7f9 f812 	bl	8000444 <__aeabi_dcmpeq>
 8007420:	4243      	negs	r3, r0
 8007422:	4158      	adcs	r0, r3
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	1a1b      	subs	r3, r3, r0
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	2301      	movs	r3, #1
 800742c:	9315      	str	r3, [sp, #84]	@ 0x54
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	2b16      	cmp	r3, #22
 8007432:	d810      	bhi.n	8007456 <_dtoa_r+0x196>
 8007434:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007436:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007438:	9a04      	ldr	r2, [sp, #16]
 800743a:	4b83      	ldr	r3, [pc, #524]	@ (8007648 <_dtoa_r+0x388>)
 800743c:	00d2      	lsls	r2, r2, #3
 800743e:	189b      	adds	r3, r3, r2
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f7f9 f804 	bl	8000450 <__aeabi_dcmplt>
 8007448:	2800      	cmp	r0, #0
 800744a:	d047      	beq.n	80074dc <_dtoa_r+0x21c>
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	3b01      	subs	r3, #1
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	2300      	movs	r3, #0
 8007454:	9315      	str	r3, [sp, #84]	@ 0x54
 8007456:	2200      	movs	r2, #0
 8007458:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800745a:	9206      	str	r2, [sp, #24]
 800745c:	1bdb      	subs	r3, r3, r7
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	d53e      	bpl.n	80074e0 <_dtoa_r+0x220>
 8007462:	2201      	movs	r2, #1
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	9306      	str	r3, [sp, #24]
 8007468:	2300      	movs	r3, #0
 800746a:	930d      	str	r3, [sp, #52]	@ 0x34
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	db38      	blt.n	80074e4 <_dtoa_r+0x224>
 8007472:	9a04      	ldr	r2, [sp, #16]
 8007474:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007476:	4694      	mov	ip, r2
 8007478:	4463      	add	r3, ip
 800747a:	930d      	str	r3, [sp, #52]	@ 0x34
 800747c:	2300      	movs	r3, #0
 800747e:	9214      	str	r2, [sp, #80]	@ 0x50
 8007480:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007482:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007484:	2401      	movs	r4, #1
 8007486:	2b09      	cmp	r3, #9
 8007488:	d867      	bhi.n	800755a <_dtoa_r+0x29a>
 800748a:	2b05      	cmp	r3, #5
 800748c:	dd02      	ble.n	8007494 <_dtoa_r+0x1d4>
 800748e:	2400      	movs	r4, #0
 8007490:	3b04      	subs	r3, #4
 8007492:	9322      	str	r3, [sp, #136]	@ 0x88
 8007494:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007496:	1e98      	subs	r0, r3, #2
 8007498:	2803      	cmp	r0, #3
 800749a:	d867      	bhi.n	800756c <_dtoa_r+0x2ac>
 800749c:	f7f8 fe38 	bl	8000110 <__gnu_thumb1_case_uqi>
 80074a0:	5b383a2b 	.word	0x5b383a2b
 80074a4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80074a6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80074a8:	18f6      	adds	r6, r6, r3
 80074aa:	4b68      	ldr	r3, [pc, #416]	@ (800764c <_dtoa_r+0x38c>)
 80074ac:	18f2      	adds	r2, r6, r3
 80074ae:	2a20      	cmp	r2, #32
 80074b0:	dd0f      	ble.n	80074d2 <_dtoa_r+0x212>
 80074b2:	2340      	movs	r3, #64	@ 0x40
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	409f      	lsls	r7, r3
 80074b8:	4b65      	ldr	r3, [pc, #404]	@ (8007650 <_dtoa_r+0x390>)
 80074ba:	0038      	movs	r0, r7
 80074bc:	18f3      	adds	r3, r6, r3
 80074be:	40dc      	lsrs	r4, r3
 80074c0:	4320      	orrs	r0, r4
 80074c2:	f7fa fe85 	bl	80021d0 <__aeabi_ui2d>
 80074c6:	2201      	movs	r2, #1
 80074c8:	4b62      	ldr	r3, [pc, #392]	@ (8007654 <_dtoa_r+0x394>)
 80074ca:	1e77      	subs	r7, r6, #1
 80074cc:	18cb      	adds	r3, r1, r3
 80074ce:	9218      	str	r2, [sp, #96]	@ 0x60
 80074d0:	e776      	b.n	80073c0 <_dtoa_r+0x100>
 80074d2:	2320      	movs	r3, #32
 80074d4:	0020      	movs	r0, r4
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	4098      	lsls	r0, r3
 80074da:	e7f2      	b.n	80074c2 <_dtoa_r+0x202>
 80074dc:	9015      	str	r0, [sp, #84]	@ 0x54
 80074de:	e7ba      	b.n	8007456 <_dtoa_r+0x196>
 80074e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80074e2:	e7c3      	b.n	800746c <_dtoa_r+0x1ac>
 80074e4:	9b06      	ldr	r3, [sp, #24]
 80074e6:	9a04      	ldr	r2, [sp, #16]
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	9306      	str	r3, [sp, #24]
 80074ec:	4253      	negs	r3, r2
 80074ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074f0:	2300      	movs	r3, #0
 80074f2:	9314      	str	r3, [sp, #80]	@ 0x50
 80074f4:	e7c5      	b.n	8007482 <_dtoa_r+0x1c2>
 80074f6:	2300      	movs	r3, #0
 80074f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80074fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80074fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc13      	bgt.n	800752c <_dtoa_r+0x26c>
 8007504:	2301      	movs	r3, #1
 8007506:	001a      	movs	r2, r3
 8007508:	930e      	str	r3, [sp, #56]	@ 0x38
 800750a:	9309      	str	r3, [sp, #36]	@ 0x24
 800750c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800750e:	e00d      	b.n	800752c <_dtoa_r+0x26c>
 8007510:	2301      	movs	r3, #1
 8007512:	e7f1      	b.n	80074f8 <_dtoa_r+0x238>
 8007514:	2300      	movs	r3, #0
 8007516:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007518:	9310      	str	r3, [sp, #64]	@ 0x40
 800751a:	4694      	mov	ip, r2
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	4463      	add	r3, ip
 8007520:	930e      	str	r3, [sp, #56]	@ 0x38
 8007522:	3301      	adds	r3, #1
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	dc00      	bgt.n	800752c <_dtoa_r+0x26c>
 800752a:	2301      	movs	r3, #1
 800752c:	9a03      	ldr	r2, [sp, #12]
 800752e:	2100      	movs	r1, #0
 8007530:	69d0      	ldr	r0, [r2, #28]
 8007532:	2204      	movs	r2, #4
 8007534:	0015      	movs	r5, r2
 8007536:	3514      	adds	r5, #20
 8007538:	429d      	cmp	r5, r3
 800753a:	d91b      	bls.n	8007574 <_dtoa_r+0x2b4>
 800753c:	6041      	str	r1, [r0, #4]
 800753e:	9803      	ldr	r0, [sp, #12]
 8007540:	f000 fdb8 	bl	80080b4 <_Balloc>
 8007544:	9008      	str	r0, [sp, #32]
 8007546:	2800      	cmp	r0, #0
 8007548:	d117      	bne.n	800757a <_dtoa_r+0x2ba>
 800754a:	21b0      	movs	r1, #176	@ 0xb0
 800754c:	4b42      	ldr	r3, [pc, #264]	@ (8007658 <_dtoa_r+0x398>)
 800754e:	482e      	ldr	r0, [pc, #184]	@ (8007608 <_dtoa_r+0x348>)
 8007550:	9a08      	ldr	r2, [sp, #32]
 8007552:	31ff      	adds	r1, #255	@ 0xff
 8007554:	e6c9      	b.n	80072ea <_dtoa_r+0x2a>
 8007556:	2301      	movs	r3, #1
 8007558:	e7dd      	b.n	8007516 <_dtoa_r+0x256>
 800755a:	2300      	movs	r3, #0
 800755c:	9410      	str	r4, [sp, #64]	@ 0x40
 800755e:	9322      	str	r3, [sp, #136]	@ 0x88
 8007560:	3b01      	subs	r3, #1
 8007562:	930e      	str	r3, [sp, #56]	@ 0x38
 8007564:	9309      	str	r3, [sp, #36]	@ 0x24
 8007566:	2200      	movs	r2, #0
 8007568:	3313      	adds	r3, #19
 800756a:	e7cf      	b.n	800750c <_dtoa_r+0x24c>
 800756c:	2301      	movs	r3, #1
 800756e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007570:	3b02      	subs	r3, #2
 8007572:	e7f6      	b.n	8007562 <_dtoa_r+0x2a2>
 8007574:	3101      	adds	r1, #1
 8007576:	0052      	lsls	r2, r2, #1
 8007578:	e7dc      	b.n	8007534 <_dtoa_r+0x274>
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	9a08      	ldr	r2, [sp, #32]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	2b0e      	cmp	r3, #14
 8007586:	d900      	bls.n	800758a <_dtoa_r+0x2ca>
 8007588:	e0d9      	b.n	800773e <_dtoa_r+0x47e>
 800758a:	2c00      	cmp	r4, #0
 800758c:	d100      	bne.n	8007590 <_dtoa_r+0x2d0>
 800758e:	e0d6      	b.n	800773e <_dtoa_r+0x47e>
 8007590:	9b04      	ldr	r3, [sp, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd64      	ble.n	8007660 <_dtoa_r+0x3a0>
 8007596:	210f      	movs	r1, #15
 8007598:	9a04      	ldr	r2, [sp, #16]
 800759a:	4b2b      	ldr	r3, [pc, #172]	@ (8007648 <_dtoa_r+0x388>)
 800759c:	400a      	ands	r2, r1
 800759e:	00d2      	lsls	r2, r2, #3
 80075a0:	189b      	adds	r3, r3, r2
 80075a2:	681e      	ldr	r6, [r3, #0]
 80075a4:	685f      	ldr	r7, [r3, #4]
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	2402      	movs	r4, #2
 80075aa:	111d      	asrs	r5, r3, #4
 80075ac:	05db      	lsls	r3, r3, #23
 80075ae:	d50a      	bpl.n	80075c6 <_dtoa_r+0x306>
 80075b0:	4b2a      	ldr	r3, [pc, #168]	@ (800765c <_dtoa_r+0x39c>)
 80075b2:	400d      	ands	r5, r1
 80075b4:	6a1a      	ldr	r2, [r3, #32]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80075ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80075bc:	f7f9 fad4 	bl	8000b68 <__aeabi_ddiv>
 80075c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80075c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075c4:	3401      	adds	r4, #1
 80075c6:	4b25      	ldr	r3, [pc, #148]	@ (800765c <_dtoa_r+0x39c>)
 80075c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	d108      	bne.n	80075e0 <_dtoa_r+0x320>
 80075ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075d2:	0032      	movs	r2, r6
 80075d4:	003b      	movs	r3, r7
 80075d6:	f7f9 fac7 	bl	8000b68 <__aeabi_ddiv>
 80075da:	900a      	str	r0, [sp, #40]	@ 0x28
 80075dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075de:	e05a      	b.n	8007696 <_dtoa_r+0x3d6>
 80075e0:	2301      	movs	r3, #1
 80075e2:	421d      	tst	r5, r3
 80075e4:	d009      	beq.n	80075fa <_dtoa_r+0x33a>
 80075e6:	18e4      	adds	r4, r4, r3
 80075e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ea:	0030      	movs	r0, r6
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	0039      	movs	r1, r7
 80075f2:	f7f9 fefd 	bl	80013f0 <__aeabi_dmul>
 80075f6:	0006      	movs	r6, r0
 80075f8:	000f      	movs	r7, r1
 80075fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	3308      	adds	r3, #8
 8007600:	e7e2      	b.n	80075c8 <_dtoa_r+0x308>
 8007602:	46c0      	nop			@ (mov r8, r8)
 8007604:	0800ad0d 	.word	0x0800ad0d
 8007608:	0800ad24 	.word	0x0800ad24
 800760c:	7ff00000 	.word	0x7ff00000
 8007610:	0000270f 	.word	0x0000270f
 8007614:	0800ad09 	.word	0x0800ad09
 8007618:	0800ad0c 	.word	0x0800ad0c
 800761c:	0800acdd 	.word	0x0800acdd
 8007620:	0800acdc 	.word	0x0800acdc
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	fffffc01 	.word	0xfffffc01
 800762c:	3ff80000 	.word	0x3ff80000
 8007630:	636f4361 	.word	0x636f4361
 8007634:	3fd287a7 	.word	0x3fd287a7
 8007638:	8b60c8b3 	.word	0x8b60c8b3
 800763c:	3fc68a28 	.word	0x3fc68a28
 8007640:	509f79fb 	.word	0x509f79fb
 8007644:	3fd34413 	.word	0x3fd34413
 8007648:	0800ae20 	.word	0x0800ae20
 800764c:	00000432 	.word	0x00000432
 8007650:	00000412 	.word	0x00000412
 8007654:	fe100000 	.word	0xfe100000
 8007658:	0800ad7c 	.word	0x0800ad7c
 800765c:	0800adf8 	.word	0x0800adf8
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	2402      	movs	r4, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d016      	beq.n	8007696 <_dtoa_r+0x3d6>
 8007668:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800766a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800766c:	220f      	movs	r2, #15
 800766e:	425d      	negs	r5, r3
 8007670:	402a      	ands	r2, r5
 8007672:	4bd7      	ldr	r3, [pc, #860]	@ (80079d0 <_dtoa_r+0x710>)
 8007674:	00d2      	lsls	r2, r2, #3
 8007676:	189b      	adds	r3, r3, r2
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f7f9 feb8 	bl	80013f0 <__aeabi_dmul>
 8007680:	2701      	movs	r7, #1
 8007682:	2300      	movs	r3, #0
 8007684:	900a      	str	r0, [sp, #40]	@ 0x28
 8007686:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007688:	4ed2      	ldr	r6, [pc, #840]	@ (80079d4 <_dtoa_r+0x714>)
 800768a:	112d      	asrs	r5, r5, #4
 800768c:	2d00      	cmp	r5, #0
 800768e:	d000      	beq.n	8007692 <_dtoa_r+0x3d2>
 8007690:	e0ba      	b.n	8007808 <_dtoa_r+0x548>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1a1      	bne.n	80075da <_dtoa_r+0x31a>
 8007696:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007698:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800769a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800769c:	2b00      	cmp	r3, #0
 800769e:	d100      	bne.n	80076a2 <_dtoa_r+0x3e2>
 80076a0:	e0bd      	b.n	800781e <_dtoa_r+0x55e>
 80076a2:	2200      	movs	r2, #0
 80076a4:	0030      	movs	r0, r6
 80076a6:	0039      	movs	r1, r7
 80076a8:	4bcb      	ldr	r3, [pc, #812]	@ (80079d8 <_dtoa_r+0x718>)
 80076aa:	f7f8 fed1 	bl	8000450 <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d100      	bne.n	80076b4 <_dtoa_r+0x3f4>
 80076b2:	e0b4      	b.n	800781e <_dtoa_r+0x55e>
 80076b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d100      	bne.n	80076bc <_dtoa_r+0x3fc>
 80076ba:	e0b0      	b.n	800781e <_dtoa_r+0x55e>
 80076bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dd39      	ble.n	8007736 <_dtoa_r+0x476>
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	2200      	movs	r2, #0
 80076c6:	3b01      	subs	r3, #1
 80076c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80076ca:	0030      	movs	r0, r6
 80076cc:	4bc3      	ldr	r3, [pc, #780]	@ (80079dc <_dtoa_r+0x71c>)
 80076ce:	0039      	movs	r1, r7
 80076d0:	f7f9 fe8e 	bl	80013f0 <__aeabi_dmul>
 80076d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80076d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076da:	3401      	adds	r4, #1
 80076dc:	0020      	movs	r0, r4
 80076de:	9311      	str	r3, [sp, #68]	@ 0x44
 80076e0:	f7fa fd48 	bl	8002174 <__aeabi_i2d>
 80076e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e8:	f7f9 fe82 	bl	80013f0 <__aeabi_dmul>
 80076ec:	4bbc      	ldr	r3, [pc, #752]	@ (80079e0 <_dtoa_r+0x720>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	f7f8 fed6 	bl	80004a0 <__aeabi_dadd>
 80076f4:	4bbb      	ldr	r3, [pc, #748]	@ (80079e4 <_dtoa_r+0x724>)
 80076f6:	0006      	movs	r6, r0
 80076f8:	18cf      	adds	r7, r1, r3
 80076fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d000      	beq.n	8007702 <_dtoa_r+0x442>
 8007700:	e091      	b.n	8007826 <_dtoa_r+0x566>
 8007702:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007704:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007706:	2200      	movs	r2, #0
 8007708:	4bb7      	ldr	r3, [pc, #732]	@ (80079e8 <_dtoa_r+0x728>)
 800770a:	f7fa f939 	bl	8001980 <__aeabi_dsub>
 800770e:	0032      	movs	r2, r6
 8007710:	003b      	movs	r3, r7
 8007712:	0004      	movs	r4, r0
 8007714:	000d      	movs	r5, r1
 8007716:	f7f8 feaf 	bl	8000478 <__aeabi_dcmpgt>
 800771a:	2800      	cmp	r0, #0
 800771c:	d000      	beq.n	8007720 <_dtoa_r+0x460>
 800771e:	e29d      	b.n	8007c5c <_dtoa_r+0x99c>
 8007720:	2180      	movs	r1, #128	@ 0x80
 8007722:	0609      	lsls	r1, r1, #24
 8007724:	187b      	adds	r3, r7, r1
 8007726:	0032      	movs	r2, r6
 8007728:	0020      	movs	r0, r4
 800772a:	0029      	movs	r1, r5
 800772c:	f7f8 fe90 	bl	8000450 <__aeabi_dcmplt>
 8007730:	2800      	cmp	r0, #0
 8007732:	d000      	beq.n	8007736 <_dtoa_r+0x476>
 8007734:	e130      	b.n	8007998 <_dtoa_r+0x6d8>
 8007736:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007738:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800773a:	930a      	str	r3, [sp, #40]	@ 0x28
 800773c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800773e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007740:	2b00      	cmp	r3, #0
 8007742:	da00      	bge.n	8007746 <_dtoa_r+0x486>
 8007744:	e177      	b.n	8007a36 <_dtoa_r+0x776>
 8007746:	9a04      	ldr	r2, [sp, #16]
 8007748:	2a0e      	cmp	r2, #14
 800774a:	dd00      	ble.n	800774e <_dtoa_r+0x48e>
 800774c:	e173      	b.n	8007a36 <_dtoa_r+0x776>
 800774e:	4ba0      	ldr	r3, [pc, #640]	@ (80079d0 <_dtoa_r+0x710>)
 8007750:	00d2      	lsls	r2, r2, #3
 8007752:	189b      	adds	r3, r3, r2
 8007754:	685c      	ldr	r4, [r3, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	9306      	str	r3, [sp, #24]
 800775a:	9407      	str	r4, [sp, #28]
 800775c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800775e:	2b00      	cmp	r3, #0
 8007760:	da03      	bge.n	800776a <_dtoa_r+0x4aa>
 8007762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	dc00      	bgt.n	800776a <_dtoa_r+0x4aa>
 8007768:	e106      	b.n	8007978 <_dtoa_r+0x6b8>
 800776a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800776c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800776e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007770:	9d08      	ldr	r5, [sp, #32]
 8007772:	3b01      	subs	r3, #1
 8007774:	195b      	adds	r3, r3, r5
 8007776:	930a      	str	r3, [sp, #40]	@ 0x28
 8007778:	9a06      	ldr	r2, [sp, #24]
 800777a:	9b07      	ldr	r3, [sp, #28]
 800777c:	0030      	movs	r0, r6
 800777e:	0039      	movs	r1, r7
 8007780:	f7f9 f9f2 	bl	8000b68 <__aeabi_ddiv>
 8007784:	f7fa fcba 	bl	80020fc <__aeabi_d2iz>
 8007788:	9009      	str	r0, [sp, #36]	@ 0x24
 800778a:	f7fa fcf3 	bl	8002174 <__aeabi_i2d>
 800778e:	9a06      	ldr	r2, [sp, #24]
 8007790:	9b07      	ldr	r3, [sp, #28]
 8007792:	f7f9 fe2d 	bl	80013f0 <__aeabi_dmul>
 8007796:	0002      	movs	r2, r0
 8007798:	000b      	movs	r3, r1
 800779a:	0030      	movs	r0, r6
 800779c:	0039      	movs	r1, r7
 800779e:	f7fa f8ef 	bl	8001980 <__aeabi_dsub>
 80077a2:	002b      	movs	r3, r5
 80077a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077a6:	3501      	adds	r5, #1
 80077a8:	3230      	adds	r2, #48	@ 0x30
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077ae:	002c      	movs	r4, r5
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d000      	beq.n	80077b6 <_dtoa_r+0x4f6>
 80077b4:	e131      	b.n	8007a1a <_dtoa_r+0x75a>
 80077b6:	0002      	movs	r2, r0
 80077b8:	000b      	movs	r3, r1
 80077ba:	f7f8 fe71 	bl	80004a0 <__aeabi_dadd>
 80077be:	9a06      	ldr	r2, [sp, #24]
 80077c0:	9b07      	ldr	r3, [sp, #28]
 80077c2:	0006      	movs	r6, r0
 80077c4:	000f      	movs	r7, r1
 80077c6:	f7f8 fe57 	bl	8000478 <__aeabi_dcmpgt>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d000      	beq.n	80077d0 <_dtoa_r+0x510>
 80077ce:	e10f      	b.n	80079f0 <_dtoa_r+0x730>
 80077d0:	9a06      	ldr	r2, [sp, #24]
 80077d2:	9b07      	ldr	r3, [sp, #28]
 80077d4:	0030      	movs	r0, r6
 80077d6:	0039      	movs	r1, r7
 80077d8:	f7f8 fe34 	bl	8000444 <__aeabi_dcmpeq>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d003      	beq.n	80077e8 <_dtoa_r+0x528>
 80077e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e2:	07dd      	lsls	r5, r3, #31
 80077e4:	d500      	bpl.n	80077e8 <_dtoa_r+0x528>
 80077e6:	e103      	b.n	80079f0 <_dtoa_r+0x730>
 80077e8:	9905      	ldr	r1, [sp, #20]
 80077ea:	9803      	ldr	r0, [sp, #12]
 80077ec:	f000 fca6 	bl	800813c <_Bfree>
 80077f0:	2300      	movs	r3, #0
 80077f2:	7023      	strb	r3, [r4, #0]
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077f8:	3301      	adds	r3, #1
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d100      	bne.n	8007804 <_dtoa_r+0x544>
 8007802:	e5a7      	b.n	8007354 <_dtoa_r+0x94>
 8007804:	601c      	str	r4, [r3, #0]
 8007806:	e5a5      	b.n	8007354 <_dtoa_r+0x94>
 8007808:	423d      	tst	r5, r7
 800780a:	d005      	beq.n	8007818 <_dtoa_r+0x558>
 800780c:	6832      	ldr	r2, [r6, #0]
 800780e:	6873      	ldr	r3, [r6, #4]
 8007810:	f7f9 fdee 	bl	80013f0 <__aeabi_dmul>
 8007814:	003b      	movs	r3, r7
 8007816:	3401      	adds	r4, #1
 8007818:	106d      	asrs	r5, r5, #1
 800781a:	3608      	adds	r6, #8
 800781c:	e736      	b.n	800768c <_dtoa_r+0x3cc>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	930c      	str	r3, [sp, #48]	@ 0x30
 8007822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007824:	e75a      	b.n	80076dc <_dtoa_r+0x41c>
 8007826:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007828:	4b69      	ldr	r3, [pc, #420]	@ (80079d0 <_dtoa_r+0x710>)
 800782a:	3a01      	subs	r2, #1
 800782c:	00d2      	lsls	r2, r2, #3
 800782e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007830:	189b      	adds	r3, r3, r2
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2900      	cmp	r1, #0
 8007838:	d04c      	beq.n	80078d4 <_dtoa_r+0x614>
 800783a:	2000      	movs	r0, #0
 800783c:	496b      	ldr	r1, [pc, #428]	@ (80079ec <_dtoa_r+0x72c>)
 800783e:	f7f9 f993 	bl	8000b68 <__aeabi_ddiv>
 8007842:	0032      	movs	r2, r6
 8007844:	003b      	movs	r3, r7
 8007846:	f7fa f89b 	bl	8001980 <__aeabi_dsub>
 800784a:	9a08      	ldr	r2, [sp, #32]
 800784c:	0006      	movs	r6, r0
 800784e:	4694      	mov	ip, r2
 8007850:	000f      	movs	r7, r1
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	9316      	str	r3, [sp, #88]	@ 0x58
 8007856:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007858:	4463      	add	r3, ip
 800785a:	9311      	str	r3, [sp, #68]	@ 0x44
 800785c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800785e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007860:	f7fa fc4c 	bl	80020fc <__aeabi_d2iz>
 8007864:	0005      	movs	r5, r0
 8007866:	f7fa fc85 	bl	8002174 <__aeabi_i2d>
 800786a:	0002      	movs	r2, r0
 800786c:	000b      	movs	r3, r1
 800786e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007872:	f7fa f885 	bl	8001980 <__aeabi_dsub>
 8007876:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007878:	3530      	adds	r5, #48	@ 0x30
 800787a:	1c5c      	adds	r4, r3, #1
 800787c:	701d      	strb	r5, [r3, #0]
 800787e:	0032      	movs	r2, r6
 8007880:	003b      	movs	r3, r7
 8007882:	900a      	str	r0, [sp, #40]	@ 0x28
 8007884:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007886:	f7f8 fde3 	bl	8000450 <__aeabi_dcmplt>
 800788a:	2800      	cmp	r0, #0
 800788c:	d16a      	bne.n	8007964 <_dtoa_r+0x6a4>
 800788e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007890:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007892:	2000      	movs	r0, #0
 8007894:	4950      	ldr	r1, [pc, #320]	@ (80079d8 <_dtoa_r+0x718>)
 8007896:	f7fa f873 	bl	8001980 <__aeabi_dsub>
 800789a:	0032      	movs	r2, r6
 800789c:	003b      	movs	r3, r7
 800789e:	f7f8 fdd7 	bl	8000450 <__aeabi_dcmplt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d000      	beq.n	80078a8 <_dtoa_r+0x5e8>
 80078a6:	e0a5      	b.n	80079f4 <_dtoa_r+0x734>
 80078a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	d100      	bne.n	80078b0 <_dtoa_r+0x5f0>
 80078ae:	e742      	b.n	8007736 <_dtoa_r+0x476>
 80078b0:	2200      	movs	r2, #0
 80078b2:	0030      	movs	r0, r6
 80078b4:	0039      	movs	r1, r7
 80078b6:	4b49      	ldr	r3, [pc, #292]	@ (80079dc <_dtoa_r+0x71c>)
 80078b8:	f7f9 fd9a 	bl	80013f0 <__aeabi_dmul>
 80078bc:	2200      	movs	r2, #0
 80078be:	0006      	movs	r6, r0
 80078c0:	000f      	movs	r7, r1
 80078c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078c6:	4b45      	ldr	r3, [pc, #276]	@ (80079dc <_dtoa_r+0x71c>)
 80078c8:	f7f9 fd92 	bl	80013f0 <__aeabi_dmul>
 80078cc:	9416      	str	r4, [sp, #88]	@ 0x58
 80078ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80078d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80078d2:	e7c3      	b.n	800785c <_dtoa_r+0x59c>
 80078d4:	0030      	movs	r0, r6
 80078d6:	0039      	movs	r1, r7
 80078d8:	f7f9 fd8a 	bl	80013f0 <__aeabi_dmul>
 80078dc:	9d08      	ldr	r5, [sp, #32]
 80078de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078e0:	002b      	movs	r3, r5
 80078e2:	4694      	mov	ip, r2
 80078e4:	9016      	str	r0, [sp, #88]	@ 0x58
 80078e6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80078e8:	4463      	add	r3, ip
 80078ea:	9319      	str	r3, [sp, #100]	@ 0x64
 80078ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078f0:	f7fa fc04 	bl	80020fc <__aeabi_d2iz>
 80078f4:	0004      	movs	r4, r0
 80078f6:	f7fa fc3d 	bl	8002174 <__aeabi_i2d>
 80078fa:	000b      	movs	r3, r1
 80078fc:	0002      	movs	r2, r0
 80078fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007902:	f7fa f83d 	bl	8001980 <__aeabi_dsub>
 8007906:	3430      	adds	r4, #48	@ 0x30
 8007908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800790a:	702c      	strb	r4, [r5, #0]
 800790c:	3501      	adds	r5, #1
 800790e:	0006      	movs	r6, r0
 8007910:	000f      	movs	r7, r1
 8007912:	42ab      	cmp	r3, r5
 8007914:	d129      	bne.n	800796a <_dtoa_r+0x6aa>
 8007916:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007918:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800791e:	469c      	mov	ip, r3
 8007920:	2200      	movs	r2, #0
 8007922:	4b32      	ldr	r3, [pc, #200]	@ (80079ec <_dtoa_r+0x72c>)
 8007924:	4464      	add	r4, ip
 8007926:	f7f8 fdbb 	bl	80004a0 <__aeabi_dadd>
 800792a:	0002      	movs	r2, r0
 800792c:	000b      	movs	r3, r1
 800792e:	0030      	movs	r0, r6
 8007930:	0039      	movs	r1, r7
 8007932:	f7f8 fda1 	bl	8000478 <__aeabi_dcmpgt>
 8007936:	2800      	cmp	r0, #0
 8007938:	d15c      	bne.n	80079f4 <_dtoa_r+0x734>
 800793a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800793c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800793e:	2000      	movs	r0, #0
 8007940:	492a      	ldr	r1, [pc, #168]	@ (80079ec <_dtoa_r+0x72c>)
 8007942:	f7fa f81d 	bl	8001980 <__aeabi_dsub>
 8007946:	0002      	movs	r2, r0
 8007948:	000b      	movs	r3, r1
 800794a:	0030      	movs	r0, r6
 800794c:	0039      	movs	r1, r7
 800794e:	f7f8 fd7f 	bl	8000450 <__aeabi_dcmplt>
 8007952:	2800      	cmp	r0, #0
 8007954:	d100      	bne.n	8007958 <_dtoa_r+0x698>
 8007956:	e6ee      	b.n	8007736 <_dtoa_r+0x476>
 8007958:	0023      	movs	r3, r4
 800795a:	3c01      	subs	r4, #1
 800795c:	7822      	ldrb	r2, [r4, #0]
 800795e:	2a30      	cmp	r2, #48	@ 0x30
 8007960:	d0fa      	beq.n	8007958 <_dtoa_r+0x698>
 8007962:	001c      	movs	r4, r3
 8007964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007966:	9304      	str	r3, [sp, #16]
 8007968:	e73e      	b.n	80077e8 <_dtoa_r+0x528>
 800796a:	2200      	movs	r2, #0
 800796c:	4b1b      	ldr	r3, [pc, #108]	@ (80079dc <_dtoa_r+0x71c>)
 800796e:	f7f9 fd3f 	bl	80013f0 <__aeabi_dmul>
 8007972:	900a      	str	r0, [sp, #40]	@ 0x28
 8007974:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007976:	e7b9      	b.n	80078ec <_dtoa_r+0x62c>
 8007978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10c      	bne.n	8007998 <_dtoa_r+0x6d8>
 800797e:	9806      	ldr	r0, [sp, #24]
 8007980:	9907      	ldr	r1, [sp, #28]
 8007982:	2200      	movs	r2, #0
 8007984:	4b18      	ldr	r3, [pc, #96]	@ (80079e8 <_dtoa_r+0x728>)
 8007986:	f7f9 fd33 	bl	80013f0 <__aeabi_dmul>
 800798a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800798c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798e:	f7f8 fd7d 	bl	800048c <__aeabi_dcmpge>
 8007992:	2800      	cmp	r0, #0
 8007994:	d100      	bne.n	8007998 <_dtoa_r+0x6d8>
 8007996:	e164      	b.n	8007c62 <_dtoa_r+0x9a2>
 8007998:	2600      	movs	r6, #0
 800799a:	0037      	movs	r7, r6
 800799c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800799e:	9c08      	ldr	r4, [sp, #32]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80079a4:	2300      	movs	r3, #0
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	0031      	movs	r1, r6
 80079aa:	9803      	ldr	r0, [sp, #12]
 80079ac:	f000 fbc6 	bl	800813c <_Bfree>
 80079b0:	2f00      	cmp	r7, #0
 80079b2:	d0d7      	beq.n	8007964 <_dtoa_r+0x6a4>
 80079b4:	9b04      	ldr	r3, [sp, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <_dtoa_r+0x706>
 80079ba:	42bb      	cmp	r3, r7
 80079bc:	d003      	beq.n	80079c6 <_dtoa_r+0x706>
 80079be:	0019      	movs	r1, r3
 80079c0:	9803      	ldr	r0, [sp, #12]
 80079c2:	f000 fbbb 	bl	800813c <_Bfree>
 80079c6:	0039      	movs	r1, r7
 80079c8:	9803      	ldr	r0, [sp, #12]
 80079ca:	f000 fbb7 	bl	800813c <_Bfree>
 80079ce:	e7c9      	b.n	8007964 <_dtoa_r+0x6a4>
 80079d0:	0800ae20 	.word	0x0800ae20
 80079d4:	0800adf8 	.word	0x0800adf8
 80079d8:	3ff00000 	.word	0x3ff00000
 80079dc:	40240000 	.word	0x40240000
 80079e0:	401c0000 	.word	0x401c0000
 80079e4:	fcc00000 	.word	0xfcc00000
 80079e8:	40140000 	.word	0x40140000
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	9b04      	ldr	r3, [sp, #16]
 80079f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80079f4:	0023      	movs	r3, r4
 80079f6:	001c      	movs	r4, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	781a      	ldrb	r2, [r3, #0]
 80079fc:	2a39      	cmp	r2, #57	@ 0x39
 80079fe:	d108      	bne.n	8007a12 <_dtoa_r+0x752>
 8007a00:	9a08      	ldr	r2, [sp, #32]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d1f7      	bne.n	80079f6 <_dtoa_r+0x736>
 8007a06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a08:	9908      	ldr	r1, [sp, #32]
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a0e:	2230      	movs	r2, #48	@ 0x30
 8007a10:	700a      	strb	r2, [r1, #0]
 8007a12:	781a      	ldrb	r2, [r3, #0]
 8007a14:	3201      	adds	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e7a4      	b.n	8007964 <_dtoa_r+0x6a4>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4bc6      	ldr	r3, [pc, #792]	@ (8007d38 <_dtoa_r+0xa78>)
 8007a1e:	f7f9 fce7 	bl	80013f0 <__aeabi_dmul>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	0006      	movs	r6, r0
 8007a28:	000f      	movs	r7, r1
 8007a2a:	f7f8 fd0b 	bl	8000444 <__aeabi_dcmpeq>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d100      	bne.n	8007a34 <_dtoa_r+0x774>
 8007a32:	e6a1      	b.n	8007778 <_dtoa_r+0x4b8>
 8007a34:	e6d8      	b.n	80077e8 <_dtoa_r+0x528>
 8007a36:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007a38:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007a3a:	9c06      	ldr	r4, [sp, #24]
 8007a3c:	2f00      	cmp	r7, #0
 8007a3e:	d014      	beq.n	8007a6a <_dtoa_r+0x7aa>
 8007a40:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a42:	2a01      	cmp	r2, #1
 8007a44:	dd00      	ble.n	8007a48 <_dtoa_r+0x788>
 8007a46:	e0c8      	b.n	8007bda <_dtoa_r+0x91a>
 8007a48:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	d100      	bne.n	8007a50 <_dtoa_r+0x790>
 8007a4e:	e0be      	b.n	8007bce <_dtoa_r+0x90e>
 8007a50:	4aba      	ldr	r2, [pc, #744]	@ (8007d3c <_dtoa_r+0xa7c>)
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	9a06      	ldr	r2, [sp, #24]
 8007a56:	2101      	movs	r1, #1
 8007a58:	18d2      	adds	r2, r2, r3
 8007a5a:	9206      	str	r2, [sp, #24]
 8007a5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a5e:	9803      	ldr	r0, [sp, #12]
 8007a60:	18d3      	adds	r3, r2, r3
 8007a62:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a64:	f000 fc22 	bl	80082ac <__i2b>
 8007a68:	0007      	movs	r7, r0
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	d00e      	beq.n	8007a8c <_dtoa_r+0x7cc>
 8007a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dd0b      	ble.n	8007a8c <_dtoa_r+0x7cc>
 8007a74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a76:	0023      	movs	r3, r4
 8007a78:	4294      	cmp	r4, r2
 8007a7a:	dd00      	ble.n	8007a7e <_dtoa_r+0x7be>
 8007a7c:	0013      	movs	r3, r2
 8007a7e:	9a06      	ldr	r2, [sp, #24]
 8007a80:	1ae4      	subs	r4, r4, r3
 8007a82:	1ad2      	subs	r2, r2, r3
 8007a84:	9206      	str	r2, [sp, #24]
 8007a86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01f      	beq.n	8007ad2 <_dtoa_r+0x812>
 8007a92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d100      	bne.n	8007a9a <_dtoa_r+0x7da>
 8007a98:	e0b5      	b.n	8007c06 <_dtoa_r+0x946>
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	d010      	beq.n	8007ac0 <_dtoa_r+0x800>
 8007a9e:	0039      	movs	r1, r7
 8007aa0:	002a      	movs	r2, r5
 8007aa2:	9803      	ldr	r0, [sp, #12]
 8007aa4:	f000 fccc 	bl	8008440 <__pow5mult>
 8007aa8:	9a05      	ldr	r2, [sp, #20]
 8007aaa:	0001      	movs	r1, r0
 8007aac:	0007      	movs	r7, r0
 8007aae:	9803      	ldr	r0, [sp, #12]
 8007ab0:	f000 fc14 	bl	80082dc <__multiply>
 8007ab4:	0006      	movs	r6, r0
 8007ab6:	9905      	ldr	r1, [sp, #20]
 8007ab8:	9803      	ldr	r0, [sp, #12]
 8007aba:	f000 fb3f 	bl	800813c <_Bfree>
 8007abe:	9605      	str	r6, [sp, #20]
 8007ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ac2:	1b5a      	subs	r2, r3, r5
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	d004      	beq.n	8007ad2 <_dtoa_r+0x812>
 8007ac8:	9905      	ldr	r1, [sp, #20]
 8007aca:	9803      	ldr	r0, [sp, #12]
 8007acc:	f000 fcb8 	bl	8008440 <__pow5mult>
 8007ad0:	9005      	str	r0, [sp, #20]
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	9803      	ldr	r0, [sp, #12]
 8007ad6:	f000 fbe9 	bl	80082ac <__i2b>
 8007ada:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007adc:	0006      	movs	r6, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d100      	bne.n	8007ae4 <_dtoa_r+0x824>
 8007ae2:	e1bc      	b.n	8007e5e <_dtoa_r+0xb9e>
 8007ae4:	001a      	movs	r2, r3
 8007ae6:	0001      	movs	r1, r0
 8007ae8:	9803      	ldr	r0, [sp, #12]
 8007aea:	f000 fca9 	bl	8008440 <__pow5mult>
 8007aee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007af0:	0006      	movs	r6, r0
 8007af2:	2500      	movs	r5, #0
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	dc16      	bgt.n	8007b26 <_dtoa_r+0x866>
 8007af8:	2500      	movs	r5, #0
 8007afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afc:	42ab      	cmp	r3, r5
 8007afe:	d10e      	bne.n	8007b1e <_dtoa_r+0x85e>
 8007b00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b02:	031b      	lsls	r3, r3, #12
 8007b04:	42ab      	cmp	r3, r5
 8007b06:	d10a      	bne.n	8007b1e <_dtoa_r+0x85e>
 8007b08:	4b8d      	ldr	r3, [pc, #564]	@ (8007d40 <_dtoa_r+0xa80>)
 8007b0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b0c:	4213      	tst	r3, r2
 8007b0e:	d006      	beq.n	8007b1e <_dtoa_r+0x85e>
 8007b10:	9b06      	ldr	r3, [sp, #24]
 8007b12:	3501      	adds	r5, #1
 8007b14:	3301      	adds	r3, #1
 8007b16:	9306      	str	r3, [sp, #24]
 8007b18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b20:	2001      	movs	r0, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <_dtoa_r+0x878>
 8007b26:	6933      	ldr	r3, [r6, #16]
 8007b28:	3303      	adds	r3, #3
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	18f3      	adds	r3, r6, r3
 8007b2e:	6858      	ldr	r0, [r3, #4]
 8007b30:	f000 fb6c 	bl	800820c <__hi0bits>
 8007b34:	2320      	movs	r3, #32
 8007b36:	1a18      	subs	r0, r3, r0
 8007b38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b3a:	1818      	adds	r0, r3, r0
 8007b3c:	0002      	movs	r2, r0
 8007b3e:	231f      	movs	r3, #31
 8007b40:	401a      	ands	r2, r3
 8007b42:	4218      	tst	r0, r3
 8007b44:	d065      	beq.n	8007c12 <_dtoa_r+0x952>
 8007b46:	3301      	adds	r3, #1
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	dd5d      	ble.n	8007c0a <_dtoa_r+0x94a>
 8007b4e:	231c      	movs	r3, #28
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	9a06      	ldr	r2, [sp, #24]
 8007b54:	18e4      	adds	r4, r4, r3
 8007b56:	18d2      	adds	r2, r2, r3
 8007b58:	9206      	str	r2, [sp, #24]
 8007b5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b60:	9b06      	ldr	r3, [sp, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd05      	ble.n	8007b72 <_dtoa_r+0x8b2>
 8007b66:	001a      	movs	r2, r3
 8007b68:	9905      	ldr	r1, [sp, #20]
 8007b6a:	9803      	ldr	r0, [sp, #12]
 8007b6c:	f000 fcc4 	bl	80084f8 <__lshift>
 8007b70:	9005      	str	r0, [sp, #20]
 8007b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dd05      	ble.n	8007b84 <_dtoa_r+0x8c4>
 8007b78:	0031      	movs	r1, r6
 8007b7a:	001a      	movs	r2, r3
 8007b7c:	9803      	ldr	r0, [sp, #12]
 8007b7e:	f000 fcbb 	bl	80084f8 <__lshift>
 8007b82:	0006      	movs	r6, r0
 8007b84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d045      	beq.n	8007c16 <_dtoa_r+0x956>
 8007b8a:	0031      	movs	r1, r6
 8007b8c:	9805      	ldr	r0, [sp, #20]
 8007b8e:	f000 fd1f 	bl	80085d0 <__mcmp>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	da3f      	bge.n	8007c16 <_dtoa_r+0x956>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	220a      	movs	r2, #10
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b9e:	9905      	ldr	r1, [sp, #20]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9803      	ldr	r0, [sp, #12]
 8007ba4:	f000 faee 	bl	8008184 <__multadd>
 8007ba8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007baa:	9005      	str	r0, [sp, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d100      	bne.n	8007bb2 <_dtoa_r+0x8f2>
 8007bb0:	e15c      	b.n	8007e6c <_dtoa_r+0xbac>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	0039      	movs	r1, r7
 8007bb6:	220a      	movs	r2, #10
 8007bb8:	9803      	ldr	r0, [sp, #12]
 8007bba:	f000 fae3 	bl	8008184 <__multadd>
 8007bbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bc0:	0007      	movs	r7, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc55      	bgt.n	8007c72 <_dtoa_r+0x9b2>
 8007bc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	dc2d      	bgt.n	8007c28 <_dtoa_r+0x968>
 8007bcc:	e051      	b.n	8007c72 <_dtoa_r+0x9b2>
 8007bce:	2336      	movs	r3, #54	@ 0x36
 8007bd0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007bd2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007bd4:	9c06      	ldr	r4, [sp, #24]
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	e73c      	b.n	8007a54 <_dtoa_r+0x794>
 8007bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bdc:	1e5d      	subs	r5, r3, #1
 8007bde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	db08      	blt.n	8007bf6 <_dtoa_r+0x936>
 8007be4:	1b5d      	subs	r5, r3, r5
 8007be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be8:	9c06      	ldr	r4, [sp, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	db00      	blt.n	8007bf0 <_dtoa_r+0x930>
 8007bee:	e731      	b.n	8007a54 <_dtoa_r+0x794>
 8007bf0:	1ae4      	subs	r4, r4, r3
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e72e      	b.n	8007a54 <_dtoa_r+0x794>
 8007bf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bf8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007bfa:	1aeb      	subs	r3, r5, r3
 8007bfc:	18d3      	adds	r3, r2, r3
 8007bfe:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007c00:	9314      	str	r3, [sp, #80]	@ 0x50
 8007c02:	2500      	movs	r5, #0
 8007c04:	e7ef      	b.n	8007be6 <_dtoa_r+0x926>
 8007c06:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007c08:	e75e      	b.n	8007ac8 <_dtoa_r+0x808>
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d0a8      	beq.n	8007b60 <_dtoa_r+0x8a0>
 8007c0e:	331c      	adds	r3, #28
 8007c10:	e79f      	b.n	8007b52 <_dtoa_r+0x892>
 8007c12:	0013      	movs	r3, r2
 8007c14:	e7fb      	b.n	8007c0e <_dtoa_r+0x94e>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dc23      	bgt.n	8007c6a <_dtoa_r+0x9aa>
 8007c22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	dd20      	ble.n	8007c6a <_dtoa_r+0x9aa>
 8007c28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d000      	beq.n	8007c30 <_dtoa_r+0x970>
 8007c2e:	e6b5      	b.n	800799c <_dtoa_r+0x6dc>
 8007c30:	0031      	movs	r1, r6
 8007c32:	2205      	movs	r2, #5
 8007c34:	9803      	ldr	r0, [sp, #12]
 8007c36:	f000 faa5 	bl	8008184 <__multadd>
 8007c3a:	0006      	movs	r6, r0
 8007c3c:	0001      	movs	r1, r0
 8007c3e:	9805      	ldr	r0, [sp, #20]
 8007c40:	f000 fcc6 	bl	80085d0 <__mcmp>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	dc00      	bgt.n	8007c4a <_dtoa_r+0x98a>
 8007c48:	e6a8      	b.n	800799c <_dtoa_r+0x6dc>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	9a08      	ldr	r2, [sp, #32]
 8007c4e:	1c5c      	adds	r4, r3, #1
 8007c50:	2331      	movs	r3, #49	@ 0x31
 8007c52:	7013      	strb	r3, [r2, #0]
 8007c54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c56:	3301      	adds	r3, #1
 8007c58:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c5a:	e6a3      	b.n	80079a4 <_dtoa_r+0x6e4>
 8007c5c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007c5e:	0037      	movs	r7, r6
 8007c60:	e7f3      	b.n	8007c4a <_dtoa_r+0x98a>
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007c66:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c68:	e7f9      	b.n	8007c5e <_dtoa_r+0x99e>
 8007c6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d100      	bne.n	8007c72 <_dtoa_r+0x9b2>
 8007c70:	e100      	b.n	8007e74 <_dtoa_r+0xbb4>
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	dd05      	ble.n	8007c82 <_dtoa_r+0x9c2>
 8007c76:	0039      	movs	r1, r7
 8007c78:	0022      	movs	r2, r4
 8007c7a:	9803      	ldr	r0, [sp, #12]
 8007c7c:	f000 fc3c 	bl	80084f8 <__lshift>
 8007c80:	0007      	movs	r7, r0
 8007c82:	0038      	movs	r0, r7
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	d018      	beq.n	8007cba <_dtoa_r+0x9fa>
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	9803      	ldr	r0, [sp, #12]
 8007c8c:	f000 fa12 	bl	80080b4 <_Balloc>
 8007c90:	1e04      	subs	r4, r0, #0
 8007c92:	d105      	bne.n	8007ca0 <_dtoa_r+0x9e0>
 8007c94:	0022      	movs	r2, r4
 8007c96:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <_dtoa_r+0xa84>)
 8007c98:	482b      	ldr	r0, [pc, #172]	@ (8007d48 <_dtoa_r+0xa88>)
 8007c9a:	492c      	ldr	r1, [pc, #176]	@ (8007d4c <_dtoa_r+0xa8c>)
 8007c9c:	f7ff fb25 	bl	80072ea <_dtoa_r+0x2a>
 8007ca0:	0039      	movs	r1, r7
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	310c      	adds	r1, #12
 8007ca6:	3202      	adds	r2, #2
 8007ca8:	0092      	lsls	r2, r2, #2
 8007caa:	300c      	adds	r0, #12
 8007cac:	f7ff fa70 	bl	8007190 <memcpy>
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	0021      	movs	r1, r4
 8007cb4:	9803      	ldr	r0, [sp, #12]
 8007cb6:	f000 fc1f 	bl	80084f8 <__lshift>
 8007cba:	9b08      	ldr	r3, [sp, #32]
 8007cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cbe:	9306      	str	r3, [sp, #24]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	9704      	str	r7, [sp, #16]
 8007cc8:	0007      	movs	r7, r0
 8007cca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cce:	4013      	ands	r3, r2
 8007cd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007cd2:	0031      	movs	r1, r6
 8007cd4:	9805      	ldr	r0, [sp, #20]
 8007cd6:	f7ff fa64 	bl	80071a2 <quorem>
 8007cda:	9904      	ldr	r1, [sp, #16]
 8007cdc:	0005      	movs	r5, r0
 8007cde:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ce0:	9805      	ldr	r0, [sp, #20]
 8007ce2:	f000 fc75 	bl	80085d0 <__mcmp>
 8007ce6:	003a      	movs	r2, r7
 8007ce8:	900d      	str	r0, [sp, #52]	@ 0x34
 8007cea:	0031      	movs	r1, r6
 8007cec:	9803      	ldr	r0, [sp, #12]
 8007cee:	f000 fc8b 	bl	8008608 <__mdiff>
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	68c3      	ldr	r3, [r0, #12]
 8007cf6:	0004      	movs	r4, r0
 8007cf8:	3530      	adds	r5, #48	@ 0x30
 8007cfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <_dtoa_r+0xa4a>
 8007d00:	0001      	movs	r1, r0
 8007d02:	9805      	ldr	r0, [sp, #20]
 8007d04:	f000 fc64 	bl	80085d0 <__mcmp>
 8007d08:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d0a:	0021      	movs	r1, r4
 8007d0c:	9803      	ldr	r0, [sp, #12]
 8007d0e:	f000 fa15 	bl	800813c <_Bfree>
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d16:	1c5c      	adds	r4, r3, #1
 8007d18:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d116      	bne.n	8007d50 <_dtoa_r+0xa90>
 8007d22:	2d39      	cmp	r5, #57	@ 0x39
 8007d24:	d02f      	beq.n	8007d86 <_dtoa_r+0xac6>
 8007d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	dd01      	ble.n	8007d30 <_dtoa_r+0xa70>
 8007d2c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007d2e:	3531      	adds	r5, #49	@ 0x31
 8007d30:	9b06      	ldr	r3, [sp, #24]
 8007d32:	701d      	strb	r5, [r3, #0]
 8007d34:	e638      	b.n	80079a8 <_dtoa_r+0x6e8>
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	40240000 	.word	0x40240000
 8007d3c:	00000433 	.word	0x00000433
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	0800ad7c 	.word	0x0800ad7c
 8007d48:	0800ad24 	.word	0x0800ad24
 8007d4c:	000002ef 	.word	0x000002ef
 8007d50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	db04      	blt.n	8007d60 <_dtoa_r+0xaa0>
 8007d56:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	d11e      	bne.n	8007d9e <_dtoa_r+0xade>
 8007d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dde4      	ble.n	8007d30 <_dtoa_r+0xa70>
 8007d66:	9905      	ldr	r1, [sp, #20]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	9803      	ldr	r0, [sp, #12]
 8007d6c:	f000 fbc4 	bl	80084f8 <__lshift>
 8007d70:	0031      	movs	r1, r6
 8007d72:	9005      	str	r0, [sp, #20]
 8007d74:	f000 fc2c 	bl	80085d0 <__mcmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	dc02      	bgt.n	8007d82 <_dtoa_r+0xac2>
 8007d7c:	d1d8      	bne.n	8007d30 <_dtoa_r+0xa70>
 8007d7e:	07eb      	lsls	r3, r5, #31
 8007d80:	d5d6      	bpl.n	8007d30 <_dtoa_r+0xa70>
 8007d82:	2d39      	cmp	r5, #57	@ 0x39
 8007d84:	d1d2      	bne.n	8007d2c <_dtoa_r+0xa6c>
 8007d86:	2339      	movs	r3, #57	@ 0x39
 8007d88:	9a06      	ldr	r2, [sp, #24]
 8007d8a:	7013      	strb	r3, [r2, #0]
 8007d8c:	0023      	movs	r3, r4
 8007d8e:	001c      	movs	r4, r3
 8007d90:	3b01      	subs	r3, #1
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	2a39      	cmp	r2, #57	@ 0x39
 8007d96:	d04f      	beq.n	8007e38 <_dtoa_r+0xb78>
 8007d98:	3201      	adds	r2, #1
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e604      	b.n	80079a8 <_dtoa_r+0x6e8>
 8007d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd03      	ble.n	8007dac <_dtoa_r+0xaec>
 8007da4:	2d39      	cmp	r5, #57	@ 0x39
 8007da6:	d0ee      	beq.n	8007d86 <_dtoa_r+0xac6>
 8007da8:	3501      	adds	r5, #1
 8007daa:	e7c1      	b.n	8007d30 <_dtoa_r+0xa70>
 8007dac:	9b06      	ldr	r3, [sp, #24]
 8007dae:	9a06      	ldr	r2, [sp, #24]
 8007db0:	701d      	strb	r5, [r3, #0]
 8007db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d02a      	beq.n	8007e0e <_dtoa_r+0xb4e>
 8007db8:	2300      	movs	r3, #0
 8007dba:	220a      	movs	r2, #10
 8007dbc:	9905      	ldr	r1, [sp, #20]
 8007dbe:	9803      	ldr	r0, [sp, #12]
 8007dc0:	f000 f9e0 	bl	8008184 <__multadd>
 8007dc4:	9b04      	ldr	r3, [sp, #16]
 8007dc6:	9005      	str	r0, [sp, #20]
 8007dc8:	42bb      	cmp	r3, r7
 8007dca:	d109      	bne.n	8007de0 <_dtoa_r+0xb20>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	220a      	movs	r2, #10
 8007dd0:	9904      	ldr	r1, [sp, #16]
 8007dd2:	9803      	ldr	r0, [sp, #12]
 8007dd4:	f000 f9d6 	bl	8008184 <__multadd>
 8007dd8:	9004      	str	r0, [sp, #16]
 8007dda:	0007      	movs	r7, r0
 8007ddc:	9406      	str	r4, [sp, #24]
 8007dde:	e778      	b.n	8007cd2 <_dtoa_r+0xa12>
 8007de0:	9904      	ldr	r1, [sp, #16]
 8007de2:	2300      	movs	r3, #0
 8007de4:	220a      	movs	r2, #10
 8007de6:	9803      	ldr	r0, [sp, #12]
 8007de8:	f000 f9cc 	bl	8008184 <__multadd>
 8007dec:	2300      	movs	r3, #0
 8007dee:	9004      	str	r0, [sp, #16]
 8007df0:	220a      	movs	r2, #10
 8007df2:	0039      	movs	r1, r7
 8007df4:	9803      	ldr	r0, [sp, #12]
 8007df6:	f000 f9c5 	bl	8008184 <__multadd>
 8007dfa:	e7ee      	b.n	8007dda <_dtoa_r+0xb1a>
 8007dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfe:	2401      	movs	r4, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dd00      	ble.n	8007e06 <_dtoa_r+0xb46>
 8007e04:	001c      	movs	r4, r3
 8007e06:	9b08      	ldr	r3, [sp, #32]
 8007e08:	191c      	adds	r4, r3, r4
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	9905      	ldr	r1, [sp, #20]
 8007e10:	2201      	movs	r2, #1
 8007e12:	9803      	ldr	r0, [sp, #12]
 8007e14:	f000 fb70 	bl	80084f8 <__lshift>
 8007e18:	0031      	movs	r1, r6
 8007e1a:	9005      	str	r0, [sp, #20]
 8007e1c:	f000 fbd8 	bl	80085d0 <__mcmp>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dcb3      	bgt.n	8007d8c <_dtoa_r+0xacc>
 8007e24:	d101      	bne.n	8007e2a <_dtoa_r+0xb6a>
 8007e26:	07ed      	lsls	r5, r5, #31
 8007e28:	d4b0      	bmi.n	8007d8c <_dtoa_r+0xacc>
 8007e2a:	0023      	movs	r3, r4
 8007e2c:	001c      	movs	r4, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	2a30      	cmp	r2, #48	@ 0x30
 8007e34:	d0fa      	beq.n	8007e2c <_dtoa_r+0xb6c>
 8007e36:	e5b7      	b.n	80079a8 <_dtoa_r+0x6e8>
 8007e38:	9a08      	ldr	r2, [sp, #32]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d1a7      	bne.n	8007d8e <_dtoa_r+0xace>
 8007e3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e40:	3301      	adds	r3, #1
 8007e42:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e44:	2331      	movs	r3, #49	@ 0x31
 8007e46:	7013      	strb	r3, [r2, #0]
 8007e48:	e5ae      	b.n	80079a8 <_dtoa_r+0x6e8>
 8007e4a:	4b15      	ldr	r3, [pc, #84]	@ (8007ea0 <_dtoa_r+0xbe0>)
 8007e4c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007e4e:	9308      	str	r3, [sp, #32]
 8007e50:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <_dtoa_r+0xbe4>)
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	d001      	beq.n	8007e5a <_dtoa_r+0xb9a>
 8007e56:	f7ff fa7b 	bl	8007350 <_dtoa_r+0x90>
 8007e5a:	f7ff fa7b 	bl	8007354 <_dtoa_r+0x94>
 8007e5e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	dc00      	bgt.n	8007e66 <_dtoa_r+0xba6>
 8007e64:	e648      	b.n	8007af8 <_dtoa_r+0x838>
 8007e66:	2001      	movs	r0, #1
 8007e68:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007e6a:	e665      	b.n	8007b38 <_dtoa_r+0x878>
 8007e6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dc00      	bgt.n	8007e74 <_dtoa_r+0xbb4>
 8007e72:	e6d6      	b.n	8007c22 <_dtoa_r+0x962>
 8007e74:	2400      	movs	r4, #0
 8007e76:	0031      	movs	r1, r6
 8007e78:	9805      	ldr	r0, [sp, #20]
 8007e7a:	f7ff f992 	bl	80071a2 <quorem>
 8007e7e:	9b08      	ldr	r3, [sp, #32]
 8007e80:	3030      	adds	r0, #48	@ 0x30
 8007e82:	5518      	strb	r0, [r3, r4]
 8007e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e86:	3401      	adds	r4, #1
 8007e88:	0005      	movs	r5, r0
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	dab6      	bge.n	8007dfc <_dtoa_r+0xb3c>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	220a      	movs	r2, #10
 8007e92:	9905      	ldr	r1, [sp, #20]
 8007e94:	9803      	ldr	r0, [sp, #12]
 8007e96:	f000 f975 	bl	8008184 <__multadd>
 8007e9a:	9005      	str	r0, [sp, #20]
 8007e9c:	e7eb      	b.n	8007e76 <_dtoa_r+0xbb6>
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	0800ad00 	.word	0x0800ad00
 8007ea4:	0800ad08 	.word	0x0800ad08

08007ea8 <_free_r>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	0005      	movs	r5, r0
 8007eac:	1e0c      	subs	r4, r1, #0
 8007eae:	d010      	beq.n	8007ed2 <_free_r+0x2a>
 8007eb0:	3c04      	subs	r4, #4
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da00      	bge.n	8007eba <_free_r+0x12>
 8007eb8:	18e4      	adds	r4, r4, r3
 8007eba:	0028      	movs	r0, r5
 8007ebc:	f000 f8ea 	bl	8008094 <__malloc_lock>
 8007ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f38 <_free_r+0x90>)
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d105      	bne.n	8007ed4 <_free_r+0x2c>
 8007ec8:	6063      	str	r3, [r4, #4]
 8007eca:	6014      	str	r4, [r2, #0]
 8007ecc:	0028      	movs	r0, r5
 8007ece:	f000 f8e9 	bl	80080a4 <__malloc_unlock>
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d908      	bls.n	8007eea <_free_r+0x42>
 8007ed8:	6820      	ldr	r0, [r4, #0]
 8007eda:	1821      	adds	r1, r4, r0
 8007edc:	428b      	cmp	r3, r1
 8007ede:	d1f3      	bne.n	8007ec8 <_free_r+0x20>
 8007ee0:	6819      	ldr	r1, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	1809      	adds	r1, r1, r0
 8007ee6:	6021      	str	r1, [r4, #0]
 8007ee8:	e7ee      	b.n	8007ec8 <_free_r+0x20>
 8007eea:	001a      	movs	r2, r3
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <_free_r+0x4e>
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	d9f9      	bls.n	8007eea <_free_r+0x42>
 8007ef6:	6811      	ldr	r1, [r2, #0]
 8007ef8:	1850      	adds	r0, r2, r1
 8007efa:	42a0      	cmp	r0, r4
 8007efc:	d10b      	bne.n	8007f16 <_free_r+0x6e>
 8007efe:	6820      	ldr	r0, [r4, #0]
 8007f00:	1809      	adds	r1, r1, r0
 8007f02:	1850      	adds	r0, r2, r1
 8007f04:	6011      	str	r1, [r2, #0]
 8007f06:	4283      	cmp	r3, r0
 8007f08:	d1e0      	bne.n	8007ecc <_free_r+0x24>
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	1841      	adds	r1, r0, r1
 8007f10:	6011      	str	r1, [r2, #0]
 8007f12:	6053      	str	r3, [r2, #4]
 8007f14:	e7da      	b.n	8007ecc <_free_r+0x24>
 8007f16:	42a0      	cmp	r0, r4
 8007f18:	d902      	bls.n	8007f20 <_free_r+0x78>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	e7d5      	b.n	8007ecc <_free_r+0x24>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	1821      	adds	r1, r4, r0
 8007f24:	428b      	cmp	r3, r1
 8007f26:	d103      	bne.n	8007f30 <_free_r+0x88>
 8007f28:	6819      	ldr	r1, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	1809      	adds	r1, r1, r0
 8007f2e:	6021      	str	r1, [r4, #0]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	6054      	str	r4, [r2, #4]
 8007f34:	e7ca      	b.n	8007ecc <_free_r+0x24>
 8007f36:	46c0      	nop			@ (mov r8, r8)
 8007f38:	200008c8 	.word	0x200008c8

08007f3c <malloc>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	4b03      	ldr	r3, [pc, #12]	@ (8007f4c <malloc+0x10>)
 8007f40:	0001      	movs	r1, r0
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	f000 f826 	bl	8007f94 <_malloc_r>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	20000028 	.word	0x20000028

08007f50 <sbrk_aligned>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4e0f      	ldr	r6, [pc, #60]	@ (8007f90 <sbrk_aligned+0x40>)
 8007f54:	000d      	movs	r5, r1
 8007f56:	6831      	ldr	r1, [r6, #0]
 8007f58:	0004      	movs	r4, r0
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d102      	bne.n	8007f64 <sbrk_aligned+0x14>
 8007f5e:	f000 fe5d 	bl	8008c1c <_sbrk_r>
 8007f62:	6030      	str	r0, [r6, #0]
 8007f64:	0029      	movs	r1, r5
 8007f66:	0020      	movs	r0, r4
 8007f68:	f000 fe58 	bl	8008c1c <_sbrk_r>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d103      	bne.n	8007f78 <sbrk_aligned+0x28>
 8007f70:	2501      	movs	r5, #1
 8007f72:	426d      	negs	r5, r5
 8007f74:	0028      	movs	r0, r5
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	2303      	movs	r3, #3
 8007f7a:	1cc5      	adds	r5, r0, #3
 8007f7c:	439d      	bics	r5, r3
 8007f7e:	42a8      	cmp	r0, r5
 8007f80:	d0f8      	beq.n	8007f74 <sbrk_aligned+0x24>
 8007f82:	1a29      	subs	r1, r5, r0
 8007f84:	0020      	movs	r0, r4
 8007f86:	f000 fe49 	bl	8008c1c <_sbrk_r>
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d1f2      	bne.n	8007f74 <sbrk_aligned+0x24>
 8007f8e:	e7ef      	b.n	8007f70 <sbrk_aligned+0x20>
 8007f90:	200008c4 	.word	0x200008c4

08007f94 <_malloc_r>:
 8007f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f96:	2203      	movs	r2, #3
 8007f98:	1ccb      	adds	r3, r1, #3
 8007f9a:	4393      	bics	r3, r2
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	0005      	movs	r5, r0
 8007fa0:	001f      	movs	r7, r3
 8007fa2:	2b0c      	cmp	r3, #12
 8007fa4:	d234      	bcs.n	8008010 <_malloc_r+0x7c>
 8007fa6:	270c      	movs	r7, #12
 8007fa8:	42b9      	cmp	r1, r7
 8007faa:	d833      	bhi.n	8008014 <_malloc_r+0x80>
 8007fac:	0028      	movs	r0, r5
 8007fae:	f000 f871 	bl	8008094 <__malloc_lock>
 8007fb2:	4e37      	ldr	r6, [pc, #220]	@ (8008090 <_malloc_r+0xfc>)
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	001c      	movs	r4, r3
 8007fb8:	2c00      	cmp	r4, #0
 8007fba:	d12f      	bne.n	800801c <_malloc_r+0x88>
 8007fbc:	0039      	movs	r1, r7
 8007fbe:	0028      	movs	r0, r5
 8007fc0:	f7ff ffc6 	bl	8007f50 <sbrk_aligned>
 8007fc4:	0004      	movs	r4, r0
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d15f      	bne.n	800808a <_malloc_r+0xf6>
 8007fca:	6834      	ldr	r4, [r6, #0]
 8007fcc:	9400      	str	r4, [sp, #0]
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d14a      	bne.n	800806a <_malloc_r+0xd6>
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	d052      	beq.n	800807e <_malloc_r+0xea>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	0028      	movs	r0, r5
 8007fdc:	18e3      	adds	r3, r4, r3
 8007fde:	9900      	ldr	r1, [sp, #0]
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	f000 fe1b 	bl	8008c1c <_sbrk_r>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	4283      	cmp	r3, r0
 8007fea:	d148      	bne.n	800807e <_malloc_r+0xea>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	0028      	movs	r0, r5
 8007ff0:	1aff      	subs	r7, r7, r3
 8007ff2:	0039      	movs	r1, r7
 8007ff4:	f7ff ffac 	bl	8007f50 <sbrk_aligned>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d040      	beq.n	800807e <_malloc_r+0xea>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	19db      	adds	r3, r3, r7
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	6833      	ldr	r3, [r6, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	2a00      	cmp	r2, #0
 8008008:	d133      	bne.n	8008072 <_malloc_r+0xde>
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	e019      	b.n	8008044 <_malloc_r+0xb0>
 8008010:	2b00      	cmp	r3, #0
 8008012:	dac9      	bge.n	8007fa8 <_malloc_r+0x14>
 8008014:	230c      	movs	r3, #12
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	2000      	movs	r0, #0
 800801a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800801c:	6821      	ldr	r1, [r4, #0]
 800801e:	1bc9      	subs	r1, r1, r7
 8008020:	d420      	bmi.n	8008064 <_malloc_r+0xd0>
 8008022:	290b      	cmp	r1, #11
 8008024:	d90a      	bls.n	800803c <_malloc_r+0xa8>
 8008026:	19e2      	adds	r2, r4, r7
 8008028:	6027      	str	r7, [r4, #0]
 800802a:	42a3      	cmp	r3, r4
 800802c:	d104      	bne.n	8008038 <_malloc_r+0xa4>
 800802e:	6032      	str	r2, [r6, #0]
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	6011      	str	r1, [r2, #0]
 8008034:	6053      	str	r3, [r2, #4]
 8008036:	e005      	b.n	8008044 <_malloc_r+0xb0>
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	e7f9      	b.n	8008030 <_malloc_r+0x9c>
 800803c:	6862      	ldr	r2, [r4, #4]
 800803e:	42a3      	cmp	r3, r4
 8008040:	d10e      	bne.n	8008060 <_malloc_r+0xcc>
 8008042:	6032      	str	r2, [r6, #0]
 8008044:	0028      	movs	r0, r5
 8008046:	f000 f82d 	bl	80080a4 <__malloc_unlock>
 800804a:	0020      	movs	r0, r4
 800804c:	2207      	movs	r2, #7
 800804e:	300b      	adds	r0, #11
 8008050:	1d23      	adds	r3, r4, #4
 8008052:	4390      	bics	r0, r2
 8008054:	1ac2      	subs	r2, r0, r3
 8008056:	4298      	cmp	r0, r3
 8008058:	d0df      	beq.n	800801a <_malloc_r+0x86>
 800805a:	1a1b      	subs	r3, r3, r0
 800805c:	50a3      	str	r3, [r4, r2]
 800805e:	e7dc      	b.n	800801a <_malloc_r+0x86>
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	e7ef      	b.n	8008044 <_malloc_r+0xb0>
 8008064:	0023      	movs	r3, r4
 8008066:	6864      	ldr	r4, [r4, #4]
 8008068:	e7a6      	b.n	8007fb8 <_malloc_r+0x24>
 800806a:	9c00      	ldr	r4, [sp, #0]
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	e7ad      	b.n	8007fce <_malloc_r+0x3a>
 8008072:	001a      	movs	r2, r3
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	42a3      	cmp	r3, r4
 8008078:	d1fb      	bne.n	8008072 <_malloc_r+0xde>
 800807a:	2300      	movs	r3, #0
 800807c:	e7da      	b.n	8008034 <_malloc_r+0xa0>
 800807e:	230c      	movs	r3, #12
 8008080:	0028      	movs	r0, r5
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f000 f80e 	bl	80080a4 <__malloc_unlock>
 8008088:	e7c6      	b.n	8008018 <_malloc_r+0x84>
 800808a:	6007      	str	r7, [r0, #0]
 800808c:	e7da      	b.n	8008044 <_malloc_r+0xb0>
 800808e:	46c0      	nop			@ (mov r8, r8)
 8008090:	200008c8 	.word	0x200008c8

08008094 <__malloc_lock>:
 8008094:	b510      	push	{r4, lr}
 8008096:	4802      	ldr	r0, [pc, #8]	@ (80080a0 <__malloc_lock+0xc>)
 8008098:	f7ff f86d 	bl	8007176 <__retarget_lock_acquire_recursive>
 800809c:	bd10      	pop	{r4, pc}
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	200008c0 	.word	0x200008c0

080080a4 <__malloc_unlock>:
 80080a4:	b510      	push	{r4, lr}
 80080a6:	4802      	ldr	r0, [pc, #8]	@ (80080b0 <__malloc_unlock+0xc>)
 80080a8:	f7ff f866 	bl	8007178 <__retarget_lock_release_recursive>
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	46c0      	nop			@ (mov r8, r8)
 80080b0:	200008c0 	.word	0x200008c0

080080b4 <_Balloc>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	69c5      	ldr	r5, [r0, #28]
 80080b8:	0006      	movs	r6, r0
 80080ba:	000c      	movs	r4, r1
 80080bc:	2d00      	cmp	r5, #0
 80080be:	d10e      	bne.n	80080de <_Balloc+0x2a>
 80080c0:	2010      	movs	r0, #16
 80080c2:	f7ff ff3b 	bl	8007f3c <malloc>
 80080c6:	1e02      	subs	r2, r0, #0
 80080c8:	61f0      	str	r0, [r6, #28]
 80080ca:	d104      	bne.n	80080d6 <_Balloc+0x22>
 80080cc:	216b      	movs	r1, #107	@ 0x6b
 80080ce:	4b19      	ldr	r3, [pc, #100]	@ (8008134 <_Balloc+0x80>)
 80080d0:	4819      	ldr	r0, [pc, #100]	@ (8008138 <_Balloc+0x84>)
 80080d2:	f000 fdb5 	bl	8008c40 <__assert_func>
 80080d6:	6045      	str	r5, [r0, #4]
 80080d8:	6085      	str	r5, [r0, #8]
 80080da:	6005      	str	r5, [r0, #0]
 80080dc:	60c5      	str	r5, [r0, #12]
 80080de:	69f5      	ldr	r5, [r6, #28]
 80080e0:	68eb      	ldr	r3, [r5, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <_Balloc+0x5a>
 80080e6:	69f3      	ldr	r3, [r6, #28]
 80080e8:	00a2      	lsls	r2, r4, #2
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	189b      	adds	r3, r3, r2
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d118      	bne.n	8008126 <_Balloc+0x72>
 80080f4:	2101      	movs	r1, #1
 80080f6:	000d      	movs	r5, r1
 80080f8:	40a5      	lsls	r5, r4
 80080fa:	1d6a      	adds	r2, r5, #5
 80080fc:	0030      	movs	r0, r6
 80080fe:	0092      	lsls	r2, r2, #2
 8008100:	f000 fdbc 	bl	8008c7c <_calloc_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	d00c      	beq.n	8008122 <_Balloc+0x6e>
 8008108:	6044      	str	r4, [r0, #4]
 800810a:	6085      	str	r5, [r0, #8]
 800810c:	e00d      	b.n	800812a <_Balloc+0x76>
 800810e:	2221      	movs	r2, #33	@ 0x21
 8008110:	2104      	movs	r1, #4
 8008112:	0030      	movs	r0, r6
 8008114:	f000 fdb2 	bl	8008c7c <_calloc_r>
 8008118:	69f3      	ldr	r3, [r6, #28]
 800811a:	60e8      	str	r0, [r5, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e1      	bne.n	80080e6 <_Balloc+0x32>
 8008122:	2000      	movs	r0, #0
 8008124:	bd70      	pop	{r4, r5, r6, pc}
 8008126:	6802      	ldr	r2, [r0, #0]
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	6103      	str	r3, [r0, #16]
 800812e:	60c3      	str	r3, [r0, #12]
 8008130:	e7f8      	b.n	8008124 <_Balloc+0x70>
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	0800ad0d 	.word	0x0800ad0d
 8008138:	0800ad8d 	.word	0x0800ad8d

0800813c <_Bfree>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	69c6      	ldr	r6, [r0, #28]
 8008140:	0005      	movs	r5, r0
 8008142:	000c      	movs	r4, r1
 8008144:	2e00      	cmp	r6, #0
 8008146:	d10e      	bne.n	8008166 <_Bfree+0x2a>
 8008148:	2010      	movs	r0, #16
 800814a:	f7ff fef7 	bl	8007f3c <malloc>
 800814e:	1e02      	subs	r2, r0, #0
 8008150:	61e8      	str	r0, [r5, #28]
 8008152:	d104      	bne.n	800815e <_Bfree+0x22>
 8008154:	218f      	movs	r1, #143	@ 0x8f
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <_Bfree+0x40>)
 8008158:	4809      	ldr	r0, [pc, #36]	@ (8008180 <_Bfree+0x44>)
 800815a:	f000 fd71 	bl	8008c40 <__assert_func>
 800815e:	6046      	str	r6, [r0, #4]
 8008160:	6086      	str	r6, [r0, #8]
 8008162:	6006      	str	r6, [r0, #0]
 8008164:	60c6      	str	r6, [r0, #12]
 8008166:	2c00      	cmp	r4, #0
 8008168:	d007      	beq.n	800817a <_Bfree+0x3e>
 800816a:	69eb      	ldr	r3, [r5, #28]
 800816c:	6862      	ldr	r2, [r4, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	0092      	lsls	r2, r2, #2
 8008172:	189b      	adds	r3, r3, r2
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	601c      	str	r4, [r3, #0]
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	0800ad0d 	.word	0x0800ad0d
 8008180:	0800ad8d 	.word	0x0800ad8d

08008184 <__multadd>:
 8008184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008186:	000f      	movs	r7, r1
 8008188:	9001      	str	r0, [sp, #4]
 800818a:	000c      	movs	r4, r1
 800818c:	001e      	movs	r6, r3
 800818e:	2000      	movs	r0, #0
 8008190:	690d      	ldr	r5, [r1, #16]
 8008192:	3714      	adds	r7, #20
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	3001      	adds	r0, #1
 8008198:	b299      	uxth	r1, r3
 800819a:	4351      	muls	r1, r2
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	4353      	muls	r3, r2
 80081a0:	1989      	adds	r1, r1, r6
 80081a2:	0c0e      	lsrs	r6, r1, #16
 80081a4:	199b      	adds	r3, r3, r6
 80081a6:	0c1e      	lsrs	r6, r3, #16
 80081a8:	b289      	uxth	r1, r1
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	185b      	adds	r3, r3, r1
 80081ae:	c708      	stmia	r7!, {r3}
 80081b0:	4285      	cmp	r5, r0
 80081b2:	dcef      	bgt.n	8008194 <__multadd+0x10>
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	d022      	beq.n	80081fe <__multadd+0x7a>
 80081b8:	68a3      	ldr	r3, [r4, #8]
 80081ba:	42ab      	cmp	r3, r5
 80081bc:	dc19      	bgt.n	80081f2 <__multadd+0x6e>
 80081be:	6861      	ldr	r1, [r4, #4]
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	3101      	adds	r1, #1
 80081c4:	f7ff ff76 	bl	80080b4 <_Balloc>
 80081c8:	1e07      	subs	r7, r0, #0
 80081ca:	d105      	bne.n	80081d8 <__multadd+0x54>
 80081cc:	003a      	movs	r2, r7
 80081ce:	21ba      	movs	r1, #186	@ 0xba
 80081d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <__multadd+0x80>)
 80081d2:	480d      	ldr	r0, [pc, #52]	@ (8008208 <__multadd+0x84>)
 80081d4:	f000 fd34 	bl	8008c40 <__assert_func>
 80081d8:	0021      	movs	r1, r4
 80081da:	6922      	ldr	r2, [r4, #16]
 80081dc:	310c      	adds	r1, #12
 80081de:	3202      	adds	r2, #2
 80081e0:	0092      	lsls	r2, r2, #2
 80081e2:	300c      	adds	r0, #12
 80081e4:	f7fe ffd4 	bl	8007190 <memcpy>
 80081e8:	0021      	movs	r1, r4
 80081ea:	9801      	ldr	r0, [sp, #4]
 80081ec:	f7ff ffa6 	bl	800813c <_Bfree>
 80081f0:	003c      	movs	r4, r7
 80081f2:	1d2b      	adds	r3, r5, #4
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	18e3      	adds	r3, r4, r3
 80081f8:	3501      	adds	r5, #1
 80081fa:	605e      	str	r6, [r3, #4]
 80081fc:	6125      	str	r5, [r4, #16]
 80081fe:	0020      	movs	r0, r4
 8008200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	0800ad7c 	.word	0x0800ad7c
 8008208:	0800ad8d 	.word	0x0800ad8d

0800820c <__hi0bits>:
 800820c:	2280      	movs	r2, #128	@ 0x80
 800820e:	0003      	movs	r3, r0
 8008210:	0252      	lsls	r2, r2, #9
 8008212:	2000      	movs	r0, #0
 8008214:	4293      	cmp	r3, r2
 8008216:	d201      	bcs.n	800821c <__hi0bits+0x10>
 8008218:	041b      	lsls	r3, r3, #16
 800821a:	3010      	adds	r0, #16
 800821c:	2280      	movs	r2, #128	@ 0x80
 800821e:	0452      	lsls	r2, r2, #17
 8008220:	4293      	cmp	r3, r2
 8008222:	d201      	bcs.n	8008228 <__hi0bits+0x1c>
 8008224:	3008      	adds	r0, #8
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	2280      	movs	r2, #128	@ 0x80
 800822a:	0552      	lsls	r2, r2, #21
 800822c:	4293      	cmp	r3, r2
 800822e:	d201      	bcs.n	8008234 <__hi0bits+0x28>
 8008230:	3004      	adds	r0, #4
 8008232:	011b      	lsls	r3, r3, #4
 8008234:	2280      	movs	r2, #128	@ 0x80
 8008236:	05d2      	lsls	r2, r2, #23
 8008238:	4293      	cmp	r3, r2
 800823a:	d201      	bcs.n	8008240 <__hi0bits+0x34>
 800823c:	3002      	adds	r0, #2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	db03      	blt.n	800824c <__hi0bits+0x40>
 8008244:	3001      	adds	r0, #1
 8008246:	4213      	tst	r3, r2
 8008248:	d100      	bne.n	800824c <__hi0bits+0x40>
 800824a:	2020      	movs	r0, #32
 800824c:	4770      	bx	lr

0800824e <__lo0bits>:
 800824e:	6803      	ldr	r3, [r0, #0]
 8008250:	0001      	movs	r1, r0
 8008252:	2207      	movs	r2, #7
 8008254:	0018      	movs	r0, r3
 8008256:	4010      	ands	r0, r2
 8008258:	4213      	tst	r3, r2
 800825a:	d00d      	beq.n	8008278 <__lo0bits+0x2a>
 800825c:	3a06      	subs	r2, #6
 800825e:	2000      	movs	r0, #0
 8008260:	4213      	tst	r3, r2
 8008262:	d105      	bne.n	8008270 <__lo0bits+0x22>
 8008264:	3002      	adds	r0, #2
 8008266:	4203      	tst	r3, r0
 8008268:	d003      	beq.n	8008272 <__lo0bits+0x24>
 800826a:	40d3      	lsrs	r3, r2
 800826c:	0010      	movs	r0, r2
 800826e:	600b      	str	r3, [r1, #0]
 8008270:	4770      	bx	lr
 8008272:	089b      	lsrs	r3, r3, #2
 8008274:	600b      	str	r3, [r1, #0]
 8008276:	e7fb      	b.n	8008270 <__lo0bits+0x22>
 8008278:	b29a      	uxth	r2, r3
 800827a:	2a00      	cmp	r2, #0
 800827c:	d101      	bne.n	8008282 <__lo0bits+0x34>
 800827e:	2010      	movs	r0, #16
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	b2da      	uxtb	r2, r3
 8008284:	2a00      	cmp	r2, #0
 8008286:	d101      	bne.n	800828c <__lo0bits+0x3e>
 8008288:	3008      	adds	r0, #8
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	071a      	lsls	r2, r3, #28
 800828e:	d101      	bne.n	8008294 <__lo0bits+0x46>
 8008290:	3004      	adds	r0, #4
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	079a      	lsls	r2, r3, #30
 8008296:	d101      	bne.n	800829c <__lo0bits+0x4e>
 8008298:	3002      	adds	r0, #2
 800829a:	089b      	lsrs	r3, r3, #2
 800829c:	07da      	lsls	r2, r3, #31
 800829e:	d4e9      	bmi.n	8008274 <__lo0bits+0x26>
 80082a0:	3001      	adds	r0, #1
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	d1e6      	bne.n	8008274 <__lo0bits+0x26>
 80082a6:	2020      	movs	r0, #32
 80082a8:	e7e2      	b.n	8008270 <__lo0bits+0x22>
	...

080082ac <__i2b>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	000c      	movs	r4, r1
 80082b0:	2101      	movs	r1, #1
 80082b2:	f7ff feff 	bl	80080b4 <_Balloc>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d107      	bne.n	80082ca <__i2b+0x1e>
 80082ba:	2146      	movs	r1, #70	@ 0x46
 80082bc:	4c05      	ldr	r4, [pc, #20]	@ (80082d4 <__i2b+0x28>)
 80082be:	0002      	movs	r2, r0
 80082c0:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <__i2b+0x2c>)
 80082c2:	0020      	movs	r0, r4
 80082c4:	31ff      	adds	r1, #255	@ 0xff
 80082c6:	f000 fcbb 	bl	8008c40 <__assert_func>
 80082ca:	2301      	movs	r3, #1
 80082cc:	6144      	str	r4, [r0, #20]
 80082ce:	6103      	str	r3, [r0, #16]
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	46c0      	nop			@ (mov r8, r8)
 80082d4:	0800ad8d 	.word	0x0800ad8d
 80082d8:	0800ad7c 	.word	0x0800ad7c

080082dc <__multiply>:
 80082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082de:	0014      	movs	r4, r2
 80082e0:	690a      	ldr	r2, [r1, #16]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	000d      	movs	r5, r1
 80082e6:	b08b      	sub	sp, #44	@ 0x2c
 80082e8:	429a      	cmp	r2, r3
 80082ea:	db02      	blt.n	80082f2 <__multiply+0x16>
 80082ec:	0023      	movs	r3, r4
 80082ee:	000c      	movs	r4, r1
 80082f0:	001d      	movs	r5, r3
 80082f2:	6927      	ldr	r7, [r4, #16]
 80082f4:	692e      	ldr	r6, [r5, #16]
 80082f6:	6861      	ldr	r1, [r4, #4]
 80082f8:	19bb      	adds	r3, r7, r6
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	19ba      	adds	r2, r7, r6
 8008300:	4293      	cmp	r3, r2
 8008302:	da00      	bge.n	8008306 <__multiply+0x2a>
 8008304:	3101      	adds	r1, #1
 8008306:	f7ff fed5 	bl	80080b4 <_Balloc>
 800830a:	9002      	str	r0, [sp, #8]
 800830c:	2800      	cmp	r0, #0
 800830e:	d106      	bne.n	800831e <__multiply+0x42>
 8008310:	21b1      	movs	r1, #177	@ 0xb1
 8008312:	4b49      	ldr	r3, [pc, #292]	@ (8008438 <__multiply+0x15c>)
 8008314:	4849      	ldr	r0, [pc, #292]	@ (800843c <__multiply+0x160>)
 8008316:	9a02      	ldr	r2, [sp, #8]
 8008318:	0049      	lsls	r1, r1, #1
 800831a:	f000 fc91 	bl	8008c40 <__assert_func>
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	3314      	adds	r3, #20
 8008324:	469c      	mov	ip, r3
 8008326:	19bb      	adds	r3, r7, r6
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4463      	add	r3, ip
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	4663      	mov	r3, ip
 8008330:	9904      	ldr	r1, [sp, #16]
 8008332:	428b      	cmp	r3, r1
 8008334:	d32a      	bcc.n	800838c <__multiply+0xb0>
 8008336:	0023      	movs	r3, r4
 8008338:	00bf      	lsls	r7, r7, #2
 800833a:	3314      	adds	r3, #20
 800833c:	3514      	adds	r5, #20
 800833e:	9308      	str	r3, [sp, #32]
 8008340:	00b6      	lsls	r6, r6, #2
 8008342:	19db      	adds	r3, r3, r7
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	19ab      	adds	r3, r5, r6
 8008348:	9309      	str	r3, [sp, #36]	@ 0x24
 800834a:	2304      	movs	r3, #4
 800834c:	9306      	str	r3, [sp, #24]
 800834e:	0023      	movs	r3, r4
 8008350:	9a05      	ldr	r2, [sp, #20]
 8008352:	3315      	adds	r3, #21
 8008354:	9501      	str	r5, [sp, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d305      	bcc.n	8008366 <__multiply+0x8a>
 800835a:	1b13      	subs	r3, r2, r4
 800835c:	3b15      	subs	r3, #21
 800835e:	089b      	lsrs	r3, r3, #2
 8008360:	3301      	adds	r3, #1
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	9b01      	ldr	r3, [sp, #4]
 8008368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800836a:	4293      	cmp	r3, r2
 800836c:	d310      	bcc.n	8008390 <__multiply+0xb4>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	dd05      	ble.n	8008380 <__multiply+0xa4>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	3b04      	subs	r3, #4
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d056      	beq.n	800842e <__multiply+0x152>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	9a03      	ldr	r2, [sp, #12]
 8008384:	0018      	movs	r0, r3
 8008386:	611a      	str	r2, [r3, #16]
 8008388:	b00b      	add	sp, #44	@ 0x2c
 800838a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800838c:	c304      	stmia	r3!, {r2}
 800838e:	e7cf      	b.n	8008330 <__multiply+0x54>
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	b280      	uxth	r0, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d01e      	beq.n	80083d8 <__multiply+0xfc>
 800839a:	4667      	mov	r7, ip
 800839c:	2500      	movs	r5, #0
 800839e:	9e08      	ldr	r6, [sp, #32]
 80083a0:	ce02      	ldmia	r6!, {r1}
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	9307      	str	r3, [sp, #28]
 80083a6:	b28b      	uxth	r3, r1
 80083a8:	4343      	muls	r3, r0
 80083aa:	001a      	movs	r2, r3
 80083ac:	466b      	mov	r3, sp
 80083ae:	0c09      	lsrs	r1, r1, #16
 80083b0:	8b9b      	ldrh	r3, [r3, #28]
 80083b2:	4341      	muls	r1, r0
 80083b4:	18d3      	adds	r3, r2, r3
 80083b6:	9a07      	ldr	r2, [sp, #28]
 80083b8:	195b      	adds	r3, r3, r5
 80083ba:	0c12      	lsrs	r2, r2, #16
 80083bc:	1889      	adds	r1, r1, r2
 80083be:	0c1a      	lsrs	r2, r3, #16
 80083c0:	188a      	adds	r2, r1, r2
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	0c15      	lsrs	r5, r2, #16
 80083c6:	0412      	lsls	r2, r2, #16
 80083c8:	431a      	orrs	r2, r3
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	c704      	stmia	r7!, {r2}
 80083ce:	42b3      	cmp	r3, r6
 80083d0:	d8e6      	bhi.n	80083a0 <__multiply+0xc4>
 80083d2:	4663      	mov	r3, ip
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	509d      	str	r5, [r3, r2]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	0c00      	lsrs	r0, r0, #16
 80083de:	d020      	beq.n	8008422 <__multiply+0x146>
 80083e0:	4663      	mov	r3, ip
 80083e2:	0025      	movs	r5, r4
 80083e4:	4661      	mov	r1, ip
 80083e6:	2700      	movs	r7, #0
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3514      	adds	r5, #20
 80083ec:	682a      	ldr	r2, [r5, #0]
 80083ee:	680e      	ldr	r6, [r1, #0]
 80083f0:	b292      	uxth	r2, r2
 80083f2:	4342      	muls	r2, r0
 80083f4:	0c36      	lsrs	r6, r6, #16
 80083f6:	1992      	adds	r2, r2, r6
 80083f8:	19d2      	adds	r2, r2, r7
 80083fa:	0416      	lsls	r6, r2, #16
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	431e      	orrs	r6, r3
 8008400:	600e      	str	r6, [r1, #0]
 8008402:	cd40      	ldmia	r5!, {r6}
 8008404:	684b      	ldr	r3, [r1, #4]
 8008406:	0c36      	lsrs	r6, r6, #16
 8008408:	4346      	muls	r6, r0
 800840a:	b29b      	uxth	r3, r3
 800840c:	0c12      	lsrs	r2, r2, #16
 800840e:	18f3      	adds	r3, r6, r3
 8008410:	189b      	adds	r3, r3, r2
 8008412:	9a05      	ldr	r2, [sp, #20]
 8008414:	0c1f      	lsrs	r7, r3, #16
 8008416:	3104      	adds	r1, #4
 8008418:	42aa      	cmp	r2, r5
 800841a:	d8e7      	bhi.n	80083ec <__multiply+0x110>
 800841c:	4662      	mov	r2, ip
 800841e:	9906      	ldr	r1, [sp, #24]
 8008420:	5053      	str	r3, [r2, r1]
 8008422:	9b01      	ldr	r3, [sp, #4]
 8008424:	3304      	adds	r3, #4
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	2304      	movs	r3, #4
 800842a:	449c      	add	ip, r3
 800842c:	e79b      	b.n	8008366 <__multiply+0x8a>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	3b01      	subs	r3, #1
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	e79b      	b.n	800836e <__multiply+0x92>
 8008436:	46c0      	nop			@ (mov r8, r8)
 8008438:	0800ad7c 	.word	0x0800ad7c
 800843c:	0800ad8d 	.word	0x0800ad8d

08008440 <__pow5mult>:
 8008440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008442:	2303      	movs	r3, #3
 8008444:	0015      	movs	r5, r2
 8008446:	0007      	movs	r7, r0
 8008448:	000e      	movs	r6, r1
 800844a:	401a      	ands	r2, r3
 800844c:	421d      	tst	r5, r3
 800844e:	d008      	beq.n	8008462 <__pow5mult+0x22>
 8008450:	4925      	ldr	r1, [pc, #148]	@ (80084e8 <__pow5mult+0xa8>)
 8008452:	3a01      	subs	r2, #1
 8008454:	0092      	lsls	r2, r2, #2
 8008456:	5852      	ldr	r2, [r2, r1]
 8008458:	2300      	movs	r3, #0
 800845a:	0031      	movs	r1, r6
 800845c:	f7ff fe92 	bl	8008184 <__multadd>
 8008460:	0006      	movs	r6, r0
 8008462:	10ad      	asrs	r5, r5, #2
 8008464:	d03d      	beq.n	80084e2 <__pow5mult+0xa2>
 8008466:	69fc      	ldr	r4, [r7, #28]
 8008468:	2c00      	cmp	r4, #0
 800846a:	d10f      	bne.n	800848c <__pow5mult+0x4c>
 800846c:	2010      	movs	r0, #16
 800846e:	f7ff fd65 	bl	8007f3c <malloc>
 8008472:	1e02      	subs	r2, r0, #0
 8008474:	61f8      	str	r0, [r7, #28]
 8008476:	d105      	bne.n	8008484 <__pow5mult+0x44>
 8008478:	21b4      	movs	r1, #180	@ 0xb4
 800847a:	4b1c      	ldr	r3, [pc, #112]	@ (80084ec <__pow5mult+0xac>)
 800847c:	481c      	ldr	r0, [pc, #112]	@ (80084f0 <__pow5mult+0xb0>)
 800847e:	31ff      	adds	r1, #255	@ 0xff
 8008480:	f000 fbde 	bl	8008c40 <__assert_func>
 8008484:	6044      	str	r4, [r0, #4]
 8008486:	6084      	str	r4, [r0, #8]
 8008488:	6004      	str	r4, [r0, #0]
 800848a:	60c4      	str	r4, [r0, #12]
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	689c      	ldr	r4, [r3, #8]
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	2c00      	cmp	r4, #0
 8008494:	d108      	bne.n	80084a8 <__pow5mult+0x68>
 8008496:	0038      	movs	r0, r7
 8008498:	4916      	ldr	r1, [pc, #88]	@ (80084f4 <__pow5mult+0xb4>)
 800849a:	f7ff ff07 	bl	80082ac <__i2b>
 800849e:	9b01      	ldr	r3, [sp, #4]
 80084a0:	0004      	movs	r4, r0
 80084a2:	6098      	str	r0, [r3, #8]
 80084a4:	2300      	movs	r3, #0
 80084a6:	6003      	str	r3, [r0, #0]
 80084a8:	2301      	movs	r3, #1
 80084aa:	421d      	tst	r5, r3
 80084ac:	d00a      	beq.n	80084c4 <__pow5mult+0x84>
 80084ae:	0031      	movs	r1, r6
 80084b0:	0022      	movs	r2, r4
 80084b2:	0038      	movs	r0, r7
 80084b4:	f7ff ff12 	bl	80082dc <__multiply>
 80084b8:	0031      	movs	r1, r6
 80084ba:	9001      	str	r0, [sp, #4]
 80084bc:	0038      	movs	r0, r7
 80084be:	f7ff fe3d 	bl	800813c <_Bfree>
 80084c2:	9e01      	ldr	r6, [sp, #4]
 80084c4:	106d      	asrs	r5, r5, #1
 80084c6:	d00c      	beq.n	80084e2 <__pow5mult+0xa2>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d107      	bne.n	80084de <__pow5mult+0x9e>
 80084ce:	0022      	movs	r2, r4
 80084d0:	0021      	movs	r1, r4
 80084d2:	0038      	movs	r0, r7
 80084d4:	f7ff ff02 	bl	80082dc <__multiply>
 80084d8:	2300      	movs	r3, #0
 80084da:	6020      	str	r0, [r4, #0]
 80084dc:	6003      	str	r3, [r0, #0]
 80084de:	0004      	movs	r4, r0
 80084e0:	e7e2      	b.n	80084a8 <__pow5mult+0x68>
 80084e2:	0030      	movs	r0, r6
 80084e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	0800ade8 	.word	0x0800ade8
 80084ec:	0800ad0d 	.word	0x0800ad0d
 80084f0:	0800ad8d 	.word	0x0800ad8d
 80084f4:	00000271 	.word	0x00000271

080084f8 <__lshift>:
 80084f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084fa:	000c      	movs	r4, r1
 80084fc:	0016      	movs	r6, r2
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	1157      	asrs	r7, r2, #5
 8008502:	b085      	sub	sp, #20
 8008504:	18fb      	adds	r3, r7, r3
 8008506:	9301      	str	r3, [sp, #4]
 8008508:	3301      	adds	r3, #1
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	6849      	ldr	r1, [r1, #4]
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	9002      	str	r0, [sp, #8]
 8008512:	9a00      	ldr	r2, [sp, #0]
 8008514:	4293      	cmp	r3, r2
 8008516:	db10      	blt.n	800853a <__lshift+0x42>
 8008518:	9802      	ldr	r0, [sp, #8]
 800851a:	f7ff fdcb 	bl	80080b4 <_Balloc>
 800851e:	2300      	movs	r3, #0
 8008520:	0001      	movs	r1, r0
 8008522:	0005      	movs	r5, r0
 8008524:	001a      	movs	r2, r3
 8008526:	3114      	adds	r1, #20
 8008528:	4298      	cmp	r0, r3
 800852a:	d10c      	bne.n	8008546 <__lshift+0x4e>
 800852c:	21ef      	movs	r1, #239	@ 0xef
 800852e:	002a      	movs	r2, r5
 8008530:	4b25      	ldr	r3, [pc, #148]	@ (80085c8 <__lshift+0xd0>)
 8008532:	4826      	ldr	r0, [pc, #152]	@ (80085cc <__lshift+0xd4>)
 8008534:	0049      	lsls	r1, r1, #1
 8008536:	f000 fb83 	bl	8008c40 <__assert_func>
 800853a:	3101      	adds	r1, #1
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	e7e8      	b.n	8008512 <__lshift+0x1a>
 8008540:	0098      	lsls	r0, r3, #2
 8008542:	500a      	str	r2, [r1, r0]
 8008544:	3301      	adds	r3, #1
 8008546:	42bb      	cmp	r3, r7
 8008548:	dbfa      	blt.n	8008540 <__lshift+0x48>
 800854a:	43fb      	mvns	r3, r7
 800854c:	17db      	asrs	r3, r3, #31
 800854e:	401f      	ands	r7, r3
 8008550:	00bf      	lsls	r7, r7, #2
 8008552:	0023      	movs	r3, r4
 8008554:	201f      	movs	r0, #31
 8008556:	19c9      	adds	r1, r1, r7
 8008558:	0037      	movs	r7, r6
 800855a:	6922      	ldr	r2, [r4, #16]
 800855c:	3314      	adds	r3, #20
 800855e:	0092      	lsls	r2, r2, #2
 8008560:	189a      	adds	r2, r3, r2
 8008562:	4007      	ands	r7, r0
 8008564:	4206      	tst	r6, r0
 8008566:	d029      	beq.n	80085bc <__lshift+0xc4>
 8008568:	3001      	adds	r0, #1
 800856a:	1bc0      	subs	r0, r0, r7
 800856c:	9003      	str	r0, [sp, #12]
 800856e:	468c      	mov	ip, r1
 8008570:	2000      	movs	r0, #0
 8008572:	681e      	ldr	r6, [r3, #0]
 8008574:	40be      	lsls	r6, r7
 8008576:	4306      	orrs	r6, r0
 8008578:	4660      	mov	r0, ip
 800857a:	c040      	stmia	r0!, {r6}
 800857c:	4684      	mov	ip, r0
 800857e:	9e03      	ldr	r6, [sp, #12]
 8008580:	cb01      	ldmia	r3!, {r0}
 8008582:	40f0      	lsrs	r0, r6
 8008584:	429a      	cmp	r2, r3
 8008586:	d8f4      	bhi.n	8008572 <__lshift+0x7a>
 8008588:	0026      	movs	r6, r4
 800858a:	3615      	adds	r6, #21
 800858c:	2304      	movs	r3, #4
 800858e:	42b2      	cmp	r2, r6
 8008590:	d304      	bcc.n	800859c <__lshift+0xa4>
 8008592:	1b13      	subs	r3, r2, r4
 8008594:	3b15      	subs	r3, #21
 8008596:	089b      	lsrs	r3, r3, #2
 8008598:	3301      	adds	r3, #1
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	50c8      	str	r0, [r1, r3]
 800859e:	2800      	cmp	r0, #0
 80085a0:	d002      	beq.n	80085a8 <__lshift+0xb0>
 80085a2:	9b01      	ldr	r3, [sp, #4]
 80085a4:	3302      	adds	r3, #2
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	9b00      	ldr	r3, [sp, #0]
 80085aa:	9802      	ldr	r0, [sp, #8]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	0021      	movs	r1, r4
 80085b0:	612b      	str	r3, [r5, #16]
 80085b2:	f7ff fdc3 	bl	800813c <_Bfree>
 80085b6:	0028      	movs	r0, r5
 80085b8:	b005      	add	sp, #20
 80085ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085bc:	cb01      	ldmia	r3!, {r0}
 80085be:	c101      	stmia	r1!, {r0}
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d8fb      	bhi.n	80085bc <__lshift+0xc4>
 80085c4:	e7f0      	b.n	80085a8 <__lshift+0xb0>
 80085c6:	46c0      	nop			@ (mov r8, r8)
 80085c8:	0800ad7c 	.word	0x0800ad7c
 80085cc:	0800ad8d 	.word	0x0800ad8d

080085d0 <__mcmp>:
 80085d0:	b530      	push	{r4, r5, lr}
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	6904      	ldr	r4, [r0, #16]
 80085d6:	0002      	movs	r2, r0
 80085d8:	1ae0      	subs	r0, r4, r3
 80085da:	429c      	cmp	r4, r3
 80085dc:	d10f      	bne.n	80085fe <__mcmp+0x2e>
 80085de:	3214      	adds	r2, #20
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	3114      	adds	r1, #20
 80085e4:	0014      	movs	r4, r2
 80085e6:	18c9      	adds	r1, r1, r3
 80085e8:	18d2      	adds	r2, r2, r3
 80085ea:	3a04      	subs	r2, #4
 80085ec:	3904      	subs	r1, #4
 80085ee:	6815      	ldr	r5, [r2, #0]
 80085f0:	680b      	ldr	r3, [r1, #0]
 80085f2:	429d      	cmp	r5, r3
 80085f4:	d004      	beq.n	8008600 <__mcmp+0x30>
 80085f6:	2001      	movs	r0, #1
 80085f8:	429d      	cmp	r5, r3
 80085fa:	d200      	bcs.n	80085fe <__mcmp+0x2e>
 80085fc:	3802      	subs	r0, #2
 80085fe:	bd30      	pop	{r4, r5, pc}
 8008600:	4294      	cmp	r4, r2
 8008602:	d3f2      	bcc.n	80085ea <__mcmp+0x1a>
 8008604:	e7fb      	b.n	80085fe <__mcmp+0x2e>
	...

08008608 <__mdiff>:
 8008608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860a:	000c      	movs	r4, r1
 800860c:	b087      	sub	sp, #28
 800860e:	9000      	str	r0, [sp, #0]
 8008610:	0011      	movs	r1, r2
 8008612:	0020      	movs	r0, r4
 8008614:	0017      	movs	r7, r2
 8008616:	f7ff ffdb 	bl	80085d0 <__mcmp>
 800861a:	1e05      	subs	r5, r0, #0
 800861c:	d110      	bne.n	8008640 <__mdiff+0x38>
 800861e:	0001      	movs	r1, r0
 8008620:	9800      	ldr	r0, [sp, #0]
 8008622:	f7ff fd47 	bl	80080b4 <_Balloc>
 8008626:	1e02      	subs	r2, r0, #0
 8008628:	d104      	bne.n	8008634 <__mdiff+0x2c>
 800862a:	4b40      	ldr	r3, [pc, #256]	@ (800872c <__mdiff+0x124>)
 800862c:	4840      	ldr	r0, [pc, #256]	@ (8008730 <__mdiff+0x128>)
 800862e:	4941      	ldr	r1, [pc, #260]	@ (8008734 <__mdiff+0x12c>)
 8008630:	f000 fb06 	bl	8008c40 <__assert_func>
 8008634:	2301      	movs	r3, #1
 8008636:	6145      	str	r5, [r0, #20]
 8008638:	6103      	str	r3, [r0, #16]
 800863a:	0010      	movs	r0, r2
 800863c:	b007      	add	sp, #28
 800863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008640:	2600      	movs	r6, #0
 8008642:	42b0      	cmp	r0, r6
 8008644:	da03      	bge.n	800864e <__mdiff+0x46>
 8008646:	0023      	movs	r3, r4
 8008648:	003c      	movs	r4, r7
 800864a:	001f      	movs	r7, r3
 800864c:	3601      	adds	r6, #1
 800864e:	6861      	ldr	r1, [r4, #4]
 8008650:	9800      	ldr	r0, [sp, #0]
 8008652:	f7ff fd2f 	bl	80080b4 <_Balloc>
 8008656:	1e02      	subs	r2, r0, #0
 8008658:	d103      	bne.n	8008662 <__mdiff+0x5a>
 800865a:	4b34      	ldr	r3, [pc, #208]	@ (800872c <__mdiff+0x124>)
 800865c:	4834      	ldr	r0, [pc, #208]	@ (8008730 <__mdiff+0x128>)
 800865e:	4936      	ldr	r1, [pc, #216]	@ (8008738 <__mdiff+0x130>)
 8008660:	e7e6      	b.n	8008630 <__mdiff+0x28>
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	3414      	adds	r4, #20
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	18e3      	adds	r3, r4, r3
 800866c:	0021      	movs	r1, r4
 800866e:	9401      	str	r4, [sp, #4]
 8008670:	003c      	movs	r4, r7
 8008672:	9302      	str	r3, [sp, #8]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	3414      	adds	r4, #20
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	18e3      	adds	r3, r4, r3
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	0003      	movs	r3, r0
 8008680:	60c6      	str	r6, [r0, #12]
 8008682:	468c      	mov	ip, r1
 8008684:	2000      	movs	r0, #0
 8008686:	3314      	adds	r3, #20
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	4663      	mov	r3, ip
 800868e:	cb20      	ldmia	r3!, {r5}
 8008690:	b2a9      	uxth	r1, r5
 8008692:	000e      	movs	r6, r1
 8008694:	469c      	mov	ip, r3
 8008696:	cc08      	ldmia	r4!, {r3}
 8008698:	0c2d      	lsrs	r5, r5, #16
 800869a:	b299      	uxth	r1, r3
 800869c:	1a71      	subs	r1, r6, r1
 800869e:	1809      	adds	r1, r1, r0
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	1408      	asrs	r0, r1, #16
 80086a4:	1aeb      	subs	r3, r5, r3
 80086a6:	181b      	adds	r3, r3, r0
 80086a8:	1418      	asrs	r0, r3, #16
 80086aa:	b289      	uxth	r1, r1
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	4319      	orrs	r1, r3
 80086b0:	9b05      	ldr	r3, [sp, #20]
 80086b2:	c302      	stmia	r3!, {r1}
 80086b4:	9305      	str	r3, [sp, #20]
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d8e7      	bhi.n	800868c <__mdiff+0x84>
 80086bc:	0039      	movs	r1, r7
 80086be:	9c03      	ldr	r4, [sp, #12]
 80086c0:	3115      	adds	r1, #21
 80086c2:	2304      	movs	r3, #4
 80086c4:	428c      	cmp	r4, r1
 80086c6:	d304      	bcc.n	80086d2 <__mdiff+0xca>
 80086c8:	1be3      	subs	r3, r4, r7
 80086ca:	3b15      	subs	r3, #21
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	3301      	adds	r3, #1
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	9901      	ldr	r1, [sp, #4]
 80086d4:	18cd      	adds	r5, r1, r3
 80086d6:	9904      	ldr	r1, [sp, #16]
 80086d8:	002e      	movs	r6, r5
 80086da:	18cb      	adds	r3, r1, r3
 80086dc:	001f      	movs	r7, r3
 80086de:	9902      	ldr	r1, [sp, #8]
 80086e0:	428e      	cmp	r6, r1
 80086e2:	d311      	bcc.n	8008708 <__mdiff+0x100>
 80086e4:	9c02      	ldr	r4, [sp, #8]
 80086e6:	1ee9      	subs	r1, r5, #3
 80086e8:	2000      	movs	r0, #0
 80086ea:	428c      	cmp	r4, r1
 80086ec:	d304      	bcc.n	80086f8 <__mdiff+0xf0>
 80086ee:	0021      	movs	r1, r4
 80086f0:	3103      	adds	r1, #3
 80086f2:	1b49      	subs	r1, r1, r5
 80086f4:	0889      	lsrs	r1, r1, #2
 80086f6:	0088      	lsls	r0, r1, #2
 80086f8:	181b      	adds	r3, r3, r0
 80086fa:	3b04      	subs	r3, #4
 80086fc:	6819      	ldr	r1, [r3, #0]
 80086fe:	2900      	cmp	r1, #0
 8008700:	d010      	beq.n	8008724 <__mdiff+0x11c>
 8008702:	9b00      	ldr	r3, [sp, #0]
 8008704:	6113      	str	r3, [r2, #16]
 8008706:	e798      	b.n	800863a <__mdiff+0x32>
 8008708:	4684      	mov	ip, r0
 800870a:	ce02      	ldmia	r6!, {r1}
 800870c:	b288      	uxth	r0, r1
 800870e:	4460      	add	r0, ip
 8008710:	1400      	asrs	r0, r0, #16
 8008712:	0c0c      	lsrs	r4, r1, #16
 8008714:	1904      	adds	r4, r0, r4
 8008716:	4461      	add	r1, ip
 8008718:	1420      	asrs	r0, r4, #16
 800871a:	b289      	uxth	r1, r1
 800871c:	0424      	lsls	r4, r4, #16
 800871e:	4321      	orrs	r1, r4
 8008720:	c702      	stmia	r7!, {r1}
 8008722:	e7dc      	b.n	80086de <__mdiff+0xd6>
 8008724:	9900      	ldr	r1, [sp, #0]
 8008726:	3901      	subs	r1, #1
 8008728:	9100      	str	r1, [sp, #0]
 800872a:	e7e6      	b.n	80086fa <__mdiff+0xf2>
 800872c:	0800ad7c 	.word	0x0800ad7c
 8008730:	0800ad8d 	.word	0x0800ad8d
 8008734:	00000237 	.word	0x00000237
 8008738:	00000245 	.word	0x00000245

0800873c <__d2b>:
 800873c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800873e:	2101      	movs	r1, #1
 8008740:	0016      	movs	r6, r2
 8008742:	001f      	movs	r7, r3
 8008744:	f7ff fcb6 	bl	80080b4 <_Balloc>
 8008748:	1e04      	subs	r4, r0, #0
 800874a:	d105      	bne.n	8008758 <__d2b+0x1c>
 800874c:	0022      	movs	r2, r4
 800874e:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <__d2b+0xa8>)
 8008750:	4825      	ldr	r0, [pc, #148]	@ (80087e8 <__d2b+0xac>)
 8008752:	4926      	ldr	r1, [pc, #152]	@ (80087ec <__d2b+0xb0>)
 8008754:	f000 fa74 	bl	8008c40 <__assert_func>
 8008758:	033b      	lsls	r3, r7, #12
 800875a:	007d      	lsls	r5, r7, #1
 800875c:	0b1b      	lsrs	r3, r3, #12
 800875e:	0d6d      	lsrs	r5, r5, #21
 8008760:	d002      	beq.n	8008768 <__d2b+0x2c>
 8008762:	2280      	movs	r2, #128	@ 0x80
 8008764:	0352      	lsls	r2, r2, #13
 8008766:	4313      	orrs	r3, r2
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	2e00      	cmp	r6, #0
 800876c:	d025      	beq.n	80087ba <__d2b+0x7e>
 800876e:	4668      	mov	r0, sp
 8008770:	9600      	str	r6, [sp, #0]
 8008772:	f7ff fd6c 	bl	800824e <__lo0bits>
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	9900      	ldr	r1, [sp, #0]
 800877a:	2800      	cmp	r0, #0
 800877c:	d01b      	beq.n	80087b6 <__d2b+0x7a>
 800877e:	2220      	movs	r2, #32
 8008780:	001e      	movs	r6, r3
 8008782:	1a12      	subs	r2, r2, r0
 8008784:	4096      	lsls	r6, r2
 8008786:	0032      	movs	r2, r6
 8008788:	40c3      	lsrs	r3, r0
 800878a:	430a      	orrs	r2, r1
 800878c:	6162      	str	r2, [r4, #20]
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	9e01      	ldr	r6, [sp, #4]
 8008792:	61a6      	str	r6, [r4, #24]
 8008794:	1e73      	subs	r3, r6, #1
 8008796:	419e      	sbcs	r6, r3
 8008798:	3601      	adds	r6, #1
 800879a:	6126      	str	r6, [r4, #16]
 800879c:	2d00      	cmp	r5, #0
 800879e:	d014      	beq.n	80087ca <__d2b+0x8e>
 80087a0:	2635      	movs	r6, #53	@ 0x35
 80087a2:	4b13      	ldr	r3, [pc, #76]	@ (80087f0 <__d2b+0xb4>)
 80087a4:	18ed      	adds	r5, r5, r3
 80087a6:	9b08      	ldr	r3, [sp, #32]
 80087a8:	182d      	adds	r5, r5, r0
 80087aa:	601d      	str	r5, [r3, #0]
 80087ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ae:	1a36      	subs	r6, r6, r0
 80087b0:	601e      	str	r6, [r3, #0]
 80087b2:	0020      	movs	r0, r4
 80087b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087b6:	6161      	str	r1, [r4, #20]
 80087b8:	e7ea      	b.n	8008790 <__d2b+0x54>
 80087ba:	a801      	add	r0, sp, #4
 80087bc:	f7ff fd47 	bl	800824e <__lo0bits>
 80087c0:	9b01      	ldr	r3, [sp, #4]
 80087c2:	2601      	movs	r6, #1
 80087c4:	6163      	str	r3, [r4, #20]
 80087c6:	3020      	adds	r0, #32
 80087c8:	e7e7      	b.n	800879a <__d2b+0x5e>
 80087ca:	4b0a      	ldr	r3, [pc, #40]	@ (80087f4 <__d2b+0xb8>)
 80087cc:	18c0      	adds	r0, r0, r3
 80087ce:	9b08      	ldr	r3, [sp, #32]
 80087d0:	6018      	str	r0, [r3, #0]
 80087d2:	4b09      	ldr	r3, [pc, #36]	@ (80087f8 <__d2b+0xbc>)
 80087d4:	18f3      	adds	r3, r6, r3
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	18e3      	adds	r3, r4, r3
 80087da:	6958      	ldr	r0, [r3, #20]
 80087dc:	f7ff fd16 	bl	800820c <__hi0bits>
 80087e0:	0176      	lsls	r6, r6, #5
 80087e2:	e7e3      	b.n	80087ac <__d2b+0x70>
 80087e4:	0800ad7c 	.word	0x0800ad7c
 80087e8:	0800ad8d 	.word	0x0800ad8d
 80087ec:	0000030f 	.word	0x0000030f
 80087f0:	fffffbcd 	.word	0xfffffbcd
 80087f4:	fffffbce 	.word	0xfffffbce
 80087f8:	3fffffff 	.word	0x3fffffff

080087fc <__ssputs_r>:
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	688e      	ldr	r6, [r1, #8]
 8008800:	b085      	sub	sp, #20
 8008802:	001f      	movs	r7, r3
 8008804:	000c      	movs	r4, r1
 8008806:	680b      	ldr	r3, [r1, #0]
 8008808:	9002      	str	r0, [sp, #8]
 800880a:	9203      	str	r2, [sp, #12]
 800880c:	42be      	cmp	r6, r7
 800880e:	d830      	bhi.n	8008872 <__ssputs_r+0x76>
 8008810:	210c      	movs	r1, #12
 8008812:	5e62      	ldrsh	r2, [r4, r1]
 8008814:	2190      	movs	r1, #144	@ 0x90
 8008816:	00c9      	lsls	r1, r1, #3
 8008818:	420a      	tst	r2, r1
 800881a:	d028      	beq.n	800886e <__ssputs_r+0x72>
 800881c:	2003      	movs	r0, #3
 800881e:	6921      	ldr	r1, [r4, #16]
 8008820:	1a5b      	subs	r3, r3, r1
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	6963      	ldr	r3, [r4, #20]
 8008826:	4343      	muls	r3, r0
 8008828:	9801      	ldr	r0, [sp, #4]
 800882a:	0fdd      	lsrs	r5, r3, #31
 800882c:	18ed      	adds	r5, r5, r3
 800882e:	1c7b      	adds	r3, r7, #1
 8008830:	181b      	adds	r3, r3, r0
 8008832:	106d      	asrs	r5, r5, #1
 8008834:	42ab      	cmp	r3, r5
 8008836:	d900      	bls.n	800883a <__ssputs_r+0x3e>
 8008838:	001d      	movs	r5, r3
 800883a:	0552      	lsls	r2, r2, #21
 800883c:	d528      	bpl.n	8008890 <__ssputs_r+0x94>
 800883e:	0029      	movs	r1, r5
 8008840:	9802      	ldr	r0, [sp, #8]
 8008842:	f7ff fba7 	bl	8007f94 <_malloc_r>
 8008846:	1e06      	subs	r6, r0, #0
 8008848:	d02c      	beq.n	80088a4 <__ssputs_r+0xa8>
 800884a:	9a01      	ldr	r2, [sp, #4]
 800884c:	6921      	ldr	r1, [r4, #16]
 800884e:	f7fe fc9f 	bl	8007190 <memcpy>
 8008852:	89a2      	ldrh	r2, [r4, #12]
 8008854:	4b18      	ldr	r3, [pc, #96]	@ (80088b8 <__ssputs_r+0xbc>)
 8008856:	401a      	ands	r2, r3
 8008858:	2380      	movs	r3, #128	@ 0x80
 800885a:	4313      	orrs	r3, r2
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	6126      	str	r6, [r4, #16]
 8008862:	18f6      	adds	r6, r6, r3
 8008864:	6026      	str	r6, [r4, #0]
 8008866:	003e      	movs	r6, r7
 8008868:	6165      	str	r5, [r4, #20]
 800886a:	1aed      	subs	r5, r5, r3
 800886c:	60a5      	str	r5, [r4, #8]
 800886e:	42be      	cmp	r6, r7
 8008870:	d900      	bls.n	8008874 <__ssputs_r+0x78>
 8008872:	003e      	movs	r6, r7
 8008874:	0032      	movs	r2, r6
 8008876:	9903      	ldr	r1, [sp, #12]
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	f7fe fbe3 	bl	8007044 <memmove>
 800887e:	2000      	movs	r0, #0
 8008880:	68a3      	ldr	r3, [r4, #8]
 8008882:	1b9b      	subs	r3, r3, r6
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	199b      	adds	r3, r3, r6
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	b005      	add	sp, #20
 800888e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008890:	002a      	movs	r2, r5
 8008892:	9802      	ldr	r0, [sp, #8]
 8008894:	f000 fa31 	bl	8008cfa <_realloc_r>
 8008898:	1e06      	subs	r6, r0, #0
 800889a:	d1e0      	bne.n	800885e <__ssputs_r+0x62>
 800889c:	6921      	ldr	r1, [r4, #16]
 800889e:	9802      	ldr	r0, [sp, #8]
 80088a0:	f7ff fb02 	bl	8007ea8 <_free_r>
 80088a4:	230c      	movs	r3, #12
 80088a6:	2001      	movs	r0, #1
 80088a8:	9a02      	ldr	r2, [sp, #8]
 80088aa:	4240      	negs	r0, r0
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	89a2      	ldrh	r2, [r4, #12]
 80088b0:	3334      	adds	r3, #52	@ 0x34
 80088b2:	4313      	orrs	r3, r2
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	e7e9      	b.n	800888c <__ssputs_r+0x90>
 80088b8:	fffffb7f 	.word	0xfffffb7f

080088bc <_svfiprintf_r>:
 80088bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088be:	b0a1      	sub	sp, #132	@ 0x84
 80088c0:	9003      	str	r0, [sp, #12]
 80088c2:	001d      	movs	r5, r3
 80088c4:	898b      	ldrh	r3, [r1, #12]
 80088c6:	000f      	movs	r7, r1
 80088c8:	0016      	movs	r6, r2
 80088ca:	061b      	lsls	r3, r3, #24
 80088cc:	d511      	bpl.n	80088f2 <_svfiprintf_r+0x36>
 80088ce:	690b      	ldr	r3, [r1, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10e      	bne.n	80088f2 <_svfiprintf_r+0x36>
 80088d4:	2140      	movs	r1, #64	@ 0x40
 80088d6:	f7ff fb5d 	bl	8007f94 <_malloc_r>
 80088da:	6038      	str	r0, [r7, #0]
 80088dc:	6138      	str	r0, [r7, #16]
 80088de:	2800      	cmp	r0, #0
 80088e0:	d105      	bne.n	80088ee <_svfiprintf_r+0x32>
 80088e2:	230c      	movs	r3, #12
 80088e4:	9a03      	ldr	r2, [sp, #12]
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	2001      	movs	r0, #1
 80088ea:	4240      	negs	r0, r0
 80088ec:	e0cf      	b.n	8008a8e <_svfiprintf_r+0x1d2>
 80088ee:	2340      	movs	r3, #64	@ 0x40
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	2300      	movs	r3, #0
 80088f4:	ac08      	add	r4, sp, #32
 80088f6:	6163      	str	r3, [r4, #20]
 80088f8:	3320      	adds	r3, #32
 80088fa:	7663      	strb	r3, [r4, #25]
 80088fc:	3310      	adds	r3, #16
 80088fe:	76a3      	strb	r3, [r4, #26]
 8008900:	9507      	str	r5, [sp, #28]
 8008902:	0035      	movs	r5, r6
 8008904:	782b      	ldrb	r3, [r5, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <_svfiprintf_r+0x52>
 800890a:	2b25      	cmp	r3, #37	@ 0x25
 800890c:	d148      	bne.n	80089a0 <_svfiprintf_r+0xe4>
 800890e:	1bab      	subs	r3, r5, r6
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	42b5      	cmp	r5, r6
 8008914:	d00b      	beq.n	800892e <_svfiprintf_r+0x72>
 8008916:	0032      	movs	r2, r6
 8008918:	0039      	movs	r1, r7
 800891a:	9803      	ldr	r0, [sp, #12]
 800891c:	f7ff ff6e 	bl	80087fc <__ssputs_r>
 8008920:	3001      	adds	r0, #1
 8008922:	d100      	bne.n	8008926 <_svfiprintf_r+0x6a>
 8008924:	e0ae      	b.n	8008a84 <_svfiprintf_r+0x1c8>
 8008926:	6963      	ldr	r3, [r4, #20]
 8008928:	9a05      	ldr	r2, [sp, #20]
 800892a:	189b      	adds	r3, r3, r2
 800892c:	6163      	str	r3, [r4, #20]
 800892e:	782b      	ldrb	r3, [r5, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d100      	bne.n	8008936 <_svfiprintf_r+0x7a>
 8008934:	e0a6      	b.n	8008a84 <_svfiprintf_r+0x1c8>
 8008936:	2201      	movs	r2, #1
 8008938:	2300      	movs	r3, #0
 800893a:	4252      	negs	r2, r2
 800893c:	6062      	str	r2, [r4, #4]
 800893e:	a904      	add	r1, sp, #16
 8008940:	3254      	adds	r2, #84	@ 0x54
 8008942:	1852      	adds	r2, r2, r1
 8008944:	1c6e      	adds	r6, r5, #1
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	60e3      	str	r3, [r4, #12]
 800894a:	60a3      	str	r3, [r4, #8]
 800894c:	7013      	strb	r3, [r2, #0]
 800894e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008950:	4b54      	ldr	r3, [pc, #336]	@ (8008aa4 <_svfiprintf_r+0x1e8>)
 8008952:	2205      	movs	r2, #5
 8008954:	0018      	movs	r0, r3
 8008956:	7831      	ldrb	r1, [r6, #0]
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	f7fe fc0e 	bl	800717a <memchr>
 800895e:	1c75      	adds	r5, r6, #1
 8008960:	2800      	cmp	r0, #0
 8008962:	d11f      	bne.n	80089a4 <_svfiprintf_r+0xe8>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	06d3      	lsls	r3, r2, #27
 8008968:	d504      	bpl.n	8008974 <_svfiprintf_r+0xb8>
 800896a:	2353      	movs	r3, #83	@ 0x53
 800896c:	a904      	add	r1, sp, #16
 800896e:	185b      	adds	r3, r3, r1
 8008970:	2120      	movs	r1, #32
 8008972:	7019      	strb	r1, [r3, #0]
 8008974:	0713      	lsls	r3, r2, #28
 8008976:	d504      	bpl.n	8008982 <_svfiprintf_r+0xc6>
 8008978:	2353      	movs	r3, #83	@ 0x53
 800897a:	a904      	add	r1, sp, #16
 800897c:	185b      	adds	r3, r3, r1
 800897e:	212b      	movs	r1, #43	@ 0x2b
 8008980:	7019      	strb	r1, [r3, #0]
 8008982:	7833      	ldrb	r3, [r6, #0]
 8008984:	2b2a      	cmp	r3, #42	@ 0x2a
 8008986:	d016      	beq.n	80089b6 <_svfiprintf_r+0xfa>
 8008988:	0035      	movs	r5, r6
 800898a:	2100      	movs	r1, #0
 800898c:	200a      	movs	r0, #10
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	782a      	ldrb	r2, [r5, #0]
 8008992:	1c6e      	adds	r6, r5, #1
 8008994:	3a30      	subs	r2, #48	@ 0x30
 8008996:	2a09      	cmp	r2, #9
 8008998:	d950      	bls.n	8008a3c <_svfiprintf_r+0x180>
 800899a:	2900      	cmp	r1, #0
 800899c:	d111      	bne.n	80089c2 <_svfiprintf_r+0x106>
 800899e:	e017      	b.n	80089d0 <_svfiprintf_r+0x114>
 80089a0:	3501      	adds	r5, #1
 80089a2:	e7af      	b.n	8008904 <_svfiprintf_r+0x48>
 80089a4:	9b05      	ldr	r3, [sp, #20]
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	1ac0      	subs	r0, r0, r3
 80089aa:	2301      	movs	r3, #1
 80089ac:	4083      	lsls	r3, r0
 80089ae:	4313      	orrs	r3, r2
 80089b0:	002e      	movs	r6, r5
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	e7cc      	b.n	8008950 <_svfiprintf_r+0x94>
 80089b6:	9b07      	ldr	r3, [sp, #28]
 80089b8:	1d19      	adds	r1, r3, #4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	9107      	str	r1, [sp, #28]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	db01      	blt.n	80089c6 <_svfiprintf_r+0x10a>
 80089c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089c4:	e004      	b.n	80089d0 <_svfiprintf_r+0x114>
 80089c6:	425b      	negs	r3, r3
 80089c8:	60e3      	str	r3, [r4, #12]
 80089ca:	2302      	movs	r3, #2
 80089cc:	4313      	orrs	r3, r2
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	782b      	ldrb	r3, [r5, #0]
 80089d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80089d4:	d10c      	bne.n	80089f0 <_svfiprintf_r+0x134>
 80089d6:	786b      	ldrb	r3, [r5, #1]
 80089d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089da:	d134      	bne.n	8008a46 <_svfiprintf_r+0x18a>
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	3502      	adds	r5, #2
 80089e0:	1d1a      	adds	r2, r3, #4
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	9207      	str	r2, [sp, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da01      	bge.n	80089ee <_svfiprintf_r+0x132>
 80089ea:	2301      	movs	r3, #1
 80089ec:	425b      	negs	r3, r3
 80089ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80089f0:	4e2d      	ldr	r6, [pc, #180]	@ (8008aa8 <_svfiprintf_r+0x1ec>)
 80089f2:	2203      	movs	r2, #3
 80089f4:	0030      	movs	r0, r6
 80089f6:	7829      	ldrb	r1, [r5, #0]
 80089f8:	f7fe fbbf 	bl	800717a <memchr>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d006      	beq.n	8008a0e <_svfiprintf_r+0x152>
 8008a00:	2340      	movs	r3, #64	@ 0x40
 8008a02:	1b80      	subs	r0, r0, r6
 8008a04:	4083      	lsls	r3, r0
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	3501      	adds	r5, #1
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	7829      	ldrb	r1, [r5, #0]
 8008a10:	2206      	movs	r2, #6
 8008a12:	4826      	ldr	r0, [pc, #152]	@ (8008aac <_svfiprintf_r+0x1f0>)
 8008a14:	1c6e      	adds	r6, r5, #1
 8008a16:	7621      	strb	r1, [r4, #24]
 8008a18:	f7fe fbaf 	bl	800717a <memchr>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d038      	beq.n	8008a92 <_svfiprintf_r+0x1d6>
 8008a20:	4b23      	ldr	r3, [pc, #140]	@ (8008ab0 <_svfiprintf_r+0x1f4>)
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d122      	bne.n	8008a6c <_svfiprintf_r+0x1b0>
 8008a26:	2207      	movs	r2, #7
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	3307      	adds	r3, #7
 8008a2c:	4393      	bics	r3, r2
 8008a2e:	3308      	adds	r3, #8
 8008a30:	9307      	str	r3, [sp, #28]
 8008a32:	6963      	ldr	r3, [r4, #20]
 8008a34:	9a04      	ldr	r2, [sp, #16]
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	6163      	str	r3, [r4, #20]
 8008a3a:	e762      	b.n	8008902 <_svfiprintf_r+0x46>
 8008a3c:	4343      	muls	r3, r0
 8008a3e:	0035      	movs	r5, r6
 8008a40:	2101      	movs	r1, #1
 8008a42:	189b      	adds	r3, r3, r2
 8008a44:	e7a4      	b.n	8008990 <_svfiprintf_r+0xd4>
 8008a46:	2300      	movs	r3, #0
 8008a48:	200a      	movs	r0, #10
 8008a4a:	0019      	movs	r1, r3
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	6063      	str	r3, [r4, #4]
 8008a50:	782a      	ldrb	r2, [r5, #0]
 8008a52:	1c6e      	adds	r6, r5, #1
 8008a54:	3a30      	subs	r2, #48	@ 0x30
 8008a56:	2a09      	cmp	r2, #9
 8008a58:	d903      	bls.n	8008a62 <_svfiprintf_r+0x1a6>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0c8      	beq.n	80089f0 <_svfiprintf_r+0x134>
 8008a5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a60:	e7c6      	b.n	80089f0 <_svfiprintf_r+0x134>
 8008a62:	4341      	muls	r1, r0
 8008a64:	0035      	movs	r5, r6
 8008a66:	2301      	movs	r3, #1
 8008a68:	1889      	adds	r1, r1, r2
 8008a6a:	e7f1      	b.n	8008a50 <_svfiprintf_r+0x194>
 8008a6c:	aa07      	add	r2, sp, #28
 8008a6e:	9200      	str	r2, [sp, #0]
 8008a70:	0021      	movs	r1, r4
 8008a72:	003a      	movs	r2, r7
 8008a74:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab4 <_svfiprintf_r+0x1f8>)
 8008a76:	9803      	ldr	r0, [sp, #12]
 8008a78:	f7fd fde4 	bl	8006644 <_printf_float>
 8008a7c:	9004      	str	r0, [sp, #16]
 8008a7e:	9b04      	ldr	r3, [sp, #16]
 8008a80:	3301      	adds	r3, #1
 8008a82:	d1d6      	bne.n	8008a32 <_svfiprintf_r+0x176>
 8008a84:	89bb      	ldrh	r3, [r7, #12]
 8008a86:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008a88:	065b      	lsls	r3, r3, #25
 8008a8a:	d500      	bpl.n	8008a8e <_svfiprintf_r+0x1d2>
 8008a8c:	e72c      	b.n	80088e8 <_svfiprintf_r+0x2c>
 8008a8e:	b021      	add	sp, #132	@ 0x84
 8008a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a92:	aa07      	add	r2, sp, #28
 8008a94:	9200      	str	r2, [sp, #0]
 8008a96:	0021      	movs	r1, r4
 8008a98:	003a      	movs	r2, r7
 8008a9a:	4b06      	ldr	r3, [pc, #24]	@ (8008ab4 <_svfiprintf_r+0x1f8>)
 8008a9c:	9803      	ldr	r0, [sp, #12]
 8008a9e:	f7fe f87f 	bl	8006ba0 <_printf_i>
 8008aa2:	e7eb      	b.n	8008a7c <_svfiprintf_r+0x1c0>
 8008aa4:	0800aee8 	.word	0x0800aee8
 8008aa8:	0800aeee 	.word	0x0800aeee
 8008aac:	0800aef2 	.word	0x0800aef2
 8008ab0:	08006645 	.word	0x08006645
 8008ab4:	080087fd 	.word	0x080087fd

08008ab8 <__sflush_r>:
 8008ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aba:	220c      	movs	r2, #12
 8008abc:	5e8b      	ldrsh	r3, [r1, r2]
 8008abe:	0005      	movs	r5, r0
 8008ac0:	000c      	movs	r4, r1
 8008ac2:	071a      	lsls	r2, r3, #28
 8008ac4:	d456      	bmi.n	8008b74 <__sflush_r+0xbc>
 8008ac6:	684a      	ldr	r2, [r1, #4]
 8008ac8:	2a00      	cmp	r2, #0
 8008aca:	dc02      	bgt.n	8008ad2 <__sflush_r+0x1a>
 8008acc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	dd4e      	ble.n	8008b70 <__sflush_r+0xb8>
 8008ad2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	d04b      	beq.n	8008b70 <__sflush_r+0xb8>
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2080      	movs	r0, #128	@ 0x80
 8008adc:	682e      	ldr	r6, [r5, #0]
 8008ade:	602a      	str	r2, [r5, #0]
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	0140      	lsls	r0, r0, #5
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	4002      	ands	r2, r0
 8008ae8:	4203      	tst	r3, r0
 8008aea:	d033      	beq.n	8008b54 <__sflush_r+0x9c>
 8008aec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	075b      	lsls	r3, r3, #29
 8008af2:	d506      	bpl.n	8008b02 <__sflush_r+0x4a>
 8008af4:	6863      	ldr	r3, [r4, #4]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <__sflush_r+0x4a>
 8008afe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b00:	1ad2      	subs	r2, r2, r3
 8008b02:	2300      	movs	r3, #0
 8008b04:	0028      	movs	r0, r5
 8008b06:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008b08:	6a21      	ldr	r1, [r4, #32]
 8008b0a:	47b8      	blx	r7
 8008b0c:	89a2      	ldrh	r2, [r4, #12]
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d106      	bne.n	8008b20 <__sflush_r+0x68>
 8008b12:	6829      	ldr	r1, [r5, #0]
 8008b14:	291d      	cmp	r1, #29
 8008b16:	d846      	bhi.n	8008ba6 <__sflush_r+0xee>
 8008b18:	4b29      	ldr	r3, [pc, #164]	@ (8008bc0 <__sflush_r+0x108>)
 8008b1a:	410b      	asrs	r3, r1
 8008b1c:	07db      	lsls	r3, r3, #31
 8008b1e:	d442      	bmi.n	8008ba6 <__sflush_r+0xee>
 8008b20:	2300      	movs	r3, #0
 8008b22:	6063      	str	r3, [r4, #4]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	04d2      	lsls	r2, r2, #19
 8008b2a:	d505      	bpl.n	8008b38 <__sflush_r+0x80>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <__sflush_r+0x7e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d100      	bne.n	8008b38 <__sflush_r+0x80>
 8008b36:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b3a:	602e      	str	r6, [r5, #0]
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	d017      	beq.n	8008b70 <__sflush_r+0xb8>
 8008b40:	0023      	movs	r3, r4
 8008b42:	3344      	adds	r3, #68	@ 0x44
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <__sflush_r+0x96>
 8008b48:	0028      	movs	r0, r5
 8008b4a:	f7ff f9ad 	bl	8007ea8 <_free_r>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b52:	e00d      	b.n	8008b70 <__sflush_r+0xb8>
 8008b54:	2301      	movs	r3, #1
 8008b56:	0028      	movs	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	0002      	movs	r2, r0
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d1c6      	bne.n	8008aee <__sflush_r+0x36>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c3      	beq.n	8008aee <__sflush_r+0x36>
 8008b66:	2b1d      	cmp	r3, #29
 8008b68:	d001      	beq.n	8008b6e <__sflush_r+0xb6>
 8008b6a:	2b16      	cmp	r3, #22
 8008b6c:	d11a      	bne.n	8008ba4 <__sflush_r+0xec>
 8008b6e:	602e      	str	r6, [r5, #0]
 8008b70:	2000      	movs	r0, #0
 8008b72:	e01e      	b.n	8008bb2 <__sflush_r+0xfa>
 8008b74:	690e      	ldr	r6, [r1, #16]
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d0fa      	beq.n	8008b70 <__sflush_r+0xb8>
 8008b7a:	680f      	ldr	r7, [r1, #0]
 8008b7c:	600e      	str	r6, [r1, #0]
 8008b7e:	1bba      	subs	r2, r7, r6
 8008b80:	9201      	str	r2, [sp, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	079b      	lsls	r3, r3, #30
 8008b86:	d100      	bne.n	8008b8a <__sflush_r+0xd2>
 8008b88:	694a      	ldr	r2, [r1, #20]
 8008b8a:	60a2      	str	r2, [r4, #8]
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	ddee      	ble.n	8008b70 <__sflush_r+0xb8>
 8008b92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b94:	0032      	movs	r2, r6
 8008b96:	001f      	movs	r7, r3
 8008b98:	0028      	movs	r0, r5
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	6a21      	ldr	r1, [r4, #32]
 8008b9e:	47b8      	blx	r7
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	dc07      	bgt.n	8008bb4 <__sflush_r+0xfc>
 8008ba4:	89a2      	ldrh	r2, [r4, #12]
 8008ba6:	2340      	movs	r3, #64	@ 0x40
 8008ba8:	2001      	movs	r0, #1
 8008baa:	4313      	orrs	r3, r2
 8008bac:	b21b      	sxth	r3, r3
 8008bae:	81a3      	strh	r3, [r4, #12]
 8008bb0:	4240      	negs	r0, r0
 8008bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	1836      	adds	r6, r6, r0
 8008bb8:	1a1b      	subs	r3, r3, r0
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	e7e6      	b.n	8008b8c <__sflush_r+0xd4>
 8008bbe:	46c0      	nop			@ (mov r8, r8)
 8008bc0:	dfbffffe 	.word	0xdfbffffe

08008bc4 <_fflush_r>:
 8008bc4:	690b      	ldr	r3, [r1, #16]
 8008bc6:	b570      	push	{r4, r5, r6, lr}
 8008bc8:	0005      	movs	r5, r0
 8008bca:	000c      	movs	r4, r1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <_fflush_r+0x12>
 8008bd0:	2500      	movs	r5, #0
 8008bd2:	0028      	movs	r0, r5
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d004      	beq.n	8008be4 <_fflush_r+0x20>
 8008bda:	6a03      	ldr	r3, [r0, #32]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <_fflush_r+0x20>
 8008be0:	f7fe f97c 	bl	8006edc <__sinit>
 8008be4:	220c      	movs	r2, #12
 8008be6:	5ea3      	ldrsh	r3, [r4, r2]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0f1      	beq.n	8008bd0 <_fflush_r+0xc>
 8008bec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bee:	07d2      	lsls	r2, r2, #31
 8008bf0:	d404      	bmi.n	8008bfc <_fflush_r+0x38>
 8008bf2:	059b      	lsls	r3, r3, #22
 8008bf4:	d402      	bmi.n	8008bfc <_fflush_r+0x38>
 8008bf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bf8:	f7fe fabd 	bl	8007176 <__retarget_lock_acquire_recursive>
 8008bfc:	0028      	movs	r0, r5
 8008bfe:	0021      	movs	r1, r4
 8008c00:	f7ff ff5a 	bl	8008ab8 <__sflush_r>
 8008c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c06:	0005      	movs	r5, r0
 8008c08:	07db      	lsls	r3, r3, #31
 8008c0a:	d4e2      	bmi.n	8008bd2 <_fflush_r+0xe>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	059b      	lsls	r3, r3, #22
 8008c10:	d4df      	bmi.n	8008bd2 <_fflush_r+0xe>
 8008c12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c14:	f7fe fab0 	bl	8007178 <__retarget_lock_release_recursive>
 8008c18:	e7db      	b.n	8008bd2 <_fflush_r+0xe>
	...

08008c1c <_sbrk_r>:
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	b570      	push	{r4, r5, r6, lr}
 8008c20:	4d06      	ldr	r5, [pc, #24]	@ (8008c3c <_sbrk_r+0x20>)
 8008c22:	0004      	movs	r4, r0
 8008c24:	0008      	movs	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f9 ff84 	bl	8002b34 <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d103      	bne.n	8008c38 <_sbrk_r+0x1c>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d000      	beq.n	8008c38 <_sbrk_r+0x1c>
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	bd70      	pop	{r4, r5, r6, pc}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
 8008c3c:	200008bc 	.word	0x200008bc

08008c40 <__assert_func>:
 8008c40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008c42:	0014      	movs	r4, r2
 8008c44:	001a      	movs	r2, r3
 8008c46:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <__assert_func+0x2c>)
 8008c48:	0005      	movs	r5, r0
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	000e      	movs	r6, r1
 8008c4e:	68d8      	ldr	r0, [r3, #12]
 8008c50:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <__assert_func+0x30>)
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d101      	bne.n	8008c5a <__assert_func+0x1a>
 8008c56:	4b07      	ldr	r3, [pc, #28]	@ (8008c74 <__assert_func+0x34>)
 8008c58:	001c      	movs	r4, r3
 8008c5a:	4907      	ldr	r1, [pc, #28]	@ (8008c78 <__assert_func+0x38>)
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	9402      	str	r4, [sp, #8]
 8008c60:	002b      	movs	r3, r5
 8008c62:	9600      	str	r6, [sp, #0]
 8008c64:	f000 f886 	bl	8008d74 <fiprintf>
 8008c68:	f000 f894 	bl	8008d94 <abort>
 8008c6c:	20000028 	.word	0x20000028
 8008c70:	0800af03 	.word	0x0800af03
 8008c74:	0800af3e 	.word	0x0800af3e
 8008c78:	0800af10 	.word	0x0800af10

08008c7c <_calloc_r>:
 8008c7c:	b570      	push	{r4, r5, r6, lr}
 8008c7e:	0c0b      	lsrs	r3, r1, #16
 8008c80:	0c15      	lsrs	r5, r2, #16
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d11e      	bne.n	8008cc4 <_calloc_r+0x48>
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	d10c      	bne.n	8008ca4 <_calloc_r+0x28>
 8008c8a:	b289      	uxth	r1, r1
 8008c8c:	b294      	uxth	r4, r2
 8008c8e:	434c      	muls	r4, r1
 8008c90:	0021      	movs	r1, r4
 8008c92:	f7ff f97f 	bl	8007f94 <_malloc_r>
 8008c96:	1e05      	subs	r5, r0, #0
 8008c98:	d01a      	beq.n	8008cd0 <_calloc_r+0x54>
 8008c9a:	0022      	movs	r2, r4
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f7fe f9e4 	bl	800706a <memset>
 8008ca2:	e016      	b.n	8008cd2 <_calloc_r+0x56>
 8008ca4:	1c2b      	adds	r3, r5, #0
 8008ca6:	1c0c      	adds	r4, r1, #0
 8008ca8:	b289      	uxth	r1, r1
 8008caa:	b292      	uxth	r2, r2
 8008cac:	434a      	muls	r2, r1
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	b2a1      	uxth	r1, r4
 8008cb2:	4359      	muls	r1, r3
 8008cb4:	0c14      	lsrs	r4, r2, #16
 8008cb6:	190c      	adds	r4, r1, r4
 8008cb8:	0c23      	lsrs	r3, r4, #16
 8008cba:	d107      	bne.n	8008ccc <_calloc_r+0x50>
 8008cbc:	0424      	lsls	r4, r4, #16
 8008cbe:	b292      	uxth	r2, r2
 8008cc0:	4314      	orrs	r4, r2
 8008cc2:	e7e5      	b.n	8008c90 <_calloc_r+0x14>
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	d101      	bne.n	8008ccc <_calloc_r+0x50>
 8008cc8:	1c14      	adds	r4, r2, #0
 8008cca:	e7ed      	b.n	8008ca8 <_calloc_r+0x2c>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	6003      	str	r3, [r0, #0]
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	0028      	movs	r0, r5
 8008cd4:	bd70      	pop	{r4, r5, r6, pc}

08008cd6 <__ascii_mbtowc>:
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d100      	bne.n	8008cde <__ascii_mbtowc+0x8>
 8008cdc:	a901      	add	r1, sp, #4
 8008cde:	1e10      	subs	r0, r2, #0
 8008ce0:	d006      	beq.n	8008cf0 <__ascii_mbtowc+0x1a>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d006      	beq.n	8008cf4 <__ascii_mbtowc+0x1e>
 8008ce6:	7813      	ldrb	r3, [r2, #0]
 8008ce8:	600b      	str	r3, [r1, #0]
 8008cea:	7810      	ldrb	r0, [r2, #0]
 8008cec:	1e43      	subs	r3, r0, #1
 8008cee:	4198      	sbcs	r0, r3
 8008cf0:	b002      	add	sp, #8
 8008cf2:	4770      	bx	lr
 8008cf4:	2002      	movs	r0, #2
 8008cf6:	4240      	negs	r0, r0
 8008cf8:	e7fa      	b.n	8008cf0 <__ascii_mbtowc+0x1a>

08008cfa <_realloc_r>:
 8008cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cfc:	0006      	movs	r6, r0
 8008cfe:	000c      	movs	r4, r1
 8008d00:	0015      	movs	r5, r2
 8008d02:	2900      	cmp	r1, #0
 8008d04:	d105      	bne.n	8008d12 <_realloc_r+0x18>
 8008d06:	0011      	movs	r1, r2
 8008d08:	f7ff f944 	bl	8007f94 <_malloc_r>
 8008d0c:	0004      	movs	r4, r0
 8008d0e:	0020      	movs	r0, r4
 8008d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d12:	2a00      	cmp	r2, #0
 8008d14:	d103      	bne.n	8008d1e <_realloc_r+0x24>
 8008d16:	f7ff f8c7 	bl	8007ea8 <_free_r>
 8008d1a:	2400      	movs	r4, #0
 8008d1c:	e7f7      	b.n	8008d0e <_realloc_r+0x14>
 8008d1e:	f000 f840 	bl	8008da2 <_malloc_usable_size_r>
 8008d22:	0007      	movs	r7, r0
 8008d24:	4285      	cmp	r5, r0
 8008d26:	d802      	bhi.n	8008d2e <_realloc_r+0x34>
 8008d28:	0843      	lsrs	r3, r0, #1
 8008d2a:	42ab      	cmp	r3, r5
 8008d2c:	d3ef      	bcc.n	8008d0e <_realloc_r+0x14>
 8008d2e:	0029      	movs	r1, r5
 8008d30:	0030      	movs	r0, r6
 8008d32:	f7ff f92f 	bl	8007f94 <_malloc_r>
 8008d36:	9001      	str	r0, [sp, #4]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d0ee      	beq.n	8008d1a <_realloc_r+0x20>
 8008d3c:	002a      	movs	r2, r5
 8008d3e:	42bd      	cmp	r5, r7
 8008d40:	d900      	bls.n	8008d44 <_realloc_r+0x4a>
 8008d42:	003a      	movs	r2, r7
 8008d44:	0021      	movs	r1, r4
 8008d46:	9801      	ldr	r0, [sp, #4]
 8008d48:	f7fe fa22 	bl	8007190 <memcpy>
 8008d4c:	0021      	movs	r1, r4
 8008d4e:	0030      	movs	r0, r6
 8008d50:	f7ff f8aa 	bl	8007ea8 <_free_r>
 8008d54:	9c01      	ldr	r4, [sp, #4]
 8008d56:	e7da      	b.n	8008d0e <_realloc_r+0x14>

08008d58 <__ascii_wctomb>:
 8008d58:	0003      	movs	r3, r0
 8008d5a:	1e08      	subs	r0, r1, #0
 8008d5c:	d005      	beq.n	8008d6a <__ascii_wctomb+0x12>
 8008d5e:	2aff      	cmp	r2, #255	@ 0xff
 8008d60:	d904      	bls.n	8008d6c <__ascii_wctomb+0x14>
 8008d62:	228a      	movs	r2, #138	@ 0x8a
 8008d64:	2001      	movs	r0, #1
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	4240      	negs	r0, r0
 8008d6a:	4770      	bx	lr
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	700a      	strb	r2, [r1, #0]
 8008d70:	e7fb      	b.n	8008d6a <__ascii_wctomb+0x12>
	...

08008d74 <fiprintf>:
 8008d74:	b40e      	push	{r1, r2, r3}
 8008d76:	b517      	push	{r0, r1, r2, r4, lr}
 8008d78:	4c05      	ldr	r4, [pc, #20]	@ (8008d90 <fiprintf+0x1c>)
 8008d7a:	ab05      	add	r3, sp, #20
 8008d7c:	cb04      	ldmia	r3!, {r2}
 8008d7e:	0001      	movs	r1, r0
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	f000 f83c 	bl	8008e00 <_vfiprintf_r>
 8008d88:	bc1e      	pop	{r1, r2, r3, r4}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	b003      	add	sp, #12
 8008d8e:	4718      	bx	r3
 8008d90:	20000028 	.word	0x20000028

08008d94 <abort>:
 8008d94:	2006      	movs	r0, #6
 8008d96:	b510      	push	{r4, lr}
 8008d98:	f000 fa18 	bl	80091cc <raise>
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	f7f9 fe56 	bl	8002a4e <_exit>

08008da2 <_malloc_usable_size_r>:
 8008da2:	1f0b      	subs	r3, r1, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	1f18      	subs	r0, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da01      	bge.n	8008db0 <_malloc_usable_size_r+0xe>
 8008dac:	580b      	ldr	r3, [r1, r0]
 8008dae:	18c0      	adds	r0, r0, r3
 8008db0:	4770      	bx	lr

08008db2 <__sfputc_r>:
 8008db2:	6893      	ldr	r3, [r2, #8]
 8008db4:	b510      	push	{r4, lr}
 8008db6:	3b01      	subs	r3, #1
 8008db8:	6093      	str	r3, [r2, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da04      	bge.n	8008dc8 <__sfputc_r+0x16>
 8008dbe:	6994      	ldr	r4, [r2, #24]
 8008dc0:	42a3      	cmp	r3, r4
 8008dc2:	db07      	blt.n	8008dd4 <__sfputc_r+0x22>
 8008dc4:	290a      	cmp	r1, #10
 8008dc6:	d005      	beq.n	8008dd4 <__sfputc_r+0x22>
 8008dc8:	6813      	ldr	r3, [r2, #0]
 8008dca:	1c58      	adds	r0, r3, #1
 8008dcc:	6010      	str	r0, [r2, #0]
 8008dce:	7019      	strb	r1, [r3, #0]
 8008dd0:	0008      	movs	r0, r1
 8008dd2:	bd10      	pop	{r4, pc}
 8008dd4:	f000 f930 	bl	8009038 <__swbuf_r>
 8008dd8:	0001      	movs	r1, r0
 8008dda:	e7f9      	b.n	8008dd0 <__sfputc_r+0x1e>

08008ddc <__sfputs_r>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	0006      	movs	r6, r0
 8008de0:	000f      	movs	r7, r1
 8008de2:	0014      	movs	r4, r2
 8008de4:	18d5      	adds	r5, r2, r3
 8008de6:	42ac      	cmp	r4, r5
 8008de8:	d101      	bne.n	8008dee <__sfputs_r+0x12>
 8008dea:	2000      	movs	r0, #0
 8008dec:	e007      	b.n	8008dfe <__sfputs_r+0x22>
 8008dee:	7821      	ldrb	r1, [r4, #0]
 8008df0:	003a      	movs	r2, r7
 8008df2:	0030      	movs	r0, r6
 8008df4:	f7ff ffdd 	bl	8008db2 <__sfputc_r>
 8008df8:	3401      	adds	r4, #1
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d1f3      	bne.n	8008de6 <__sfputs_r+0xa>
 8008dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e00 <_vfiprintf_r>:
 8008e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e02:	b0a1      	sub	sp, #132	@ 0x84
 8008e04:	000f      	movs	r7, r1
 8008e06:	0015      	movs	r5, r2
 8008e08:	001e      	movs	r6, r3
 8008e0a:	9003      	str	r0, [sp, #12]
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d004      	beq.n	8008e1a <_vfiprintf_r+0x1a>
 8008e10:	6a03      	ldr	r3, [r0, #32]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <_vfiprintf_r+0x1a>
 8008e16:	f7fe f861 	bl	8006edc <__sinit>
 8008e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e1c:	07db      	lsls	r3, r3, #31
 8008e1e:	d405      	bmi.n	8008e2c <_vfiprintf_r+0x2c>
 8008e20:	89bb      	ldrh	r3, [r7, #12]
 8008e22:	059b      	lsls	r3, r3, #22
 8008e24:	d402      	bmi.n	8008e2c <_vfiprintf_r+0x2c>
 8008e26:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008e28:	f7fe f9a5 	bl	8007176 <__retarget_lock_acquire_recursive>
 8008e2c:	89bb      	ldrh	r3, [r7, #12]
 8008e2e:	071b      	lsls	r3, r3, #28
 8008e30:	d502      	bpl.n	8008e38 <_vfiprintf_r+0x38>
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d113      	bne.n	8008e60 <_vfiprintf_r+0x60>
 8008e38:	0039      	movs	r1, r7
 8008e3a:	9803      	ldr	r0, [sp, #12]
 8008e3c:	f000 f93e 	bl	80090bc <__swsetup_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d00d      	beq.n	8008e60 <_vfiprintf_r+0x60>
 8008e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d503      	bpl.n	8008e52 <_vfiprintf_r+0x52>
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	4240      	negs	r0, r0
 8008e4e:	b021      	add	sp, #132	@ 0x84
 8008e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e52:	89bb      	ldrh	r3, [r7, #12]
 8008e54:	059b      	lsls	r3, r3, #22
 8008e56:	d4f8      	bmi.n	8008e4a <_vfiprintf_r+0x4a>
 8008e58:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008e5a:	f7fe f98d 	bl	8007178 <__retarget_lock_release_recursive>
 8008e5e:	e7f4      	b.n	8008e4a <_vfiprintf_r+0x4a>
 8008e60:	2300      	movs	r3, #0
 8008e62:	ac08      	add	r4, sp, #32
 8008e64:	6163      	str	r3, [r4, #20]
 8008e66:	3320      	adds	r3, #32
 8008e68:	7663      	strb	r3, [r4, #25]
 8008e6a:	3310      	adds	r3, #16
 8008e6c:	76a3      	strb	r3, [r4, #26]
 8008e6e:	9607      	str	r6, [sp, #28]
 8008e70:	002e      	movs	r6, r5
 8008e72:	7833      	ldrb	r3, [r6, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <_vfiprintf_r+0x7c>
 8008e78:	2b25      	cmp	r3, #37	@ 0x25
 8008e7a:	d148      	bne.n	8008f0e <_vfiprintf_r+0x10e>
 8008e7c:	1b73      	subs	r3, r6, r5
 8008e7e:	9305      	str	r3, [sp, #20]
 8008e80:	42ae      	cmp	r6, r5
 8008e82:	d00b      	beq.n	8008e9c <_vfiprintf_r+0x9c>
 8008e84:	002a      	movs	r2, r5
 8008e86:	0039      	movs	r1, r7
 8008e88:	9803      	ldr	r0, [sp, #12]
 8008e8a:	f7ff ffa7 	bl	8008ddc <__sfputs_r>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d100      	bne.n	8008e94 <_vfiprintf_r+0x94>
 8008e92:	e0ae      	b.n	8008ff2 <_vfiprintf_r+0x1f2>
 8008e94:	6963      	ldr	r3, [r4, #20]
 8008e96:	9a05      	ldr	r2, [sp, #20]
 8008e98:	189b      	adds	r3, r3, r2
 8008e9a:	6163      	str	r3, [r4, #20]
 8008e9c:	7833      	ldrb	r3, [r6, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d100      	bne.n	8008ea4 <_vfiprintf_r+0xa4>
 8008ea2:	e0a6      	b.n	8008ff2 <_vfiprintf_r+0x1f2>
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4252      	negs	r2, r2
 8008eaa:	6062      	str	r2, [r4, #4]
 8008eac:	a904      	add	r1, sp, #16
 8008eae:	3254      	adds	r2, #84	@ 0x54
 8008eb0:	1852      	adds	r2, r2, r1
 8008eb2:	1c75      	adds	r5, r6, #1
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	60e3      	str	r3, [r4, #12]
 8008eb8:	60a3      	str	r3, [r4, #8]
 8008eba:	7013      	strb	r3, [r2, #0]
 8008ebc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008ebe:	4b59      	ldr	r3, [pc, #356]	@ (8009024 <_vfiprintf_r+0x224>)
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	7829      	ldrb	r1, [r5, #0]
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	f7fe f957 	bl	800717a <memchr>
 8008ecc:	1c6e      	adds	r6, r5, #1
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d11f      	bne.n	8008f12 <_vfiprintf_r+0x112>
 8008ed2:	6822      	ldr	r2, [r4, #0]
 8008ed4:	06d3      	lsls	r3, r2, #27
 8008ed6:	d504      	bpl.n	8008ee2 <_vfiprintf_r+0xe2>
 8008ed8:	2353      	movs	r3, #83	@ 0x53
 8008eda:	a904      	add	r1, sp, #16
 8008edc:	185b      	adds	r3, r3, r1
 8008ede:	2120      	movs	r1, #32
 8008ee0:	7019      	strb	r1, [r3, #0]
 8008ee2:	0713      	lsls	r3, r2, #28
 8008ee4:	d504      	bpl.n	8008ef0 <_vfiprintf_r+0xf0>
 8008ee6:	2353      	movs	r3, #83	@ 0x53
 8008ee8:	a904      	add	r1, sp, #16
 8008eea:	185b      	adds	r3, r3, r1
 8008eec:	212b      	movs	r1, #43	@ 0x2b
 8008eee:	7019      	strb	r1, [r3, #0]
 8008ef0:	782b      	ldrb	r3, [r5, #0]
 8008ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ef4:	d016      	beq.n	8008f24 <_vfiprintf_r+0x124>
 8008ef6:	002e      	movs	r6, r5
 8008ef8:	2100      	movs	r1, #0
 8008efa:	200a      	movs	r0, #10
 8008efc:	68e3      	ldr	r3, [r4, #12]
 8008efe:	7832      	ldrb	r2, [r6, #0]
 8008f00:	1c75      	adds	r5, r6, #1
 8008f02:	3a30      	subs	r2, #48	@ 0x30
 8008f04:	2a09      	cmp	r2, #9
 8008f06:	d950      	bls.n	8008faa <_vfiprintf_r+0x1aa>
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	d111      	bne.n	8008f30 <_vfiprintf_r+0x130>
 8008f0c:	e017      	b.n	8008f3e <_vfiprintf_r+0x13e>
 8008f0e:	3601      	adds	r6, #1
 8008f10:	e7af      	b.n	8008e72 <_vfiprintf_r+0x72>
 8008f12:	9b05      	ldr	r3, [sp, #20]
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	1ac0      	subs	r0, r0, r3
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4083      	lsls	r3, r0
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	0035      	movs	r5, r6
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	e7cc      	b.n	8008ebe <_vfiprintf_r+0xbe>
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	1d19      	adds	r1, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	9107      	str	r1, [sp, #28]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db01      	blt.n	8008f34 <_vfiprintf_r+0x134>
 8008f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f32:	e004      	b.n	8008f3e <_vfiprintf_r+0x13e>
 8008f34:	425b      	negs	r3, r3
 8008f36:	60e3      	str	r3, [r4, #12]
 8008f38:	2302      	movs	r3, #2
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	7833      	ldrb	r3, [r6, #0]
 8008f40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f42:	d10c      	bne.n	8008f5e <_vfiprintf_r+0x15e>
 8008f44:	7873      	ldrb	r3, [r6, #1]
 8008f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f48:	d134      	bne.n	8008fb4 <_vfiprintf_r+0x1b4>
 8008f4a:	9b07      	ldr	r3, [sp, #28]
 8008f4c:	3602      	adds	r6, #2
 8008f4e:	1d1a      	adds	r2, r3, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	da01      	bge.n	8008f5c <_vfiprintf_r+0x15c>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	425b      	negs	r3, r3
 8008f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f5e:	4d32      	ldr	r5, [pc, #200]	@ (8009028 <_vfiprintf_r+0x228>)
 8008f60:	2203      	movs	r2, #3
 8008f62:	0028      	movs	r0, r5
 8008f64:	7831      	ldrb	r1, [r6, #0]
 8008f66:	f7fe f908 	bl	800717a <memchr>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d006      	beq.n	8008f7c <_vfiprintf_r+0x17c>
 8008f6e:	2340      	movs	r3, #64	@ 0x40
 8008f70:	1b40      	subs	r0, r0, r5
 8008f72:	4083      	lsls	r3, r0
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	3601      	adds	r6, #1
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	7831      	ldrb	r1, [r6, #0]
 8008f7e:	2206      	movs	r2, #6
 8008f80:	482a      	ldr	r0, [pc, #168]	@ (800902c <_vfiprintf_r+0x22c>)
 8008f82:	1c75      	adds	r5, r6, #1
 8008f84:	7621      	strb	r1, [r4, #24]
 8008f86:	f7fe f8f8 	bl	800717a <memchr>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d040      	beq.n	8009010 <_vfiprintf_r+0x210>
 8008f8e:	4b28      	ldr	r3, [pc, #160]	@ (8009030 <_vfiprintf_r+0x230>)
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d122      	bne.n	8008fda <_vfiprintf_r+0x1da>
 8008f94:	2207      	movs	r2, #7
 8008f96:	9b07      	ldr	r3, [sp, #28]
 8008f98:	3307      	adds	r3, #7
 8008f9a:	4393      	bics	r3, r2
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	6963      	ldr	r3, [r4, #20]
 8008fa2:	9a04      	ldr	r2, [sp, #16]
 8008fa4:	189b      	adds	r3, r3, r2
 8008fa6:	6163      	str	r3, [r4, #20]
 8008fa8:	e762      	b.n	8008e70 <_vfiprintf_r+0x70>
 8008faa:	4343      	muls	r3, r0
 8008fac:	002e      	movs	r6, r5
 8008fae:	2101      	movs	r1, #1
 8008fb0:	189b      	adds	r3, r3, r2
 8008fb2:	e7a4      	b.n	8008efe <_vfiprintf_r+0xfe>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	200a      	movs	r0, #10
 8008fb8:	0019      	movs	r1, r3
 8008fba:	3601      	adds	r6, #1
 8008fbc:	6063      	str	r3, [r4, #4]
 8008fbe:	7832      	ldrb	r2, [r6, #0]
 8008fc0:	1c75      	adds	r5, r6, #1
 8008fc2:	3a30      	subs	r2, #48	@ 0x30
 8008fc4:	2a09      	cmp	r2, #9
 8008fc6:	d903      	bls.n	8008fd0 <_vfiprintf_r+0x1d0>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0c8      	beq.n	8008f5e <_vfiprintf_r+0x15e>
 8008fcc:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fce:	e7c6      	b.n	8008f5e <_vfiprintf_r+0x15e>
 8008fd0:	4341      	muls	r1, r0
 8008fd2:	002e      	movs	r6, r5
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	1889      	adds	r1, r1, r2
 8008fd8:	e7f1      	b.n	8008fbe <_vfiprintf_r+0x1be>
 8008fda:	aa07      	add	r2, sp, #28
 8008fdc:	9200      	str	r2, [sp, #0]
 8008fde:	0021      	movs	r1, r4
 8008fe0:	003a      	movs	r2, r7
 8008fe2:	4b14      	ldr	r3, [pc, #80]	@ (8009034 <_vfiprintf_r+0x234>)
 8008fe4:	9803      	ldr	r0, [sp, #12]
 8008fe6:	f7fd fb2d 	bl	8006644 <_printf_float>
 8008fea:	9004      	str	r0, [sp, #16]
 8008fec:	9b04      	ldr	r3, [sp, #16]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	d1d6      	bne.n	8008fa0 <_vfiprintf_r+0x1a0>
 8008ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ff4:	07db      	lsls	r3, r3, #31
 8008ff6:	d405      	bmi.n	8009004 <_vfiprintf_r+0x204>
 8008ff8:	89bb      	ldrh	r3, [r7, #12]
 8008ffa:	059b      	lsls	r3, r3, #22
 8008ffc:	d402      	bmi.n	8009004 <_vfiprintf_r+0x204>
 8008ffe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009000:	f7fe f8ba 	bl	8007178 <__retarget_lock_release_recursive>
 8009004:	89bb      	ldrh	r3, [r7, #12]
 8009006:	065b      	lsls	r3, r3, #25
 8009008:	d500      	bpl.n	800900c <_vfiprintf_r+0x20c>
 800900a:	e71e      	b.n	8008e4a <_vfiprintf_r+0x4a>
 800900c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800900e:	e71e      	b.n	8008e4e <_vfiprintf_r+0x4e>
 8009010:	aa07      	add	r2, sp, #28
 8009012:	9200      	str	r2, [sp, #0]
 8009014:	0021      	movs	r1, r4
 8009016:	003a      	movs	r2, r7
 8009018:	4b06      	ldr	r3, [pc, #24]	@ (8009034 <_vfiprintf_r+0x234>)
 800901a:	9803      	ldr	r0, [sp, #12]
 800901c:	f7fd fdc0 	bl	8006ba0 <_printf_i>
 8009020:	e7e3      	b.n	8008fea <_vfiprintf_r+0x1ea>
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	0800aee8 	.word	0x0800aee8
 8009028:	0800aeee 	.word	0x0800aeee
 800902c:	0800aef2 	.word	0x0800aef2
 8009030:	08006645 	.word	0x08006645
 8009034:	08008ddd 	.word	0x08008ddd

08009038 <__swbuf_r>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	0006      	movs	r6, r0
 800903c:	000d      	movs	r5, r1
 800903e:	0014      	movs	r4, r2
 8009040:	2800      	cmp	r0, #0
 8009042:	d004      	beq.n	800904e <__swbuf_r+0x16>
 8009044:	6a03      	ldr	r3, [r0, #32]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <__swbuf_r+0x16>
 800904a:	f7fd ff47 	bl	8006edc <__sinit>
 800904e:	69a3      	ldr	r3, [r4, #24]
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	071b      	lsls	r3, r3, #28
 8009056:	d502      	bpl.n	800905e <__swbuf_r+0x26>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <__swbuf_r+0x3a>
 800905e:	0021      	movs	r1, r4
 8009060:	0030      	movs	r0, r6
 8009062:	f000 f82b 	bl	80090bc <__swsetup_r>
 8009066:	2800      	cmp	r0, #0
 8009068:	d003      	beq.n	8009072 <__swbuf_r+0x3a>
 800906a:	2501      	movs	r5, #1
 800906c:	426d      	negs	r5, r5
 800906e:	0028      	movs	r0, r5
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	b2ef      	uxtb	r7, r5
 8009078:	1ac0      	subs	r0, r0, r3
 800907a:	6963      	ldr	r3, [r4, #20]
 800907c:	b2ed      	uxtb	r5, r5
 800907e:	4283      	cmp	r3, r0
 8009080:	dc05      	bgt.n	800908e <__swbuf_r+0x56>
 8009082:	0021      	movs	r1, r4
 8009084:	0030      	movs	r0, r6
 8009086:	f7ff fd9d 	bl	8008bc4 <_fflush_r>
 800908a:	2800      	cmp	r0, #0
 800908c:	d1ed      	bne.n	800906a <__swbuf_r+0x32>
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	3001      	adds	r0, #1
 8009092:	3b01      	subs	r3, #1
 8009094:	60a3      	str	r3, [r4, #8]
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	701f      	strb	r7, [r3, #0]
 800909e:	6963      	ldr	r3, [r4, #20]
 80090a0:	4283      	cmp	r3, r0
 80090a2:	d004      	beq.n	80090ae <__swbuf_r+0x76>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	07db      	lsls	r3, r3, #31
 80090a8:	d5e1      	bpl.n	800906e <__swbuf_r+0x36>
 80090aa:	2d0a      	cmp	r5, #10
 80090ac:	d1df      	bne.n	800906e <__swbuf_r+0x36>
 80090ae:	0021      	movs	r1, r4
 80090b0:	0030      	movs	r0, r6
 80090b2:	f7ff fd87 	bl	8008bc4 <_fflush_r>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d0d9      	beq.n	800906e <__swbuf_r+0x36>
 80090ba:	e7d6      	b.n	800906a <__swbuf_r+0x32>

080090bc <__swsetup_r>:
 80090bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009174 <__swsetup_r+0xb8>)
 80090be:	b570      	push	{r4, r5, r6, lr}
 80090c0:	0005      	movs	r5, r0
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	000c      	movs	r4, r1
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d004      	beq.n	80090d4 <__swsetup_r+0x18>
 80090ca:	6a03      	ldr	r3, [r0, #32]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <__swsetup_r+0x18>
 80090d0:	f7fd ff04 	bl	8006edc <__sinit>
 80090d4:	230c      	movs	r3, #12
 80090d6:	5ee2      	ldrsh	r2, [r4, r3]
 80090d8:	0713      	lsls	r3, r2, #28
 80090da:	d423      	bmi.n	8009124 <__swsetup_r+0x68>
 80090dc:	06d3      	lsls	r3, r2, #27
 80090de:	d407      	bmi.n	80090f0 <__swsetup_r+0x34>
 80090e0:	2309      	movs	r3, #9
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	2340      	movs	r3, #64	@ 0x40
 80090e6:	2001      	movs	r0, #1
 80090e8:	4313      	orrs	r3, r2
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	4240      	negs	r0, r0
 80090ee:	e03a      	b.n	8009166 <__swsetup_r+0xaa>
 80090f0:	0752      	lsls	r2, r2, #29
 80090f2:	d513      	bpl.n	800911c <__swsetup_r+0x60>
 80090f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090f6:	2900      	cmp	r1, #0
 80090f8:	d008      	beq.n	800910c <__swsetup_r+0x50>
 80090fa:	0023      	movs	r3, r4
 80090fc:	3344      	adds	r3, #68	@ 0x44
 80090fe:	4299      	cmp	r1, r3
 8009100:	d002      	beq.n	8009108 <__swsetup_r+0x4c>
 8009102:	0028      	movs	r0, r5
 8009104:	f7fe fed0 	bl	8007ea8 <_free_r>
 8009108:	2300      	movs	r3, #0
 800910a:	6363      	str	r3, [r4, #52]	@ 0x34
 800910c:	2224      	movs	r2, #36	@ 0x24
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	4393      	bics	r3, r2
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	2300      	movs	r3, #0
 8009116:	6063      	str	r3, [r4, #4]
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	2308      	movs	r3, #8
 800911e:	89a2      	ldrh	r2, [r4, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <__swsetup_r+0x86>
 800912a:	21a0      	movs	r1, #160	@ 0xa0
 800912c:	2280      	movs	r2, #128	@ 0x80
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	0089      	lsls	r1, r1, #2
 8009132:	0092      	lsls	r2, r2, #2
 8009134:	400b      	ands	r3, r1
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <__swsetup_r+0x86>
 800913a:	0021      	movs	r1, r4
 800913c:	0028      	movs	r0, r5
 800913e:	f000 f88f 	bl	8009260 <__smakebuf_r>
 8009142:	230c      	movs	r3, #12
 8009144:	5ee2      	ldrsh	r2, [r4, r3]
 8009146:	2101      	movs	r1, #1
 8009148:	0013      	movs	r3, r2
 800914a:	400b      	ands	r3, r1
 800914c:	420a      	tst	r2, r1
 800914e:	d00b      	beq.n	8009168 <__swsetup_r+0xac>
 8009150:	2300      	movs	r3, #0
 8009152:	60a3      	str	r3, [r4, #8]
 8009154:	6963      	ldr	r3, [r4, #20]
 8009156:	425b      	negs	r3, r3
 8009158:	61a3      	str	r3, [r4, #24]
 800915a:	2000      	movs	r0, #0
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	4283      	cmp	r3, r0
 8009160:	d101      	bne.n	8009166 <__swsetup_r+0xaa>
 8009162:	0613      	lsls	r3, r2, #24
 8009164:	d4be      	bmi.n	80090e4 <__swsetup_r+0x28>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	0791      	lsls	r1, r2, #30
 800916a:	d400      	bmi.n	800916e <__swsetup_r+0xb2>
 800916c:	6963      	ldr	r3, [r4, #20]
 800916e:	60a3      	str	r3, [r4, #8]
 8009170:	e7f3      	b.n	800915a <__swsetup_r+0x9e>
 8009172:	46c0      	nop			@ (mov r8, r8)
 8009174:	20000028 	.word	0x20000028

08009178 <_raise_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	0004      	movs	r4, r0
 800917c:	000d      	movs	r5, r1
 800917e:	291f      	cmp	r1, #31
 8009180:	d904      	bls.n	800918c <_raise_r+0x14>
 8009182:	2316      	movs	r3, #22
 8009184:	6003      	str	r3, [r0, #0]
 8009186:	2001      	movs	r0, #1
 8009188:	4240      	negs	r0, r0
 800918a:	bd70      	pop	{r4, r5, r6, pc}
 800918c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <_raise_r+0x24>
 8009192:	008a      	lsls	r2, r1, #2
 8009194:	189b      	adds	r3, r3, r2
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	2a00      	cmp	r2, #0
 800919a:	d108      	bne.n	80091ae <_raise_r+0x36>
 800919c:	0020      	movs	r0, r4
 800919e:	f000 f831 	bl	8009204 <_getpid_r>
 80091a2:	002a      	movs	r2, r5
 80091a4:	0001      	movs	r1, r0
 80091a6:	0020      	movs	r0, r4
 80091a8:	f000 f81a 	bl	80091e0 <_kill_r>
 80091ac:	e7ed      	b.n	800918a <_raise_r+0x12>
 80091ae:	2a01      	cmp	r2, #1
 80091b0:	d009      	beq.n	80091c6 <_raise_r+0x4e>
 80091b2:	1c51      	adds	r1, r2, #1
 80091b4:	d103      	bne.n	80091be <_raise_r+0x46>
 80091b6:	2316      	movs	r3, #22
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	2001      	movs	r0, #1
 80091bc:	e7e5      	b.n	800918a <_raise_r+0x12>
 80091be:	2100      	movs	r1, #0
 80091c0:	0028      	movs	r0, r5
 80091c2:	6019      	str	r1, [r3, #0]
 80091c4:	4790      	blx	r2
 80091c6:	2000      	movs	r0, #0
 80091c8:	e7df      	b.n	800918a <_raise_r+0x12>
	...

080091cc <raise>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4b03      	ldr	r3, [pc, #12]	@ (80091dc <raise+0x10>)
 80091d0:	0001      	movs	r1, r0
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	f7ff ffd0 	bl	8009178 <_raise_r>
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	20000028 	.word	0x20000028

080091e0 <_kill_r>:
 80091e0:	2300      	movs	r3, #0
 80091e2:	b570      	push	{r4, r5, r6, lr}
 80091e4:	4d06      	ldr	r5, [pc, #24]	@ (8009200 <_kill_r+0x20>)
 80091e6:	0004      	movs	r4, r0
 80091e8:	0008      	movs	r0, r1
 80091ea:	0011      	movs	r1, r2
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	f7f9 fc1e 	bl	8002a2e <_kill>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d103      	bne.n	80091fe <_kill_r+0x1e>
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d000      	beq.n	80091fe <_kill_r+0x1e>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	200008bc 	.word	0x200008bc

08009204 <_getpid_r>:
 8009204:	b510      	push	{r4, lr}
 8009206:	f7f9 fc0c 	bl	8002a22 <_getpid>
 800920a:	bd10      	pop	{r4, pc}

0800920c <__swhatbuf_r>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	000e      	movs	r6, r1
 8009210:	001d      	movs	r5, r3
 8009212:	230e      	movs	r3, #14
 8009214:	5ec9      	ldrsh	r1, [r1, r3]
 8009216:	0014      	movs	r4, r2
 8009218:	b096      	sub	sp, #88	@ 0x58
 800921a:	2900      	cmp	r1, #0
 800921c:	da0c      	bge.n	8009238 <__swhatbuf_r+0x2c>
 800921e:	89b2      	ldrh	r2, [r6, #12]
 8009220:	2380      	movs	r3, #128	@ 0x80
 8009222:	0011      	movs	r1, r2
 8009224:	4019      	ands	r1, r3
 8009226:	421a      	tst	r2, r3
 8009228:	d114      	bne.n	8009254 <__swhatbuf_r+0x48>
 800922a:	2380      	movs	r3, #128	@ 0x80
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	2000      	movs	r0, #0
 8009230:	6029      	str	r1, [r5, #0]
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	b016      	add	sp, #88	@ 0x58
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	466a      	mov	r2, sp
 800923a:	f000 f853 	bl	80092e4 <_fstat_r>
 800923e:	2800      	cmp	r0, #0
 8009240:	dbed      	blt.n	800921e <__swhatbuf_r+0x12>
 8009242:	23f0      	movs	r3, #240	@ 0xf0
 8009244:	9901      	ldr	r1, [sp, #4]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	4019      	ands	r1, r3
 800924a:	4b04      	ldr	r3, [pc, #16]	@ (800925c <__swhatbuf_r+0x50>)
 800924c:	18c9      	adds	r1, r1, r3
 800924e:	424b      	negs	r3, r1
 8009250:	4159      	adcs	r1, r3
 8009252:	e7ea      	b.n	800922a <__swhatbuf_r+0x1e>
 8009254:	2100      	movs	r1, #0
 8009256:	2340      	movs	r3, #64	@ 0x40
 8009258:	e7e9      	b.n	800922e <__swhatbuf_r+0x22>
 800925a:	46c0      	nop			@ (mov r8, r8)
 800925c:	ffffe000 	.word	0xffffe000

08009260 <__smakebuf_r>:
 8009260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009262:	2602      	movs	r6, #2
 8009264:	898b      	ldrh	r3, [r1, #12]
 8009266:	0005      	movs	r5, r0
 8009268:	000c      	movs	r4, r1
 800926a:	b085      	sub	sp, #20
 800926c:	4233      	tst	r3, r6
 800926e:	d007      	beq.n	8009280 <__smakebuf_r+0x20>
 8009270:	0023      	movs	r3, r4
 8009272:	3347      	adds	r3, #71	@ 0x47
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	2301      	movs	r3, #1
 800927a:	6163      	str	r3, [r4, #20]
 800927c:	b005      	add	sp, #20
 800927e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009280:	ab03      	add	r3, sp, #12
 8009282:	aa02      	add	r2, sp, #8
 8009284:	f7ff ffc2 	bl	800920c <__swhatbuf_r>
 8009288:	9f02      	ldr	r7, [sp, #8]
 800928a:	9001      	str	r0, [sp, #4]
 800928c:	0039      	movs	r1, r7
 800928e:	0028      	movs	r0, r5
 8009290:	f7fe fe80 	bl	8007f94 <_malloc_r>
 8009294:	2800      	cmp	r0, #0
 8009296:	d108      	bne.n	80092aa <__smakebuf_r+0x4a>
 8009298:	220c      	movs	r2, #12
 800929a:	5ea3      	ldrsh	r3, [r4, r2]
 800929c:	059a      	lsls	r2, r3, #22
 800929e:	d4ed      	bmi.n	800927c <__smakebuf_r+0x1c>
 80092a0:	2203      	movs	r2, #3
 80092a2:	4393      	bics	r3, r2
 80092a4:	431e      	orrs	r6, r3
 80092a6:	81a6      	strh	r6, [r4, #12]
 80092a8:	e7e2      	b.n	8009270 <__smakebuf_r+0x10>
 80092aa:	2380      	movs	r3, #128	@ 0x80
 80092ac:	89a2      	ldrh	r2, [r4, #12]
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	6120      	str	r0, [r4, #16]
 80092b8:	6167      	str	r7, [r4, #20]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00c      	beq.n	80092d8 <__smakebuf_r+0x78>
 80092be:	0028      	movs	r0, r5
 80092c0:	230e      	movs	r3, #14
 80092c2:	5ee1      	ldrsh	r1, [r4, r3]
 80092c4:	f000 f820 	bl	8009308 <_isatty_r>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d005      	beq.n	80092d8 <__smakebuf_r+0x78>
 80092cc:	2303      	movs	r3, #3
 80092ce:	89a2      	ldrh	r2, [r4, #12]
 80092d0:	439a      	bics	r2, r3
 80092d2:	3b02      	subs	r3, #2
 80092d4:	4313      	orrs	r3, r2
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	4313      	orrs	r3, r2
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	e7cc      	b.n	800927c <__smakebuf_r+0x1c>
	...

080092e4 <_fstat_r>:
 80092e4:	2300      	movs	r3, #0
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	4d06      	ldr	r5, [pc, #24]	@ (8009304 <_fstat_r+0x20>)
 80092ea:	0004      	movs	r4, r0
 80092ec:	0008      	movs	r0, r1
 80092ee:	0011      	movs	r1, r2
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	f7f9 fbfc 	bl	8002aee <_fstat>
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	d103      	bne.n	8009302 <_fstat_r+0x1e>
 80092fa:	682b      	ldr	r3, [r5, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d000      	beq.n	8009302 <_fstat_r+0x1e>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	200008bc 	.word	0x200008bc

08009308 <_isatty_r>:
 8009308:	2300      	movs	r3, #0
 800930a:	b570      	push	{r4, r5, r6, lr}
 800930c:	4d06      	ldr	r5, [pc, #24]	@ (8009328 <_isatty_r+0x20>)
 800930e:	0004      	movs	r4, r0
 8009310:	0008      	movs	r0, r1
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	f7f9 fbf9 	bl	8002b0a <_isatty>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d103      	bne.n	8009324 <_isatty_r+0x1c>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d000      	beq.n	8009324 <_isatty_r+0x1c>
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	bd70      	pop	{r4, r5, r6, pc}
 8009326:	46c0      	nop			@ (mov r8, r8)
 8009328:	200008bc 	.word	0x200008bc

0800932c <log>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	0004      	movs	r4, r0
 8009330:	000d      	movs	r5, r1
 8009332:	f000 f837 	bl	80093a4 <__ieee754_log>
 8009336:	0022      	movs	r2, r4
 8009338:	0006      	movs	r6, r0
 800933a:	000f      	movs	r7, r1
 800933c:	002b      	movs	r3, r5
 800933e:	0020      	movs	r0, r4
 8009340:	0029      	movs	r1, r5
 8009342:	f7f8 feb9 	bl	80020b8 <__aeabi_dcmpun>
 8009346:	2800      	cmp	r0, #0
 8009348:	d115      	bne.n	8009376 <log+0x4a>
 800934a:	2200      	movs	r2, #0
 800934c:	2300      	movs	r3, #0
 800934e:	0020      	movs	r0, r4
 8009350:	0029      	movs	r1, r5
 8009352:	f7f7 f891 	bl	8000478 <__aeabi_dcmpgt>
 8009356:	2800      	cmp	r0, #0
 8009358:	d10d      	bne.n	8009376 <log+0x4a>
 800935a:	2200      	movs	r2, #0
 800935c:	2300      	movs	r3, #0
 800935e:	0020      	movs	r0, r4
 8009360:	0029      	movs	r1, r5
 8009362:	f7f7 f86f 	bl	8000444 <__aeabi_dcmpeq>
 8009366:	2800      	cmp	r0, #0
 8009368:	d008      	beq.n	800937c <log+0x50>
 800936a:	f7fd fed9 	bl	8007120 <__errno>
 800936e:	2322      	movs	r3, #34	@ 0x22
 8009370:	2600      	movs	r6, #0
 8009372:	4f07      	ldr	r7, [pc, #28]	@ (8009390 <log+0x64>)
 8009374:	6003      	str	r3, [r0, #0]
 8009376:	0030      	movs	r0, r6
 8009378:	0039      	movs	r1, r7
 800937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937c:	f7fd fed0 	bl	8007120 <__errno>
 8009380:	2321      	movs	r3, #33	@ 0x21
 8009382:	6003      	str	r3, [r0, #0]
 8009384:	4803      	ldr	r0, [pc, #12]	@ (8009394 <log+0x68>)
 8009386:	f000 f807 	bl	8009398 <nan>
 800938a:	0006      	movs	r6, r0
 800938c:	000f      	movs	r7, r1
 800938e:	e7f2      	b.n	8009376 <log+0x4a>
 8009390:	fff00000 	.word	0xfff00000
 8009394:	0800af3e 	.word	0x0800af3e

08009398 <nan>:
 8009398:	2000      	movs	r0, #0
 800939a:	4901      	ldr	r1, [pc, #4]	@ (80093a0 <nan+0x8>)
 800939c:	4770      	bx	lr
 800939e:	46c0      	nop			@ (mov r8, r8)
 80093a0:	7ff80000 	.word	0x7ff80000

080093a4 <__ieee754_log>:
 80093a4:	2380      	movs	r3, #128	@ 0x80
 80093a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a8:	035b      	lsls	r3, r3, #13
 80093aa:	000e      	movs	r6, r1
 80093ac:	b08d      	sub	sp, #52	@ 0x34
 80093ae:	4299      	cmp	r1, r3
 80093b0:	da23      	bge.n	80093fa <__ieee754_log+0x56>
 80093b2:	004b      	lsls	r3, r1, #1
 80093b4:	085b      	lsrs	r3, r3, #1
 80093b6:	4303      	orrs	r3, r0
 80093b8:	d107      	bne.n	80093ca <__ieee754_log+0x26>
 80093ba:	2200      	movs	r2, #0
 80093bc:	2300      	movs	r3, #0
 80093be:	2000      	movs	r0, #0
 80093c0:	49b4      	ldr	r1, [pc, #720]	@ (8009694 <__ieee754_log+0x2f0>)
 80093c2:	f7f7 fbd1 	bl	8000b68 <__aeabi_ddiv>
 80093c6:	b00d      	add	sp, #52	@ 0x34
 80093c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ca:	2900      	cmp	r1, #0
 80093cc:	da06      	bge.n	80093dc <__ieee754_log+0x38>
 80093ce:	0002      	movs	r2, r0
 80093d0:	000b      	movs	r3, r1
 80093d2:	f7f8 fad5 	bl	8001980 <__aeabi_dsub>
 80093d6:	2200      	movs	r2, #0
 80093d8:	2300      	movs	r3, #0
 80093da:	e7f2      	b.n	80093c2 <__ieee754_log+0x1e>
 80093dc:	4bae      	ldr	r3, [pc, #696]	@ (8009698 <__ieee754_log+0x2f4>)
 80093de:	2200      	movs	r2, #0
 80093e0:	f7f8 f806 	bl	80013f0 <__aeabi_dmul>
 80093e4:	2336      	movs	r3, #54	@ 0x36
 80093e6:	000e      	movs	r6, r1
 80093e8:	425b      	negs	r3, r3
 80093ea:	4aac      	ldr	r2, [pc, #688]	@ (800969c <__ieee754_log+0x2f8>)
 80093ec:	4296      	cmp	r6, r2
 80093ee:	dd06      	ble.n	80093fe <__ieee754_log+0x5a>
 80093f0:	0002      	movs	r2, r0
 80093f2:	000b      	movs	r3, r1
 80093f4:	f7f7 f854 	bl	80004a0 <__aeabi_dadd>
 80093f8:	e7e5      	b.n	80093c6 <__ieee754_log+0x22>
 80093fa:	2300      	movs	r3, #0
 80093fc:	e7f5      	b.n	80093ea <__ieee754_log+0x46>
 80093fe:	4ca8      	ldr	r4, [pc, #672]	@ (80096a0 <__ieee754_log+0x2fc>)
 8009400:	1532      	asrs	r2, r6, #20
 8009402:	1912      	adds	r2, r2, r4
 8009404:	0336      	lsls	r6, r6, #12
 8009406:	4ca7      	ldr	r4, [pc, #668]	@ (80096a4 <__ieee754_log+0x300>)
 8009408:	18d2      	adds	r2, r2, r3
 800940a:	0b33      	lsrs	r3, r6, #12
 800940c:	9302      	str	r3, [sp, #8]
 800940e:	191b      	adds	r3, r3, r4
 8009410:	2480      	movs	r4, #128	@ 0x80
 8009412:	0364      	lsls	r4, r4, #13
 8009414:	4023      	ands	r3, r4
 8009416:	4ca4      	ldr	r4, [pc, #656]	@ (80096a8 <__ieee754_log+0x304>)
 8009418:	9d02      	ldr	r5, [sp, #8]
 800941a:	405c      	eors	r4, r3
 800941c:	151b      	asrs	r3, r3, #20
 800941e:	189b      	adds	r3, r3, r2
 8009420:	4325      	orrs	r5, r4
 8009422:	2200      	movs	r2, #0
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	0029      	movs	r1, r5
 8009428:	4b9f      	ldr	r3, [pc, #636]	@ (80096a8 <__ieee754_log+0x304>)
 800942a:	f7f8 faa9 	bl	8001980 <__aeabi_dsub>
 800942e:	9b02      	ldr	r3, [sp, #8]
 8009430:	0006      	movs	r6, r0
 8009432:	3302      	adds	r3, #2
 8009434:	031b      	lsls	r3, r3, #12
 8009436:	000f      	movs	r7, r1
 8009438:	2200      	movs	r2, #0
 800943a:	0b1b      	lsrs	r3, r3, #12
 800943c:	2b02      	cmp	r3, #2
 800943e:	dc64      	bgt.n	800950a <__ieee754_log+0x166>
 8009440:	2300      	movs	r3, #0
 8009442:	f7f6 ffff 	bl	8000444 <__aeabi_dcmpeq>
 8009446:	2800      	cmp	r0, #0
 8009448:	d019      	beq.n	800947e <__ieee754_log+0xda>
 800944a:	9b00      	ldr	r3, [sp, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d100      	bne.n	8009452 <__ieee754_log+0xae>
 8009450:	e11c      	b.n	800968c <__ieee754_log+0x2e8>
 8009452:	0018      	movs	r0, r3
 8009454:	f7f8 fe8e 	bl	8002174 <__aeabi_i2d>
 8009458:	4a94      	ldr	r2, [pc, #592]	@ (80096ac <__ieee754_log+0x308>)
 800945a:	4b95      	ldr	r3, [pc, #596]	@ (80096b0 <__ieee754_log+0x30c>)
 800945c:	0004      	movs	r4, r0
 800945e:	000d      	movs	r5, r1
 8009460:	f7f7 ffc6 	bl	80013f0 <__aeabi_dmul>
 8009464:	4a93      	ldr	r2, [pc, #588]	@ (80096b4 <__ieee754_log+0x310>)
 8009466:	0006      	movs	r6, r0
 8009468:	000f      	movs	r7, r1
 800946a:	4b93      	ldr	r3, [pc, #588]	@ (80096b8 <__ieee754_log+0x314>)
 800946c:	0020      	movs	r0, r4
 800946e:	0029      	movs	r1, r5
 8009470:	f7f7 ffbe 	bl	80013f0 <__aeabi_dmul>
 8009474:	0002      	movs	r2, r0
 8009476:	000b      	movs	r3, r1
 8009478:	0030      	movs	r0, r6
 800947a:	0039      	movs	r1, r7
 800947c:	e7ba      	b.n	80093f4 <__ieee754_log+0x50>
 800947e:	4a8f      	ldr	r2, [pc, #572]	@ (80096bc <__ieee754_log+0x318>)
 8009480:	4b8f      	ldr	r3, [pc, #572]	@ (80096c0 <__ieee754_log+0x31c>)
 8009482:	0030      	movs	r0, r6
 8009484:	0039      	movs	r1, r7
 8009486:	f7f7 ffb3 	bl	80013f0 <__aeabi_dmul>
 800948a:	0002      	movs	r2, r0
 800948c:	000b      	movs	r3, r1
 800948e:	2000      	movs	r0, #0
 8009490:	498c      	ldr	r1, [pc, #560]	@ (80096c4 <__ieee754_log+0x320>)
 8009492:	f7f8 fa75 	bl	8001980 <__aeabi_dsub>
 8009496:	0032      	movs	r2, r6
 8009498:	0004      	movs	r4, r0
 800949a:	000d      	movs	r5, r1
 800949c:	003b      	movs	r3, r7
 800949e:	0030      	movs	r0, r6
 80094a0:	0039      	movs	r1, r7
 80094a2:	f7f7 ffa5 	bl	80013f0 <__aeabi_dmul>
 80094a6:	000b      	movs	r3, r1
 80094a8:	0002      	movs	r2, r0
 80094aa:	0029      	movs	r1, r5
 80094ac:	0020      	movs	r0, r4
 80094ae:	f7f7 ff9f 	bl	80013f0 <__aeabi_dmul>
 80094b2:	9b00      	ldr	r3, [sp, #0]
 80094b4:	9002      	str	r0, [sp, #8]
 80094b6:	9103      	str	r1, [sp, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d106      	bne.n	80094ca <__ieee754_log+0x126>
 80094bc:	0002      	movs	r2, r0
 80094be:	000b      	movs	r3, r1
 80094c0:	0030      	movs	r0, r6
 80094c2:	0039      	movs	r1, r7
 80094c4:	f7f8 fa5c 	bl	8001980 <__aeabi_dsub>
 80094c8:	e77d      	b.n	80093c6 <__ieee754_log+0x22>
 80094ca:	9800      	ldr	r0, [sp, #0]
 80094cc:	f7f8 fe52 	bl	8002174 <__aeabi_i2d>
 80094d0:	4a76      	ldr	r2, [pc, #472]	@ (80096ac <__ieee754_log+0x308>)
 80094d2:	4b77      	ldr	r3, [pc, #476]	@ (80096b0 <__ieee754_log+0x30c>)
 80094d4:	0004      	movs	r4, r0
 80094d6:	000d      	movs	r5, r1
 80094d8:	f7f7 ff8a 	bl	80013f0 <__aeabi_dmul>
 80094dc:	4a75      	ldr	r2, [pc, #468]	@ (80096b4 <__ieee754_log+0x310>)
 80094de:	9000      	str	r0, [sp, #0]
 80094e0:	9101      	str	r1, [sp, #4]
 80094e2:	4b75      	ldr	r3, [pc, #468]	@ (80096b8 <__ieee754_log+0x314>)
 80094e4:	0020      	movs	r0, r4
 80094e6:	0029      	movs	r1, r5
 80094e8:	f7f7 ff82 	bl	80013f0 <__aeabi_dmul>
 80094ec:	0002      	movs	r2, r0
 80094ee:	000b      	movs	r3, r1
 80094f0:	9802      	ldr	r0, [sp, #8]
 80094f2:	9903      	ldr	r1, [sp, #12]
 80094f4:	f7f8 fa44 	bl	8001980 <__aeabi_dsub>
 80094f8:	0032      	movs	r2, r6
 80094fa:	003b      	movs	r3, r7
 80094fc:	f7f8 fa40 	bl	8001980 <__aeabi_dsub>
 8009500:	0002      	movs	r2, r0
 8009502:	000b      	movs	r3, r1
 8009504:	9800      	ldr	r0, [sp, #0]
 8009506:	9901      	ldr	r1, [sp, #4]
 8009508:	e7dc      	b.n	80094c4 <__ieee754_log+0x120>
 800950a:	2380      	movs	r3, #128	@ 0x80
 800950c:	05db      	lsls	r3, r3, #23
 800950e:	f7f6 ffc7 	bl	80004a0 <__aeabi_dadd>
 8009512:	0002      	movs	r2, r0
 8009514:	000b      	movs	r3, r1
 8009516:	0030      	movs	r0, r6
 8009518:	0039      	movs	r1, r7
 800951a:	f7f7 fb25 	bl	8000b68 <__aeabi_ddiv>
 800951e:	9004      	str	r0, [sp, #16]
 8009520:	9105      	str	r1, [sp, #20]
 8009522:	9800      	ldr	r0, [sp, #0]
 8009524:	f7f8 fe26 	bl	8002174 <__aeabi_i2d>
 8009528:	9a04      	ldr	r2, [sp, #16]
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	9006      	str	r0, [sp, #24]
 800952e:	9107      	str	r1, [sp, #28]
 8009530:	0010      	movs	r0, r2
 8009532:	0019      	movs	r1, r3
 8009534:	f7f7 ff5c 	bl	80013f0 <__aeabi_dmul>
 8009538:	4a63      	ldr	r2, [pc, #396]	@ (80096c8 <__ieee754_log+0x324>)
 800953a:	9b02      	ldr	r3, [sp, #8]
 800953c:	4694      	mov	ip, r2
 800953e:	4463      	add	r3, ip
 8009540:	0002      	movs	r2, r0
 8009542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009544:	000b      	movs	r3, r1
 8009546:	9008      	str	r0, [sp, #32]
 8009548:	9109      	str	r1, [sp, #36]	@ 0x24
 800954a:	f7f7 ff51 	bl	80013f0 <__aeabi_dmul>
 800954e:	0004      	movs	r4, r0
 8009550:	000d      	movs	r5, r1
 8009552:	4a5e      	ldr	r2, [pc, #376]	@ (80096cc <__ieee754_log+0x328>)
 8009554:	4b5e      	ldr	r3, [pc, #376]	@ (80096d0 <__ieee754_log+0x32c>)
 8009556:	f7f7 ff4b 	bl	80013f0 <__aeabi_dmul>
 800955a:	4a5e      	ldr	r2, [pc, #376]	@ (80096d4 <__ieee754_log+0x330>)
 800955c:	4b5e      	ldr	r3, [pc, #376]	@ (80096d8 <__ieee754_log+0x334>)
 800955e:	f7f6 ff9f 	bl	80004a0 <__aeabi_dadd>
 8009562:	0022      	movs	r2, r4
 8009564:	002b      	movs	r3, r5
 8009566:	f7f7 ff43 	bl	80013f0 <__aeabi_dmul>
 800956a:	4a5c      	ldr	r2, [pc, #368]	@ (80096dc <__ieee754_log+0x338>)
 800956c:	4b5c      	ldr	r3, [pc, #368]	@ (80096e0 <__ieee754_log+0x33c>)
 800956e:	f7f6 ff97 	bl	80004a0 <__aeabi_dadd>
 8009572:	0022      	movs	r2, r4
 8009574:	002b      	movs	r3, r5
 8009576:	f7f7 ff3b 	bl	80013f0 <__aeabi_dmul>
 800957a:	4a5a      	ldr	r2, [pc, #360]	@ (80096e4 <__ieee754_log+0x340>)
 800957c:	4b5a      	ldr	r3, [pc, #360]	@ (80096e8 <__ieee754_log+0x344>)
 800957e:	f7f6 ff8f 	bl	80004a0 <__aeabi_dadd>
 8009582:	9a08      	ldr	r2, [sp, #32]
 8009584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009586:	f7f7 ff33 	bl	80013f0 <__aeabi_dmul>
 800958a:	4a58      	ldr	r2, [pc, #352]	@ (80096ec <__ieee754_log+0x348>)
 800958c:	9008      	str	r0, [sp, #32]
 800958e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009590:	4b57      	ldr	r3, [pc, #348]	@ (80096f0 <__ieee754_log+0x34c>)
 8009592:	0020      	movs	r0, r4
 8009594:	0029      	movs	r1, r5
 8009596:	f7f7 ff2b 	bl	80013f0 <__aeabi_dmul>
 800959a:	4a56      	ldr	r2, [pc, #344]	@ (80096f4 <__ieee754_log+0x350>)
 800959c:	4b56      	ldr	r3, [pc, #344]	@ (80096f8 <__ieee754_log+0x354>)
 800959e:	f7f6 ff7f 	bl	80004a0 <__aeabi_dadd>
 80095a2:	0022      	movs	r2, r4
 80095a4:	002b      	movs	r3, r5
 80095a6:	f7f7 ff23 	bl	80013f0 <__aeabi_dmul>
 80095aa:	4a54      	ldr	r2, [pc, #336]	@ (80096fc <__ieee754_log+0x358>)
 80095ac:	4b54      	ldr	r3, [pc, #336]	@ (8009700 <__ieee754_log+0x35c>)
 80095ae:	f7f6 ff77 	bl	80004a0 <__aeabi_dadd>
 80095b2:	0022      	movs	r2, r4
 80095b4:	002b      	movs	r3, r5
 80095b6:	f7f7 ff1b 	bl	80013f0 <__aeabi_dmul>
 80095ba:	0002      	movs	r2, r0
 80095bc:	000b      	movs	r3, r1
 80095be:	9808      	ldr	r0, [sp, #32]
 80095c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095c2:	f7f6 ff6d 	bl	80004a0 <__aeabi_dadd>
 80095c6:	9a02      	ldr	r2, [sp, #8]
 80095c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009704 <__ieee754_log+0x360>)
 80095ca:	0004      	movs	r4, r0
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095d0:	000d      	movs	r5, r1
 80095d2:	4313      	orrs	r3, r2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd34      	ble.n	8009642 <__ieee754_log+0x29e>
 80095d8:	2200      	movs	r2, #0
 80095da:	4b3a      	ldr	r3, [pc, #232]	@ (80096c4 <__ieee754_log+0x320>)
 80095dc:	0030      	movs	r0, r6
 80095de:	0039      	movs	r1, r7
 80095e0:	f7f7 ff06 	bl	80013f0 <__aeabi_dmul>
 80095e4:	0032      	movs	r2, r6
 80095e6:	003b      	movs	r3, r7
 80095e8:	f7f7 ff02 	bl	80013f0 <__aeabi_dmul>
 80095ec:	0002      	movs	r2, r0
 80095ee:	000b      	movs	r3, r1
 80095f0:	9002      	str	r0, [sp, #8]
 80095f2:	9103      	str	r1, [sp, #12]
 80095f4:	0020      	movs	r0, r4
 80095f6:	0029      	movs	r1, r5
 80095f8:	f7f6 ff52 	bl	80004a0 <__aeabi_dadd>
 80095fc:	9a04      	ldr	r2, [sp, #16]
 80095fe:	9b05      	ldr	r3, [sp, #20]
 8009600:	f7f7 fef6 	bl	80013f0 <__aeabi_dmul>
 8009604:	9b00      	ldr	r3, [sp, #0]
 8009606:	0004      	movs	r4, r0
 8009608:	000d      	movs	r5, r1
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <__ieee754_log+0x278>
 800960e:	0002      	movs	r2, r0
 8009610:	000b      	movs	r3, r1
 8009612:	9802      	ldr	r0, [sp, #8]
 8009614:	9903      	ldr	r1, [sp, #12]
 8009616:	f7f8 f9b3 	bl	8001980 <__aeabi_dsub>
 800961a:	e74f      	b.n	80094bc <__ieee754_log+0x118>
 800961c:	4a23      	ldr	r2, [pc, #140]	@ (80096ac <__ieee754_log+0x308>)
 800961e:	4b24      	ldr	r3, [pc, #144]	@ (80096b0 <__ieee754_log+0x30c>)
 8009620:	9806      	ldr	r0, [sp, #24]
 8009622:	9907      	ldr	r1, [sp, #28]
 8009624:	f7f7 fee4 	bl	80013f0 <__aeabi_dmul>
 8009628:	4a22      	ldr	r2, [pc, #136]	@ (80096b4 <__ieee754_log+0x310>)
 800962a:	9000      	str	r0, [sp, #0]
 800962c:	9101      	str	r1, [sp, #4]
 800962e:	9806      	ldr	r0, [sp, #24]
 8009630:	9907      	ldr	r1, [sp, #28]
 8009632:	4b21      	ldr	r3, [pc, #132]	@ (80096b8 <__ieee754_log+0x314>)
 8009634:	f7f7 fedc 	bl	80013f0 <__aeabi_dmul>
 8009638:	0022      	movs	r2, r4
 800963a:	002b      	movs	r3, r5
 800963c:	f7f6 ff30 	bl	80004a0 <__aeabi_dadd>
 8009640:	e754      	b.n	80094ec <__ieee754_log+0x148>
 8009642:	0002      	movs	r2, r0
 8009644:	000b      	movs	r3, r1
 8009646:	0030      	movs	r0, r6
 8009648:	0039      	movs	r1, r7
 800964a:	f7f8 f999 	bl	8001980 <__aeabi_dsub>
 800964e:	9a04      	ldr	r2, [sp, #16]
 8009650:	9b05      	ldr	r3, [sp, #20]
 8009652:	f7f7 fecd 	bl	80013f0 <__aeabi_dmul>
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	0004      	movs	r4, r0
 800965a:	000d      	movs	r5, r1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <__ieee754_log+0x2c2>
 8009660:	0002      	movs	r2, r0
 8009662:	000b      	movs	r3, r1
 8009664:	e72c      	b.n	80094c0 <__ieee754_log+0x11c>
 8009666:	4a11      	ldr	r2, [pc, #68]	@ (80096ac <__ieee754_log+0x308>)
 8009668:	4b11      	ldr	r3, [pc, #68]	@ (80096b0 <__ieee754_log+0x30c>)
 800966a:	9806      	ldr	r0, [sp, #24]
 800966c:	9907      	ldr	r1, [sp, #28]
 800966e:	f7f7 febf 	bl	80013f0 <__aeabi_dmul>
 8009672:	4a10      	ldr	r2, [pc, #64]	@ (80096b4 <__ieee754_log+0x310>)
 8009674:	9000      	str	r0, [sp, #0]
 8009676:	9101      	str	r1, [sp, #4]
 8009678:	9806      	ldr	r0, [sp, #24]
 800967a:	9907      	ldr	r1, [sp, #28]
 800967c:	4b0e      	ldr	r3, [pc, #56]	@ (80096b8 <__ieee754_log+0x314>)
 800967e:	f7f7 feb7 	bl	80013f0 <__aeabi_dmul>
 8009682:	0002      	movs	r2, r0
 8009684:	000b      	movs	r3, r1
 8009686:	0020      	movs	r0, r4
 8009688:	0029      	movs	r1, r5
 800968a:	e733      	b.n	80094f4 <__ieee754_log+0x150>
 800968c:	2000      	movs	r0, #0
 800968e:	2100      	movs	r1, #0
 8009690:	e699      	b.n	80093c6 <__ieee754_log+0x22>
 8009692:	46c0      	nop			@ (mov r8, r8)
 8009694:	c3500000 	.word	0xc3500000
 8009698:	43500000 	.word	0x43500000
 800969c:	7fefffff 	.word	0x7fefffff
 80096a0:	fffffc01 	.word	0xfffffc01
 80096a4:	00095f64 	.word	0x00095f64
 80096a8:	3ff00000 	.word	0x3ff00000
 80096ac:	fee00000 	.word	0xfee00000
 80096b0:	3fe62e42 	.word	0x3fe62e42
 80096b4:	35793c76 	.word	0x35793c76
 80096b8:	3dea39ef 	.word	0x3dea39ef
 80096bc:	55555555 	.word	0x55555555
 80096c0:	3fd55555 	.word	0x3fd55555
 80096c4:	3fe00000 	.word	0x3fe00000
 80096c8:	fff9eb86 	.word	0xfff9eb86
 80096cc:	df3e5244 	.word	0xdf3e5244
 80096d0:	3fc2f112 	.word	0x3fc2f112
 80096d4:	96cb03de 	.word	0x96cb03de
 80096d8:	3fc74664 	.word	0x3fc74664
 80096dc:	94229359 	.word	0x94229359
 80096e0:	3fd24924 	.word	0x3fd24924
 80096e4:	55555593 	.word	0x55555593
 80096e8:	3fe55555 	.word	0x3fe55555
 80096ec:	d078c69f 	.word	0xd078c69f
 80096f0:	3fc39a09 	.word	0x3fc39a09
 80096f4:	1d8e78af 	.word	0x1d8e78af
 80096f8:	3fcc71c5 	.word	0x3fcc71c5
 80096fc:	9997fa04 	.word	0x9997fa04
 8009700:	3fd99999 	.word	0x3fd99999
 8009704:	0006b851 	.word	0x0006b851

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	46c0      	nop			@ (mov r8, r8)
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	46c0      	nop			@ (mov r8, r8)
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
