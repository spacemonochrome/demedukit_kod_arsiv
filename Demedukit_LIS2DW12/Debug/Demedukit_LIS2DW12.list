
Demedukit_LIS2DW12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ac  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  08008a68  08008a68  00009a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb0  0800afb0  0000c1e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800afb0  0800afb0  0000c1e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afb0  0800afb0  0000c1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb0  0800afb0  0000bfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afb4  0800afb4  0000bfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800afb8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  200001e4  0800b19c  0000c1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800b19c  0000c83c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e969  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bc  00000000  00000000  0001ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b81  00000000  00000000  0001df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161df  00000000  00000000  0001eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ac1  00000000  00000000  00034cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c20  00000000  00000000  00045789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c93a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  000c93ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cdc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08008a4c 	.word	0x08008a4c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	08008a4c 	.word	0x08008a4c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fa13 	bl	8001860 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f953 	bl	80016f0 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fa05 	bl	8001860 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f9fb 	bl	8001860 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f97d 	bl	8001778 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f973 	bl	8001778 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_fdiv>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0244      	lsls	r4, r0, #9
 80004aa:	b5c0      	push	{r6, r7, lr}
 80004ac:	0047      	lsls	r7, r0, #1
 80004ae:	1c0e      	adds	r6, r1, #0
 80004b0:	0a64      	lsrs	r4, r4, #9
 80004b2:	0e3f      	lsrs	r7, r7, #24
 80004b4:	0fc5      	lsrs	r5, r0, #31
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d03c      	beq.n	8000534 <__aeabi_fdiv+0x94>
 80004ba:	2fff      	cmp	r7, #255	@ 0xff
 80004bc:	d042      	beq.n	8000544 <__aeabi_fdiv+0xa4>
 80004be:	2300      	movs	r3, #0
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	4699      	mov	r9, r3
 80004c4:	469a      	mov	sl, r3
 80004c6:	00e4      	lsls	r4, r4, #3
 80004c8:	04d2      	lsls	r2, r2, #19
 80004ca:	4314      	orrs	r4, r2
 80004cc:	3f7f      	subs	r7, #127	@ 0x7f
 80004ce:	0273      	lsls	r3, r6, #9
 80004d0:	0a5b      	lsrs	r3, r3, #9
 80004d2:	4698      	mov	r8, r3
 80004d4:	0073      	lsls	r3, r6, #1
 80004d6:	0e1b      	lsrs	r3, r3, #24
 80004d8:	0ff6      	lsrs	r6, r6, #31
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d01b      	beq.n	8000516 <__aeabi_fdiv+0x76>
 80004de:	2bff      	cmp	r3, #255	@ 0xff
 80004e0:	d013      	beq.n	800050a <__aeabi_fdiv+0x6a>
 80004e2:	4642      	mov	r2, r8
 80004e4:	2180      	movs	r1, #128	@ 0x80
 80004e6:	00d2      	lsls	r2, r2, #3
 80004e8:	04c9      	lsls	r1, r1, #19
 80004ea:	4311      	orrs	r1, r2
 80004ec:	4688      	mov	r8, r1
 80004ee:	2000      	movs	r0, #0
 80004f0:	3b7f      	subs	r3, #127	@ 0x7f
 80004f2:	0029      	movs	r1, r5
 80004f4:	1aff      	subs	r7, r7, r3
 80004f6:	464b      	mov	r3, r9
 80004f8:	4071      	eors	r1, r6
 80004fa:	b2c9      	uxtb	r1, r1
 80004fc:	2b0f      	cmp	r3, #15
 80004fe:	d900      	bls.n	8000502 <__aeabi_fdiv+0x62>
 8000500:	e0b5      	b.n	800066e <__aeabi_fdiv+0x1ce>
 8000502:	4a74      	ldr	r2, [pc, #464]	@ (80006d4 <__aeabi_fdiv+0x234>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	58d3      	ldr	r3, [r2, r3]
 8000508:	469f      	mov	pc, r3
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d13f      	bne.n	8000590 <__aeabi_fdiv+0xf0>
 8000510:	3fff      	subs	r7, #255	@ 0xff
 8000512:	3302      	adds	r3, #2
 8000514:	e003      	b.n	800051e <__aeabi_fdiv+0x7e>
 8000516:	4643      	mov	r3, r8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d12d      	bne.n	8000578 <__aeabi_fdiv+0xd8>
 800051c:	2301      	movs	r3, #1
 800051e:	0029      	movs	r1, r5
 8000520:	464a      	mov	r2, r9
 8000522:	4071      	eors	r1, r6
 8000524:	b2c9      	uxtb	r1, r1
 8000526:	431a      	orrs	r2, r3
 8000528:	2a0e      	cmp	r2, #14
 800052a:	d838      	bhi.n	800059e <__aeabi_fdiv+0xfe>
 800052c:	486a      	ldr	r0, [pc, #424]	@ (80006d8 <__aeabi_fdiv+0x238>)
 800052e:	0092      	lsls	r2, r2, #2
 8000530:	5882      	ldr	r2, [r0, r2]
 8000532:	4697      	mov	pc, r2
 8000534:	2c00      	cmp	r4, #0
 8000536:	d113      	bne.n	8000560 <__aeabi_fdiv+0xc0>
 8000538:	2304      	movs	r3, #4
 800053a:	4699      	mov	r9, r3
 800053c:	3b03      	subs	r3, #3
 800053e:	2700      	movs	r7, #0
 8000540:	469a      	mov	sl, r3
 8000542:	e7c4      	b.n	80004ce <__aeabi_fdiv+0x2e>
 8000544:	2c00      	cmp	r4, #0
 8000546:	d105      	bne.n	8000554 <__aeabi_fdiv+0xb4>
 8000548:	2308      	movs	r3, #8
 800054a:	4699      	mov	r9, r3
 800054c:	3b06      	subs	r3, #6
 800054e:	27ff      	movs	r7, #255	@ 0xff
 8000550:	469a      	mov	sl, r3
 8000552:	e7bc      	b.n	80004ce <__aeabi_fdiv+0x2e>
 8000554:	230c      	movs	r3, #12
 8000556:	4699      	mov	r9, r3
 8000558:	3b09      	subs	r3, #9
 800055a:	27ff      	movs	r7, #255	@ 0xff
 800055c:	469a      	mov	sl, r3
 800055e:	e7b6      	b.n	80004ce <__aeabi_fdiv+0x2e>
 8000560:	0020      	movs	r0, r4
 8000562:	f002 f94b 	bl	80027fc <__clzsi2>
 8000566:	2776      	movs	r7, #118	@ 0x76
 8000568:	1f43      	subs	r3, r0, #5
 800056a:	409c      	lsls	r4, r3
 800056c:	2300      	movs	r3, #0
 800056e:	427f      	negs	r7, r7
 8000570:	4699      	mov	r9, r3
 8000572:	469a      	mov	sl, r3
 8000574:	1a3f      	subs	r7, r7, r0
 8000576:	e7aa      	b.n	80004ce <__aeabi_fdiv+0x2e>
 8000578:	4640      	mov	r0, r8
 800057a:	f002 f93f 	bl	80027fc <__clzsi2>
 800057e:	4642      	mov	r2, r8
 8000580:	1f43      	subs	r3, r0, #5
 8000582:	409a      	lsls	r2, r3
 8000584:	2376      	movs	r3, #118	@ 0x76
 8000586:	425b      	negs	r3, r3
 8000588:	1a1b      	subs	r3, r3, r0
 800058a:	4690      	mov	r8, r2
 800058c:	2000      	movs	r0, #0
 800058e:	e7b0      	b.n	80004f2 <__aeabi_fdiv+0x52>
 8000590:	2303      	movs	r3, #3
 8000592:	464a      	mov	r2, r9
 8000594:	431a      	orrs	r2, r3
 8000596:	4691      	mov	r9, r2
 8000598:	2003      	movs	r0, #3
 800059a:	33fc      	adds	r3, #252	@ 0xfc
 800059c:	e7a9      	b.n	80004f2 <__aeabi_fdiv+0x52>
 800059e:	000d      	movs	r5, r1
 80005a0:	20ff      	movs	r0, #255	@ 0xff
 80005a2:	2200      	movs	r2, #0
 80005a4:	05c0      	lsls	r0, r0, #23
 80005a6:	07ed      	lsls	r5, r5, #31
 80005a8:	4310      	orrs	r0, r2
 80005aa:	4328      	orrs	r0, r5
 80005ac:	bce0      	pop	{r5, r6, r7}
 80005ae:	46ba      	mov	sl, r7
 80005b0:	46b1      	mov	r9, r6
 80005b2:	46a8      	mov	r8, r5
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	000d      	movs	r5, r1
 80005b8:	2000      	movs	r0, #0
 80005ba:	2200      	movs	r2, #0
 80005bc:	e7f2      	b.n	80005a4 <__aeabi_fdiv+0x104>
 80005be:	4653      	mov	r3, sl
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d0ed      	beq.n	80005a0 <__aeabi_fdiv+0x100>
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d033      	beq.n	8000630 <__aeabi_fdiv+0x190>
 80005c8:	46a0      	mov	r8, r4
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d105      	bne.n	80005da <__aeabi_fdiv+0x13a>
 80005ce:	2000      	movs	r0, #0
 80005d0:	2200      	movs	r2, #0
 80005d2:	e7e7      	b.n	80005a4 <__aeabi_fdiv+0x104>
 80005d4:	0035      	movs	r5, r6
 80005d6:	2803      	cmp	r0, #3
 80005d8:	d07a      	beq.n	80006d0 <__aeabi_fdiv+0x230>
 80005da:	003b      	movs	r3, r7
 80005dc:	337f      	adds	r3, #127	@ 0x7f
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dd2d      	ble.n	800063e <__aeabi_fdiv+0x19e>
 80005e2:	4642      	mov	r2, r8
 80005e4:	0752      	lsls	r2, r2, #29
 80005e6:	d007      	beq.n	80005f8 <__aeabi_fdiv+0x158>
 80005e8:	220f      	movs	r2, #15
 80005ea:	4641      	mov	r1, r8
 80005ec:	400a      	ands	r2, r1
 80005ee:	2a04      	cmp	r2, #4
 80005f0:	d002      	beq.n	80005f8 <__aeabi_fdiv+0x158>
 80005f2:	2204      	movs	r2, #4
 80005f4:	4694      	mov	ip, r2
 80005f6:	44e0      	add	r8, ip
 80005f8:	4642      	mov	r2, r8
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	d505      	bpl.n	800060a <__aeabi_fdiv+0x16a>
 80005fe:	4642      	mov	r2, r8
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <__aeabi_fdiv+0x23c>)
 8000602:	401a      	ands	r2, r3
 8000604:	003b      	movs	r3, r7
 8000606:	4690      	mov	r8, r2
 8000608:	3380      	adds	r3, #128	@ 0x80
 800060a:	2bfe      	cmp	r3, #254	@ 0xfe
 800060c:	dcc8      	bgt.n	80005a0 <__aeabi_fdiv+0x100>
 800060e:	4642      	mov	r2, r8
 8000610:	0192      	lsls	r2, r2, #6
 8000612:	0a52      	lsrs	r2, r2, #9
 8000614:	b2d8      	uxtb	r0, r3
 8000616:	e7c5      	b.n	80005a4 <__aeabi_fdiv+0x104>
 8000618:	2280      	movs	r2, #128	@ 0x80
 800061a:	2500      	movs	r5, #0
 800061c:	20ff      	movs	r0, #255	@ 0xff
 800061e:	03d2      	lsls	r2, r2, #15
 8000620:	e7c0      	b.n	80005a4 <__aeabi_fdiv+0x104>
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	03d2      	lsls	r2, r2, #15
 8000626:	4214      	tst	r4, r2
 8000628:	d002      	beq.n	8000630 <__aeabi_fdiv+0x190>
 800062a:	4643      	mov	r3, r8
 800062c:	4213      	tst	r3, r2
 800062e:	d049      	beq.n	80006c4 <__aeabi_fdiv+0x224>
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	03d2      	lsls	r2, r2, #15
 8000634:	4322      	orrs	r2, r4
 8000636:	0252      	lsls	r2, r2, #9
 8000638:	20ff      	movs	r0, #255	@ 0xff
 800063a:	0a52      	lsrs	r2, r2, #9
 800063c:	e7b2      	b.n	80005a4 <__aeabi_fdiv+0x104>
 800063e:	2201      	movs	r2, #1
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dcc3      	bgt.n	80005ce <__aeabi_fdiv+0x12e>
 8000646:	4642      	mov	r2, r8
 8000648:	40da      	lsrs	r2, r3
 800064a:	4643      	mov	r3, r8
 800064c:	379e      	adds	r7, #158	@ 0x9e
 800064e:	40bb      	lsls	r3, r7
 8000650:	1e59      	subs	r1, r3, #1
 8000652:	418b      	sbcs	r3, r1
 8000654:	431a      	orrs	r2, r3
 8000656:	0753      	lsls	r3, r2, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fdiv+0x1c4>
 800065a:	230f      	movs	r3, #15
 800065c:	4013      	ands	r3, r2
 800065e:	2b04      	cmp	r3, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fdiv+0x1c4>
 8000662:	3204      	adds	r2, #4
 8000664:	0153      	lsls	r3, r2, #5
 8000666:	d529      	bpl.n	80006bc <__aeabi_fdiv+0x21c>
 8000668:	2001      	movs	r0, #1
 800066a:	2200      	movs	r2, #0
 800066c:	e79a      	b.n	80005a4 <__aeabi_fdiv+0x104>
 800066e:	4642      	mov	r2, r8
 8000670:	0163      	lsls	r3, r4, #5
 8000672:	0155      	lsls	r5, r2, #5
 8000674:	42ab      	cmp	r3, r5
 8000676:	d215      	bcs.n	80006a4 <__aeabi_fdiv+0x204>
 8000678:	201b      	movs	r0, #27
 800067a:	2200      	movs	r2, #0
 800067c:	3f01      	subs	r7, #1
 800067e:	2601      	movs	r6, #1
 8000680:	001c      	movs	r4, r3
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	2c00      	cmp	r4, #0
 8000688:	db01      	blt.n	800068e <__aeabi_fdiv+0x1ee>
 800068a:	429d      	cmp	r5, r3
 800068c:	d801      	bhi.n	8000692 <__aeabi_fdiv+0x1f2>
 800068e:	1b5b      	subs	r3, r3, r5
 8000690:	4332      	orrs	r2, r6
 8000692:	3801      	subs	r0, #1
 8000694:	2800      	cmp	r0, #0
 8000696:	d1f3      	bne.n	8000680 <__aeabi_fdiv+0x1e0>
 8000698:	1e58      	subs	r0, r3, #1
 800069a:	4183      	sbcs	r3, r0
 800069c:	4313      	orrs	r3, r2
 800069e:	4698      	mov	r8, r3
 80006a0:	000d      	movs	r5, r1
 80006a2:	e79a      	b.n	80005da <__aeabi_fdiv+0x13a>
 80006a4:	201a      	movs	r0, #26
 80006a6:	2201      	movs	r2, #1
 80006a8:	1b5b      	subs	r3, r3, r5
 80006aa:	e7e8      	b.n	800067e <__aeabi_fdiv+0x1de>
 80006ac:	3b02      	subs	r3, #2
 80006ae:	425a      	negs	r2, r3
 80006b0:	4153      	adcs	r3, r2
 80006b2:	425b      	negs	r3, r3
 80006b4:	0035      	movs	r5, r6
 80006b6:	2200      	movs	r2, #0
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	e773      	b.n	80005a4 <__aeabi_fdiv+0x104>
 80006bc:	0192      	lsls	r2, r2, #6
 80006be:	2000      	movs	r0, #0
 80006c0:	0a52      	lsrs	r2, r2, #9
 80006c2:	e76f      	b.n	80005a4 <__aeabi_fdiv+0x104>
 80006c4:	431a      	orrs	r2, r3
 80006c6:	0252      	lsls	r2, r2, #9
 80006c8:	0035      	movs	r5, r6
 80006ca:	20ff      	movs	r0, #255	@ 0xff
 80006cc:	0a52      	lsrs	r2, r2, #9
 80006ce:	e769      	b.n	80005a4 <__aeabi_fdiv+0x104>
 80006d0:	4644      	mov	r4, r8
 80006d2:	e7ad      	b.n	8000630 <__aeabi_fdiv+0x190>
 80006d4:	08008a98 	.word	0x08008a98
 80006d8:	08008ad8 	.word	0x08008ad8
 80006dc:	f7ffffff 	.word	0xf7ffffff

080006e0 <__aeabi_fmul>:
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	464f      	mov	r7, r9
 80006e4:	4646      	mov	r6, r8
 80006e6:	46d6      	mov	lr, sl
 80006e8:	0243      	lsls	r3, r0, #9
 80006ea:	0a5b      	lsrs	r3, r3, #9
 80006ec:	0045      	lsls	r5, r0, #1
 80006ee:	b5c0      	push	{r6, r7, lr}
 80006f0:	4699      	mov	r9, r3
 80006f2:	1c0f      	adds	r7, r1, #0
 80006f4:	0e2d      	lsrs	r5, r5, #24
 80006f6:	0fc6      	lsrs	r6, r0, #31
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fmul+0x1e>
 80006fc:	e088      	b.n	8000810 <__aeabi_fmul+0x130>
 80006fe:	2dff      	cmp	r5, #255	@ 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fmul+0x24>
 8000702:	e08d      	b.n	8000820 <__aeabi_fmul+0x140>
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	431a      	orrs	r2, r3
 800070c:	2300      	movs	r3, #0
 800070e:	4691      	mov	r9, r2
 8000710:	4698      	mov	r8, r3
 8000712:	469a      	mov	sl, r3
 8000714:	3d7f      	subs	r5, #127	@ 0x7f
 8000716:	027c      	lsls	r4, r7, #9
 8000718:	007b      	lsls	r3, r7, #1
 800071a:	0a64      	lsrs	r4, r4, #9
 800071c:	0e1b      	lsrs	r3, r3, #24
 800071e:	0fff      	lsrs	r7, r7, #31
 8000720:	2b00      	cmp	r3, #0
 8000722:	d068      	beq.n	80007f6 <__aeabi_fmul+0x116>
 8000724:	2bff      	cmp	r3, #255	@ 0xff
 8000726:	d021      	beq.n	800076c <__aeabi_fmul+0x8c>
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	00e4      	lsls	r4, r4, #3
 800072c:	04d2      	lsls	r2, r2, #19
 800072e:	4314      	orrs	r4, r2
 8000730:	4642      	mov	r2, r8
 8000732:	3b7f      	subs	r3, #127	@ 0x7f
 8000734:	195b      	adds	r3, r3, r5
 8000736:	2100      	movs	r1, #0
 8000738:	1c5d      	adds	r5, r3, #1
 800073a:	2a0a      	cmp	r2, #10
 800073c:	dc2e      	bgt.n	800079c <__aeabi_fmul+0xbc>
 800073e:	407e      	eors	r6, r7
 8000740:	4642      	mov	r2, r8
 8000742:	2a02      	cmp	r2, #2
 8000744:	dc23      	bgt.n	800078e <__aeabi_fmul+0xae>
 8000746:	3a01      	subs	r2, #1
 8000748:	2a01      	cmp	r2, #1
 800074a:	d900      	bls.n	800074e <__aeabi_fmul+0x6e>
 800074c:	e0bd      	b.n	80008ca <__aeabi_fmul+0x1ea>
 800074e:	2902      	cmp	r1, #2
 8000750:	d06e      	beq.n	8000830 <__aeabi_fmul+0x150>
 8000752:	2901      	cmp	r1, #1
 8000754:	d12c      	bne.n	80007b0 <__aeabi_fmul+0xd0>
 8000756:	2000      	movs	r0, #0
 8000758:	2200      	movs	r2, #0
 800075a:	05c0      	lsls	r0, r0, #23
 800075c:	07f6      	lsls	r6, r6, #31
 800075e:	4310      	orrs	r0, r2
 8000760:	4330      	orrs	r0, r6
 8000762:	bce0      	pop	{r5, r6, r7}
 8000764:	46ba      	mov	sl, r7
 8000766:	46b1      	mov	r9, r6
 8000768:	46a8      	mov	r8, r5
 800076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076c:	002b      	movs	r3, r5
 800076e:	33ff      	adds	r3, #255	@ 0xff
 8000770:	2c00      	cmp	r4, #0
 8000772:	d065      	beq.n	8000840 <__aeabi_fmul+0x160>
 8000774:	2203      	movs	r2, #3
 8000776:	4641      	mov	r1, r8
 8000778:	4311      	orrs	r1, r2
 800077a:	0032      	movs	r2, r6
 800077c:	3501      	adds	r5, #1
 800077e:	4688      	mov	r8, r1
 8000780:	407a      	eors	r2, r7
 8000782:	35ff      	adds	r5, #255	@ 0xff
 8000784:	290a      	cmp	r1, #10
 8000786:	dd00      	ble.n	800078a <__aeabi_fmul+0xaa>
 8000788:	e0d8      	b.n	800093c <__aeabi_fmul+0x25c>
 800078a:	0016      	movs	r6, r2
 800078c:	2103      	movs	r1, #3
 800078e:	4640      	mov	r0, r8
 8000790:	2201      	movs	r2, #1
 8000792:	4082      	lsls	r2, r0
 8000794:	20a6      	movs	r0, #166	@ 0xa6
 8000796:	00c0      	lsls	r0, r0, #3
 8000798:	4202      	tst	r2, r0
 800079a:	d020      	beq.n	80007de <__aeabi_fmul+0xfe>
 800079c:	4653      	mov	r3, sl
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d046      	beq.n	8000830 <__aeabi_fmul+0x150>
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fmul+0xc8>
 80007a6:	e0bb      	b.n	8000920 <__aeabi_fmul+0x240>
 80007a8:	4651      	mov	r1, sl
 80007aa:	464c      	mov	r4, r9
 80007ac:	2901      	cmp	r1, #1
 80007ae:	d0d2      	beq.n	8000756 <__aeabi_fmul+0x76>
 80007b0:	002b      	movs	r3, r5
 80007b2:	337f      	adds	r3, #127	@ 0x7f
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	dd70      	ble.n	800089a <__aeabi_fmul+0x1ba>
 80007b8:	0762      	lsls	r2, r4, #29
 80007ba:	d004      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007bc:	220f      	movs	r2, #15
 80007be:	4022      	ands	r2, r4
 80007c0:	2a04      	cmp	r2, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007c4:	3404      	adds	r4, #4
 80007c6:	0122      	lsls	r2, r4, #4
 80007c8:	d503      	bpl.n	80007d2 <__aeabi_fmul+0xf2>
 80007ca:	4b63      	ldr	r3, [pc, #396]	@ (8000958 <__aeabi_fmul+0x278>)
 80007cc:	401c      	ands	r4, r3
 80007ce:	002b      	movs	r3, r5
 80007d0:	3380      	adds	r3, #128	@ 0x80
 80007d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d4:	dc2c      	bgt.n	8000830 <__aeabi_fmul+0x150>
 80007d6:	01a2      	lsls	r2, r4, #6
 80007d8:	0a52      	lsrs	r2, r2, #9
 80007da:	b2d8      	uxtb	r0, r3
 80007dc:	e7bd      	b.n	800075a <__aeabi_fmul+0x7a>
 80007de:	2090      	movs	r0, #144	@ 0x90
 80007e0:	0080      	lsls	r0, r0, #2
 80007e2:	4202      	tst	r2, r0
 80007e4:	d127      	bne.n	8000836 <__aeabi_fmul+0x156>
 80007e6:	38b9      	subs	r0, #185	@ 0xb9
 80007e8:	38ff      	subs	r0, #255	@ 0xff
 80007ea:	4210      	tst	r0, r2
 80007ec:	d06d      	beq.n	80008ca <__aeabi_fmul+0x1ea>
 80007ee:	003e      	movs	r6, r7
 80007f0:	46a1      	mov	r9, r4
 80007f2:	468a      	mov	sl, r1
 80007f4:	e7d2      	b.n	800079c <__aeabi_fmul+0xbc>
 80007f6:	2c00      	cmp	r4, #0
 80007f8:	d141      	bne.n	800087e <__aeabi_fmul+0x19e>
 80007fa:	2301      	movs	r3, #1
 80007fc:	4642      	mov	r2, r8
 80007fe:	431a      	orrs	r2, r3
 8000800:	4690      	mov	r8, r2
 8000802:	002b      	movs	r3, r5
 8000804:	4642      	mov	r2, r8
 8000806:	2101      	movs	r1, #1
 8000808:	1c5d      	adds	r5, r3, #1
 800080a:	2a0a      	cmp	r2, #10
 800080c:	dd97      	ble.n	800073e <__aeabi_fmul+0x5e>
 800080e:	e7c5      	b.n	800079c <__aeabi_fmul+0xbc>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d126      	bne.n	8000862 <__aeabi_fmul+0x182>
 8000814:	2304      	movs	r3, #4
 8000816:	4698      	mov	r8, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2500      	movs	r5, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e77a      	b.n	8000716 <__aeabi_fmul+0x36>
 8000820:	2b00      	cmp	r3, #0
 8000822:	d118      	bne.n	8000856 <__aeabi_fmul+0x176>
 8000824:	2308      	movs	r3, #8
 8000826:	4698      	mov	r8, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	25ff      	movs	r5, #255	@ 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e772      	b.n	8000716 <__aeabi_fmul+0x36>
 8000830:	20ff      	movs	r0, #255	@ 0xff
 8000832:	2200      	movs	r2, #0
 8000834:	e791      	b.n	800075a <__aeabi_fmul+0x7a>
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	2600      	movs	r6, #0
 800083a:	20ff      	movs	r0, #255	@ 0xff
 800083c:	03d2      	lsls	r2, r2, #15
 800083e:	e78c      	b.n	800075a <__aeabi_fmul+0x7a>
 8000840:	4641      	mov	r1, r8
 8000842:	2202      	movs	r2, #2
 8000844:	3501      	adds	r5, #1
 8000846:	4311      	orrs	r1, r2
 8000848:	4688      	mov	r8, r1
 800084a:	35ff      	adds	r5, #255	@ 0xff
 800084c:	290a      	cmp	r1, #10
 800084e:	dca5      	bgt.n	800079c <__aeabi_fmul+0xbc>
 8000850:	2102      	movs	r1, #2
 8000852:	407e      	eors	r6, r7
 8000854:	e774      	b.n	8000740 <__aeabi_fmul+0x60>
 8000856:	230c      	movs	r3, #12
 8000858:	4698      	mov	r8, r3
 800085a:	3b09      	subs	r3, #9
 800085c:	25ff      	movs	r5, #255	@ 0xff
 800085e:	469a      	mov	sl, r3
 8000860:	e759      	b.n	8000716 <__aeabi_fmul+0x36>
 8000862:	0018      	movs	r0, r3
 8000864:	f001 ffca 	bl	80027fc <__clzsi2>
 8000868:	464a      	mov	r2, r9
 800086a:	1f43      	subs	r3, r0, #5
 800086c:	2576      	movs	r5, #118	@ 0x76
 800086e:	409a      	lsls	r2, r3
 8000870:	2300      	movs	r3, #0
 8000872:	426d      	negs	r5, r5
 8000874:	4691      	mov	r9, r2
 8000876:	4698      	mov	r8, r3
 8000878:	469a      	mov	sl, r3
 800087a:	1a2d      	subs	r5, r5, r0
 800087c:	e74b      	b.n	8000716 <__aeabi_fmul+0x36>
 800087e:	0020      	movs	r0, r4
 8000880:	f001 ffbc 	bl	80027fc <__clzsi2>
 8000884:	4642      	mov	r2, r8
 8000886:	1f43      	subs	r3, r0, #5
 8000888:	409c      	lsls	r4, r3
 800088a:	1a2b      	subs	r3, r5, r0
 800088c:	3b76      	subs	r3, #118	@ 0x76
 800088e:	2100      	movs	r1, #0
 8000890:	1c5d      	adds	r5, r3, #1
 8000892:	2a0a      	cmp	r2, #10
 8000894:	dc00      	bgt.n	8000898 <__aeabi_fmul+0x1b8>
 8000896:	e752      	b.n	800073e <__aeabi_fmul+0x5e>
 8000898:	e780      	b.n	800079c <__aeabi_fmul+0xbc>
 800089a:	2201      	movs	r2, #1
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	2b1b      	cmp	r3, #27
 80008a0:	dd00      	ble.n	80008a4 <__aeabi_fmul+0x1c4>
 80008a2:	e758      	b.n	8000756 <__aeabi_fmul+0x76>
 80008a4:	359e      	adds	r5, #158	@ 0x9e
 80008a6:	0022      	movs	r2, r4
 80008a8:	40ac      	lsls	r4, r5
 80008aa:	40da      	lsrs	r2, r3
 80008ac:	1e63      	subs	r3, r4, #1
 80008ae:	419c      	sbcs	r4, r3
 80008b0:	4322      	orrs	r2, r4
 80008b2:	0753      	lsls	r3, r2, #29
 80008b4:	d004      	beq.n	80008c0 <__aeabi_fmul+0x1e0>
 80008b6:	230f      	movs	r3, #15
 80008b8:	4013      	ands	r3, r2
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fmul+0x1e0>
 80008be:	3204      	adds	r2, #4
 80008c0:	0153      	lsls	r3, r2, #5
 80008c2:	d537      	bpl.n	8000934 <__aeabi_fmul+0x254>
 80008c4:	2001      	movs	r0, #1
 80008c6:	2200      	movs	r2, #0
 80008c8:	e747      	b.n	800075a <__aeabi_fmul+0x7a>
 80008ca:	0c21      	lsrs	r1, r4, #16
 80008cc:	464a      	mov	r2, r9
 80008ce:	0424      	lsls	r4, r4, #16
 80008d0:	0c24      	lsrs	r4, r4, #16
 80008d2:	0027      	movs	r7, r4
 80008d4:	0c10      	lsrs	r0, r2, #16
 80008d6:	0412      	lsls	r2, r2, #16
 80008d8:	0c12      	lsrs	r2, r2, #16
 80008da:	4344      	muls	r4, r0
 80008dc:	4357      	muls	r7, r2
 80008de:	4348      	muls	r0, r1
 80008e0:	4351      	muls	r1, r2
 80008e2:	0c3a      	lsrs	r2, r7, #16
 80008e4:	1909      	adds	r1, r1, r4
 80008e6:	1852      	adds	r2, r2, r1
 80008e8:	4294      	cmp	r4, r2
 80008ea:	d903      	bls.n	80008f4 <__aeabi_fmul+0x214>
 80008ec:	2180      	movs	r1, #128	@ 0x80
 80008ee:	0249      	lsls	r1, r1, #9
 80008f0:	468c      	mov	ip, r1
 80008f2:	4460      	add	r0, ip
 80008f4:	043f      	lsls	r7, r7, #16
 80008f6:	0411      	lsls	r1, r2, #16
 80008f8:	0c3f      	lsrs	r7, r7, #16
 80008fa:	19c9      	adds	r1, r1, r7
 80008fc:	018c      	lsls	r4, r1, #6
 80008fe:	1e67      	subs	r7, r4, #1
 8000900:	41bc      	sbcs	r4, r7
 8000902:	0c12      	lsrs	r2, r2, #16
 8000904:	0e89      	lsrs	r1, r1, #26
 8000906:	1812      	adds	r2, r2, r0
 8000908:	430c      	orrs	r4, r1
 800090a:	0192      	lsls	r2, r2, #6
 800090c:	4314      	orrs	r4, r2
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	d50e      	bpl.n	8000930 <__aeabi_fmul+0x250>
 8000912:	2301      	movs	r3, #1
 8000914:	0862      	lsrs	r2, r4, #1
 8000916:	401c      	ands	r4, r3
 8000918:	4314      	orrs	r4, r2
 800091a:	e749      	b.n	80007b0 <__aeabi_fmul+0xd0>
 800091c:	003e      	movs	r6, r7
 800091e:	46a1      	mov	r9, r4
 8000920:	2280      	movs	r2, #128	@ 0x80
 8000922:	464b      	mov	r3, r9
 8000924:	03d2      	lsls	r2, r2, #15
 8000926:	431a      	orrs	r2, r3
 8000928:	0252      	lsls	r2, r2, #9
 800092a:	20ff      	movs	r0, #255	@ 0xff
 800092c:	0a52      	lsrs	r2, r2, #9
 800092e:	e714      	b.n	800075a <__aeabi_fmul+0x7a>
 8000930:	001d      	movs	r5, r3
 8000932:	e73d      	b.n	80007b0 <__aeabi_fmul+0xd0>
 8000934:	0192      	lsls	r2, r2, #6
 8000936:	2000      	movs	r0, #0
 8000938:	0a52      	lsrs	r2, r2, #9
 800093a:	e70e      	b.n	800075a <__aeabi_fmul+0x7a>
 800093c:	290f      	cmp	r1, #15
 800093e:	d1ed      	bne.n	800091c <__aeabi_fmul+0x23c>
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	464b      	mov	r3, r9
 8000944:	03d2      	lsls	r2, r2, #15
 8000946:	4213      	tst	r3, r2
 8000948:	d0ea      	beq.n	8000920 <__aeabi_fmul+0x240>
 800094a:	4214      	tst	r4, r2
 800094c:	d1e8      	bne.n	8000920 <__aeabi_fmul+0x240>
 800094e:	003e      	movs	r6, r7
 8000950:	20ff      	movs	r0, #255	@ 0xff
 8000952:	4322      	orrs	r2, r4
 8000954:	e701      	b.n	800075a <__aeabi_fmul+0x7a>
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	f7ffffff 	.word	0xf7ffffff

0800095c <__aeabi_i2f>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	2800      	cmp	r0, #0
 8000960:	d013      	beq.n	800098a <__aeabi_i2f+0x2e>
 8000962:	17c3      	asrs	r3, r0, #31
 8000964:	18c5      	adds	r5, r0, r3
 8000966:	405d      	eors	r5, r3
 8000968:	0fc4      	lsrs	r4, r0, #31
 800096a:	0028      	movs	r0, r5
 800096c:	f001 ff46 	bl	80027fc <__clzsi2>
 8000970:	239e      	movs	r3, #158	@ 0x9e
 8000972:	0001      	movs	r1, r0
 8000974:	1a1b      	subs	r3, r3, r0
 8000976:	2b96      	cmp	r3, #150	@ 0x96
 8000978:	dc0f      	bgt.n	800099a <__aeabi_i2f+0x3e>
 800097a:	2808      	cmp	r0, #8
 800097c:	d034      	beq.n	80009e8 <__aeabi_i2f+0x8c>
 800097e:	3908      	subs	r1, #8
 8000980:	408d      	lsls	r5, r1
 8000982:	026d      	lsls	r5, r5, #9
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	b2d8      	uxtb	r0, r3
 8000988:	e002      	b.n	8000990 <__aeabi_i2f+0x34>
 800098a:	2400      	movs	r4, #0
 800098c:	2000      	movs	r0, #0
 800098e:	2500      	movs	r5, #0
 8000990:	05c0      	lsls	r0, r0, #23
 8000992:	4328      	orrs	r0, r5
 8000994:	07e4      	lsls	r4, r4, #31
 8000996:	4320      	orrs	r0, r4
 8000998:	bd70      	pop	{r4, r5, r6, pc}
 800099a:	2b99      	cmp	r3, #153	@ 0x99
 800099c:	dc16      	bgt.n	80009cc <__aeabi_i2f+0x70>
 800099e:	1f42      	subs	r2, r0, #5
 80009a0:	2805      	cmp	r0, #5
 80009a2:	d000      	beq.n	80009a6 <__aeabi_i2f+0x4a>
 80009a4:	4095      	lsls	r5, r2
 80009a6:	002a      	movs	r2, r5
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <__aeabi_i2f+0x94>)
 80009aa:	4002      	ands	r2, r0
 80009ac:	076e      	lsls	r6, r5, #29
 80009ae:	d009      	beq.n	80009c4 <__aeabi_i2f+0x68>
 80009b0:	260f      	movs	r6, #15
 80009b2:	4035      	ands	r5, r6
 80009b4:	2d04      	cmp	r5, #4
 80009b6:	d005      	beq.n	80009c4 <__aeabi_i2f+0x68>
 80009b8:	3204      	adds	r2, #4
 80009ba:	0155      	lsls	r5, r2, #5
 80009bc:	d502      	bpl.n	80009c4 <__aeabi_i2f+0x68>
 80009be:	239f      	movs	r3, #159	@ 0x9f
 80009c0:	4002      	ands	r2, r0
 80009c2:	1a5b      	subs	r3, r3, r1
 80009c4:	0192      	lsls	r2, r2, #6
 80009c6:	0a55      	lsrs	r5, r2, #9
 80009c8:	b2d8      	uxtb	r0, r3
 80009ca:	e7e1      	b.n	8000990 <__aeabi_i2f+0x34>
 80009cc:	2205      	movs	r2, #5
 80009ce:	1a12      	subs	r2, r2, r0
 80009d0:	0028      	movs	r0, r5
 80009d2:	40d0      	lsrs	r0, r2
 80009d4:	0002      	movs	r2, r0
 80009d6:	0008      	movs	r0, r1
 80009d8:	301b      	adds	r0, #27
 80009da:	4085      	lsls	r5, r0
 80009dc:	0028      	movs	r0, r5
 80009de:	1e45      	subs	r5, r0, #1
 80009e0:	41a8      	sbcs	r0, r5
 80009e2:	4302      	orrs	r2, r0
 80009e4:	0015      	movs	r5, r2
 80009e6:	e7de      	b.n	80009a6 <__aeabi_i2f+0x4a>
 80009e8:	026d      	lsls	r5, r5, #9
 80009ea:	2096      	movs	r0, #150	@ 0x96
 80009ec:	0a6d      	lsrs	r5, r5, #9
 80009ee:	e7cf      	b.n	8000990 <__aeabi_i2f+0x34>
 80009f0:	fbffffff 	.word	0xfbffffff

080009f4 <__aeabi_dadd>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	4657      	mov	r7, sl
 80009f8:	464e      	mov	r6, r9
 80009fa:	4645      	mov	r5, r8
 80009fc:	46de      	mov	lr, fp
 80009fe:	b5e0      	push	{r5, r6, r7, lr}
 8000a00:	b083      	sub	sp, #12
 8000a02:	9000      	str	r0, [sp, #0]
 8000a04:	9101      	str	r1, [sp, #4]
 8000a06:	030c      	lsls	r4, r1, #12
 8000a08:	004f      	lsls	r7, r1, #1
 8000a0a:	0fce      	lsrs	r6, r1, #31
 8000a0c:	0a61      	lsrs	r1, r4, #9
 8000a0e:	9c00      	ldr	r4, [sp, #0]
 8000a10:	031d      	lsls	r5, r3, #12
 8000a12:	0f64      	lsrs	r4, r4, #29
 8000a14:	430c      	orrs	r4, r1
 8000a16:	9900      	ldr	r1, [sp, #0]
 8000a18:	9200      	str	r2, [sp, #0]
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	00c8      	lsls	r0, r1, #3
 8000a1e:	0059      	lsls	r1, r3, #1
 8000a20:	0d4b      	lsrs	r3, r1, #21
 8000a22:	4699      	mov	r9, r3
 8000a24:	9a00      	ldr	r2, [sp, #0]
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	0fd9      	lsrs	r1, r3, #31
 8000a2c:	0f53      	lsrs	r3, r2, #29
 8000a2e:	432b      	orrs	r3, r5
 8000a30:	469a      	mov	sl, r3
 8000a32:	9b00      	ldr	r3, [sp, #0]
 8000a34:	0d7f      	lsrs	r7, r7, #21
 8000a36:	00da      	lsls	r2, r3, #3
 8000a38:	4694      	mov	ip, r2
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	46b0      	mov	r8, r6
 8000a3e:	1aba      	subs	r2, r7, r2
 8000a40:	428e      	cmp	r6, r1
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x52>
 8000a44:	e0b0      	b.n	8000ba8 <__aeabi_dadd+0x1b4>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_dadd+0x58>
 8000a4a:	e078      	b.n	8000b3e <__aeabi_dadd+0x14a>
 8000a4c:	4649      	mov	r1, r9
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x60>
 8000a52:	e0e9      	b.n	8000c28 <__aeabi_dadd+0x234>
 8000a54:	49c9      	ldr	r1, [pc, #804]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000a56:	428f      	cmp	r7, r1
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x68>
 8000a5a:	e195      	b.n	8000d88 <__aeabi_dadd+0x394>
 8000a5c:	2501      	movs	r5, #1
 8000a5e:	2a38      	cmp	r2, #56	@ 0x38
 8000a60:	dc16      	bgt.n	8000a90 <__aeabi_dadd+0x9c>
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	4653      	mov	r3, sl
 8000a66:	0409      	lsls	r1, r1, #16
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	2a1f      	cmp	r2, #31
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_dadd+0x7e>
 8000a70:	e1e7      	b.n	8000e42 <__aeabi_dadd+0x44e>
 8000a72:	2120      	movs	r1, #32
 8000a74:	4655      	mov	r5, sl
 8000a76:	1a8b      	subs	r3, r1, r2
 8000a78:	4661      	mov	r1, ip
 8000a7a:	409d      	lsls	r5, r3
 8000a7c:	40d1      	lsrs	r1, r2
 8000a7e:	430d      	orrs	r5, r1
 8000a80:	4661      	mov	r1, ip
 8000a82:	4099      	lsls	r1, r3
 8000a84:	1e4b      	subs	r3, r1, #1
 8000a86:	4199      	sbcs	r1, r3
 8000a88:	4653      	mov	r3, sl
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	430d      	orrs	r5, r1
 8000a8e:	1ae4      	subs	r4, r4, r3
 8000a90:	1b45      	subs	r5, r0, r5
 8000a92:	42a8      	cmp	r0, r5
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	4240      	negs	r0, r0
 8000a98:	1a24      	subs	r4, r4, r0
 8000a9a:	0223      	lsls	r3, r4, #8
 8000a9c:	d400      	bmi.n	8000aa0 <__aeabi_dadd+0xac>
 8000a9e:	e10f      	b.n	8000cc0 <__aeabi_dadd+0x2cc>
 8000aa0:	0264      	lsls	r4, r4, #9
 8000aa2:	0a64      	lsrs	r4, r4, #9
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0xb6>
 8000aa8:	e139      	b.n	8000d1e <__aeabi_dadd+0x32a>
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f001 fea6 	bl	80027fc <__clzsi2>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	3b08      	subs	r3, #8
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	0028      	movs	r0, r5
 8000ab8:	1aca      	subs	r2, r1, r3
 8000aba:	40d0      	lsrs	r0, r2
 8000abc:	409c      	lsls	r4, r3
 8000abe:	0002      	movs	r2, r0
 8000ac0:	409d      	lsls	r5, r3
 8000ac2:	4322      	orrs	r2, r4
 8000ac4:	429f      	cmp	r7, r3
 8000ac6:	dd00      	ble.n	8000aca <__aeabi_dadd+0xd6>
 8000ac8:	e173      	b.n	8000db2 <__aeabi_dadd+0x3be>
 8000aca:	1bd8      	subs	r0, r3, r7
 8000acc:	3001      	adds	r0, #1
 8000ace:	1a09      	subs	r1, r1, r0
 8000ad0:	002c      	movs	r4, r5
 8000ad2:	408d      	lsls	r5, r1
 8000ad4:	40c4      	lsrs	r4, r0
 8000ad6:	1e6b      	subs	r3, r5, #1
 8000ad8:	419d      	sbcs	r5, r3
 8000ada:	0013      	movs	r3, r2
 8000adc:	40c2      	lsrs	r2, r0
 8000ade:	408b      	lsls	r3, r1
 8000ae0:	4325      	orrs	r5, r4
 8000ae2:	2700      	movs	r7, #0
 8000ae4:	0014      	movs	r4, r2
 8000ae6:	431d      	orrs	r5, r3
 8000ae8:	076b      	lsls	r3, r5, #29
 8000aea:	d009      	beq.n	8000b00 <__aeabi_dadd+0x10c>
 8000aec:	230f      	movs	r3, #15
 8000aee:	402b      	ands	r3, r5
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x10c>
 8000af4:	1d2b      	adds	r3, r5, #4
 8000af6:	42ab      	cmp	r3, r5
 8000af8:	41ad      	sbcs	r5, r5
 8000afa:	426d      	negs	r5, r5
 8000afc:	1964      	adds	r4, r4, r5
 8000afe:	001d      	movs	r5, r3
 8000b00:	0223      	lsls	r3, r4, #8
 8000b02:	d400      	bmi.n	8000b06 <__aeabi_dadd+0x112>
 8000b04:	e12d      	b.n	8000d62 <__aeabi_dadd+0x36e>
 8000b06:	4a9d      	ldr	r2, [pc, #628]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000b08:	3701      	adds	r7, #1
 8000b0a:	4297      	cmp	r7, r2
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x11c>
 8000b0e:	e0d3      	b.n	8000cb8 <__aeabi_dadd+0x2c4>
 8000b10:	4646      	mov	r6, r8
 8000b12:	499b      	ldr	r1, [pc, #620]	@ (8000d80 <__aeabi_dadd+0x38c>)
 8000b14:	08ed      	lsrs	r5, r5, #3
 8000b16:	4021      	ands	r1, r4
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	432a      	orrs	r2, r5
 8000b1c:	057c      	lsls	r4, r7, #21
 8000b1e:	024d      	lsls	r5, r1, #9
 8000b20:	0b2d      	lsrs	r5, r5, #12
 8000b22:	0d64      	lsrs	r4, r4, #21
 8000b24:	0524      	lsls	r4, r4, #20
 8000b26:	432c      	orrs	r4, r5
 8000b28:	07f6      	lsls	r6, r6, #31
 8000b2a:	4334      	orrs	r4, r6
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	0021      	movs	r1, r4
 8000b30:	b003      	add	sp, #12
 8000b32:	bcf0      	pop	{r4, r5, r6, r7}
 8000b34:	46bb      	mov	fp, r7
 8000b36:	46b2      	mov	sl, r6
 8000b38:	46a9      	mov	r9, r5
 8000b3a:	46a0      	mov	r8, r4
 8000b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x150>
 8000b42:	e084      	b.n	8000c4e <__aeabi_dadd+0x25a>
 8000b44:	464a      	mov	r2, r9
 8000b46:	1bd2      	subs	r2, r2, r7
 8000b48:	2f00      	cmp	r7, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x15a>
 8000b4c:	e16d      	b.n	8000e2a <__aeabi_dadd+0x436>
 8000b4e:	0025      	movs	r5, r4
 8000b50:	4305      	orrs	r5, r0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x162>
 8000b54:	e127      	b.n	8000da6 <__aeabi_dadd+0x3b2>
 8000b56:	1e56      	subs	r6, r2, #1
 8000b58:	2a01      	cmp	r2, #1
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x16a>
 8000b5c:	e23b      	b.n	8000fd6 <__aeabi_dadd+0x5e2>
 8000b5e:	4d87      	ldr	r5, [pc, #540]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000b60:	42aa      	cmp	r2, r5
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x172>
 8000b64:	e26a      	b.n	800103c <__aeabi_dadd+0x648>
 8000b66:	2501      	movs	r5, #1
 8000b68:	2e38      	cmp	r6, #56	@ 0x38
 8000b6a:	dc12      	bgt.n	8000b92 <__aeabi_dadd+0x19e>
 8000b6c:	0032      	movs	r2, r6
 8000b6e:	2a1f      	cmp	r2, #31
 8000b70:	dd00      	ble.n	8000b74 <__aeabi_dadd+0x180>
 8000b72:	e1f8      	b.n	8000f66 <__aeabi_dadd+0x572>
 8000b74:	2620      	movs	r6, #32
 8000b76:	0025      	movs	r5, r4
 8000b78:	1ab6      	subs	r6, r6, r2
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	4653      	mov	r3, sl
 8000b7e:	40b0      	lsls	r0, r6
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	40b5      	lsls	r5, r6
 8000b84:	40d7      	lsrs	r7, r2
 8000b86:	1e46      	subs	r6, r0, #1
 8000b88:	41b0      	sbcs	r0, r6
 8000b8a:	1b1b      	subs	r3, r3, r4
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	433d      	orrs	r5, r7
 8000b90:	4305      	orrs	r5, r0
 8000b92:	4662      	mov	r2, ip
 8000b94:	1b55      	subs	r5, r2, r5
 8000b96:	45ac      	cmp	ip, r5
 8000b98:	4192      	sbcs	r2, r2
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	000e      	movs	r6, r1
 8000ba0:	464f      	mov	r7, r9
 8000ba2:	4688      	mov	r8, r1
 8000ba4:	1a9c      	subs	r4, r3, r2
 8000ba6:	e778      	b.n	8000a9a <__aeabi_dadd+0xa6>
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	dc00      	bgt.n	8000bae <__aeabi_dadd+0x1ba>
 8000bac:	e08e      	b.n	8000ccc <__aeabi_dadd+0x2d8>
 8000bae:	4649      	mov	r1, r9
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	d175      	bne.n	8000ca0 <__aeabi_dadd+0x2ac>
 8000bb4:	4661      	mov	r1, ip
 8000bb6:	4653      	mov	r3, sl
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x1ca>
 8000bbc:	e0f6      	b.n	8000dac <__aeabi_dadd+0x3b8>
 8000bbe:	1e51      	subs	r1, r2, #1
 8000bc0:	2a01      	cmp	r2, #1
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x1d2>
 8000bc4:	e191      	b.n	8000eea <__aeabi_dadd+0x4f6>
 8000bc6:	4d6d      	ldr	r5, [pc, #436]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000bc8:	42aa      	cmp	r2, r5
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x1da>
 8000bcc:	e0dc      	b.n	8000d88 <__aeabi_dadd+0x394>
 8000bce:	2501      	movs	r5, #1
 8000bd0:	2938      	cmp	r1, #56	@ 0x38
 8000bd2:	dc14      	bgt.n	8000bfe <__aeabi_dadd+0x20a>
 8000bd4:	000a      	movs	r2, r1
 8000bd6:	2a1f      	cmp	r2, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x1e8>
 8000bda:	e1a2      	b.n	8000f22 <__aeabi_dadd+0x52e>
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4653      	mov	r3, sl
 8000be0:	1a89      	subs	r1, r1, r2
 8000be2:	408b      	lsls	r3, r1
 8000be4:	001d      	movs	r5, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	40d3      	lsrs	r3, r2
 8000bea:	431d      	orrs	r5, r3
 8000bec:	4663      	mov	r3, ip
 8000bee:	408b      	lsls	r3, r1
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	1e4b      	subs	r3, r1, #1
 8000bf4:	4199      	sbcs	r1, r3
 8000bf6:	4653      	mov	r3, sl
 8000bf8:	40d3      	lsrs	r3, r2
 8000bfa:	430d      	orrs	r5, r1
 8000bfc:	18e4      	adds	r4, r4, r3
 8000bfe:	182d      	adds	r5, r5, r0
 8000c00:	4285      	cmp	r5, r0
 8000c02:	4180      	sbcs	r0, r0
 8000c04:	4240      	negs	r0, r0
 8000c06:	1824      	adds	r4, r4, r0
 8000c08:	0223      	lsls	r3, r4, #8
 8000c0a:	d559      	bpl.n	8000cc0 <__aeabi_dadd+0x2cc>
 8000c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000c0e:	3701      	adds	r7, #1
 8000c10:	429f      	cmp	r7, r3
 8000c12:	d051      	beq.n	8000cb8 <__aeabi_dadd+0x2c4>
 8000c14:	2101      	movs	r1, #1
 8000c16:	4b5a      	ldr	r3, [pc, #360]	@ (8000d80 <__aeabi_dadd+0x38c>)
 8000c18:	086a      	lsrs	r2, r5, #1
 8000c1a:	401c      	ands	r4, r3
 8000c1c:	4029      	ands	r1, r5
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	07e5      	lsls	r5, r4, #31
 8000c22:	4315      	orrs	r5, r2
 8000c24:	0864      	lsrs	r4, r4, #1
 8000c26:	e75f      	b.n	8000ae8 <__aeabi_dadd+0xf4>
 8000c28:	4661      	mov	r1, ip
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x23e>
 8000c30:	e0bc      	b.n	8000dac <__aeabi_dadd+0x3b8>
 8000c32:	1e51      	subs	r1, r2, #1
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x246>
 8000c38:	e164      	b.n	8000f04 <__aeabi_dadd+0x510>
 8000c3a:	4d50      	ldr	r5, [pc, #320]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000c3c:	42aa      	cmp	r2, r5
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x24e>
 8000c40:	e16a      	b.n	8000f18 <__aeabi_dadd+0x524>
 8000c42:	2501      	movs	r5, #1
 8000c44:	2938      	cmp	r1, #56	@ 0x38
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dadd+0x256>
 8000c48:	e722      	b.n	8000a90 <__aeabi_dadd+0x9c>
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	e70e      	b.n	8000a6c <__aeabi_dadd+0x78>
 8000c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d84 <__aeabi_dadd+0x390>)
 8000c50:	1c7d      	adds	r5, r7, #1
 8000c52:	4215      	tst	r5, r2
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dadd+0x264>
 8000c56:	e0d0      	b.n	8000dfa <__aeabi_dadd+0x406>
 8000c58:	0025      	movs	r5, r4
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	4305      	orrs	r5, r0
 8000c60:	431a      	orrs	r2, r3
 8000c62:	2f00      	cmp	r7, #0
 8000c64:	d000      	beq.n	8000c68 <__aeabi_dadd+0x274>
 8000c66:	e137      	b.n	8000ed8 <__aeabi_dadd+0x4e4>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x27a>
 8000c6c:	e1a8      	b.n	8000fc0 <__aeabi_dadd+0x5cc>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x280>
 8000c72:	e16a      	b.n	8000f4a <__aeabi_dadd+0x556>
 8000c74:	4663      	mov	r3, ip
 8000c76:	1ac5      	subs	r5, r0, r3
 8000c78:	4653      	mov	r3, sl
 8000c7a:	1ae2      	subs	r2, r4, r3
 8000c7c:	42a8      	cmp	r0, r5
 8000c7e:	419b      	sbcs	r3, r3
 8000c80:	425b      	negs	r3, r3
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	021a      	lsls	r2, r3, #8
 8000c86:	d400      	bmi.n	8000c8a <__aeabi_dadd+0x296>
 8000c88:	e203      	b.n	8001092 <__aeabi_dadd+0x69e>
 8000c8a:	4663      	mov	r3, ip
 8000c8c:	1a1d      	subs	r5, r3, r0
 8000c8e:	45ac      	cmp	ip, r5
 8000c90:	4192      	sbcs	r2, r2
 8000c92:	4653      	mov	r3, sl
 8000c94:	4252      	negs	r2, r2
 8000c96:	1b1c      	subs	r4, r3, r4
 8000c98:	000e      	movs	r6, r1
 8000c9a:	4688      	mov	r8, r1
 8000c9c:	1aa4      	subs	r4, r4, r2
 8000c9e:	e723      	b.n	8000ae8 <__aeabi_dadd+0xf4>
 8000ca0:	4936      	ldr	r1, [pc, #216]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000ca2:	428f      	cmp	r7, r1
 8000ca4:	d070      	beq.n	8000d88 <__aeabi_dadd+0x394>
 8000ca6:	2501      	movs	r5, #1
 8000ca8:	2a38      	cmp	r2, #56	@ 0x38
 8000caa:	dca8      	bgt.n	8000bfe <__aeabi_dadd+0x20a>
 8000cac:	2180      	movs	r1, #128	@ 0x80
 8000cae:	4653      	mov	r3, sl
 8000cb0:	0409      	lsls	r1, r1, #16
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e78e      	b.n	8000bd6 <__aeabi_dadd+0x1e2>
 8000cb8:	003c      	movs	r4, r7
 8000cba:	2500      	movs	r5, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e731      	b.n	8000b24 <__aeabi_dadd+0x130>
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	402b      	ands	r3, r5
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d000      	beq.n	8000cca <__aeabi_dadd+0x2d6>
 8000cc8:	e710      	b.n	8000aec <__aeabi_dadd+0xf8>
 8000cca:	e093      	b.n	8000df4 <__aeabi_dadd+0x400>
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	d074      	beq.n	8000dba <__aeabi_dadd+0x3c6>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1bd2      	subs	r2, r2, r7
 8000cd4:	2f00      	cmp	r7, #0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x2e6>
 8000cd8:	e0c7      	b.n	8000e6a <__aeabi_dadd+0x476>
 8000cda:	4928      	ldr	r1, [pc, #160]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x2ee>
 8000ce0:	e185      	b.n	8000fee <__aeabi_dadd+0x5fa>
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	2a38      	cmp	r2, #56	@ 0x38
 8000ce6:	dc12      	bgt.n	8000d0e <__aeabi_dadd+0x31a>
 8000ce8:	2180      	movs	r1, #128	@ 0x80
 8000cea:	0409      	lsls	r1, r1, #16
 8000cec:	430c      	orrs	r4, r1
 8000cee:	2a1f      	cmp	r2, #31
 8000cf0:	dd00      	ble.n	8000cf4 <__aeabi_dadd+0x300>
 8000cf2:	e1ab      	b.n	800104c <__aeabi_dadd+0x658>
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	0025      	movs	r5, r4
 8000cf8:	1a89      	subs	r1, r1, r2
 8000cfa:	0007      	movs	r7, r0
 8000cfc:	4088      	lsls	r0, r1
 8000cfe:	408d      	lsls	r5, r1
 8000d00:	40d7      	lsrs	r7, r2
 8000d02:	1e41      	subs	r1, r0, #1
 8000d04:	4188      	sbcs	r0, r1
 8000d06:	40d4      	lsrs	r4, r2
 8000d08:	433d      	orrs	r5, r7
 8000d0a:	4305      	orrs	r5, r0
 8000d0c:	44a2      	add	sl, r4
 8000d0e:	4465      	add	r5, ip
 8000d10:	4565      	cmp	r5, ip
 8000d12:	4192      	sbcs	r2, r2
 8000d14:	4252      	negs	r2, r2
 8000d16:	4452      	add	r2, sl
 8000d18:	0014      	movs	r4, r2
 8000d1a:	464f      	mov	r7, r9
 8000d1c:	e774      	b.n	8000c08 <__aeabi_dadd+0x214>
 8000d1e:	0028      	movs	r0, r5
 8000d20:	f001 fd6c 	bl	80027fc <__clzsi2>
 8000d24:	0003      	movs	r3, r0
 8000d26:	3318      	adds	r3, #24
 8000d28:	2b1f      	cmp	r3, #31
 8000d2a:	dc00      	bgt.n	8000d2e <__aeabi_dadd+0x33a>
 8000d2c:	e6c2      	b.n	8000ab4 <__aeabi_dadd+0xc0>
 8000d2e:	002a      	movs	r2, r5
 8000d30:	3808      	subs	r0, #8
 8000d32:	4082      	lsls	r2, r0
 8000d34:	429f      	cmp	r7, r3
 8000d36:	dd00      	ble.n	8000d3a <__aeabi_dadd+0x346>
 8000d38:	e0a9      	b.n	8000e8e <__aeabi_dadd+0x49a>
 8000d3a:	1bdb      	subs	r3, r3, r7
 8000d3c:	1c58      	adds	r0, r3, #1
 8000d3e:	281f      	cmp	r0, #31
 8000d40:	dc00      	bgt.n	8000d44 <__aeabi_dadd+0x350>
 8000d42:	e1ac      	b.n	800109e <__aeabi_dadd+0x6aa>
 8000d44:	0015      	movs	r5, r2
 8000d46:	3b1f      	subs	r3, #31
 8000d48:	40dd      	lsrs	r5, r3
 8000d4a:	2820      	cmp	r0, #32
 8000d4c:	d005      	beq.n	8000d5a <__aeabi_dadd+0x366>
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	1a1b      	subs	r3, r3, r0
 8000d52:	409a      	lsls	r2, r3
 8000d54:	1e53      	subs	r3, r2, #1
 8000d56:	419a      	sbcs	r2, r3
 8000d58:	4315      	orrs	r5, r2
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	402b      	ands	r3, r5
 8000d60:	e7b0      	b.n	8000cc4 <__aeabi_dadd+0x2d0>
 8000d62:	08ed      	lsrs	r5, r5, #3
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <__aeabi_dadd+0x388>)
 8000d66:	0762      	lsls	r2, r4, #29
 8000d68:	432a      	orrs	r2, r5
 8000d6a:	08e4      	lsrs	r4, r4, #3
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	d00f      	beq.n	8000d90 <__aeabi_dadd+0x39c>
 8000d70:	0324      	lsls	r4, r4, #12
 8000d72:	0b25      	lsrs	r5, r4, #12
 8000d74:	057c      	lsls	r4, r7, #21
 8000d76:	0d64      	lsrs	r4, r4, #21
 8000d78:	e6d4      	b.n	8000b24 <__aeabi_dadd+0x130>
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	ff7fffff 	.word	0xff7fffff
 8000d84:	000007fe 	.word	0x000007fe
 8000d88:	08c0      	lsrs	r0, r0, #3
 8000d8a:	0762      	lsls	r2, r4, #29
 8000d8c:	4302      	orrs	r2, r0
 8000d8e:	08e4      	lsrs	r4, r4, #3
 8000d90:	0013      	movs	r3, r2
 8000d92:	4323      	orrs	r3, r4
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0x3a4>
 8000d96:	e186      	b.n	80010a6 <__aeabi_dadd+0x6b2>
 8000d98:	2580      	movs	r5, #128	@ 0x80
 8000d9a:	032d      	lsls	r5, r5, #12
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	032d      	lsls	r5, r5, #12
 8000da0:	4cc3      	ldr	r4, [pc, #780]	@ (80010b0 <__aeabi_dadd+0x6bc>)
 8000da2:	0b2d      	lsrs	r5, r5, #12
 8000da4:	e6be      	b.n	8000b24 <__aeabi_dadd+0x130>
 8000da6:	4660      	mov	r0, ip
 8000da8:	4654      	mov	r4, sl
 8000daa:	000e      	movs	r6, r1
 8000dac:	0017      	movs	r7, r2
 8000dae:	08c5      	lsrs	r5, r0, #3
 8000db0:	e7d8      	b.n	8000d64 <__aeabi_dadd+0x370>
 8000db2:	4cc0      	ldr	r4, [pc, #768]	@ (80010b4 <__aeabi_dadd+0x6c0>)
 8000db4:	1aff      	subs	r7, r7, r3
 8000db6:	4014      	ands	r4, r2
 8000db8:	e696      	b.n	8000ae8 <__aeabi_dadd+0xf4>
 8000dba:	4abf      	ldr	r2, [pc, #764]	@ (80010b8 <__aeabi_dadd+0x6c4>)
 8000dbc:	1c79      	adds	r1, r7, #1
 8000dbe:	4211      	tst	r1, r2
 8000dc0:	d16b      	bne.n	8000e9a <__aeabi_dadd+0x4a6>
 8000dc2:	0022      	movs	r2, r4
 8000dc4:	4302      	orrs	r2, r0
 8000dc6:	2f00      	cmp	r7, #0
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_dadd+0x3d8>
 8000dca:	e0db      	b.n	8000f84 <__aeabi_dadd+0x590>
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x3de>
 8000dd0:	e12d      	b.n	800102e <__aeabi_dadd+0x63a>
 8000dd2:	4662      	mov	r2, ip
 8000dd4:	4653      	mov	r3, sl
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dadd+0x3e8>
 8000dda:	e0b6      	b.n	8000f4a <__aeabi_dadd+0x556>
 8000ddc:	4663      	mov	r3, ip
 8000dde:	18c5      	adds	r5, r0, r3
 8000de0:	4285      	cmp	r5, r0
 8000de2:	4180      	sbcs	r0, r0
 8000de4:	4454      	add	r4, sl
 8000de6:	4240      	negs	r0, r0
 8000de8:	1824      	adds	r4, r4, r0
 8000dea:	0223      	lsls	r3, r4, #8
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_dadd+0x400>
 8000dee:	000f      	movs	r7, r1
 8000df0:	4bb0      	ldr	r3, [pc, #704]	@ (80010b4 <__aeabi_dadd+0x6c0>)
 8000df2:	401c      	ands	r4, r3
 8000df4:	003a      	movs	r2, r7
 8000df6:	0028      	movs	r0, r5
 8000df8:	e7d8      	b.n	8000dac <__aeabi_dadd+0x3b8>
 8000dfa:	4662      	mov	r2, ip
 8000dfc:	1a85      	subs	r5, r0, r2
 8000dfe:	42a8      	cmp	r0, r5
 8000e00:	4192      	sbcs	r2, r2
 8000e02:	4653      	mov	r3, sl
 8000e04:	4252      	negs	r2, r2
 8000e06:	4691      	mov	r9, r2
 8000e08:	1ae3      	subs	r3, r4, r3
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	1ad2      	subs	r2, r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	4691      	mov	r9, r2
 8000e14:	021a      	lsls	r2, r3, #8
 8000e16:	d454      	bmi.n	8000ec2 <__aeabi_dadd+0x4ce>
 8000e18:	464a      	mov	r2, r9
 8000e1a:	464c      	mov	r4, r9
 8000e1c:	432a      	orrs	r2, r5
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_dadd+0x42e>
 8000e20:	e640      	b.n	8000aa4 <__aeabi_dadd+0xb0>
 8000e22:	2600      	movs	r6, #0
 8000e24:	2400      	movs	r4, #0
 8000e26:	2500      	movs	r5, #0
 8000e28:	e67c      	b.n	8000b24 <__aeabi_dadd+0x130>
 8000e2a:	4da1      	ldr	r5, [pc, #644]	@ (80010b0 <__aeabi_dadd+0x6bc>)
 8000e2c:	45a9      	cmp	r9, r5
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x43e>
 8000e30:	e090      	b.n	8000f54 <__aeabi_dadd+0x560>
 8000e32:	2501      	movs	r5, #1
 8000e34:	2a38      	cmp	r2, #56	@ 0x38
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dadd+0x446>
 8000e38:	e6ab      	b.n	8000b92 <__aeabi_dadd+0x19e>
 8000e3a:	2580      	movs	r5, #128	@ 0x80
 8000e3c:	042d      	lsls	r5, r5, #16
 8000e3e:	432c      	orrs	r4, r5
 8000e40:	e695      	b.n	8000b6e <__aeabi_dadd+0x17a>
 8000e42:	0011      	movs	r1, r2
 8000e44:	4655      	mov	r5, sl
 8000e46:	3920      	subs	r1, #32
 8000e48:	40cd      	lsrs	r5, r1
 8000e4a:	46a9      	mov	r9, r5
 8000e4c:	2a20      	cmp	r2, #32
 8000e4e:	d006      	beq.n	8000e5e <__aeabi_dadd+0x46a>
 8000e50:	2140      	movs	r1, #64	@ 0x40
 8000e52:	4653      	mov	r3, sl
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	4093      	lsls	r3, r2
 8000e58:	4662      	mov	r2, ip
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	4694      	mov	ip, r2
 8000e5e:	4665      	mov	r5, ip
 8000e60:	1e6b      	subs	r3, r5, #1
 8000e62:	419d      	sbcs	r5, r3
 8000e64:	464b      	mov	r3, r9
 8000e66:	431d      	orrs	r5, r3
 8000e68:	e612      	b.n	8000a90 <__aeabi_dadd+0x9c>
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	4301      	orrs	r1, r0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x47e>
 8000e70:	e0c4      	b.n	8000ffc <__aeabi_dadd+0x608>
 8000e72:	1e51      	subs	r1, r2, #1
 8000e74:	2a01      	cmp	r2, #1
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x486>
 8000e78:	e0fb      	b.n	8001072 <__aeabi_dadd+0x67e>
 8000e7a:	4d8d      	ldr	r5, [pc, #564]	@ (80010b0 <__aeabi_dadd+0x6bc>)
 8000e7c:	42aa      	cmp	r2, r5
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x48e>
 8000e80:	e0b5      	b.n	8000fee <__aeabi_dadd+0x5fa>
 8000e82:	2501      	movs	r5, #1
 8000e84:	2938      	cmp	r1, #56	@ 0x38
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_dadd+0x496>
 8000e88:	e741      	b.n	8000d0e <__aeabi_dadd+0x31a>
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	e72f      	b.n	8000cee <__aeabi_dadd+0x2fa>
 8000e8e:	4c89      	ldr	r4, [pc, #548]	@ (80010b4 <__aeabi_dadd+0x6c0>)
 8000e90:	1aff      	subs	r7, r7, r3
 8000e92:	4014      	ands	r4, r2
 8000e94:	0762      	lsls	r2, r4, #29
 8000e96:	08e4      	lsrs	r4, r4, #3
 8000e98:	e76a      	b.n	8000d70 <__aeabi_dadd+0x37c>
 8000e9a:	4a85      	ldr	r2, [pc, #532]	@ (80010b0 <__aeabi_dadd+0x6bc>)
 8000e9c:	4291      	cmp	r1, r2
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x4ae>
 8000ea0:	e0e3      	b.n	800106a <__aeabi_dadd+0x676>
 8000ea2:	4663      	mov	r3, ip
 8000ea4:	18c2      	adds	r2, r0, r3
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	4180      	sbcs	r0, r0
 8000eaa:	0023      	movs	r3, r4
 8000eac:	4240      	negs	r0, r0
 8000eae:	4453      	add	r3, sl
 8000eb0:	181b      	adds	r3, r3, r0
 8000eb2:	07dd      	lsls	r5, r3, #31
 8000eb4:	085c      	lsrs	r4, r3, #1
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	0852      	lsrs	r2, r2, #1
 8000eba:	4315      	orrs	r5, r2
 8000ebc:	000f      	movs	r7, r1
 8000ebe:	402b      	ands	r3, r5
 8000ec0:	e700      	b.n	8000cc4 <__aeabi_dadd+0x2d0>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	1a1d      	subs	r5, r3, r0
 8000ec6:	45ac      	cmp	ip, r5
 8000ec8:	4192      	sbcs	r2, r2
 8000eca:	4653      	mov	r3, sl
 8000ecc:	4252      	negs	r2, r2
 8000ece:	1b1c      	subs	r4, r3, r4
 8000ed0:	000e      	movs	r6, r1
 8000ed2:	4688      	mov	r8, r1
 8000ed4:	1aa4      	subs	r4, r4, r2
 8000ed6:	e5e5      	b.n	8000aa4 <__aeabi_dadd+0xb0>
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x4ea>
 8000edc:	e091      	b.n	8001002 <__aeabi_dadd+0x60e>
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d138      	bne.n	8000f54 <__aeabi_dadd+0x560>
 8000ee2:	2480      	movs	r4, #128	@ 0x80
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	0324      	lsls	r4, r4, #12
 8000ee8:	e756      	b.n	8000d98 <__aeabi_dadd+0x3a4>
 8000eea:	4663      	mov	r3, ip
 8000eec:	18c5      	adds	r5, r0, r3
 8000eee:	4285      	cmp	r5, r0
 8000ef0:	4180      	sbcs	r0, r0
 8000ef2:	4454      	add	r4, sl
 8000ef4:	4240      	negs	r0, r0
 8000ef6:	1824      	adds	r4, r4, r0
 8000ef8:	2701      	movs	r7, #1
 8000efa:	0223      	lsls	r3, r4, #8
 8000efc:	d400      	bmi.n	8000f00 <__aeabi_dadd+0x50c>
 8000efe:	e6df      	b.n	8000cc0 <__aeabi_dadd+0x2cc>
 8000f00:	2702      	movs	r7, #2
 8000f02:	e687      	b.n	8000c14 <__aeabi_dadd+0x220>
 8000f04:	4663      	mov	r3, ip
 8000f06:	1ac5      	subs	r5, r0, r3
 8000f08:	42a8      	cmp	r0, r5
 8000f0a:	4180      	sbcs	r0, r0
 8000f0c:	4653      	mov	r3, sl
 8000f0e:	4240      	negs	r0, r0
 8000f10:	1ae4      	subs	r4, r4, r3
 8000f12:	2701      	movs	r7, #1
 8000f14:	1a24      	subs	r4, r4, r0
 8000f16:	e5c0      	b.n	8000a9a <__aeabi_dadd+0xa6>
 8000f18:	0762      	lsls	r2, r4, #29
 8000f1a:	08c0      	lsrs	r0, r0, #3
 8000f1c:	4302      	orrs	r2, r0
 8000f1e:	08e4      	lsrs	r4, r4, #3
 8000f20:	e736      	b.n	8000d90 <__aeabi_dadd+0x39c>
 8000f22:	0011      	movs	r1, r2
 8000f24:	4653      	mov	r3, sl
 8000f26:	3920      	subs	r1, #32
 8000f28:	40cb      	lsrs	r3, r1
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	2a20      	cmp	r2, #32
 8000f2e:	d006      	beq.n	8000f3e <__aeabi_dadd+0x54a>
 8000f30:	2140      	movs	r1, #64	@ 0x40
 8000f32:	4653      	mov	r3, sl
 8000f34:	1a8a      	subs	r2, r1, r2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	4662      	mov	r2, ip
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	4665      	mov	r5, ip
 8000f40:	1e6b      	subs	r3, r5, #1
 8000f42:	419d      	sbcs	r5, r3
 8000f44:	464b      	mov	r3, r9
 8000f46:	431d      	orrs	r5, r3
 8000f48:	e659      	b.n	8000bfe <__aeabi_dadd+0x20a>
 8000f4a:	0762      	lsls	r2, r4, #29
 8000f4c:	08c0      	lsrs	r0, r0, #3
 8000f4e:	4302      	orrs	r2, r0
 8000f50:	08e4      	lsrs	r4, r4, #3
 8000f52:	e70d      	b.n	8000d70 <__aeabi_dadd+0x37c>
 8000f54:	4653      	mov	r3, sl
 8000f56:	075a      	lsls	r2, r3, #29
 8000f58:	4663      	mov	r3, ip
 8000f5a:	08d8      	lsrs	r0, r3, #3
 8000f5c:	4653      	mov	r3, sl
 8000f5e:	000e      	movs	r6, r1
 8000f60:	4302      	orrs	r2, r0
 8000f62:	08dc      	lsrs	r4, r3, #3
 8000f64:	e714      	b.n	8000d90 <__aeabi_dadd+0x39c>
 8000f66:	0015      	movs	r5, r2
 8000f68:	0026      	movs	r6, r4
 8000f6a:	3d20      	subs	r5, #32
 8000f6c:	40ee      	lsrs	r6, r5
 8000f6e:	2a20      	cmp	r2, #32
 8000f70:	d003      	beq.n	8000f7a <__aeabi_dadd+0x586>
 8000f72:	2540      	movs	r5, #64	@ 0x40
 8000f74:	1aaa      	subs	r2, r5, r2
 8000f76:	4094      	lsls	r4, r2
 8000f78:	4320      	orrs	r0, r4
 8000f7a:	1e42      	subs	r2, r0, #1
 8000f7c:	4190      	sbcs	r0, r2
 8000f7e:	0005      	movs	r5, r0
 8000f80:	4335      	orrs	r5, r6
 8000f82:	e606      	b.n	8000b92 <__aeabi_dadd+0x19e>
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d07c      	beq.n	8001082 <__aeabi_dadd+0x68e>
 8000f88:	4662      	mov	r2, ip
 8000f8a:	4653      	mov	r3, sl
 8000f8c:	08c0      	lsrs	r0, r0, #3
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x5a0>
 8000f92:	e6fa      	b.n	8000d8a <__aeabi_dadd+0x396>
 8000f94:	0762      	lsls	r2, r4, #29
 8000f96:	4310      	orrs	r0, r2
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	08e4      	lsrs	r4, r4, #3
 8000f9c:	0312      	lsls	r2, r2, #12
 8000f9e:	4214      	tst	r4, r2
 8000fa0:	d008      	beq.n	8000fb4 <__aeabi_dadd+0x5c0>
 8000fa2:	08d9      	lsrs	r1, r3, #3
 8000fa4:	4211      	tst	r1, r2
 8000fa6:	d105      	bne.n	8000fb4 <__aeabi_dadd+0x5c0>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	08d8      	lsrs	r0, r3, #3
 8000fac:	4653      	mov	r3, sl
 8000fae:	000c      	movs	r4, r1
 8000fb0:	075b      	lsls	r3, r3, #29
 8000fb2:	4318      	orrs	r0, r3
 8000fb4:	0f42      	lsrs	r2, r0, #29
 8000fb6:	00c0      	lsls	r0, r0, #3
 8000fb8:	08c0      	lsrs	r0, r0, #3
 8000fba:	0752      	lsls	r2, r2, #29
 8000fbc:	4302      	orrs	r2, r0
 8000fbe:	e6e7      	b.n	8000d90 <__aeabi_dadd+0x39c>
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x5d2>
 8000fc4:	e72d      	b.n	8000e22 <__aeabi_dadd+0x42e>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	08d8      	lsrs	r0, r3, #3
 8000fca:	4653      	mov	r3, sl
 8000fcc:	075a      	lsls	r2, r3, #29
 8000fce:	000e      	movs	r6, r1
 8000fd0:	4302      	orrs	r2, r0
 8000fd2:	08dc      	lsrs	r4, r3, #3
 8000fd4:	e6cc      	b.n	8000d70 <__aeabi_dadd+0x37c>
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	1a1d      	subs	r5, r3, r0
 8000fda:	45ac      	cmp	ip, r5
 8000fdc:	4192      	sbcs	r2, r2
 8000fde:	4653      	mov	r3, sl
 8000fe0:	4252      	negs	r2, r2
 8000fe2:	1b1c      	subs	r4, r3, r4
 8000fe4:	000e      	movs	r6, r1
 8000fe6:	4688      	mov	r8, r1
 8000fe8:	1aa4      	subs	r4, r4, r2
 8000fea:	3701      	adds	r7, #1
 8000fec:	e555      	b.n	8000a9a <__aeabi_dadd+0xa6>
 8000fee:	4663      	mov	r3, ip
 8000ff0:	08d9      	lsrs	r1, r3, #3
 8000ff2:	4653      	mov	r3, sl
 8000ff4:	075a      	lsls	r2, r3, #29
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	08dc      	lsrs	r4, r3, #3
 8000ffa:	e6c9      	b.n	8000d90 <__aeabi_dadd+0x39c>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	4654      	mov	r4, sl
 8001000:	e6d4      	b.n	8000dac <__aeabi_dadd+0x3b8>
 8001002:	08c0      	lsrs	r0, r0, #3
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x616>
 8001008:	e6bf      	b.n	8000d8a <__aeabi_dadd+0x396>
 800100a:	0762      	lsls	r2, r4, #29
 800100c:	4310      	orrs	r0, r2
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	08e4      	lsrs	r4, r4, #3
 8001012:	0312      	lsls	r2, r2, #12
 8001014:	4214      	tst	r4, r2
 8001016:	d0cd      	beq.n	8000fb4 <__aeabi_dadd+0x5c0>
 8001018:	08dd      	lsrs	r5, r3, #3
 800101a:	4215      	tst	r5, r2
 800101c:	d1ca      	bne.n	8000fb4 <__aeabi_dadd+0x5c0>
 800101e:	4663      	mov	r3, ip
 8001020:	08d8      	lsrs	r0, r3, #3
 8001022:	4653      	mov	r3, sl
 8001024:	075b      	lsls	r3, r3, #29
 8001026:	000e      	movs	r6, r1
 8001028:	002c      	movs	r4, r5
 800102a:	4318      	orrs	r0, r3
 800102c:	e7c2      	b.n	8000fb4 <__aeabi_dadd+0x5c0>
 800102e:	4663      	mov	r3, ip
 8001030:	08d9      	lsrs	r1, r3, #3
 8001032:	4653      	mov	r3, sl
 8001034:	075a      	lsls	r2, r3, #29
 8001036:	430a      	orrs	r2, r1
 8001038:	08dc      	lsrs	r4, r3, #3
 800103a:	e699      	b.n	8000d70 <__aeabi_dadd+0x37c>
 800103c:	4663      	mov	r3, ip
 800103e:	08d8      	lsrs	r0, r3, #3
 8001040:	4653      	mov	r3, sl
 8001042:	075a      	lsls	r2, r3, #29
 8001044:	000e      	movs	r6, r1
 8001046:	4302      	orrs	r2, r0
 8001048:	08dc      	lsrs	r4, r3, #3
 800104a:	e6a1      	b.n	8000d90 <__aeabi_dadd+0x39c>
 800104c:	0011      	movs	r1, r2
 800104e:	0027      	movs	r7, r4
 8001050:	3920      	subs	r1, #32
 8001052:	40cf      	lsrs	r7, r1
 8001054:	2a20      	cmp	r2, #32
 8001056:	d003      	beq.n	8001060 <__aeabi_dadd+0x66c>
 8001058:	2140      	movs	r1, #64	@ 0x40
 800105a:	1a8a      	subs	r2, r1, r2
 800105c:	4094      	lsls	r4, r2
 800105e:	4320      	orrs	r0, r4
 8001060:	1e42      	subs	r2, r0, #1
 8001062:	4190      	sbcs	r0, r2
 8001064:	0005      	movs	r5, r0
 8001066:	433d      	orrs	r5, r7
 8001068:	e651      	b.n	8000d0e <__aeabi_dadd+0x31a>
 800106a:	000c      	movs	r4, r1
 800106c:	2500      	movs	r5, #0
 800106e:	2200      	movs	r2, #0
 8001070:	e558      	b.n	8000b24 <__aeabi_dadd+0x130>
 8001072:	4460      	add	r0, ip
 8001074:	4560      	cmp	r0, ip
 8001076:	4192      	sbcs	r2, r2
 8001078:	4454      	add	r4, sl
 800107a:	4252      	negs	r2, r2
 800107c:	0005      	movs	r5, r0
 800107e:	18a4      	adds	r4, r4, r2
 8001080:	e73a      	b.n	8000ef8 <__aeabi_dadd+0x504>
 8001082:	4653      	mov	r3, sl
 8001084:	075a      	lsls	r2, r3, #29
 8001086:	4663      	mov	r3, ip
 8001088:	08d9      	lsrs	r1, r3, #3
 800108a:	4653      	mov	r3, sl
 800108c:	430a      	orrs	r2, r1
 800108e:	08dc      	lsrs	r4, r3, #3
 8001090:	e67e      	b.n	8000d90 <__aeabi_dadd+0x39c>
 8001092:	001a      	movs	r2, r3
 8001094:	001c      	movs	r4, r3
 8001096:	432a      	orrs	r2, r5
 8001098:	d000      	beq.n	800109c <__aeabi_dadd+0x6a8>
 800109a:	e6ab      	b.n	8000df4 <__aeabi_dadd+0x400>
 800109c:	e6c1      	b.n	8000e22 <__aeabi_dadd+0x42e>
 800109e:	2120      	movs	r1, #32
 80010a0:	2500      	movs	r5, #0
 80010a2:	1a09      	subs	r1, r1, r0
 80010a4:	e519      	b.n	8000ada <__aeabi_dadd+0xe6>
 80010a6:	2200      	movs	r2, #0
 80010a8:	2500      	movs	r5, #0
 80010aa:	4c01      	ldr	r4, [pc, #4]	@ (80010b0 <__aeabi_dadd+0x6bc>)
 80010ac:	e53a      	b.n	8000b24 <__aeabi_dadd+0x130>
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	000007ff 	.word	0x000007ff
 80010b4:	ff7fffff 	.word	0xff7fffff
 80010b8:	000007fe 	.word	0x000007fe

080010bc <__aeabi_ddiv>:
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	46de      	mov	lr, fp
 80010c0:	4645      	mov	r5, r8
 80010c2:	4657      	mov	r7, sl
 80010c4:	464e      	mov	r6, r9
 80010c6:	b5e0      	push	{r5, r6, r7, lr}
 80010c8:	b087      	sub	sp, #28
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	030b      	lsls	r3, r1, #12
 80010d0:	0b1b      	lsrs	r3, r3, #12
 80010d2:	469b      	mov	fp, r3
 80010d4:	0fca      	lsrs	r2, r1, #31
 80010d6:	004b      	lsls	r3, r1, #1
 80010d8:	0004      	movs	r4, r0
 80010da:	4680      	mov	r8, r0
 80010dc:	0d5b      	lsrs	r3, r3, #21
 80010de:	9202      	str	r2, [sp, #8]
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x28>
 80010e2:	e16a      	b.n	80013ba <__aeabi_ddiv+0x2fe>
 80010e4:	4ad4      	ldr	r2, [pc, #848]	@ (8001438 <__aeabi_ddiv+0x37c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x30>
 80010ea:	e18c      	b.n	8001406 <__aeabi_ddiv+0x34a>
 80010ec:	4659      	mov	r1, fp
 80010ee:	0f42      	lsrs	r2, r0, #29
 80010f0:	00c9      	lsls	r1, r1, #3
 80010f2:	430a      	orrs	r2, r1
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	4311      	orrs	r1, r2
 80010fa:	00c2      	lsls	r2, r0, #3
 80010fc:	4690      	mov	r8, r2
 80010fe:	4acf      	ldr	r2, [pc, #828]	@ (800143c <__aeabi_ddiv+0x380>)
 8001100:	4689      	mov	r9, r1
 8001102:	4692      	mov	sl, r2
 8001104:	449a      	add	sl, r3
 8001106:	2300      	movs	r3, #0
 8001108:	2400      	movs	r4, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9e00      	ldr	r6, [sp, #0]
 800110e:	9f01      	ldr	r7, [sp, #4]
 8001110:	033b      	lsls	r3, r7, #12
 8001112:	0b1b      	lsrs	r3, r3, #12
 8001114:	469b      	mov	fp, r3
 8001116:	007b      	lsls	r3, r7, #1
 8001118:	0030      	movs	r0, r6
 800111a:	0d5b      	lsrs	r3, r3, #21
 800111c:	0ffd      	lsrs	r5, r7, #31
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_ddiv+0x68>
 8001122:	e128      	b.n	8001376 <__aeabi_ddiv+0x2ba>
 8001124:	4ac4      	ldr	r2, [pc, #784]	@ (8001438 <__aeabi_ddiv+0x37c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x70>
 800112a:	e177      	b.n	800141c <__aeabi_ddiv+0x360>
 800112c:	4659      	mov	r1, fp
 800112e:	0f72      	lsrs	r2, r6, #29
 8001130:	00c9      	lsls	r1, r1, #3
 8001132:	430a      	orrs	r2, r1
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	0409      	lsls	r1, r1, #16
 8001138:	4311      	orrs	r1, r2
 800113a:	468b      	mov	fp, r1
 800113c:	49bf      	ldr	r1, [pc, #764]	@ (800143c <__aeabi_ddiv+0x380>)
 800113e:	00f2      	lsls	r2, r6, #3
 8001140:	468c      	mov	ip, r1
 8001142:	4651      	mov	r1, sl
 8001144:	4463      	add	r3, ip
 8001146:	1acb      	subs	r3, r1, r3
 8001148:	469a      	mov	sl, r3
 800114a:	2300      	movs	r3, #0
 800114c:	9e02      	ldr	r6, [sp, #8]
 800114e:	406e      	eors	r6, r5
 8001150:	2c0f      	cmp	r4, #15
 8001152:	d827      	bhi.n	80011a4 <__aeabi_ddiv+0xe8>
 8001154:	49ba      	ldr	r1, [pc, #744]	@ (8001440 <__aeabi_ddiv+0x384>)
 8001156:	00a4      	lsls	r4, r4, #2
 8001158:	5909      	ldr	r1, [r1, r4]
 800115a:	468f      	mov	pc, r1
 800115c:	46cb      	mov	fp, r9
 800115e:	4642      	mov	r2, r8
 8001160:	9e02      	ldr	r6, [sp, #8]
 8001162:	9b03      	ldr	r3, [sp, #12]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d016      	beq.n	8001196 <__aeabi_ddiv+0xda>
 8001168:	2b03      	cmp	r3, #3
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0xb2>
 800116c:	e2a6      	b.n	80016bc <__aeabi_ddiv+0x600>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d000      	beq.n	8001174 <__aeabi_ddiv+0xb8>
 8001172:	e0df      	b.n	8001334 <__aeabi_ddiv+0x278>
 8001174:	2200      	movs	r2, #0
 8001176:	2300      	movs	r3, #0
 8001178:	2400      	movs	r4, #0
 800117a:	4690      	mov	r8, r2
 800117c:	051b      	lsls	r3, r3, #20
 800117e:	4323      	orrs	r3, r4
 8001180:	07f6      	lsls	r6, r6, #31
 8001182:	4333      	orrs	r3, r6
 8001184:	4640      	mov	r0, r8
 8001186:	0019      	movs	r1, r3
 8001188:	b007      	add	sp, #28
 800118a:	bcf0      	pop	{r4, r5, r6, r7}
 800118c:	46bb      	mov	fp, r7
 800118e:	46b2      	mov	sl, r6
 8001190:	46a9      	mov	r9, r5
 8001192:	46a0      	mov	r8, r4
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001196:	2200      	movs	r2, #0
 8001198:	2400      	movs	r4, #0
 800119a:	4690      	mov	r8, r2
 800119c:	4ba6      	ldr	r3, [pc, #664]	@ (8001438 <__aeabi_ddiv+0x37c>)
 800119e:	e7ed      	b.n	800117c <__aeabi_ddiv+0xc0>
 80011a0:	002e      	movs	r6, r5
 80011a2:	e7df      	b.n	8001164 <__aeabi_ddiv+0xa8>
 80011a4:	45cb      	cmp	fp, r9
 80011a6:	d200      	bcs.n	80011aa <__aeabi_ddiv+0xee>
 80011a8:	e1d4      	b.n	8001554 <__aeabi_ddiv+0x498>
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0xf2>
 80011ac:	e1cf      	b.n	800154e <__aeabi_ddiv+0x492>
 80011ae:	2301      	movs	r3, #1
 80011b0:	425b      	negs	r3, r3
 80011b2:	469c      	mov	ip, r3
 80011b4:	4644      	mov	r4, r8
 80011b6:	4648      	mov	r0, r9
 80011b8:	2700      	movs	r7, #0
 80011ba:	44e2      	add	sl, ip
 80011bc:	465b      	mov	r3, fp
 80011be:	0e15      	lsrs	r5, r2, #24
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	431d      	orrs	r5, r3
 80011c4:	0c19      	lsrs	r1, r3, #16
 80011c6:	042b      	lsls	r3, r5, #16
 80011c8:	0212      	lsls	r2, r2, #8
 80011ca:	9500      	str	r5, [sp, #0]
 80011cc:	0c1d      	lsrs	r5, r3, #16
 80011ce:	4691      	mov	r9, r2
 80011d0:	9102      	str	r1, [sp, #8]
 80011d2:	9503      	str	r5, [sp, #12]
 80011d4:	f7ff f836 	bl	8000244 <__aeabi_uidivmod>
 80011d8:	0002      	movs	r2, r0
 80011da:	436a      	muls	r2, r5
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	4680      	mov	r8, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d909      	bls.n	80011fc <__aeabi_ddiv+0x140>
 80011e8:	9d00      	ldr	r5, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	46ac      	mov	ip, r5
 80011ee:	425b      	negs	r3, r3
 80011f0:	4461      	add	r1, ip
 80011f2:	469c      	mov	ip, r3
 80011f4:	44e0      	add	r8, ip
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x140>
 80011fa:	e1fb      	b.n	80015f4 <__aeabi_ddiv+0x538>
 80011fc:	1a88      	subs	r0, r1, r2
 80011fe:	9902      	ldr	r1, [sp, #8]
 8001200:	f7ff f820 	bl	8000244 <__aeabi_uidivmod>
 8001204:	9a03      	ldr	r2, [sp, #12]
 8001206:	0424      	lsls	r4, r4, #16
 8001208:	4342      	muls	r2, r0
 800120a:	0409      	lsls	r1, r1, #16
 800120c:	0c24      	lsrs	r4, r4, #16
 800120e:	0003      	movs	r3, r0
 8001210:	430c      	orrs	r4, r1
 8001212:	42a2      	cmp	r2, r4
 8001214:	d906      	bls.n	8001224 <__aeabi_ddiv+0x168>
 8001216:	9900      	ldr	r1, [sp, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	468c      	mov	ip, r1
 800121c:	4464      	add	r4, ip
 800121e:	42a1      	cmp	r1, r4
 8001220:	d800      	bhi.n	8001224 <__aeabi_ddiv+0x168>
 8001222:	e1e1      	b.n	80015e8 <__aeabi_ddiv+0x52c>
 8001224:	1aa0      	subs	r0, r4, r2
 8001226:	4642      	mov	r2, r8
 8001228:	0412      	lsls	r2, r2, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	4693      	mov	fp, r2
 800122e:	464b      	mov	r3, r9
 8001230:	4659      	mov	r1, fp
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	001d      	movs	r5, r3
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	040b      	lsls	r3, r1, #16
 800123a:	4649      	mov	r1, r9
 800123c:	0409      	lsls	r1, r1, #16
 800123e:	0c09      	lsrs	r1, r1, #16
 8001240:	000c      	movs	r4, r1
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	435c      	muls	r4, r3
 8001246:	0c12      	lsrs	r2, r2, #16
 8001248:	436b      	muls	r3, r5
 800124a:	4688      	mov	r8, r1
 800124c:	4351      	muls	r1, r2
 800124e:	436a      	muls	r2, r5
 8001250:	0c25      	lsrs	r5, r4, #16
 8001252:	46ac      	mov	ip, r5
 8001254:	185b      	adds	r3, r3, r1
 8001256:	4463      	add	r3, ip
 8001258:	4299      	cmp	r1, r3
 800125a:	d903      	bls.n	8001264 <__aeabi_ddiv+0x1a8>
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0249      	lsls	r1, r1, #9
 8001260:	468c      	mov	ip, r1
 8001262:	4462      	add	r2, ip
 8001264:	0c19      	lsrs	r1, r3, #16
 8001266:	0424      	lsls	r4, r4, #16
 8001268:	041b      	lsls	r3, r3, #16
 800126a:	0c24      	lsrs	r4, r4, #16
 800126c:	188a      	adds	r2, r1, r2
 800126e:	191c      	adds	r4, r3, r4
 8001270:	4290      	cmp	r0, r2
 8001272:	d302      	bcc.n	800127a <__aeabi_ddiv+0x1be>
 8001274:	d116      	bne.n	80012a4 <__aeabi_ddiv+0x1e8>
 8001276:	42a7      	cmp	r7, r4
 8001278:	d214      	bcs.n	80012a4 <__aeabi_ddiv+0x1e8>
 800127a:	465b      	mov	r3, fp
 800127c:	9d00      	ldr	r5, [sp, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	444f      	add	r7, r9
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	454f      	cmp	r7, r9
 8001286:	419b      	sbcs	r3, r3
 8001288:	46ac      	mov	ip, r5
 800128a:	425b      	negs	r3, r3
 800128c:	4463      	add	r3, ip
 800128e:	18c0      	adds	r0, r0, r3
 8001290:	4285      	cmp	r5, r0
 8001292:	d300      	bcc.n	8001296 <__aeabi_ddiv+0x1da>
 8001294:	e1a1      	b.n	80015da <__aeabi_ddiv+0x51e>
 8001296:	4282      	cmp	r2, r0
 8001298:	d900      	bls.n	800129c <__aeabi_ddiv+0x1e0>
 800129a:	e1f6      	b.n	800168a <__aeabi_ddiv+0x5ce>
 800129c:	d100      	bne.n	80012a0 <__aeabi_ddiv+0x1e4>
 800129e:	e1f1      	b.n	8001684 <__aeabi_ddiv+0x5c8>
 80012a0:	9b05      	ldr	r3, [sp, #20]
 80012a2:	469b      	mov	fp, r3
 80012a4:	1b3c      	subs	r4, r7, r4
 80012a6:	42a7      	cmp	r7, r4
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	9d00      	ldr	r5, [sp, #0]
 80012ac:	1a80      	subs	r0, r0, r2
 80012ae:	427f      	negs	r7, r7
 80012b0:	1bc0      	subs	r0, r0, r7
 80012b2:	4285      	cmp	r5, r0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0x1fc>
 80012b6:	e1d0      	b.n	800165a <__aeabi_ddiv+0x59e>
 80012b8:	9902      	ldr	r1, [sp, #8]
 80012ba:	f7fe ffc3 	bl	8000244 <__aeabi_uidivmod>
 80012be:	9a03      	ldr	r2, [sp, #12]
 80012c0:	040b      	lsls	r3, r1, #16
 80012c2:	4342      	muls	r2, r0
 80012c4:	0c21      	lsrs	r1, r4, #16
 80012c6:	0007      	movs	r7, r0
 80012c8:	4319      	orrs	r1, r3
 80012ca:	428a      	cmp	r2, r1
 80012cc:	d900      	bls.n	80012d0 <__aeabi_ddiv+0x214>
 80012ce:	e178      	b.n	80015c2 <__aeabi_ddiv+0x506>
 80012d0:	1a88      	subs	r0, r1, r2
 80012d2:	9902      	ldr	r1, [sp, #8]
 80012d4:	f7fe ffb6 	bl	8000244 <__aeabi_uidivmod>
 80012d8:	9a03      	ldr	r2, [sp, #12]
 80012da:	0424      	lsls	r4, r4, #16
 80012dc:	4342      	muls	r2, r0
 80012de:	0409      	lsls	r1, r1, #16
 80012e0:	0c24      	lsrs	r4, r4, #16
 80012e2:	0003      	movs	r3, r0
 80012e4:	430c      	orrs	r4, r1
 80012e6:	42a2      	cmp	r2, r4
 80012e8:	d900      	bls.n	80012ec <__aeabi_ddiv+0x230>
 80012ea:	e15d      	b.n	80015a8 <__aeabi_ddiv+0x4ec>
 80012ec:	4641      	mov	r1, r8
 80012ee:	1aa4      	subs	r4, r4, r2
 80012f0:	043a      	lsls	r2, r7, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	9d04      	ldr	r5, [sp, #16]
 80012f6:	0413      	lsls	r3, r2, #16
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	4359      	muls	r1, r3
 80012fc:	4647      	mov	r7, r8
 80012fe:	436b      	muls	r3, r5
 8001300:	469c      	mov	ip, r3
 8001302:	0c10      	lsrs	r0, r2, #16
 8001304:	4347      	muls	r7, r0
 8001306:	0c0b      	lsrs	r3, r1, #16
 8001308:	44bc      	add	ip, r7
 800130a:	4463      	add	r3, ip
 800130c:	4368      	muls	r0, r5
 800130e:	429f      	cmp	r7, r3
 8001310:	d903      	bls.n	800131a <__aeabi_ddiv+0x25e>
 8001312:	2580      	movs	r5, #128	@ 0x80
 8001314:	026d      	lsls	r5, r5, #9
 8001316:	46ac      	mov	ip, r5
 8001318:	4460      	add	r0, ip
 800131a:	0c1f      	lsrs	r7, r3, #16
 800131c:	0409      	lsls	r1, r1, #16
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	0c09      	lsrs	r1, r1, #16
 8001322:	183f      	adds	r7, r7, r0
 8001324:	185b      	adds	r3, r3, r1
 8001326:	42bc      	cmp	r4, r7
 8001328:	d200      	bcs.n	800132c <__aeabi_ddiv+0x270>
 800132a:	e102      	b.n	8001532 <__aeabi_ddiv+0x476>
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x274>
 800132e:	e0fd      	b.n	800152c <__aeabi_ddiv+0x470>
 8001330:	2301      	movs	r3, #1
 8001332:	431a      	orrs	r2, r3
 8001334:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <__aeabi_ddiv+0x388>)
 8001336:	4453      	add	r3, sl
 8001338:	2b00      	cmp	r3, #0
 800133a:	dc00      	bgt.n	800133e <__aeabi_ddiv+0x282>
 800133c:	e0ae      	b.n	800149c <__aeabi_ddiv+0x3e0>
 800133e:	0751      	lsls	r1, r2, #29
 8001340:	d000      	beq.n	8001344 <__aeabi_ddiv+0x288>
 8001342:	e198      	b.n	8001676 <__aeabi_ddiv+0x5ba>
 8001344:	4659      	mov	r1, fp
 8001346:	01c9      	lsls	r1, r1, #7
 8001348:	d506      	bpl.n	8001358 <__aeabi_ddiv+0x29c>
 800134a:	4659      	mov	r1, fp
 800134c:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <__aeabi_ddiv+0x38c>)
 800134e:	4019      	ands	r1, r3
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	468b      	mov	fp, r1
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4453      	add	r3, sl
 8001358:	493c      	ldr	r1, [pc, #240]	@ (800144c <__aeabi_ddiv+0x390>)
 800135a:	428b      	cmp	r3, r1
 800135c:	dd00      	ble.n	8001360 <__aeabi_ddiv+0x2a4>
 800135e:	e71a      	b.n	8001196 <__aeabi_ddiv+0xda>
 8001360:	4659      	mov	r1, fp
 8001362:	08d2      	lsrs	r2, r2, #3
 8001364:	0749      	lsls	r1, r1, #29
 8001366:	4311      	orrs	r1, r2
 8001368:	465a      	mov	r2, fp
 800136a:	055b      	lsls	r3, r3, #21
 800136c:	0254      	lsls	r4, r2, #9
 800136e:	4688      	mov	r8, r1
 8001370:	0b24      	lsrs	r4, r4, #12
 8001372:	0d5b      	lsrs	r3, r3, #21
 8001374:	e702      	b.n	800117c <__aeabi_ddiv+0xc0>
 8001376:	465a      	mov	r2, fp
 8001378:	9b00      	ldr	r3, [sp, #0]
 800137a:	431a      	orrs	r2, r3
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x2c4>
 800137e:	e07e      	b.n	800147e <__aeabi_ddiv+0x3c2>
 8001380:	465b      	mov	r3, fp
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x2cc>
 8001386:	e100      	b.n	800158a <__aeabi_ddiv+0x4ce>
 8001388:	4658      	mov	r0, fp
 800138a:	f001 fa37 	bl	80027fc <__clzsi2>
 800138e:	0002      	movs	r2, r0
 8001390:	0003      	movs	r3, r0
 8001392:	3a0b      	subs	r2, #11
 8001394:	271d      	movs	r7, #29
 8001396:	9e00      	ldr	r6, [sp, #0]
 8001398:	1aba      	subs	r2, r7, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4658      	mov	r0, fp
 800139e:	40d6      	lsrs	r6, r2
 80013a0:	3908      	subs	r1, #8
 80013a2:	4088      	lsls	r0, r1
 80013a4:	0032      	movs	r2, r6
 80013a6:	4302      	orrs	r2, r0
 80013a8:	4693      	mov	fp, r2
 80013aa:	9a00      	ldr	r2, [sp, #0]
 80013ac:	408a      	lsls	r2, r1
 80013ae:	4928      	ldr	r1, [pc, #160]	@ (8001450 <__aeabi_ddiv+0x394>)
 80013b0:	4453      	add	r3, sl
 80013b2:	468a      	mov	sl, r1
 80013b4:	449a      	add	sl, r3
 80013b6:	2300      	movs	r3, #0
 80013b8:	e6c8      	b.n	800114c <__aeabi_ddiv+0x90>
 80013ba:	465b      	mov	r3, fp
 80013bc:	4303      	orrs	r3, r0
 80013be:	4699      	mov	r9, r3
 80013c0:	d056      	beq.n	8001470 <__aeabi_ddiv+0x3b4>
 80013c2:	465b      	mov	r3, fp
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_ddiv+0x30e>
 80013c8:	e0cd      	b.n	8001566 <__aeabi_ddiv+0x4aa>
 80013ca:	4658      	mov	r0, fp
 80013cc:	f001 fa16 	bl	80027fc <__clzsi2>
 80013d0:	230b      	movs	r3, #11
 80013d2:	425b      	negs	r3, r3
 80013d4:	469c      	mov	ip, r3
 80013d6:	0002      	movs	r2, r0
 80013d8:	4484      	add	ip, r0
 80013da:	4666      	mov	r6, ip
 80013dc:	231d      	movs	r3, #29
 80013de:	1b9b      	subs	r3, r3, r6
 80013e0:	0026      	movs	r6, r4
 80013e2:	0011      	movs	r1, r2
 80013e4:	4658      	mov	r0, fp
 80013e6:	40de      	lsrs	r6, r3
 80013e8:	3908      	subs	r1, #8
 80013ea:	4088      	lsls	r0, r1
 80013ec:	0033      	movs	r3, r6
 80013ee:	4303      	orrs	r3, r0
 80013f0:	4699      	mov	r9, r3
 80013f2:	0023      	movs	r3, r4
 80013f4:	408b      	lsls	r3, r1
 80013f6:	4698      	mov	r8, r3
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <__aeabi_ddiv+0x398>)
 80013fa:	2400      	movs	r4, #0
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	469a      	mov	sl, r3
 8001400:	2300      	movs	r3, #0
 8001402:	9303      	str	r3, [sp, #12]
 8001404:	e682      	b.n	800110c <__aeabi_ddiv+0x50>
 8001406:	465a      	mov	r2, fp
 8001408:	4302      	orrs	r2, r0
 800140a:	4691      	mov	r9, r2
 800140c:	d12a      	bne.n	8001464 <__aeabi_ddiv+0x3a8>
 800140e:	2200      	movs	r2, #0
 8001410:	469a      	mov	sl, r3
 8001412:	2302      	movs	r3, #2
 8001414:	4690      	mov	r8, r2
 8001416:	2408      	movs	r4, #8
 8001418:	9303      	str	r3, [sp, #12]
 800141a:	e677      	b.n	800110c <__aeabi_ddiv+0x50>
 800141c:	465a      	mov	r2, fp
 800141e:	9b00      	ldr	r3, [sp, #0]
 8001420:	431a      	orrs	r2, r3
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <__aeabi_ddiv+0x39c>)
 8001424:	469c      	mov	ip, r3
 8001426:	44e2      	add	sl, ip
 8001428:	2a00      	cmp	r2, #0
 800142a:	d117      	bne.n	800145c <__aeabi_ddiv+0x3a0>
 800142c:	2302      	movs	r3, #2
 800142e:	431c      	orrs	r4, r3
 8001430:	2300      	movs	r3, #0
 8001432:	469b      	mov	fp, r3
 8001434:	3302      	adds	r3, #2
 8001436:	e689      	b.n	800114c <__aeabi_ddiv+0x90>
 8001438:	000007ff 	.word	0x000007ff
 800143c:	fffffc01 	.word	0xfffffc01
 8001440:	08008b14 	.word	0x08008b14
 8001444:	000003ff 	.word	0x000003ff
 8001448:	feffffff 	.word	0xfeffffff
 800144c:	000007fe 	.word	0x000007fe
 8001450:	000003f3 	.word	0x000003f3
 8001454:	fffffc0d 	.word	0xfffffc0d
 8001458:	fffff801 	.word	0xfffff801
 800145c:	2303      	movs	r3, #3
 800145e:	0032      	movs	r2, r6
 8001460:	431c      	orrs	r4, r3
 8001462:	e673      	b.n	800114c <__aeabi_ddiv+0x90>
 8001464:	469a      	mov	sl, r3
 8001466:	2303      	movs	r3, #3
 8001468:	46d9      	mov	r9, fp
 800146a:	240c      	movs	r4, #12
 800146c:	9303      	str	r3, [sp, #12]
 800146e:	e64d      	b.n	800110c <__aeabi_ddiv+0x50>
 8001470:	2300      	movs	r3, #0
 8001472:	4698      	mov	r8, r3
 8001474:	469a      	mov	sl, r3
 8001476:	3301      	adds	r3, #1
 8001478:	2404      	movs	r4, #4
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	e646      	b.n	800110c <__aeabi_ddiv+0x50>
 800147e:	2301      	movs	r3, #1
 8001480:	431c      	orrs	r4, r3
 8001482:	2300      	movs	r3, #0
 8001484:	469b      	mov	fp, r3
 8001486:	3301      	adds	r3, #1
 8001488:	e660      	b.n	800114c <__aeabi_ddiv+0x90>
 800148a:	2300      	movs	r3, #0
 800148c:	2480      	movs	r4, #128	@ 0x80
 800148e:	4698      	mov	r8, r3
 8001490:	2600      	movs	r6, #0
 8001492:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <__aeabi_ddiv+0x620>)
 8001494:	0324      	lsls	r4, r4, #12
 8001496:	e671      	b.n	800117c <__aeabi_ddiv+0xc0>
 8001498:	2201      	movs	r2, #1
 800149a:	4252      	negs	r2, r2
 800149c:	2101      	movs	r1, #1
 800149e:	1ac9      	subs	r1, r1, r3
 80014a0:	2938      	cmp	r1, #56	@ 0x38
 80014a2:	dd00      	ble.n	80014a6 <__aeabi_ddiv+0x3ea>
 80014a4:	e666      	b.n	8001174 <__aeabi_ddiv+0xb8>
 80014a6:	291f      	cmp	r1, #31
 80014a8:	dc00      	bgt.n	80014ac <__aeabi_ddiv+0x3f0>
 80014aa:	e0ab      	b.n	8001604 <__aeabi_ddiv+0x548>
 80014ac:	201f      	movs	r0, #31
 80014ae:	4240      	negs	r0, r0
 80014b0:	1ac3      	subs	r3, r0, r3
 80014b2:	4658      	mov	r0, fp
 80014b4:	40d8      	lsrs	r0, r3
 80014b6:	0003      	movs	r3, r0
 80014b8:	2920      	cmp	r1, #32
 80014ba:	d004      	beq.n	80014c6 <__aeabi_ddiv+0x40a>
 80014bc:	4658      	mov	r0, fp
 80014be:	4988      	ldr	r1, [pc, #544]	@ (80016e0 <__aeabi_ddiv+0x624>)
 80014c0:	4451      	add	r1, sl
 80014c2:	4088      	lsls	r0, r1
 80014c4:	4302      	orrs	r2, r0
 80014c6:	1e51      	subs	r1, r2, #1
 80014c8:	418a      	sbcs	r2, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	2307      	movs	r3, #7
 80014ce:	0019      	movs	r1, r3
 80014d0:	2400      	movs	r4, #0
 80014d2:	4011      	ands	r1, r2
 80014d4:	4213      	tst	r3, r2
 80014d6:	d00c      	beq.n	80014f2 <__aeabi_ddiv+0x436>
 80014d8:	230f      	movs	r3, #15
 80014da:	4013      	ands	r3, r2
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d100      	bne.n	80014e2 <__aeabi_ddiv+0x426>
 80014e0:	e0f9      	b.n	80016d6 <__aeabi_ddiv+0x61a>
 80014e2:	1d11      	adds	r1, r2, #4
 80014e4:	4291      	cmp	r1, r2
 80014e6:	419b      	sbcs	r3, r3
 80014e8:	000a      	movs	r2, r1
 80014ea:	425b      	negs	r3, r3
 80014ec:	0759      	lsls	r1, r3, #29
 80014ee:	025b      	lsls	r3, r3, #9
 80014f0:	0b1c      	lsrs	r4, r3, #12
 80014f2:	08d2      	lsrs	r2, r2, #3
 80014f4:	430a      	orrs	r2, r1
 80014f6:	4690      	mov	r8, r2
 80014f8:	2300      	movs	r3, #0
 80014fa:	e63f      	b.n	800117c <__aeabi_ddiv+0xc0>
 80014fc:	2480      	movs	r4, #128	@ 0x80
 80014fe:	464b      	mov	r3, r9
 8001500:	0324      	lsls	r4, r4, #12
 8001502:	4223      	tst	r3, r4
 8001504:	d009      	beq.n	800151a <__aeabi_ddiv+0x45e>
 8001506:	465b      	mov	r3, fp
 8001508:	4223      	tst	r3, r4
 800150a:	d106      	bne.n	800151a <__aeabi_ddiv+0x45e>
 800150c:	431c      	orrs	r4, r3
 800150e:	0324      	lsls	r4, r4, #12
 8001510:	002e      	movs	r6, r5
 8001512:	4690      	mov	r8, r2
 8001514:	4b71      	ldr	r3, [pc, #452]	@ (80016dc <__aeabi_ddiv+0x620>)
 8001516:	0b24      	lsrs	r4, r4, #12
 8001518:	e630      	b.n	800117c <__aeabi_ddiv+0xc0>
 800151a:	2480      	movs	r4, #128	@ 0x80
 800151c:	464b      	mov	r3, r9
 800151e:	0324      	lsls	r4, r4, #12
 8001520:	431c      	orrs	r4, r3
 8001522:	0324      	lsls	r4, r4, #12
 8001524:	9e02      	ldr	r6, [sp, #8]
 8001526:	4b6d      	ldr	r3, [pc, #436]	@ (80016dc <__aeabi_ddiv+0x620>)
 8001528:	0b24      	lsrs	r4, r4, #12
 800152a:	e627      	b.n	800117c <__aeabi_ddiv+0xc0>
 800152c:	2b00      	cmp	r3, #0
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x476>
 8001530:	e700      	b.n	8001334 <__aeabi_ddiv+0x278>
 8001532:	9800      	ldr	r0, [sp, #0]
 8001534:	1e51      	subs	r1, r2, #1
 8001536:	4684      	mov	ip, r0
 8001538:	4464      	add	r4, ip
 800153a:	4284      	cmp	r4, r0
 800153c:	d200      	bcs.n	8001540 <__aeabi_ddiv+0x484>
 800153e:	e084      	b.n	800164a <__aeabi_ddiv+0x58e>
 8001540:	42bc      	cmp	r4, r7
 8001542:	d200      	bcs.n	8001546 <__aeabi_ddiv+0x48a>
 8001544:	e0ae      	b.n	80016a4 <__aeabi_ddiv+0x5e8>
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x48e>
 8001548:	e0c1      	b.n	80016ce <__aeabi_ddiv+0x612>
 800154a:	000a      	movs	r2, r1
 800154c:	e6f0      	b.n	8001330 <__aeabi_ddiv+0x274>
 800154e:	4542      	cmp	r2, r8
 8001550:	d900      	bls.n	8001554 <__aeabi_ddiv+0x498>
 8001552:	e62c      	b.n	80011ae <__aeabi_ddiv+0xf2>
 8001554:	464b      	mov	r3, r9
 8001556:	07dc      	lsls	r4, r3, #31
 8001558:	0858      	lsrs	r0, r3, #1
 800155a:	4643      	mov	r3, r8
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	431c      	orrs	r4, r3
 8001560:	4643      	mov	r3, r8
 8001562:	07df      	lsls	r7, r3, #31
 8001564:	e62a      	b.n	80011bc <__aeabi_ddiv+0x100>
 8001566:	f001 f949 	bl	80027fc <__clzsi2>
 800156a:	2315      	movs	r3, #21
 800156c:	469c      	mov	ip, r3
 800156e:	4484      	add	ip, r0
 8001570:	0002      	movs	r2, r0
 8001572:	4663      	mov	r3, ip
 8001574:	3220      	adds	r2, #32
 8001576:	2b1c      	cmp	r3, #28
 8001578:	dc00      	bgt.n	800157c <__aeabi_ddiv+0x4c0>
 800157a:	e72e      	b.n	80013da <__aeabi_ddiv+0x31e>
 800157c:	0023      	movs	r3, r4
 800157e:	3808      	subs	r0, #8
 8001580:	4083      	lsls	r3, r0
 8001582:	4699      	mov	r9, r3
 8001584:	2300      	movs	r3, #0
 8001586:	4698      	mov	r8, r3
 8001588:	e736      	b.n	80013f8 <__aeabi_ddiv+0x33c>
 800158a:	f001 f937 	bl	80027fc <__clzsi2>
 800158e:	0002      	movs	r2, r0
 8001590:	0003      	movs	r3, r0
 8001592:	3215      	adds	r2, #21
 8001594:	3320      	adds	r3, #32
 8001596:	2a1c      	cmp	r2, #28
 8001598:	dc00      	bgt.n	800159c <__aeabi_ddiv+0x4e0>
 800159a:	e6fb      	b.n	8001394 <__aeabi_ddiv+0x2d8>
 800159c:	9900      	ldr	r1, [sp, #0]
 800159e:	3808      	subs	r0, #8
 80015a0:	4081      	lsls	r1, r0
 80015a2:	2200      	movs	r2, #0
 80015a4:	468b      	mov	fp, r1
 80015a6:	e702      	b.n	80013ae <__aeabi_ddiv+0x2f2>
 80015a8:	9900      	ldr	r1, [sp, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	468c      	mov	ip, r1
 80015ae:	4464      	add	r4, ip
 80015b0:	42a1      	cmp	r1, r4
 80015b2:	d900      	bls.n	80015b6 <__aeabi_ddiv+0x4fa>
 80015b4:	e69a      	b.n	80012ec <__aeabi_ddiv+0x230>
 80015b6:	42a2      	cmp	r2, r4
 80015b8:	d800      	bhi.n	80015bc <__aeabi_ddiv+0x500>
 80015ba:	e697      	b.n	80012ec <__aeabi_ddiv+0x230>
 80015bc:	1e83      	subs	r3, r0, #2
 80015be:	4464      	add	r4, ip
 80015c0:	e694      	b.n	80012ec <__aeabi_ddiv+0x230>
 80015c2:	46ac      	mov	ip, r5
 80015c4:	4461      	add	r1, ip
 80015c6:	3f01      	subs	r7, #1
 80015c8:	428d      	cmp	r5, r1
 80015ca:	d900      	bls.n	80015ce <__aeabi_ddiv+0x512>
 80015cc:	e680      	b.n	80012d0 <__aeabi_ddiv+0x214>
 80015ce:	428a      	cmp	r2, r1
 80015d0:	d800      	bhi.n	80015d4 <__aeabi_ddiv+0x518>
 80015d2:	e67d      	b.n	80012d0 <__aeabi_ddiv+0x214>
 80015d4:	1e87      	subs	r7, r0, #2
 80015d6:	4461      	add	r1, ip
 80015d8:	e67a      	b.n	80012d0 <__aeabi_ddiv+0x214>
 80015da:	4285      	cmp	r5, r0
 80015dc:	d000      	beq.n	80015e0 <__aeabi_ddiv+0x524>
 80015de:	e65f      	b.n	80012a0 <__aeabi_ddiv+0x1e4>
 80015e0:	45b9      	cmp	r9, r7
 80015e2:	d900      	bls.n	80015e6 <__aeabi_ddiv+0x52a>
 80015e4:	e65c      	b.n	80012a0 <__aeabi_ddiv+0x1e4>
 80015e6:	e656      	b.n	8001296 <__aeabi_ddiv+0x1da>
 80015e8:	42a2      	cmp	r2, r4
 80015ea:	d800      	bhi.n	80015ee <__aeabi_ddiv+0x532>
 80015ec:	e61a      	b.n	8001224 <__aeabi_ddiv+0x168>
 80015ee:	1e83      	subs	r3, r0, #2
 80015f0:	4464      	add	r4, ip
 80015f2:	e617      	b.n	8001224 <__aeabi_ddiv+0x168>
 80015f4:	428a      	cmp	r2, r1
 80015f6:	d800      	bhi.n	80015fa <__aeabi_ddiv+0x53e>
 80015f8:	e600      	b.n	80011fc <__aeabi_ddiv+0x140>
 80015fa:	46ac      	mov	ip, r5
 80015fc:	1e83      	subs	r3, r0, #2
 80015fe:	4698      	mov	r8, r3
 8001600:	4461      	add	r1, ip
 8001602:	e5fb      	b.n	80011fc <__aeabi_ddiv+0x140>
 8001604:	4837      	ldr	r0, [pc, #220]	@ (80016e4 <__aeabi_ddiv+0x628>)
 8001606:	0014      	movs	r4, r2
 8001608:	4450      	add	r0, sl
 800160a:	4082      	lsls	r2, r0
 800160c:	465b      	mov	r3, fp
 800160e:	0017      	movs	r7, r2
 8001610:	4083      	lsls	r3, r0
 8001612:	40cc      	lsrs	r4, r1
 8001614:	1e7a      	subs	r2, r7, #1
 8001616:	4197      	sbcs	r7, r2
 8001618:	4323      	orrs	r3, r4
 800161a:	433b      	orrs	r3, r7
 800161c:	001a      	movs	r2, r3
 800161e:	465b      	mov	r3, fp
 8001620:	40cb      	lsrs	r3, r1
 8001622:	0751      	lsls	r1, r2, #29
 8001624:	d009      	beq.n	800163a <__aeabi_ddiv+0x57e>
 8001626:	210f      	movs	r1, #15
 8001628:	4011      	ands	r1, r2
 800162a:	2904      	cmp	r1, #4
 800162c:	d005      	beq.n	800163a <__aeabi_ddiv+0x57e>
 800162e:	1d11      	adds	r1, r2, #4
 8001630:	4291      	cmp	r1, r2
 8001632:	4192      	sbcs	r2, r2
 8001634:	4252      	negs	r2, r2
 8001636:	189b      	adds	r3, r3, r2
 8001638:	000a      	movs	r2, r1
 800163a:	0219      	lsls	r1, r3, #8
 800163c:	d400      	bmi.n	8001640 <__aeabi_ddiv+0x584>
 800163e:	e755      	b.n	80014ec <__aeabi_ddiv+0x430>
 8001640:	2200      	movs	r2, #0
 8001642:	2301      	movs	r3, #1
 8001644:	2400      	movs	r4, #0
 8001646:	4690      	mov	r8, r2
 8001648:	e598      	b.n	800117c <__aeabi_ddiv+0xc0>
 800164a:	000a      	movs	r2, r1
 800164c:	42bc      	cmp	r4, r7
 800164e:	d000      	beq.n	8001652 <__aeabi_ddiv+0x596>
 8001650:	e66e      	b.n	8001330 <__aeabi_ddiv+0x274>
 8001652:	454b      	cmp	r3, r9
 8001654:	d000      	beq.n	8001658 <__aeabi_ddiv+0x59c>
 8001656:	e66b      	b.n	8001330 <__aeabi_ddiv+0x274>
 8001658:	e66c      	b.n	8001334 <__aeabi_ddiv+0x278>
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <__aeabi_ddiv+0x62c>)
 800165c:	4a23      	ldr	r2, [pc, #140]	@ (80016ec <__aeabi_ddiv+0x630>)
 800165e:	4453      	add	r3, sl
 8001660:	4592      	cmp	sl, r2
 8001662:	da00      	bge.n	8001666 <__aeabi_ddiv+0x5aa>
 8001664:	e718      	b.n	8001498 <__aeabi_ddiv+0x3dc>
 8001666:	2101      	movs	r1, #1
 8001668:	4249      	negs	r1, r1
 800166a:	1d0a      	adds	r2, r1, #4
 800166c:	428a      	cmp	r2, r1
 800166e:	4189      	sbcs	r1, r1
 8001670:	4249      	negs	r1, r1
 8001672:	448b      	add	fp, r1
 8001674:	e666      	b.n	8001344 <__aeabi_ddiv+0x288>
 8001676:	210f      	movs	r1, #15
 8001678:	4011      	ands	r1, r2
 800167a:	2904      	cmp	r1, #4
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x5c4>
 800167e:	e661      	b.n	8001344 <__aeabi_ddiv+0x288>
 8001680:	0011      	movs	r1, r2
 8001682:	e7f2      	b.n	800166a <__aeabi_ddiv+0x5ae>
 8001684:	42bc      	cmp	r4, r7
 8001686:	d800      	bhi.n	800168a <__aeabi_ddiv+0x5ce>
 8001688:	e60a      	b.n	80012a0 <__aeabi_ddiv+0x1e4>
 800168a:	2302      	movs	r3, #2
 800168c:	425b      	negs	r3, r3
 800168e:	469c      	mov	ip, r3
 8001690:	9900      	ldr	r1, [sp, #0]
 8001692:	444f      	add	r7, r9
 8001694:	454f      	cmp	r7, r9
 8001696:	419b      	sbcs	r3, r3
 8001698:	44e3      	add	fp, ip
 800169a:	468c      	mov	ip, r1
 800169c:	425b      	negs	r3, r3
 800169e:	4463      	add	r3, ip
 80016a0:	18c0      	adds	r0, r0, r3
 80016a2:	e5ff      	b.n	80012a4 <__aeabi_ddiv+0x1e8>
 80016a4:	4649      	mov	r1, r9
 80016a6:	9d00      	ldr	r5, [sp, #0]
 80016a8:	0048      	lsls	r0, r1, #1
 80016aa:	4548      	cmp	r0, r9
 80016ac:	4189      	sbcs	r1, r1
 80016ae:	46ac      	mov	ip, r5
 80016b0:	4249      	negs	r1, r1
 80016b2:	4461      	add	r1, ip
 80016b4:	4681      	mov	r9, r0
 80016b6:	3a02      	subs	r2, #2
 80016b8:	1864      	adds	r4, r4, r1
 80016ba:	e7c7      	b.n	800164c <__aeabi_ddiv+0x590>
 80016bc:	2480      	movs	r4, #128	@ 0x80
 80016be:	465b      	mov	r3, fp
 80016c0:	0324      	lsls	r4, r4, #12
 80016c2:	431c      	orrs	r4, r3
 80016c4:	0324      	lsls	r4, r4, #12
 80016c6:	4690      	mov	r8, r2
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <__aeabi_ddiv+0x620>)
 80016ca:	0b24      	lsrs	r4, r4, #12
 80016cc:	e556      	b.n	800117c <__aeabi_ddiv+0xc0>
 80016ce:	4599      	cmp	r9, r3
 80016d0:	d3e8      	bcc.n	80016a4 <__aeabi_ddiv+0x5e8>
 80016d2:	000a      	movs	r2, r1
 80016d4:	e7bd      	b.n	8001652 <__aeabi_ddiv+0x596>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e708      	b.n	80014ec <__aeabi_ddiv+0x430>
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	000007ff 	.word	0x000007ff
 80016e0:	0000043e 	.word	0x0000043e
 80016e4:	0000041e 	.word	0x0000041e
 80016e8:	000003ff 	.word	0x000003ff
 80016ec:	fffffc02 	.word	0xfffffc02

080016f0 <__eqdf2>:
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	4657      	mov	r7, sl
 80016f4:	46de      	mov	lr, fp
 80016f6:	464e      	mov	r6, r9
 80016f8:	4645      	mov	r5, r8
 80016fa:	b5e0      	push	{r5, r6, r7, lr}
 80016fc:	000d      	movs	r5, r1
 80016fe:	0004      	movs	r4, r0
 8001700:	0fe8      	lsrs	r0, r5, #31
 8001702:	4683      	mov	fp, r0
 8001704:	0309      	lsls	r1, r1, #12
 8001706:	0fd8      	lsrs	r0, r3, #31
 8001708:	0b09      	lsrs	r1, r1, #12
 800170a:	4682      	mov	sl, r0
 800170c:	4819      	ldr	r0, [pc, #100]	@ (8001774 <__eqdf2+0x84>)
 800170e:	468c      	mov	ip, r1
 8001710:	031f      	lsls	r7, r3, #12
 8001712:	0069      	lsls	r1, r5, #1
 8001714:	005e      	lsls	r6, r3, #1
 8001716:	0d49      	lsrs	r1, r1, #21
 8001718:	0b3f      	lsrs	r7, r7, #12
 800171a:	0d76      	lsrs	r6, r6, #21
 800171c:	4281      	cmp	r1, r0
 800171e:	d018      	beq.n	8001752 <__eqdf2+0x62>
 8001720:	4286      	cmp	r6, r0
 8001722:	d00f      	beq.n	8001744 <__eqdf2+0x54>
 8001724:	2001      	movs	r0, #1
 8001726:	42b1      	cmp	r1, r6
 8001728:	d10d      	bne.n	8001746 <__eqdf2+0x56>
 800172a:	45bc      	cmp	ip, r7
 800172c:	d10b      	bne.n	8001746 <__eqdf2+0x56>
 800172e:	4294      	cmp	r4, r2
 8001730:	d109      	bne.n	8001746 <__eqdf2+0x56>
 8001732:	45d3      	cmp	fp, sl
 8001734:	d01c      	beq.n	8001770 <__eqdf2+0x80>
 8001736:	2900      	cmp	r1, #0
 8001738:	d105      	bne.n	8001746 <__eqdf2+0x56>
 800173a:	4660      	mov	r0, ip
 800173c:	4320      	orrs	r0, r4
 800173e:	1e43      	subs	r3, r0, #1
 8001740:	4198      	sbcs	r0, r3
 8001742:	e000      	b.n	8001746 <__eqdf2+0x56>
 8001744:	2001      	movs	r0, #1
 8001746:	bcf0      	pop	{r4, r5, r6, r7}
 8001748:	46bb      	mov	fp, r7
 800174a:	46b2      	mov	sl, r6
 800174c:	46a9      	mov	r9, r5
 800174e:	46a0      	mov	r8, r4
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	2001      	movs	r0, #1
 8001754:	428e      	cmp	r6, r1
 8001756:	d1f6      	bne.n	8001746 <__eqdf2+0x56>
 8001758:	4661      	mov	r1, ip
 800175a:	4339      	orrs	r1, r7
 800175c:	000f      	movs	r7, r1
 800175e:	4317      	orrs	r7, r2
 8001760:	4327      	orrs	r7, r4
 8001762:	d1f0      	bne.n	8001746 <__eqdf2+0x56>
 8001764:	465b      	mov	r3, fp
 8001766:	4652      	mov	r2, sl
 8001768:	1a98      	subs	r0, r3, r2
 800176a:	1e43      	subs	r3, r0, #1
 800176c:	4198      	sbcs	r0, r3
 800176e:	e7ea      	b.n	8001746 <__eqdf2+0x56>
 8001770:	2000      	movs	r0, #0
 8001772:	e7e8      	b.n	8001746 <__eqdf2+0x56>
 8001774:	000007ff 	.word	0x000007ff

08001778 <__gedf2>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	4657      	mov	r7, sl
 800177c:	464e      	mov	r6, r9
 800177e:	4645      	mov	r5, r8
 8001780:	46de      	mov	lr, fp
 8001782:	b5e0      	push	{r5, r6, r7, lr}
 8001784:	000d      	movs	r5, r1
 8001786:	030f      	lsls	r7, r1, #12
 8001788:	0b39      	lsrs	r1, r7, #12
 800178a:	b083      	sub	sp, #12
 800178c:	0004      	movs	r4, r0
 800178e:	4680      	mov	r8, r0
 8001790:	9101      	str	r1, [sp, #4]
 8001792:	0058      	lsls	r0, r3, #1
 8001794:	0fe9      	lsrs	r1, r5, #31
 8001796:	4f31      	ldr	r7, [pc, #196]	@ (800185c <__gedf2+0xe4>)
 8001798:	0d40      	lsrs	r0, r0, #21
 800179a:	468c      	mov	ip, r1
 800179c:	006e      	lsls	r6, r5, #1
 800179e:	0319      	lsls	r1, r3, #12
 80017a0:	4682      	mov	sl, r0
 80017a2:	4691      	mov	r9, r2
 80017a4:	0d76      	lsrs	r6, r6, #21
 80017a6:	0b09      	lsrs	r1, r1, #12
 80017a8:	0fd8      	lsrs	r0, r3, #31
 80017aa:	42be      	cmp	r6, r7
 80017ac:	d01f      	beq.n	80017ee <__gedf2+0x76>
 80017ae:	45ba      	cmp	sl, r7
 80017b0:	d00f      	beq.n	80017d2 <__gedf2+0x5a>
 80017b2:	2e00      	cmp	r6, #0
 80017b4:	d12f      	bne.n	8001816 <__gedf2+0x9e>
 80017b6:	4655      	mov	r5, sl
 80017b8:	9e01      	ldr	r6, [sp, #4]
 80017ba:	4334      	orrs	r4, r6
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d127      	bne.n	8001810 <__gedf2+0x98>
 80017c0:	430a      	orrs	r2, r1
 80017c2:	d03a      	beq.n	800183a <__gedf2+0xc2>
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d145      	bne.n	8001854 <__gedf2+0xdc>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d11a      	bne.n	8001802 <__gedf2+0x8a>
 80017cc:	2001      	movs	r0, #1
 80017ce:	4240      	negs	r0, r0
 80017d0:	e017      	b.n	8001802 <__gedf2+0x8a>
 80017d2:	4311      	orrs	r1, r2
 80017d4:	d13b      	bne.n	800184e <__gedf2+0xd6>
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	d102      	bne.n	80017e0 <__gedf2+0x68>
 80017da:	9f01      	ldr	r7, [sp, #4]
 80017dc:	4327      	orrs	r7, r4
 80017de:	d0f3      	beq.n	80017c8 <__gedf2+0x50>
 80017e0:	4584      	cmp	ip, r0
 80017e2:	d109      	bne.n	80017f8 <__gedf2+0x80>
 80017e4:	4663      	mov	r3, ip
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <__gedf2+0x54>
 80017ea:	4660      	mov	r0, ip
 80017ec:	e009      	b.n	8001802 <__gedf2+0x8a>
 80017ee:	9f01      	ldr	r7, [sp, #4]
 80017f0:	4327      	orrs	r7, r4
 80017f2:	d12c      	bne.n	800184e <__gedf2+0xd6>
 80017f4:	45b2      	cmp	sl, r6
 80017f6:	d024      	beq.n	8001842 <__gedf2+0xca>
 80017f8:	4663      	mov	r3, ip
 80017fa:	2002      	movs	r0, #2
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4018      	ands	r0, r3
 8001800:	3801      	subs	r0, #1
 8001802:	b003      	add	sp, #12
 8001804:	bcf0      	pop	{r4, r5, r6, r7}
 8001806:	46bb      	mov	fp, r7
 8001808:	46b2      	mov	sl, r6
 800180a:	46a9      	mov	r9, r5
 800180c:	46a0      	mov	r8, r4
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	2c00      	cmp	r4, #0
 8001812:	d0d9      	beq.n	80017c8 <__gedf2+0x50>
 8001814:	e7e4      	b.n	80017e0 <__gedf2+0x68>
 8001816:	4654      	mov	r4, sl
 8001818:	2c00      	cmp	r4, #0
 800181a:	d0ed      	beq.n	80017f8 <__gedf2+0x80>
 800181c:	4584      	cmp	ip, r0
 800181e:	d1eb      	bne.n	80017f8 <__gedf2+0x80>
 8001820:	4556      	cmp	r6, sl
 8001822:	dce9      	bgt.n	80017f8 <__gedf2+0x80>
 8001824:	dbde      	blt.n	80017e4 <__gedf2+0x6c>
 8001826:	9b01      	ldr	r3, [sp, #4]
 8001828:	428b      	cmp	r3, r1
 800182a:	d8e5      	bhi.n	80017f8 <__gedf2+0x80>
 800182c:	d1da      	bne.n	80017e4 <__gedf2+0x6c>
 800182e:	45c8      	cmp	r8, r9
 8001830:	d8e2      	bhi.n	80017f8 <__gedf2+0x80>
 8001832:	2000      	movs	r0, #0
 8001834:	45c8      	cmp	r8, r9
 8001836:	d2e4      	bcs.n	8001802 <__gedf2+0x8a>
 8001838:	e7d4      	b.n	80017e4 <__gedf2+0x6c>
 800183a:	2000      	movs	r0, #0
 800183c:	2c00      	cmp	r4, #0
 800183e:	d0e0      	beq.n	8001802 <__gedf2+0x8a>
 8001840:	e7da      	b.n	80017f8 <__gedf2+0x80>
 8001842:	4311      	orrs	r1, r2
 8001844:	d103      	bne.n	800184e <__gedf2+0xd6>
 8001846:	4584      	cmp	ip, r0
 8001848:	d1d6      	bne.n	80017f8 <__gedf2+0x80>
 800184a:	2000      	movs	r0, #0
 800184c:	e7d9      	b.n	8001802 <__gedf2+0x8a>
 800184e:	2002      	movs	r0, #2
 8001850:	4240      	negs	r0, r0
 8001852:	e7d6      	b.n	8001802 <__gedf2+0x8a>
 8001854:	4584      	cmp	ip, r0
 8001856:	d0e6      	beq.n	8001826 <__gedf2+0xae>
 8001858:	e7ce      	b.n	80017f8 <__gedf2+0x80>
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	000007ff 	.word	0x000007ff

08001860 <__ledf2>:
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	b5e0      	push	{r5, r6, r7, lr}
 800186c:	000d      	movs	r5, r1
 800186e:	030f      	lsls	r7, r1, #12
 8001870:	0004      	movs	r4, r0
 8001872:	4680      	mov	r8, r0
 8001874:	0fe8      	lsrs	r0, r5, #31
 8001876:	0b39      	lsrs	r1, r7, #12
 8001878:	4684      	mov	ip, r0
 800187a:	b083      	sub	sp, #12
 800187c:	0058      	lsls	r0, r3, #1
 800187e:	4f30      	ldr	r7, [pc, #192]	@ (8001940 <__ledf2+0xe0>)
 8001880:	0d40      	lsrs	r0, r0, #21
 8001882:	9101      	str	r1, [sp, #4]
 8001884:	031e      	lsls	r6, r3, #12
 8001886:	0069      	lsls	r1, r5, #1
 8001888:	4682      	mov	sl, r0
 800188a:	4691      	mov	r9, r2
 800188c:	0d49      	lsrs	r1, r1, #21
 800188e:	0b36      	lsrs	r6, r6, #12
 8001890:	0fd8      	lsrs	r0, r3, #31
 8001892:	42b9      	cmp	r1, r7
 8001894:	d020      	beq.n	80018d8 <__ledf2+0x78>
 8001896:	45ba      	cmp	sl, r7
 8001898:	d00f      	beq.n	80018ba <__ledf2+0x5a>
 800189a:	2900      	cmp	r1, #0
 800189c:	d12b      	bne.n	80018f6 <__ledf2+0x96>
 800189e:	9901      	ldr	r1, [sp, #4]
 80018a0:	430c      	orrs	r4, r1
 80018a2:	4651      	mov	r1, sl
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d137      	bne.n	8001918 <__ledf2+0xb8>
 80018a8:	4332      	orrs	r2, r6
 80018aa:	d038      	beq.n	800191e <__ledf2+0xbe>
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d144      	bne.n	800193a <__ledf2+0xda>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d119      	bne.n	80018e8 <__ledf2+0x88>
 80018b4:	2001      	movs	r0, #1
 80018b6:	4240      	negs	r0, r0
 80018b8:	e016      	b.n	80018e8 <__ledf2+0x88>
 80018ba:	4316      	orrs	r6, r2
 80018bc:	d113      	bne.n	80018e6 <__ledf2+0x86>
 80018be:	2900      	cmp	r1, #0
 80018c0:	d102      	bne.n	80018c8 <__ledf2+0x68>
 80018c2:	9f01      	ldr	r7, [sp, #4]
 80018c4:	4327      	orrs	r7, r4
 80018c6:	d0f3      	beq.n	80018b0 <__ledf2+0x50>
 80018c8:	4584      	cmp	ip, r0
 80018ca:	d020      	beq.n	800190e <__ledf2+0xae>
 80018cc:	4663      	mov	r3, ip
 80018ce:	2002      	movs	r0, #2
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4018      	ands	r0, r3
 80018d4:	3801      	subs	r0, #1
 80018d6:	e007      	b.n	80018e8 <__ledf2+0x88>
 80018d8:	9f01      	ldr	r7, [sp, #4]
 80018da:	4327      	orrs	r7, r4
 80018dc:	d103      	bne.n	80018e6 <__ledf2+0x86>
 80018de:	458a      	cmp	sl, r1
 80018e0:	d1f4      	bne.n	80018cc <__ledf2+0x6c>
 80018e2:	4316      	orrs	r6, r2
 80018e4:	d01f      	beq.n	8001926 <__ledf2+0xc6>
 80018e6:	2002      	movs	r0, #2
 80018e8:	b003      	add	sp, #12
 80018ea:	bcf0      	pop	{r4, r5, r6, r7}
 80018ec:	46bb      	mov	fp, r7
 80018ee:	46b2      	mov	sl, r6
 80018f0:	46a9      	mov	r9, r5
 80018f2:	46a0      	mov	r8, r4
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f6:	4654      	mov	r4, sl
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d0e7      	beq.n	80018cc <__ledf2+0x6c>
 80018fc:	4584      	cmp	ip, r0
 80018fe:	d1e5      	bne.n	80018cc <__ledf2+0x6c>
 8001900:	4551      	cmp	r1, sl
 8001902:	dce3      	bgt.n	80018cc <__ledf2+0x6c>
 8001904:	db03      	blt.n	800190e <__ledf2+0xae>
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	42b3      	cmp	r3, r6
 800190a:	d8df      	bhi.n	80018cc <__ledf2+0x6c>
 800190c:	d00f      	beq.n	800192e <__ledf2+0xce>
 800190e:	4663      	mov	r3, ip
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0cf      	beq.n	80018b4 <__ledf2+0x54>
 8001914:	4660      	mov	r0, ip
 8001916:	e7e7      	b.n	80018e8 <__ledf2+0x88>
 8001918:	2c00      	cmp	r4, #0
 800191a:	d0c9      	beq.n	80018b0 <__ledf2+0x50>
 800191c:	e7d4      	b.n	80018c8 <__ledf2+0x68>
 800191e:	2000      	movs	r0, #0
 8001920:	2c00      	cmp	r4, #0
 8001922:	d0e1      	beq.n	80018e8 <__ledf2+0x88>
 8001924:	e7d2      	b.n	80018cc <__ledf2+0x6c>
 8001926:	4584      	cmp	ip, r0
 8001928:	d1d0      	bne.n	80018cc <__ledf2+0x6c>
 800192a:	2000      	movs	r0, #0
 800192c:	e7dc      	b.n	80018e8 <__ledf2+0x88>
 800192e:	45c8      	cmp	r8, r9
 8001930:	d8cc      	bhi.n	80018cc <__ledf2+0x6c>
 8001932:	2000      	movs	r0, #0
 8001934:	45c8      	cmp	r8, r9
 8001936:	d2d7      	bcs.n	80018e8 <__ledf2+0x88>
 8001938:	e7e9      	b.n	800190e <__ledf2+0xae>
 800193a:	4584      	cmp	ip, r0
 800193c:	d0e3      	beq.n	8001906 <__ledf2+0xa6>
 800193e:	e7c5      	b.n	80018cc <__ledf2+0x6c>
 8001940:	000007ff 	.word	0x000007ff

08001944 <__aeabi_dmul>:
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	4657      	mov	r7, sl
 8001948:	46de      	mov	lr, fp
 800194a:	464e      	mov	r6, r9
 800194c:	4645      	mov	r5, r8
 800194e:	b5e0      	push	{r5, r6, r7, lr}
 8001950:	001f      	movs	r7, r3
 8001952:	030b      	lsls	r3, r1, #12
 8001954:	0b1b      	lsrs	r3, r3, #12
 8001956:	0016      	movs	r6, r2
 8001958:	469a      	mov	sl, r3
 800195a:	0fca      	lsrs	r2, r1, #31
 800195c:	004b      	lsls	r3, r1, #1
 800195e:	0004      	movs	r4, r0
 8001960:	4693      	mov	fp, r2
 8001962:	b087      	sub	sp, #28
 8001964:	0d5b      	lsrs	r3, r3, #21
 8001966:	d100      	bne.n	800196a <__aeabi_dmul+0x26>
 8001968:	e0d5      	b.n	8001b16 <__aeabi_dmul+0x1d2>
 800196a:	4abb      	ldr	r2, [pc, #748]	@ (8001c58 <__aeabi_dmul+0x314>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d100      	bne.n	8001972 <__aeabi_dmul+0x2e>
 8001970:	e0f8      	b.n	8001b64 <__aeabi_dmul+0x220>
 8001972:	4651      	mov	r1, sl
 8001974:	0f42      	lsrs	r2, r0, #29
 8001976:	00c9      	lsls	r1, r1, #3
 8001978:	430a      	orrs	r2, r1
 800197a:	2180      	movs	r1, #128	@ 0x80
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	4311      	orrs	r1, r2
 8001980:	00c2      	lsls	r2, r0, #3
 8001982:	4691      	mov	r9, r2
 8001984:	4ab5      	ldr	r2, [pc, #724]	@ (8001c5c <__aeabi_dmul+0x318>)
 8001986:	468a      	mov	sl, r1
 8001988:	189d      	adds	r5, r3, r2
 800198a:	2300      	movs	r3, #0
 800198c:	4698      	mov	r8, r3
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	033c      	lsls	r4, r7, #12
 8001992:	007b      	lsls	r3, r7, #1
 8001994:	0ffa      	lsrs	r2, r7, #31
 8001996:	0030      	movs	r0, r6
 8001998:	0b24      	lsrs	r4, r4, #12
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	9200      	str	r2, [sp, #0]
 800199e:	d100      	bne.n	80019a2 <__aeabi_dmul+0x5e>
 80019a0:	e096      	b.n	8001ad0 <__aeabi_dmul+0x18c>
 80019a2:	4aad      	ldr	r2, [pc, #692]	@ (8001c58 <__aeabi_dmul+0x314>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d031      	beq.n	8001a0c <__aeabi_dmul+0xc8>
 80019a8:	0f72      	lsrs	r2, r6, #29
 80019aa:	00e4      	lsls	r4, r4, #3
 80019ac:	4322      	orrs	r2, r4
 80019ae:	2480      	movs	r4, #128	@ 0x80
 80019b0:	0424      	lsls	r4, r4, #16
 80019b2:	4314      	orrs	r4, r2
 80019b4:	4aa9      	ldr	r2, [pc, #676]	@ (8001c5c <__aeabi_dmul+0x318>)
 80019b6:	00f0      	lsls	r0, r6, #3
 80019b8:	4694      	mov	ip, r2
 80019ba:	4463      	add	r3, ip
 80019bc:	195b      	adds	r3, r3, r5
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	4642      	mov	r2, r8
 80019c4:	2600      	movs	r6, #0
 80019c6:	2a0a      	cmp	r2, #10
 80019c8:	dc42      	bgt.n	8001a50 <__aeabi_dmul+0x10c>
 80019ca:	465a      	mov	r2, fp
 80019cc:	9900      	ldr	r1, [sp, #0]
 80019ce:	404a      	eors	r2, r1
 80019d0:	4693      	mov	fp, r2
 80019d2:	4642      	mov	r2, r8
 80019d4:	2a02      	cmp	r2, #2
 80019d6:	dc32      	bgt.n	8001a3e <__aeabi_dmul+0xfa>
 80019d8:	3a01      	subs	r2, #1
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d900      	bls.n	80019e0 <__aeabi_dmul+0x9c>
 80019de:	e149      	b.n	8001c74 <__aeabi_dmul+0x330>
 80019e0:	2e02      	cmp	r6, #2
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dmul+0xa2>
 80019e4:	e0ca      	b.n	8001b7c <__aeabi_dmul+0x238>
 80019e6:	2e01      	cmp	r6, #1
 80019e8:	d13d      	bne.n	8001a66 <__aeabi_dmul+0x122>
 80019ea:	2300      	movs	r3, #0
 80019ec:	2400      	movs	r4, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	0010      	movs	r0, r2
 80019f2:	465a      	mov	r2, fp
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	4323      	orrs	r3, r4
 80019f8:	07d2      	lsls	r2, r2, #31
 80019fa:	4313      	orrs	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	b007      	add	sp, #28
 8001a00:	bcf0      	pop	{r4, r5, r6, r7}
 8001a02:	46bb      	mov	fp, r7
 8001a04:	46b2      	mov	sl, r6
 8001a06:	46a9      	mov	r9, r5
 8001a08:	46a0      	mov	r8, r4
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0c:	4b92      	ldr	r3, [pc, #584]	@ (8001c58 <__aeabi_dmul+0x314>)
 8001a0e:	4326      	orrs	r6, r4
 8001a10:	18eb      	adds	r3, r5, r3
 8001a12:	2e00      	cmp	r6, #0
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dmul+0xd4>
 8001a16:	e0bb      	b.n	8001b90 <__aeabi_dmul+0x24c>
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	465a      	mov	r2, fp
 8001a20:	4688      	mov	r8, r1
 8001a22:	9900      	ldr	r1, [sp, #0]
 8001a24:	404a      	eors	r2, r1
 8001a26:	2180      	movs	r1, #128	@ 0x80
 8001a28:	0109      	lsls	r1, r1, #4
 8001a2a:	468c      	mov	ip, r1
 8001a2c:	0029      	movs	r1, r5
 8001a2e:	4461      	add	r1, ip
 8001a30:	9101      	str	r1, [sp, #4]
 8001a32:	4641      	mov	r1, r8
 8001a34:	290a      	cmp	r1, #10
 8001a36:	dd00      	ble.n	8001a3a <__aeabi_dmul+0xf6>
 8001a38:	e233      	b.n	8001ea2 <__aeabi_dmul+0x55e>
 8001a3a:	4693      	mov	fp, r2
 8001a3c:	2603      	movs	r6, #3
 8001a3e:	4642      	mov	r2, r8
 8001a40:	2701      	movs	r7, #1
 8001a42:	4097      	lsls	r7, r2
 8001a44:	21a6      	movs	r1, #166	@ 0xa6
 8001a46:	003a      	movs	r2, r7
 8001a48:	00c9      	lsls	r1, r1, #3
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	420f      	tst	r7, r1
 8001a4e:	d031      	beq.n	8001ab4 <__aeabi_dmul+0x170>
 8001a50:	9e02      	ldr	r6, [sp, #8]
 8001a52:	2e02      	cmp	r6, #2
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dmul+0x114>
 8001a56:	e235      	b.n	8001ec4 <__aeabi_dmul+0x580>
 8001a58:	2e03      	cmp	r6, #3
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dmul+0x11a>
 8001a5c:	e1d2      	b.n	8001e04 <__aeabi_dmul+0x4c0>
 8001a5e:	4654      	mov	r4, sl
 8001a60:	4648      	mov	r0, r9
 8001a62:	2e01      	cmp	r6, #1
 8001a64:	d0c1      	beq.n	80019ea <__aeabi_dmul+0xa6>
 8001a66:	9a01      	ldr	r2, [sp, #4]
 8001a68:	4b7d      	ldr	r3, [pc, #500]	@ (8001c60 <__aeabi_dmul+0x31c>)
 8001a6a:	4694      	mov	ip, r2
 8001a6c:	4463      	add	r3, ip
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_dmul+0x130>
 8001a72:	e0c0      	b.n	8001bf6 <__aeabi_dmul+0x2b2>
 8001a74:	0742      	lsls	r2, r0, #29
 8001a76:	d009      	beq.n	8001a8c <__aeabi_dmul+0x148>
 8001a78:	220f      	movs	r2, #15
 8001a7a:	4002      	ands	r2, r0
 8001a7c:	2a04      	cmp	r2, #4
 8001a7e:	d005      	beq.n	8001a8c <__aeabi_dmul+0x148>
 8001a80:	1d02      	adds	r2, r0, #4
 8001a82:	4282      	cmp	r2, r0
 8001a84:	4180      	sbcs	r0, r0
 8001a86:	4240      	negs	r0, r0
 8001a88:	1824      	adds	r4, r4, r0
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	01e2      	lsls	r2, r4, #7
 8001a8e:	d506      	bpl.n	8001a9e <__aeabi_dmul+0x15a>
 8001a90:	4b74      	ldr	r3, [pc, #464]	@ (8001c64 <__aeabi_dmul+0x320>)
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	401c      	ands	r4, r3
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	4694      	mov	ip, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4463      	add	r3, ip
 8001a9e:	4a72      	ldr	r2, [pc, #456]	@ (8001c68 <__aeabi_dmul+0x324>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	dc6b      	bgt.n	8001b7c <__aeabi_dmul+0x238>
 8001aa4:	0762      	lsls	r2, r4, #29
 8001aa6:	08c0      	lsrs	r0, r0, #3
 8001aa8:	0264      	lsls	r4, r4, #9
 8001aaa:	055b      	lsls	r3, r3, #21
 8001aac:	4302      	orrs	r2, r0
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	0d5b      	lsrs	r3, r3, #21
 8001ab2:	e79d      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ab4:	2190      	movs	r1, #144	@ 0x90
 8001ab6:	0089      	lsls	r1, r1, #2
 8001ab8:	420f      	tst	r7, r1
 8001aba:	d163      	bne.n	8001b84 <__aeabi_dmul+0x240>
 8001abc:	2288      	movs	r2, #136	@ 0x88
 8001abe:	423a      	tst	r2, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dmul+0x180>
 8001ac2:	e0d7      	b.n	8001c74 <__aeabi_dmul+0x330>
 8001ac4:	9b00      	ldr	r3, [sp, #0]
 8001ac6:	46a2      	mov	sl, r4
 8001ac8:	469b      	mov	fp, r3
 8001aca:	4681      	mov	r9, r0
 8001acc:	9602      	str	r6, [sp, #8]
 8001ace:	e7bf      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001ad0:	0023      	movs	r3, r4
 8001ad2:	4333      	orrs	r3, r6
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dmul+0x194>
 8001ad6:	e07f      	b.n	8001bd8 <__aeabi_dmul+0x294>
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0x19a>
 8001adc:	e1ad      	b.n	8001e3a <__aeabi_dmul+0x4f6>
 8001ade:	0020      	movs	r0, r4
 8001ae0:	f000 fe8c 	bl	80027fc <__clzsi2>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	3a0b      	subs	r2, #11
 8001aea:	201d      	movs	r0, #29
 8001aec:	0019      	movs	r1, r3
 8001aee:	1a82      	subs	r2, r0, r2
 8001af0:	0030      	movs	r0, r6
 8001af2:	3908      	subs	r1, #8
 8001af4:	40d0      	lsrs	r0, r2
 8001af6:	408c      	lsls	r4, r1
 8001af8:	4304      	orrs	r4, r0
 8001afa:	0030      	movs	r0, r6
 8001afc:	4088      	lsls	r0, r1
 8001afe:	4a5b      	ldr	r2, [pc, #364]	@ (8001c6c <__aeabi_dmul+0x328>)
 8001b00:	1aeb      	subs	r3, r5, r3
 8001b02:	4694      	mov	ip, r2
 8001b04:	4463      	add	r3, ip
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	4642      	mov	r2, r8
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	2a0a      	cmp	r2, #10
 8001b10:	dc00      	bgt.n	8001b14 <__aeabi_dmul+0x1d0>
 8001b12:	e75a      	b.n	80019ca <__aeabi_dmul+0x86>
 8001b14:	e79c      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001b16:	4653      	mov	r3, sl
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	d054      	beq.n	8001bc8 <__aeabi_dmul+0x284>
 8001b1e:	4653      	mov	r3, sl
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x1e2>
 8001b24:	e177      	b.n	8001e16 <__aeabi_dmul+0x4d2>
 8001b26:	4650      	mov	r0, sl
 8001b28:	f000 fe68 	bl	80027fc <__clzsi2>
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	425b      	negs	r3, r3
 8001b30:	469c      	mov	ip, r3
 8001b32:	0002      	movs	r2, r0
 8001b34:	4484      	add	ip, r0
 8001b36:	0011      	movs	r1, r2
 8001b38:	4650      	mov	r0, sl
 8001b3a:	3908      	subs	r1, #8
 8001b3c:	4088      	lsls	r0, r1
 8001b3e:	231d      	movs	r3, #29
 8001b40:	4680      	mov	r8, r0
 8001b42:	4660      	mov	r0, ip
 8001b44:	1a1b      	subs	r3, r3, r0
 8001b46:	0020      	movs	r0, r4
 8001b48:	40d8      	lsrs	r0, r3
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	4303      	orrs	r3, r0
 8001b50:	469a      	mov	sl, r3
 8001b52:	0023      	movs	r3, r4
 8001b54:	408b      	lsls	r3, r1
 8001b56:	4699      	mov	r9, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4d44      	ldr	r5, [pc, #272]	@ (8001c6c <__aeabi_dmul+0x328>)
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	1aad      	subs	r5, r5, r2
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	e715      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001b64:	4652      	mov	r2, sl
 8001b66:	4302      	orrs	r2, r0
 8001b68:	4691      	mov	r9, r2
 8001b6a:	d126      	bne.n	8001bba <__aeabi_dmul+0x276>
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	001d      	movs	r5, r3
 8001b70:	2302      	movs	r3, #2
 8001b72:	4692      	mov	sl, r2
 8001b74:	3208      	adds	r2, #8
 8001b76:	4690      	mov	r8, r2
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	e709      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <__aeabi_dmul+0x314>)
 8001b82:	e735      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2480      	movs	r4, #128	@ 0x80
 8001b88:	469b      	mov	fp, r3
 8001b8a:	0324      	lsls	r4, r4, #12
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <__aeabi_dmul+0x314>)
 8001b8e:	e72f      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001b90:	2202      	movs	r2, #2
 8001b92:	4641      	mov	r1, r8
 8001b94:	4311      	orrs	r1, r2
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	4694      	mov	ip, r2
 8001b9c:	002a      	movs	r2, r5
 8001b9e:	4462      	add	r2, ip
 8001ba0:	4688      	mov	r8, r1
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	290a      	cmp	r1, #10
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_dmul+0x266>
 8001ba8:	e752      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001baa:	465a      	mov	r2, fp
 8001bac:	2000      	movs	r0, #0
 8001bae:	9900      	ldr	r1, [sp, #0]
 8001bb0:	0004      	movs	r4, r0
 8001bb2:	404a      	eors	r2, r1
 8001bb4:	4693      	mov	fp, r2
 8001bb6:	2602      	movs	r6, #2
 8001bb8:	e70b      	b.n	80019d2 <__aeabi_dmul+0x8e>
 8001bba:	220c      	movs	r2, #12
 8001bbc:	001d      	movs	r5, r3
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	4681      	mov	r9, r0
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	e6e3      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	469a      	mov	sl, r3
 8001bcc:	3304      	adds	r3, #4
 8001bce:	4698      	mov	r8, r3
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	e6db      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001bd8:	4642      	mov	r2, r8
 8001bda:	3301      	adds	r3, #1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	002b      	movs	r3, r5
 8001be0:	4690      	mov	r8, r2
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	4642      	mov	r2, r8
 8001be8:	2400      	movs	r4, #0
 8001bea:	2000      	movs	r0, #0
 8001bec:	2601      	movs	r6, #1
 8001bee:	2a0a      	cmp	r2, #10
 8001bf0:	dc00      	bgt.n	8001bf4 <__aeabi_dmul+0x2b0>
 8001bf2:	e6ea      	b.n	80019ca <__aeabi_dmul+0x86>
 8001bf4:	e72c      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	2a38      	cmp	r2, #56	@ 0x38
 8001bfc:	dd00      	ble.n	8001c00 <__aeabi_dmul+0x2bc>
 8001bfe:	e6f4      	b.n	80019ea <__aeabi_dmul+0xa6>
 8001c00:	2a1f      	cmp	r2, #31
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_dmul+0x2c2>
 8001c04:	e12a      	b.n	8001e5c <__aeabi_dmul+0x518>
 8001c06:	211f      	movs	r1, #31
 8001c08:	4249      	negs	r1, r1
 8001c0a:	1acb      	subs	r3, r1, r3
 8001c0c:	0021      	movs	r1, r4
 8001c0e:	40d9      	lsrs	r1, r3
 8001c10:	000b      	movs	r3, r1
 8001c12:	2a20      	cmp	r2, #32
 8001c14:	d005      	beq.n	8001c22 <__aeabi_dmul+0x2de>
 8001c16:	4a16      	ldr	r2, [pc, #88]	@ (8001c70 <__aeabi_dmul+0x32c>)
 8001c18:	9d01      	ldr	r5, [sp, #4]
 8001c1a:	4694      	mov	ip, r2
 8001c1c:	4465      	add	r5, ip
 8001c1e:	40ac      	lsls	r4, r5
 8001c20:	4320      	orrs	r0, r4
 8001c22:	1e42      	subs	r2, r0, #1
 8001c24:	4190      	sbcs	r0, r2
 8001c26:	4318      	orrs	r0, r3
 8001c28:	2307      	movs	r3, #7
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	4001      	ands	r1, r0
 8001c30:	4203      	tst	r3, r0
 8001c32:	d00c      	beq.n	8001c4e <__aeabi_dmul+0x30a>
 8001c34:	230f      	movs	r3, #15
 8001c36:	4003      	ands	r3, r0
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dmul+0x2fa>
 8001c3c:	e140      	b.n	8001ec0 <__aeabi_dmul+0x57c>
 8001c3e:	1d03      	adds	r3, r0, #4
 8001c40:	4283      	cmp	r3, r0
 8001c42:	41a4      	sbcs	r4, r4
 8001c44:	0018      	movs	r0, r3
 8001c46:	4264      	negs	r4, r4
 8001c48:	0761      	lsls	r1, r4, #29
 8001c4a:	0264      	lsls	r4, r4, #9
 8001c4c:	0b24      	lsrs	r4, r4, #12
 8001c4e:	08c2      	lsrs	r2, r0, #3
 8001c50:	2300      	movs	r3, #0
 8001c52:	430a      	orrs	r2, r1
 8001c54:	e6cc      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	fffffc01 	.word	0xfffffc01
 8001c60:	000003ff 	.word	0x000003ff
 8001c64:	feffffff 	.word	0xfeffffff
 8001c68:	000007fe 	.word	0x000007fe
 8001c6c:	fffffc0d 	.word	0xfffffc0d
 8001c70:	0000043e 	.word	0x0000043e
 8001c74:	4649      	mov	r1, r9
 8001c76:	464a      	mov	r2, r9
 8001c78:	0409      	lsls	r1, r1, #16
 8001c7a:	0c09      	lsrs	r1, r1, #16
 8001c7c:	000d      	movs	r5, r1
 8001c7e:	0c16      	lsrs	r6, r2, #16
 8001c80:	0c02      	lsrs	r2, r0, #16
 8001c82:	0400      	lsls	r0, r0, #16
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4345      	muls	r5, r0
 8001c88:	46ac      	mov	ip, r5
 8001c8a:	0005      	movs	r5, r0
 8001c8c:	4375      	muls	r5, r6
 8001c8e:	46a8      	mov	r8, r5
 8001c90:	0015      	movs	r5, r2
 8001c92:	000f      	movs	r7, r1
 8001c94:	4375      	muls	r5, r6
 8001c96:	9200      	str	r2, [sp, #0]
 8001c98:	9502      	str	r5, [sp, #8]
 8001c9a:	002a      	movs	r2, r5
 8001c9c:	9d00      	ldr	r5, [sp, #0]
 8001c9e:	436f      	muls	r7, r5
 8001ca0:	4665      	mov	r5, ip
 8001ca2:	0c2d      	lsrs	r5, r5, #16
 8001ca4:	46a9      	mov	r9, r5
 8001ca6:	4447      	add	r7, r8
 8001ca8:	444f      	add	r7, r9
 8001caa:	45b8      	cmp	r8, r7
 8001cac:	d905      	bls.n	8001cba <__aeabi_dmul+0x376>
 8001cae:	0015      	movs	r5, r2
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	0252      	lsls	r2, r2, #9
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	4445      	add	r5, r8
 8001cb8:	9502      	str	r5, [sp, #8]
 8001cba:	0c3d      	lsrs	r5, r7, #16
 8001cbc:	9503      	str	r5, [sp, #12]
 8001cbe:	4665      	mov	r5, ip
 8001cc0:	042d      	lsls	r5, r5, #16
 8001cc2:	043f      	lsls	r7, r7, #16
 8001cc4:	0c2d      	lsrs	r5, r5, #16
 8001cc6:	46ac      	mov	ip, r5
 8001cc8:	003d      	movs	r5, r7
 8001cca:	4465      	add	r5, ip
 8001ccc:	9504      	str	r5, [sp, #16]
 8001cce:	0c25      	lsrs	r5, r4, #16
 8001cd0:	0424      	lsls	r4, r4, #16
 8001cd2:	0c24      	lsrs	r4, r4, #16
 8001cd4:	46ac      	mov	ip, r5
 8001cd6:	0025      	movs	r5, r4
 8001cd8:	4375      	muls	r5, r6
 8001cda:	46a8      	mov	r8, r5
 8001cdc:	4665      	mov	r5, ip
 8001cde:	000f      	movs	r7, r1
 8001ce0:	4369      	muls	r1, r5
 8001ce2:	4441      	add	r1, r8
 8001ce4:	4689      	mov	r9, r1
 8001ce6:	4367      	muls	r7, r4
 8001ce8:	0c39      	lsrs	r1, r7, #16
 8001cea:	4449      	add	r1, r9
 8001cec:	436e      	muls	r6, r5
 8001cee:	4588      	cmp	r8, r1
 8001cf0:	d903      	bls.n	8001cfa <__aeabi_dmul+0x3b6>
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	0252      	lsls	r2, r2, #9
 8001cf6:	4690      	mov	r8, r2
 8001cf8:	4446      	add	r6, r8
 8001cfa:	0c0d      	lsrs	r5, r1, #16
 8001cfc:	46a8      	mov	r8, r5
 8001cfe:	0035      	movs	r5, r6
 8001d00:	4445      	add	r5, r8
 8001d02:	9505      	str	r5, [sp, #20]
 8001d04:	9d03      	ldr	r5, [sp, #12]
 8001d06:	043f      	lsls	r7, r7, #16
 8001d08:	46a8      	mov	r8, r5
 8001d0a:	0c3f      	lsrs	r7, r7, #16
 8001d0c:	0409      	lsls	r1, r1, #16
 8001d0e:	19c9      	adds	r1, r1, r7
 8001d10:	4488      	add	r8, r1
 8001d12:	4645      	mov	r5, r8
 8001d14:	9503      	str	r5, [sp, #12]
 8001d16:	4655      	mov	r5, sl
 8001d18:	042e      	lsls	r6, r5, #16
 8001d1a:	0c36      	lsrs	r6, r6, #16
 8001d1c:	0c2f      	lsrs	r7, r5, #16
 8001d1e:	0035      	movs	r5, r6
 8001d20:	4345      	muls	r5, r0
 8001d22:	4378      	muls	r0, r7
 8001d24:	4681      	mov	r9, r0
 8001d26:	0038      	movs	r0, r7
 8001d28:	46a8      	mov	r8, r5
 8001d2a:	0c2d      	lsrs	r5, r5, #16
 8001d2c:	46aa      	mov	sl, r5
 8001d2e:	9a00      	ldr	r2, [sp, #0]
 8001d30:	4350      	muls	r0, r2
 8001d32:	4372      	muls	r2, r6
 8001d34:	444a      	add	r2, r9
 8001d36:	4452      	add	r2, sl
 8001d38:	4591      	cmp	r9, r2
 8001d3a:	d903      	bls.n	8001d44 <__aeabi_dmul+0x400>
 8001d3c:	2580      	movs	r5, #128	@ 0x80
 8001d3e:	026d      	lsls	r5, r5, #9
 8001d40:	46a9      	mov	r9, r5
 8001d42:	4448      	add	r0, r9
 8001d44:	0c15      	lsrs	r5, r2, #16
 8001d46:	46a9      	mov	r9, r5
 8001d48:	4645      	mov	r5, r8
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	0c2d      	lsrs	r5, r5, #16
 8001d4e:	46a8      	mov	r8, r5
 8001d50:	4665      	mov	r5, ip
 8001d52:	437d      	muls	r5, r7
 8001d54:	0412      	lsls	r2, r2, #16
 8001d56:	4448      	add	r0, r9
 8001d58:	4490      	add	r8, r2
 8001d5a:	46a9      	mov	r9, r5
 8001d5c:	0032      	movs	r2, r6
 8001d5e:	4665      	mov	r5, ip
 8001d60:	4362      	muls	r2, r4
 8001d62:	436e      	muls	r6, r5
 8001d64:	437c      	muls	r4, r7
 8001d66:	0c17      	lsrs	r7, r2, #16
 8001d68:	1936      	adds	r6, r6, r4
 8001d6a:	19bf      	adds	r7, r7, r6
 8001d6c:	42bc      	cmp	r4, r7
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_dmul+0x434>
 8001d70:	2480      	movs	r4, #128	@ 0x80
 8001d72:	0264      	lsls	r4, r4, #9
 8001d74:	46a4      	mov	ip, r4
 8001d76:	44e1      	add	r9, ip
 8001d78:	9c02      	ldr	r4, [sp, #8]
 8001d7a:	9e03      	ldr	r6, [sp, #12]
 8001d7c:	46a4      	mov	ip, r4
 8001d7e:	9d05      	ldr	r5, [sp, #20]
 8001d80:	4466      	add	r6, ip
 8001d82:	428e      	cmp	r6, r1
 8001d84:	4189      	sbcs	r1, r1
 8001d86:	46ac      	mov	ip, r5
 8001d88:	0412      	lsls	r2, r2, #16
 8001d8a:	043c      	lsls	r4, r7, #16
 8001d8c:	0c12      	lsrs	r2, r2, #16
 8001d8e:	18a2      	adds	r2, r4, r2
 8001d90:	4462      	add	r2, ip
 8001d92:	4249      	negs	r1, r1
 8001d94:	1854      	adds	r4, r2, r1
 8001d96:	4446      	add	r6, r8
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	4546      	cmp	r6, r8
 8001d9c:	41a4      	sbcs	r4, r4
 8001d9e:	4682      	mov	sl, r0
 8001da0:	4264      	negs	r4, r4
 8001da2:	46a0      	mov	r8, r4
 8001da4:	42aa      	cmp	r2, r5
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	458c      	cmp	ip, r1
 8001daa:	4189      	sbcs	r1, r1
 8001dac:	44e2      	add	sl, ip
 8001dae:	44d0      	add	r8, sl
 8001db0:	4249      	negs	r1, r1
 8001db2:	4252      	negs	r2, r2
 8001db4:	430a      	orrs	r2, r1
 8001db6:	45a0      	cmp	r8, r4
 8001db8:	41a4      	sbcs	r4, r4
 8001dba:	4582      	cmp	sl, r0
 8001dbc:	4189      	sbcs	r1, r1
 8001dbe:	4264      	negs	r4, r4
 8001dc0:	4249      	negs	r1, r1
 8001dc2:	430c      	orrs	r4, r1
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	0c3f      	lsrs	r7, r7, #16
 8001dc8:	19d2      	adds	r2, r2, r7
 8001dca:	1912      	adds	r2, r2, r4
 8001dcc:	0dcc      	lsrs	r4, r1, #23
 8001dce:	9904      	ldr	r1, [sp, #16]
 8001dd0:	0270      	lsls	r0, r6, #9
 8001dd2:	4308      	orrs	r0, r1
 8001dd4:	1e41      	subs	r1, r0, #1
 8001dd6:	4188      	sbcs	r0, r1
 8001dd8:	4641      	mov	r1, r8
 8001dda:	444a      	add	r2, r9
 8001ddc:	0df6      	lsrs	r6, r6, #23
 8001dde:	0252      	lsls	r2, r2, #9
 8001de0:	4330      	orrs	r0, r6
 8001de2:	0249      	lsls	r1, r1, #9
 8001de4:	4314      	orrs	r4, r2
 8001de6:	4308      	orrs	r0, r1
 8001de8:	01d2      	lsls	r2, r2, #7
 8001dea:	d535      	bpl.n	8001e58 <__aeabi_dmul+0x514>
 8001dec:	2201      	movs	r2, #1
 8001dee:	0843      	lsrs	r3, r0, #1
 8001df0:	4002      	ands	r2, r0
 8001df2:	4313      	orrs	r3, r2
 8001df4:	07e0      	lsls	r0, r4, #31
 8001df6:	4318      	orrs	r0, r3
 8001df8:	0864      	lsrs	r4, r4, #1
 8001dfa:	e634      	b.n	8001a66 <__aeabi_dmul+0x122>
 8001dfc:	9b00      	ldr	r3, [sp, #0]
 8001dfe:	46a2      	mov	sl, r4
 8001e00:	469b      	mov	fp, r3
 8001e02:	4681      	mov	r9, r0
 8001e04:	2480      	movs	r4, #128	@ 0x80
 8001e06:	4653      	mov	r3, sl
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	431c      	orrs	r4, r3
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	464a      	mov	r2, r9
 8001e10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <__aeabi_dmul+0x588>)
 8001e12:	0b24      	lsrs	r4, r4, #12
 8001e14:	e5ec      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001e16:	f000 fcf1 	bl	80027fc <__clzsi2>
 8001e1a:	2315      	movs	r3, #21
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	4484      	add	ip, r0
 8001e20:	0002      	movs	r2, r0
 8001e22:	4663      	mov	r3, ip
 8001e24:	3220      	adds	r2, #32
 8001e26:	2b1c      	cmp	r3, #28
 8001e28:	dc00      	bgt.n	8001e2c <__aeabi_dmul+0x4e8>
 8001e2a:	e684      	b.n	8001b36 <__aeabi_dmul+0x1f2>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4699      	mov	r9, r3
 8001e30:	0023      	movs	r3, r4
 8001e32:	3808      	subs	r0, #8
 8001e34:	4083      	lsls	r3, r0
 8001e36:	469a      	mov	sl, r3
 8001e38:	e68e      	b.n	8001b58 <__aeabi_dmul+0x214>
 8001e3a:	f000 fcdf 	bl	80027fc <__clzsi2>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	0003      	movs	r3, r0
 8001e42:	3215      	adds	r2, #21
 8001e44:	3320      	adds	r3, #32
 8001e46:	2a1c      	cmp	r2, #28
 8001e48:	dc00      	bgt.n	8001e4c <__aeabi_dmul+0x508>
 8001e4a:	e64e      	b.n	8001aea <__aeabi_dmul+0x1a6>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	0034      	movs	r4, r6
 8001e50:	3a08      	subs	r2, #8
 8001e52:	2000      	movs	r0, #0
 8001e54:	4094      	lsls	r4, r2
 8001e56:	e652      	b.n	8001afe <__aeabi_dmul+0x1ba>
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	e604      	b.n	8001a66 <__aeabi_dmul+0x122>
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <__aeabi_dmul+0x58c>)
 8001e5e:	0021      	movs	r1, r4
 8001e60:	469c      	mov	ip, r3
 8001e62:	0003      	movs	r3, r0
 8001e64:	9d01      	ldr	r5, [sp, #4]
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	4465      	add	r5, ip
 8001e6a:	40a9      	lsls	r1, r5
 8001e6c:	4319      	orrs	r1, r3
 8001e6e:	0003      	movs	r3, r0
 8001e70:	40ab      	lsls	r3, r5
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	4183      	sbcs	r3, r0
 8001e76:	4319      	orrs	r1, r3
 8001e78:	0008      	movs	r0, r1
 8001e7a:	40d4      	lsrs	r4, r2
 8001e7c:	074b      	lsls	r3, r1, #29
 8001e7e:	d009      	beq.n	8001e94 <__aeabi_dmul+0x550>
 8001e80:	230f      	movs	r3, #15
 8001e82:	400b      	ands	r3, r1
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d005      	beq.n	8001e94 <__aeabi_dmul+0x550>
 8001e88:	1d0b      	adds	r3, r1, #4
 8001e8a:	428b      	cmp	r3, r1
 8001e8c:	4180      	sbcs	r0, r0
 8001e8e:	4240      	negs	r0, r0
 8001e90:	1824      	adds	r4, r4, r0
 8001e92:	0018      	movs	r0, r3
 8001e94:	0223      	lsls	r3, r4, #8
 8001e96:	d400      	bmi.n	8001e9a <__aeabi_dmul+0x556>
 8001e98:	e6d6      	b.n	8001c48 <__aeabi_dmul+0x304>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	e5a6      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ea2:	290f      	cmp	r1, #15
 8001ea4:	d1aa      	bne.n	8001dfc <__aeabi_dmul+0x4b8>
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	031b      	lsls	r3, r3, #12
 8001eac:	421a      	tst	r2, r3
 8001eae:	d0a9      	beq.n	8001e04 <__aeabi_dmul+0x4c0>
 8001eb0:	421c      	tst	r4, r3
 8001eb2:	d1a7      	bne.n	8001e04 <__aeabi_dmul+0x4c0>
 8001eb4:	431c      	orrs	r4, r3
 8001eb6:	9b00      	ldr	r3, [sp, #0]
 8001eb8:	0002      	movs	r2, r0
 8001eba:	469b      	mov	fp, r3
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <__aeabi_dmul+0x588>)
 8001ebe:	e597      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ec0:	2400      	movs	r4, #0
 8001ec2:	e6c1      	b.n	8001c48 <__aeabi_dmul+0x304>
 8001ec4:	2400      	movs	r4, #0
 8001ec6:	4b01      	ldr	r3, [pc, #4]	@ (8001ecc <__aeabi_dmul+0x588>)
 8001ec8:	0022      	movs	r2, r4
 8001eca:	e591      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ecc:	000007ff 	.word	0x000007ff
 8001ed0:	0000041e 	.word	0x0000041e

08001ed4 <__aeabi_dsub>:
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	464e      	mov	r6, r9
 8001ed8:	4645      	mov	r5, r8
 8001eda:	46de      	mov	lr, fp
 8001edc:	4657      	mov	r7, sl
 8001ede:	b5e0      	push	{r5, r6, r7, lr}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	9000      	str	r0, [sp, #0]
 8001ee4:	9101      	str	r1, [sp, #4]
 8001ee6:	030c      	lsls	r4, r1, #12
 8001ee8:	004f      	lsls	r7, r1, #1
 8001eea:	0fce      	lsrs	r6, r1, #31
 8001eec:	0a61      	lsrs	r1, r4, #9
 8001eee:	9c00      	ldr	r4, [sp, #0]
 8001ef0:	46b0      	mov	r8, r6
 8001ef2:	0f64      	lsrs	r4, r4, #29
 8001ef4:	430c      	orrs	r4, r1
 8001ef6:	9900      	ldr	r1, [sp, #0]
 8001ef8:	0d7f      	lsrs	r7, r7, #21
 8001efa:	00c8      	lsls	r0, r1, #3
 8001efc:	0011      	movs	r1, r2
 8001efe:	001a      	movs	r2, r3
 8001f00:	031b      	lsls	r3, r3, #12
 8001f02:	469c      	mov	ip, r3
 8001f04:	9100      	str	r1, [sp, #0]
 8001f06:	9201      	str	r2, [sp, #4]
 8001f08:	0051      	lsls	r1, r2, #1
 8001f0a:	0d4b      	lsrs	r3, r1, #21
 8001f0c:	4699      	mov	r9, r3
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	9d00      	ldr	r5, [sp, #0]
 8001f12:	0fd9      	lsrs	r1, r3, #31
 8001f14:	4663      	mov	r3, ip
 8001f16:	0f6a      	lsrs	r2, r5, #29
 8001f18:	0a5b      	lsrs	r3, r3, #9
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	00ea      	lsls	r2, r5, #3
 8001f1e:	4694      	mov	ip, r2
 8001f20:	4693      	mov	fp, r2
 8001f22:	4ac1      	ldr	r2, [pc, #772]	@ (8002228 <__aeabi_dsub+0x354>)
 8001f24:	9003      	str	r0, [sp, #12]
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	4591      	cmp	r9, r2
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x5a>
 8001f2c:	e0cd      	b.n	80020ca <__aeabi_dsub+0x1f6>
 8001f2e:	2501      	movs	r5, #1
 8001f30:	4069      	eors	r1, r5
 8001f32:	464d      	mov	r5, r9
 8001f34:	1b7d      	subs	r5, r7, r5
 8001f36:	46aa      	mov	sl, r5
 8001f38:	428e      	cmp	r6, r1
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x6a>
 8001f3c:	e080      	b.n	8002040 <__aeabi_dsub+0x16c>
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	dc00      	bgt.n	8001f44 <__aeabi_dsub+0x70>
 8001f42:	e335      	b.n	80025b0 <__aeabi_dsub+0x6dc>
 8001f44:	4649      	mov	r1, r9
 8001f46:	2900      	cmp	r1, #0
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x78>
 8001f4a:	e0df      	b.n	800210c <__aeabi_dsub+0x238>
 8001f4c:	4297      	cmp	r7, r2
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_dsub+0x7e>
 8001f50:	e194      	b.n	800227c <__aeabi_dsub+0x3a8>
 8001f52:	4652      	mov	r2, sl
 8001f54:	2501      	movs	r5, #1
 8001f56:	2a38      	cmp	r2, #56	@ 0x38
 8001f58:	dc19      	bgt.n	8001f8e <__aeabi_dsub+0xba>
 8001f5a:	2280      	movs	r2, #128	@ 0x80
 8001f5c:	9b02      	ldr	r3, [sp, #8]
 8001f5e:	0412      	lsls	r2, r2, #16
 8001f60:	4313      	orrs	r3, r2
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	4652      	mov	r2, sl
 8001f66:	2a1f      	cmp	r2, #31
 8001f68:	dd00      	ble.n	8001f6c <__aeabi_dsub+0x98>
 8001f6a:	e1e3      	b.n	8002334 <__aeabi_dsub+0x460>
 8001f6c:	4653      	mov	r3, sl
 8001f6e:	2220      	movs	r2, #32
 8001f70:	4661      	mov	r1, ip
 8001f72:	9d02      	ldr	r5, [sp, #8]
 8001f74:	1ad2      	subs	r2, r2, r3
 8001f76:	4095      	lsls	r5, r2
 8001f78:	40d9      	lsrs	r1, r3
 8001f7a:	430d      	orrs	r5, r1
 8001f7c:	4661      	mov	r1, ip
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	1e51      	subs	r1, r2, #1
 8001f84:	418a      	sbcs	r2, r1
 8001f86:	4315      	orrs	r5, r2
 8001f88:	9a02      	ldr	r2, [sp, #8]
 8001f8a:	40da      	lsrs	r2, r3
 8001f8c:	1aa4      	subs	r4, r4, r2
 8001f8e:	1b45      	subs	r5, r0, r5
 8001f90:	42a8      	cmp	r0, r5
 8001f92:	4180      	sbcs	r0, r0
 8001f94:	4240      	negs	r0, r0
 8001f96:	1a24      	subs	r4, r4, r0
 8001f98:	0223      	lsls	r3, r4, #8
 8001f9a:	d400      	bmi.n	8001f9e <__aeabi_dsub+0xca>
 8001f9c:	e13d      	b.n	800221a <__aeabi_dsub+0x346>
 8001f9e:	0264      	lsls	r4, r4, #9
 8001fa0:	0a64      	lsrs	r4, r4, #9
 8001fa2:	2c00      	cmp	r4, #0
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0xd4>
 8001fa6:	e147      	b.n	8002238 <__aeabi_dsub+0x364>
 8001fa8:	0020      	movs	r0, r4
 8001faa:	f000 fc27 	bl	80027fc <__clzsi2>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	0028      	movs	r0, r5
 8001fb6:	1aca      	subs	r2, r1, r3
 8001fb8:	40d0      	lsrs	r0, r2
 8001fba:	409c      	lsls	r4, r3
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	409d      	lsls	r5, r3
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	429f      	cmp	r7, r3
 8001fc4:	dd00      	ble.n	8001fc8 <__aeabi_dsub+0xf4>
 8001fc6:	e177      	b.n	80022b8 <__aeabi_dsub+0x3e4>
 8001fc8:	1bd8      	subs	r0, r3, r7
 8001fca:	3001      	adds	r0, #1
 8001fcc:	1a09      	subs	r1, r1, r0
 8001fce:	002c      	movs	r4, r5
 8001fd0:	408d      	lsls	r5, r1
 8001fd2:	40c4      	lsrs	r4, r0
 8001fd4:	1e6b      	subs	r3, r5, #1
 8001fd6:	419d      	sbcs	r5, r3
 8001fd8:	0013      	movs	r3, r2
 8001fda:	40c2      	lsrs	r2, r0
 8001fdc:	408b      	lsls	r3, r1
 8001fde:	4325      	orrs	r5, r4
 8001fe0:	2700      	movs	r7, #0
 8001fe2:	0014      	movs	r4, r2
 8001fe4:	431d      	orrs	r5, r3
 8001fe6:	076b      	lsls	r3, r5, #29
 8001fe8:	d009      	beq.n	8001ffe <__aeabi_dsub+0x12a>
 8001fea:	230f      	movs	r3, #15
 8001fec:	402b      	ands	r3, r5
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d005      	beq.n	8001ffe <__aeabi_dsub+0x12a>
 8001ff2:	1d2b      	adds	r3, r5, #4
 8001ff4:	42ab      	cmp	r3, r5
 8001ff6:	41ad      	sbcs	r5, r5
 8001ff8:	426d      	negs	r5, r5
 8001ffa:	1964      	adds	r4, r4, r5
 8001ffc:	001d      	movs	r5, r3
 8001ffe:	0223      	lsls	r3, r4, #8
 8002000:	d400      	bmi.n	8002004 <__aeabi_dsub+0x130>
 8002002:	e140      	b.n	8002286 <__aeabi_dsub+0x3b2>
 8002004:	4a88      	ldr	r2, [pc, #544]	@ (8002228 <__aeabi_dsub+0x354>)
 8002006:	3701      	adds	r7, #1
 8002008:	4297      	cmp	r7, r2
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x13a>
 800200c:	e101      	b.n	8002212 <__aeabi_dsub+0x33e>
 800200e:	2601      	movs	r6, #1
 8002010:	4643      	mov	r3, r8
 8002012:	4986      	ldr	r1, [pc, #536]	@ (800222c <__aeabi_dsub+0x358>)
 8002014:	08ed      	lsrs	r5, r5, #3
 8002016:	4021      	ands	r1, r4
 8002018:	074a      	lsls	r2, r1, #29
 800201a:	432a      	orrs	r2, r5
 800201c:	057c      	lsls	r4, r7, #21
 800201e:	024d      	lsls	r5, r1, #9
 8002020:	0b2d      	lsrs	r5, r5, #12
 8002022:	0d64      	lsrs	r4, r4, #21
 8002024:	401e      	ands	r6, r3
 8002026:	0524      	lsls	r4, r4, #20
 8002028:	432c      	orrs	r4, r5
 800202a:	07f6      	lsls	r6, r6, #31
 800202c:	4334      	orrs	r4, r6
 800202e:	0010      	movs	r0, r2
 8002030:	0021      	movs	r1, r4
 8002032:	b005      	add	sp, #20
 8002034:	bcf0      	pop	{r4, r5, r6, r7}
 8002036:	46bb      	mov	fp, r7
 8002038:	46b2      	mov	sl, r6
 800203a:	46a9      	mov	r9, r5
 800203c:	46a0      	mov	r8, r4
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002040:	2d00      	cmp	r5, #0
 8002042:	dc00      	bgt.n	8002046 <__aeabi_dsub+0x172>
 8002044:	e2d0      	b.n	80025e8 <__aeabi_dsub+0x714>
 8002046:	4649      	mov	r1, r9
 8002048:	2900      	cmp	r1, #0
 800204a:	d000      	beq.n	800204e <__aeabi_dsub+0x17a>
 800204c:	e0d4      	b.n	80021f8 <__aeabi_dsub+0x324>
 800204e:	4661      	mov	r1, ip
 8002050:	9b02      	ldr	r3, [sp, #8]
 8002052:	4319      	orrs	r1, r3
 8002054:	d100      	bne.n	8002058 <__aeabi_dsub+0x184>
 8002056:	e12b      	b.n	80022b0 <__aeabi_dsub+0x3dc>
 8002058:	1e69      	subs	r1, r5, #1
 800205a:	2d01      	cmp	r5, #1
 800205c:	d100      	bne.n	8002060 <__aeabi_dsub+0x18c>
 800205e:	e1d9      	b.n	8002414 <__aeabi_dsub+0x540>
 8002060:	4295      	cmp	r5, r2
 8002062:	d100      	bne.n	8002066 <__aeabi_dsub+0x192>
 8002064:	e10a      	b.n	800227c <__aeabi_dsub+0x3a8>
 8002066:	2501      	movs	r5, #1
 8002068:	2938      	cmp	r1, #56	@ 0x38
 800206a:	dc17      	bgt.n	800209c <__aeabi_dsub+0x1c8>
 800206c:	468a      	mov	sl, r1
 800206e:	4653      	mov	r3, sl
 8002070:	2b1f      	cmp	r3, #31
 8002072:	dd00      	ble.n	8002076 <__aeabi_dsub+0x1a2>
 8002074:	e1e7      	b.n	8002446 <__aeabi_dsub+0x572>
 8002076:	2220      	movs	r2, #32
 8002078:	1ad2      	subs	r2, r2, r3
 800207a:	9b02      	ldr	r3, [sp, #8]
 800207c:	4661      	mov	r1, ip
 800207e:	4093      	lsls	r3, r2
 8002080:	001d      	movs	r5, r3
 8002082:	4653      	mov	r3, sl
 8002084:	40d9      	lsrs	r1, r3
 8002086:	4663      	mov	r3, ip
 8002088:	4093      	lsls	r3, r2
 800208a:	001a      	movs	r2, r3
 800208c:	430d      	orrs	r5, r1
 800208e:	1e51      	subs	r1, r2, #1
 8002090:	418a      	sbcs	r2, r1
 8002092:	4653      	mov	r3, sl
 8002094:	4315      	orrs	r5, r2
 8002096:	9a02      	ldr	r2, [sp, #8]
 8002098:	40da      	lsrs	r2, r3
 800209a:	18a4      	adds	r4, r4, r2
 800209c:	182d      	adds	r5, r5, r0
 800209e:	4285      	cmp	r5, r0
 80020a0:	4180      	sbcs	r0, r0
 80020a2:	4240      	negs	r0, r0
 80020a4:	1824      	adds	r4, r4, r0
 80020a6:	0223      	lsls	r3, r4, #8
 80020a8:	d400      	bmi.n	80020ac <__aeabi_dsub+0x1d8>
 80020aa:	e0b6      	b.n	800221a <__aeabi_dsub+0x346>
 80020ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002228 <__aeabi_dsub+0x354>)
 80020ae:	3701      	adds	r7, #1
 80020b0:	429f      	cmp	r7, r3
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x1e2>
 80020b4:	e0ad      	b.n	8002212 <__aeabi_dsub+0x33e>
 80020b6:	2101      	movs	r1, #1
 80020b8:	4b5c      	ldr	r3, [pc, #368]	@ (800222c <__aeabi_dsub+0x358>)
 80020ba:	086a      	lsrs	r2, r5, #1
 80020bc:	401c      	ands	r4, r3
 80020be:	4029      	ands	r1, r5
 80020c0:	430a      	orrs	r2, r1
 80020c2:	07e5      	lsls	r5, r4, #31
 80020c4:	4315      	orrs	r5, r2
 80020c6:	0864      	lsrs	r4, r4, #1
 80020c8:	e78d      	b.n	8001fe6 <__aeabi_dsub+0x112>
 80020ca:	4a59      	ldr	r2, [pc, #356]	@ (8002230 <__aeabi_dsub+0x35c>)
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	4692      	mov	sl, r2
 80020d0:	4662      	mov	r2, ip
 80020d2:	44ba      	add	sl, r7
 80020d4:	431a      	orrs	r2, r3
 80020d6:	d02c      	beq.n	8002132 <__aeabi_dsub+0x25e>
 80020d8:	428e      	cmp	r6, r1
 80020da:	d02e      	beq.n	800213a <__aeabi_dsub+0x266>
 80020dc:	4652      	mov	r2, sl
 80020de:	2a00      	cmp	r2, #0
 80020e0:	d060      	beq.n	80021a4 <__aeabi_dsub+0x2d0>
 80020e2:	2f00      	cmp	r7, #0
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x214>
 80020e6:	e0db      	b.n	80022a0 <__aeabi_dsub+0x3cc>
 80020e8:	4663      	mov	r3, ip
 80020ea:	000e      	movs	r6, r1
 80020ec:	9c02      	ldr	r4, [sp, #8]
 80020ee:	08d8      	lsrs	r0, r3, #3
 80020f0:	0762      	lsls	r2, r4, #29
 80020f2:	4302      	orrs	r2, r0
 80020f4:	08e4      	lsrs	r4, r4, #3
 80020f6:	0013      	movs	r3, r2
 80020f8:	4323      	orrs	r3, r4
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x22a>
 80020fc:	e254      	b.n	80025a8 <__aeabi_dsub+0x6d4>
 80020fe:	2580      	movs	r5, #128	@ 0x80
 8002100:	032d      	lsls	r5, r5, #12
 8002102:	4325      	orrs	r5, r4
 8002104:	032d      	lsls	r5, r5, #12
 8002106:	4c48      	ldr	r4, [pc, #288]	@ (8002228 <__aeabi_dsub+0x354>)
 8002108:	0b2d      	lsrs	r5, r5, #12
 800210a:	e78c      	b.n	8002026 <__aeabi_dsub+0x152>
 800210c:	4661      	mov	r1, ip
 800210e:	9b02      	ldr	r3, [sp, #8]
 8002110:	4319      	orrs	r1, r3
 8002112:	d100      	bne.n	8002116 <__aeabi_dsub+0x242>
 8002114:	e0cc      	b.n	80022b0 <__aeabi_dsub+0x3dc>
 8002116:	0029      	movs	r1, r5
 8002118:	3901      	subs	r1, #1
 800211a:	2d01      	cmp	r5, #1
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x24c>
 800211e:	e188      	b.n	8002432 <__aeabi_dsub+0x55e>
 8002120:	4295      	cmp	r5, r2
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x252>
 8002124:	e0aa      	b.n	800227c <__aeabi_dsub+0x3a8>
 8002126:	2501      	movs	r5, #1
 8002128:	2938      	cmp	r1, #56	@ 0x38
 800212a:	dd00      	ble.n	800212e <__aeabi_dsub+0x25a>
 800212c:	e72f      	b.n	8001f8e <__aeabi_dsub+0xba>
 800212e:	468a      	mov	sl, r1
 8002130:	e718      	b.n	8001f64 <__aeabi_dsub+0x90>
 8002132:	2201      	movs	r2, #1
 8002134:	4051      	eors	r1, r2
 8002136:	428e      	cmp	r6, r1
 8002138:	d1d0      	bne.n	80020dc <__aeabi_dsub+0x208>
 800213a:	4653      	mov	r3, sl
 800213c:	2b00      	cmp	r3, #0
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x26e>
 8002140:	e0be      	b.n	80022c0 <__aeabi_dsub+0x3ec>
 8002142:	2f00      	cmp	r7, #0
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x274>
 8002146:	e138      	b.n	80023ba <__aeabi_dsub+0x4e6>
 8002148:	46ca      	mov	sl, r9
 800214a:	0022      	movs	r2, r4
 800214c:	4302      	orrs	r2, r0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x27e>
 8002150:	e1e2      	b.n	8002518 <__aeabi_dsub+0x644>
 8002152:	4653      	mov	r3, sl
 8002154:	1e59      	subs	r1, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x288>
 800215a:	e20d      	b.n	8002578 <__aeabi_dsub+0x6a4>
 800215c:	4a32      	ldr	r2, [pc, #200]	@ (8002228 <__aeabi_dsub+0x354>)
 800215e:	4592      	cmp	sl, r2
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x290>
 8002162:	e1d2      	b.n	800250a <__aeabi_dsub+0x636>
 8002164:	2701      	movs	r7, #1
 8002166:	2938      	cmp	r1, #56	@ 0x38
 8002168:	dc13      	bgt.n	8002192 <__aeabi_dsub+0x2be>
 800216a:	291f      	cmp	r1, #31
 800216c:	dd00      	ble.n	8002170 <__aeabi_dsub+0x29c>
 800216e:	e1ee      	b.n	800254e <__aeabi_dsub+0x67a>
 8002170:	2220      	movs	r2, #32
 8002172:	9b02      	ldr	r3, [sp, #8]
 8002174:	1a52      	subs	r2, r2, r1
 8002176:	0025      	movs	r5, r4
 8002178:	0007      	movs	r7, r0
 800217a:	469a      	mov	sl, r3
 800217c:	40cc      	lsrs	r4, r1
 800217e:	4090      	lsls	r0, r2
 8002180:	4095      	lsls	r5, r2
 8002182:	40cf      	lsrs	r7, r1
 8002184:	44a2      	add	sl, r4
 8002186:	1e42      	subs	r2, r0, #1
 8002188:	4190      	sbcs	r0, r2
 800218a:	4653      	mov	r3, sl
 800218c:	432f      	orrs	r7, r5
 800218e:	4307      	orrs	r7, r0
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	003d      	movs	r5, r7
 8002194:	4465      	add	r5, ip
 8002196:	4565      	cmp	r5, ip
 8002198:	4192      	sbcs	r2, r2
 800219a:	9b02      	ldr	r3, [sp, #8]
 800219c:	4252      	negs	r2, r2
 800219e:	464f      	mov	r7, r9
 80021a0:	18d4      	adds	r4, r2, r3
 80021a2:	e780      	b.n	80020a6 <__aeabi_dsub+0x1d2>
 80021a4:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <__aeabi_dsub+0x360>)
 80021a6:	1c7d      	adds	r5, r7, #1
 80021a8:	4215      	tst	r5, r2
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x2da>
 80021ac:	e0aa      	b.n	8002304 <__aeabi_dsub+0x430>
 80021ae:	4662      	mov	r2, ip
 80021b0:	0025      	movs	r5, r4
 80021b2:	9b02      	ldr	r3, [sp, #8]
 80021b4:	4305      	orrs	r5, r0
 80021b6:	431a      	orrs	r2, r3
 80021b8:	2f00      	cmp	r7, #0
 80021ba:	d000      	beq.n	80021be <__aeabi_dsub+0x2ea>
 80021bc:	e0f5      	b.n	80023aa <__aeabi_dsub+0x4d6>
 80021be:	2d00      	cmp	r5, #0
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x2f0>
 80021c2:	e16b      	b.n	800249c <__aeabi_dsub+0x5c8>
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x2f6>
 80021c8:	e152      	b.n	8002470 <__aeabi_dsub+0x59c>
 80021ca:	4663      	mov	r3, ip
 80021cc:	1ac5      	subs	r5, r0, r3
 80021ce:	9b02      	ldr	r3, [sp, #8]
 80021d0:	1ae2      	subs	r2, r4, r3
 80021d2:	42a8      	cmp	r0, r5
 80021d4:	419b      	sbcs	r3, r3
 80021d6:	425b      	negs	r3, r3
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	021a      	lsls	r2, r3, #8
 80021dc:	d400      	bmi.n	80021e0 <__aeabi_dsub+0x30c>
 80021de:	e1d5      	b.n	800258c <__aeabi_dsub+0x6b8>
 80021e0:	4663      	mov	r3, ip
 80021e2:	1a1d      	subs	r5, r3, r0
 80021e4:	45ac      	cmp	ip, r5
 80021e6:	4192      	sbcs	r2, r2
 80021e8:	2601      	movs	r6, #1
 80021ea:	9b02      	ldr	r3, [sp, #8]
 80021ec:	4252      	negs	r2, r2
 80021ee:	1b1c      	subs	r4, r3, r4
 80021f0:	4688      	mov	r8, r1
 80021f2:	1aa4      	subs	r4, r4, r2
 80021f4:	400e      	ands	r6, r1
 80021f6:	e6f6      	b.n	8001fe6 <__aeabi_dsub+0x112>
 80021f8:	4297      	cmp	r7, r2
 80021fa:	d03f      	beq.n	800227c <__aeabi_dsub+0x3a8>
 80021fc:	4652      	mov	r2, sl
 80021fe:	2501      	movs	r5, #1
 8002200:	2a38      	cmp	r2, #56	@ 0x38
 8002202:	dd00      	ble.n	8002206 <__aeabi_dsub+0x332>
 8002204:	e74a      	b.n	800209c <__aeabi_dsub+0x1c8>
 8002206:	2280      	movs	r2, #128	@ 0x80
 8002208:	9b02      	ldr	r3, [sp, #8]
 800220a:	0412      	lsls	r2, r2, #16
 800220c:	4313      	orrs	r3, r2
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	e72d      	b.n	800206e <__aeabi_dsub+0x19a>
 8002212:	003c      	movs	r4, r7
 8002214:	2500      	movs	r5, #0
 8002216:	2200      	movs	r2, #0
 8002218:	e705      	b.n	8002026 <__aeabi_dsub+0x152>
 800221a:	2307      	movs	r3, #7
 800221c:	402b      	ands	r3, r5
 800221e:	2b00      	cmp	r3, #0
 8002220:	d000      	beq.n	8002224 <__aeabi_dsub+0x350>
 8002222:	e6e2      	b.n	8001fea <__aeabi_dsub+0x116>
 8002224:	e06b      	b.n	80022fe <__aeabi_dsub+0x42a>
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	000007ff 	.word	0x000007ff
 800222c:	ff7fffff 	.word	0xff7fffff
 8002230:	fffff801 	.word	0xfffff801
 8002234:	000007fe 	.word	0x000007fe
 8002238:	0028      	movs	r0, r5
 800223a:	f000 fadf 	bl	80027fc <__clzsi2>
 800223e:	0003      	movs	r3, r0
 8002240:	3318      	adds	r3, #24
 8002242:	2b1f      	cmp	r3, #31
 8002244:	dc00      	bgt.n	8002248 <__aeabi_dsub+0x374>
 8002246:	e6b4      	b.n	8001fb2 <__aeabi_dsub+0xde>
 8002248:	002a      	movs	r2, r5
 800224a:	3808      	subs	r0, #8
 800224c:	4082      	lsls	r2, r0
 800224e:	429f      	cmp	r7, r3
 8002250:	dd00      	ble.n	8002254 <__aeabi_dsub+0x380>
 8002252:	e0b9      	b.n	80023c8 <__aeabi_dsub+0x4f4>
 8002254:	1bdb      	subs	r3, r3, r7
 8002256:	1c58      	adds	r0, r3, #1
 8002258:	281f      	cmp	r0, #31
 800225a:	dc00      	bgt.n	800225e <__aeabi_dsub+0x38a>
 800225c:	e1a0      	b.n	80025a0 <__aeabi_dsub+0x6cc>
 800225e:	0015      	movs	r5, r2
 8002260:	3b1f      	subs	r3, #31
 8002262:	40dd      	lsrs	r5, r3
 8002264:	2820      	cmp	r0, #32
 8002266:	d005      	beq.n	8002274 <__aeabi_dsub+0x3a0>
 8002268:	2340      	movs	r3, #64	@ 0x40
 800226a:	1a1b      	subs	r3, r3, r0
 800226c:	409a      	lsls	r2, r3
 800226e:	1e53      	subs	r3, r2, #1
 8002270:	419a      	sbcs	r2, r3
 8002272:	4315      	orrs	r5, r2
 8002274:	2307      	movs	r3, #7
 8002276:	2700      	movs	r7, #0
 8002278:	402b      	ands	r3, r5
 800227a:	e7d0      	b.n	800221e <__aeabi_dsub+0x34a>
 800227c:	08c0      	lsrs	r0, r0, #3
 800227e:	0762      	lsls	r2, r4, #29
 8002280:	4302      	orrs	r2, r0
 8002282:	08e4      	lsrs	r4, r4, #3
 8002284:	e737      	b.n	80020f6 <__aeabi_dsub+0x222>
 8002286:	08ea      	lsrs	r2, r5, #3
 8002288:	0763      	lsls	r3, r4, #29
 800228a:	431a      	orrs	r2, r3
 800228c:	4bd3      	ldr	r3, [pc, #844]	@ (80025dc <__aeabi_dsub+0x708>)
 800228e:	08e4      	lsrs	r4, r4, #3
 8002290:	429f      	cmp	r7, r3
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x3c2>
 8002294:	e72f      	b.n	80020f6 <__aeabi_dsub+0x222>
 8002296:	0324      	lsls	r4, r4, #12
 8002298:	0b25      	lsrs	r5, r4, #12
 800229a:	057c      	lsls	r4, r7, #21
 800229c:	0d64      	lsrs	r4, r4, #21
 800229e:	e6c2      	b.n	8002026 <__aeabi_dsub+0x152>
 80022a0:	46ca      	mov	sl, r9
 80022a2:	0022      	movs	r2, r4
 80022a4:	4302      	orrs	r2, r0
 80022a6:	d158      	bne.n	800235a <__aeabi_dsub+0x486>
 80022a8:	4663      	mov	r3, ip
 80022aa:	000e      	movs	r6, r1
 80022ac:	9c02      	ldr	r4, [sp, #8]
 80022ae:	9303      	str	r3, [sp, #12]
 80022b0:	9b03      	ldr	r3, [sp, #12]
 80022b2:	4657      	mov	r7, sl
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	e7e7      	b.n	8002288 <__aeabi_dsub+0x3b4>
 80022b8:	4cc9      	ldr	r4, [pc, #804]	@ (80025e0 <__aeabi_dsub+0x70c>)
 80022ba:	1aff      	subs	r7, r7, r3
 80022bc:	4014      	ands	r4, r2
 80022be:	e692      	b.n	8001fe6 <__aeabi_dsub+0x112>
 80022c0:	4dc8      	ldr	r5, [pc, #800]	@ (80025e4 <__aeabi_dsub+0x710>)
 80022c2:	1c7a      	adds	r2, r7, #1
 80022c4:	422a      	tst	r2, r5
 80022c6:	d000      	beq.n	80022ca <__aeabi_dsub+0x3f6>
 80022c8:	e084      	b.n	80023d4 <__aeabi_dsub+0x500>
 80022ca:	0022      	movs	r2, r4
 80022cc:	4302      	orrs	r2, r0
 80022ce:	2f00      	cmp	r7, #0
 80022d0:	d000      	beq.n	80022d4 <__aeabi_dsub+0x400>
 80022d2:	e0ef      	b.n	80024b4 <__aeabi_dsub+0x5e0>
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x406>
 80022d8:	e0e5      	b.n	80024a6 <__aeabi_dsub+0x5d2>
 80022da:	4662      	mov	r2, ip
 80022dc:	9902      	ldr	r1, [sp, #8]
 80022de:	430a      	orrs	r2, r1
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x410>
 80022e2:	e0c5      	b.n	8002470 <__aeabi_dsub+0x59c>
 80022e4:	4663      	mov	r3, ip
 80022e6:	18c5      	adds	r5, r0, r3
 80022e8:	468c      	mov	ip, r1
 80022ea:	4285      	cmp	r5, r0
 80022ec:	4180      	sbcs	r0, r0
 80022ee:	4464      	add	r4, ip
 80022f0:	4240      	negs	r0, r0
 80022f2:	1824      	adds	r4, r4, r0
 80022f4:	0223      	lsls	r3, r4, #8
 80022f6:	d502      	bpl.n	80022fe <__aeabi_dsub+0x42a>
 80022f8:	4bb9      	ldr	r3, [pc, #740]	@ (80025e0 <__aeabi_dsub+0x70c>)
 80022fa:	3701      	adds	r7, #1
 80022fc:	401c      	ands	r4, r3
 80022fe:	46ba      	mov	sl, r7
 8002300:	9503      	str	r5, [sp, #12]
 8002302:	e7d5      	b.n	80022b0 <__aeabi_dsub+0x3dc>
 8002304:	4662      	mov	r2, ip
 8002306:	1a85      	subs	r5, r0, r2
 8002308:	42a8      	cmp	r0, r5
 800230a:	4192      	sbcs	r2, r2
 800230c:	4252      	negs	r2, r2
 800230e:	4691      	mov	r9, r2
 8002310:	9b02      	ldr	r3, [sp, #8]
 8002312:	1ae3      	subs	r3, r4, r3
 8002314:	001a      	movs	r2, r3
 8002316:	464b      	mov	r3, r9
 8002318:	1ad2      	subs	r2, r2, r3
 800231a:	0013      	movs	r3, r2
 800231c:	4691      	mov	r9, r2
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	d46c      	bmi.n	80023fc <__aeabi_dsub+0x528>
 8002322:	464a      	mov	r2, r9
 8002324:	464c      	mov	r4, r9
 8002326:	432a      	orrs	r2, r5
 8002328:	d000      	beq.n	800232c <__aeabi_dsub+0x458>
 800232a:	e63a      	b.n	8001fa2 <__aeabi_dsub+0xce>
 800232c:	2600      	movs	r6, #0
 800232e:	2400      	movs	r4, #0
 8002330:	2500      	movs	r5, #0
 8002332:	e678      	b.n	8002026 <__aeabi_dsub+0x152>
 8002334:	9902      	ldr	r1, [sp, #8]
 8002336:	4653      	mov	r3, sl
 8002338:	000d      	movs	r5, r1
 800233a:	3a20      	subs	r2, #32
 800233c:	40d5      	lsrs	r5, r2
 800233e:	2b20      	cmp	r3, #32
 8002340:	d006      	beq.n	8002350 <__aeabi_dsub+0x47c>
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	000b      	movs	r3, r1
 8002348:	4093      	lsls	r3, r2
 800234a:	4662      	mov	r2, ip
 800234c:	431a      	orrs	r2, r3
 800234e:	4693      	mov	fp, r2
 8002350:	465b      	mov	r3, fp
 8002352:	1e5a      	subs	r2, r3, #1
 8002354:	4193      	sbcs	r3, r2
 8002356:	431d      	orrs	r5, r3
 8002358:	e619      	b.n	8001f8e <__aeabi_dsub+0xba>
 800235a:	4653      	mov	r3, sl
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d100      	bne.n	8002364 <__aeabi_dsub+0x490>
 8002362:	e0c6      	b.n	80024f2 <__aeabi_dsub+0x61e>
 8002364:	4e9d      	ldr	r6, [pc, #628]	@ (80025dc <__aeabi_dsub+0x708>)
 8002366:	45b2      	cmp	sl, r6
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x498>
 800236a:	e6bd      	b.n	80020e8 <__aeabi_dsub+0x214>
 800236c:	4688      	mov	r8, r1
 800236e:	000e      	movs	r6, r1
 8002370:	2501      	movs	r5, #1
 8002372:	2a38      	cmp	r2, #56	@ 0x38
 8002374:	dc10      	bgt.n	8002398 <__aeabi_dsub+0x4c4>
 8002376:	2a1f      	cmp	r2, #31
 8002378:	dc7f      	bgt.n	800247a <__aeabi_dsub+0x5a6>
 800237a:	2120      	movs	r1, #32
 800237c:	0025      	movs	r5, r4
 800237e:	1a89      	subs	r1, r1, r2
 8002380:	0007      	movs	r7, r0
 8002382:	4088      	lsls	r0, r1
 8002384:	408d      	lsls	r5, r1
 8002386:	40d7      	lsrs	r7, r2
 8002388:	40d4      	lsrs	r4, r2
 800238a:	1e41      	subs	r1, r0, #1
 800238c:	4188      	sbcs	r0, r1
 800238e:	9b02      	ldr	r3, [sp, #8]
 8002390:	433d      	orrs	r5, r7
 8002392:	1b1b      	subs	r3, r3, r4
 8002394:	4305      	orrs	r5, r0
 8002396:	9302      	str	r3, [sp, #8]
 8002398:	4662      	mov	r2, ip
 800239a:	1b55      	subs	r5, r2, r5
 800239c:	45ac      	cmp	ip, r5
 800239e:	4192      	sbcs	r2, r2
 80023a0:	9b02      	ldr	r3, [sp, #8]
 80023a2:	4252      	negs	r2, r2
 80023a4:	464f      	mov	r7, r9
 80023a6:	1a9c      	subs	r4, r3, r2
 80023a8:	e5f6      	b.n	8001f98 <__aeabi_dsub+0xc4>
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	d000      	beq.n	80023b0 <__aeabi_dsub+0x4dc>
 80023ae:	e0b7      	b.n	8002520 <__aeabi_dsub+0x64c>
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d100      	bne.n	80023b6 <__aeabi_dsub+0x4e2>
 80023b4:	e0f0      	b.n	8002598 <__aeabi_dsub+0x6c4>
 80023b6:	2601      	movs	r6, #1
 80023b8:	400e      	ands	r6, r1
 80023ba:	4663      	mov	r3, ip
 80023bc:	9802      	ldr	r0, [sp, #8]
 80023be:	08d9      	lsrs	r1, r3, #3
 80023c0:	0742      	lsls	r2, r0, #29
 80023c2:	430a      	orrs	r2, r1
 80023c4:	08c4      	lsrs	r4, r0, #3
 80023c6:	e696      	b.n	80020f6 <__aeabi_dsub+0x222>
 80023c8:	4c85      	ldr	r4, [pc, #532]	@ (80025e0 <__aeabi_dsub+0x70c>)
 80023ca:	1aff      	subs	r7, r7, r3
 80023cc:	4014      	ands	r4, r2
 80023ce:	0762      	lsls	r2, r4, #29
 80023d0:	08e4      	lsrs	r4, r4, #3
 80023d2:	e760      	b.n	8002296 <__aeabi_dsub+0x3c2>
 80023d4:	4981      	ldr	r1, [pc, #516]	@ (80025dc <__aeabi_dsub+0x708>)
 80023d6:	428a      	cmp	r2, r1
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x508>
 80023da:	e0c9      	b.n	8002570 <__aeabi_dsub+0x69c>
 80023dc:	4663      	mov	r3, ip
 80023de:	18c1      	adds	r1, r0, r3
 80023e0:	4281      	cmp	r1, r0
 80023e2:	4180      	sbcs	r0, r0
 80023e4:	9b02      	ldr	r3, [sp, #8]
 80023e6:	4240      	negs	r0, r0
 80023e8:	18e3      	adds	r3, r4, r3
 80023ea:	181b      	adds	r3, r3, r0
 80023ec:	07dd      	lsls	r5, r3, #31
 80023ee:	085c      	lsrs	r4, r3, #1
 80023f0:	2307      	movs	r3, #7
 80023f2:	0849      	lsrs	r1, r1, #1
 80023f4:	430d      	orrs	r5, r1
 80023f6:	0017      	movs	r7, r2
 80023f8:	402b      	ands	r3, r5
 80023fa:	e710      	b.n	800221e <__aeabi_dsub+0x34a>
 80023fc:	4663      	mov	r3, ip
 80023fe:	1a1d      	subs	r5, r3, r0
 8002400:	45ac      	cmp	ip, r5
 8002402:	4192      	sbcs	r2, r2
 8002404:	2601      	movs	r6, #1
 8002406:	9b02      	ldr	r3, [sp, #8]
 8002408:	4252      	negs	r2, r2
 800240a:	1b1c      	subs	r4, r3, r4
 800240c:	4688      	mov	r8, r1
 800240e:	1aa4      	subs	r4, r4, r2
 8002410:	400e      	ands	r6, r1
 8002412:	e5c6      	b.n	8001fa2 <__aeabi_dsub+0xce>
 8002414:	4663      	mov	r3, ip
 8002416:	18c5      	adds	r5, r0, r3
 8002418:	9b02      	ldr	r3, [sp, #8]
 800241a:	4285      	cmp	r5, r0
 800241c:	4180      	sbcs	r0, r0
 800241e:	469c      	mov	ip, r3
 8002420:	4240      	negs	r0, r0
 8002422:	4464      	add	r4, ip
 8002424:	1824      	adds	r4, r4, r0
 8002426:	2701      	movs	r7, #1
 8002428:	0223      	lsls	r3, r4, #8
 800242a:	d400      	bmi.n	800242e <__aeabi_dsub+0x55a>
 800242c:	e6f5      	b.n	800221a <__aeabi_dsub+0x346>
 800242e:	2702      	movs	r7, #2
 8002430:	e641      	b.n	80020b6 <__aeabi_dsub+0x1e2>
 8002432:	4663      	mov	r3, ip
 8002434:	1ac5      	subs	r5, r0, r3
 8002436:	42a8      	cmp	r0, r5
 8002438:	4180      	sbcs	r0, r0
 800243a:	9b02      	ldr	r3, [sp, #8]
 800243c:	4240      	negs	r0, r0
 800243e:	1ae4      	subs	r4, r4, r3
 8002440:	2701      	movs	r7, #1
 8002442:	1a24      	subs	r4, r4, r0
 8002444:	e5a8      	b.n	8001f98 <__aeabi_dsub+0xc4>
 8002446:	9d02      	ldr	r5, [sp, #8]
 8002448:	4652      	mov	r2, sl
 800244a:	002b      	movs	r3, r5
 800244c:	3a20      	subs	r2, #32
 800244e:	40d3      	lsrs	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	4653      	mov	r3, sl
 8002454:	2b20      	cmp	r3, #32
 8002456:	d006      	beq.n	8002466 <__aeabi_dsub+0x592>
 8002458:	2240      	movs	r2, #64	@ 0x40
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	002b      	movs	r3, r5
 800245e:	4093      	lsls	r3, r2
 8002460:	4662      	mov	r2, ip
 8002462:	431a      	orrs	r2, r3
 8002464:	4693      	mov	fp, r2
 8002466:	465d      	mov	r5, fp
 8002468:	1e6b      	subs	r3, r5, #1
 800246a:	419d      	sbcs	r5, r3
 800246c:	430d      	orrs	r5, r1
 800246e:	e615      	b.n	800209c <__aeabi_dsub+0x1c8>
 8002470:	0762      	lsls	r2, r4, #29
 8002472:	08c0      	lsrs	r0, r0, #3
 8002474:	4302      	orrs	r2, r0
 8002476:	08e4      	lsrs	r4, r4, #3
 8002478:	e70d      	b.n	8002296 <__aeabi_dsub+0x3c2>
 800247a:	0011      	movs	r1, r2
 800247c:	0027      	movs	r7, r4
 800247e:	3920      	subs	r1, #32
 8002480:	40cf      	lsrs	r7, r1
 8002482:	2a20      	cmp	r2, #32
 8002484:	d005      	beq.n	8002492 <__aeabi_dsub+0x5be>
 8002486:	2140      	movs	r1, #64	@ 0x40
 8002488:	1a8a      	subs	r2, r1, r2
 800248a:	4094      	lsls	r4, r2
 800248c:	0025      	movs	r5, r4
 800248e:	4305      	orrs	r5, r0
 8002490:	9503      	str	r5, [sp, #12]
 8002492:	9d03      	ldr	r5, [sp, #12]
 8002494:	1e6a      	subs	r2, r5, #1
 8002496:	4195      	sbcs	r5, r2
 8002498:	433d      	orrs	r5, r7
 800249a:	e77d      	b.n	8002398 <__aeabi_dsub+0x4c4>
 800249c:	2a00      	cmp	r2, #0
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x5ce>
 80024a0:	e744      	b.n	800232c <__aeabi_dsub+0x458>
 80024a2:	2601      	movs	r6, #1
 80024a4:	400e      	ands	r6, r1
 80024a6:	4663      	mov	r3, ip
 80024a8:	08d9      	lsrs	r1, r3, #3
 80024aa:	9b02      	ldr	r3, [sp, #8]
 80024ac:	075a      	lsls	r2, r3, #29
 80024ae:	430a      	orrs	r2, r1
 80024b0:	08dc      	lsrs	r4, r3, #3
 80024b2:	e6f0      	b.n	8002296 <__aeabi_dsub+0x3c2>
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d028      	beq.n	800250a <__aeabi_dsub+0x636>
 80024b8:	4662      	mov	r2, ip
 80024ba:	9f02      	ldr	r7, [sp, #8]
 80024bc:	08c0      	lsrs	r0, r0, #3
 80024be:	433a      	orrs	r2, r7
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x5f0>
 80024c2:	e6dc      	b.n	800227e <__aeabi_dsub+0x3aa>
 80024c4:	0762      	lsls	r2, r4, #29
 80024c6:	4310      	orrs	r0, r2
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	08e4      	lsrs	r4, r4, #3
 80024cc:	0312      	lsls	r2, r2, #12
 80024ce:	4214      	tst	r4, r2
 80024d0:	d009      	beq.n	80024e6 <__aeabi_dsub+0x612>
 80024d2:	08fd      	lsrs	r5, r7, #3
 80024d4:	4215      	tst	r5, r2
 80024d6:	d106      	bne.n	80024e6 <__aeabi_dsub+0x612>
 80024d8:	4663      	mov	r3, ip
 80024da:	2601      	movs	r6, #1
 80024dc:	002c      	movs	r4, r5
 80024de:	08d8      	lsrs	r0, r3, #3
 80024e0:	077b      	lsls	r3, r7, #29
 80024e2:	4318      	orrs	r0, r3
 80024e4:	400e      	ands	r6, r1
 80024e6:	0f42      	lsrs	r2, r0, #29
 80024e8:	00c0      	lsls	r0, r0, #3
 80024ea:	08c0      	lsrs	r0, r0, #3
 80024ec:	0752      	lsls	r2, r2, #29
 80024ee:	4302      	orrs	r2, r0
 80024f0:	e601      	b.n	80020f6 <__aeabi_dsub+0x222>
 80024f2:	4663      	mov	r3, ip
 80024f4:	1a1d      	subs	r5, r3, r0
 80024f6:	45ac      	cmp	ip, r5
 80024f8:	4192      	sbcs	r2, r2
 80024fa:	9b02      	ldr	r3, [sp, #8]
 80024fc:	4252      	negs	r2, r2
 80024fe:	1b1c      	subs	r4, r3, r4
 8002500:	000e      	movs	r6, r1
 8002502:	4688      	mov	r8, r1
 8002504:	2701      	movs	r7, #1
 8002506:	1aa4      	subs	r4, r4, r2
 8002508:	e546      	b.n	8001f98 <__aeabi_dsub+0xc4>
 800250a:	4663      	mov	r3, ip
 800250c:	08d9      	lsrs	r1, r3, #3
 800250e:	9b02      	ldr	r3, [sp, #8]
 8002510:	075a      	lsls	r2, r3, #29
 8002512:	430a      	orrs	r2, r1
 8002514:	08dc      	lsrs	r4, r3, #3
 8002516:	e5ee      	b.n	80020f6 <__aeabi_dsub+0x222>
 8002518:	4663      	mov	r3, ip
 800251a:	9c02      	ldr	r4, [sp, #8]
 800251c:	9303      	str	r3, [sp, #12]
 800251e:	e6c7      	b.n	80022b0 <__aeabi_dsub+0x3dc>
 8002520:	08c0      	lsrs	r0, r0, #3
 8002522:	2a00      	cmp	r2, #0
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x654>
 8002526:	e6aa      	b.n	800227e <__aeabi_dsub+0x3aa>
 8002528:	0762      	lsls	r2, r4, #29
 800252a:	4310      	orrs	r0, r2
 800252c:	2280      	movs	r2, #128	@ 0x80
 800252e:	08e4      	lsrs	r4, r4, #3
 8002530:	0312      	lsls	r2, r2, #12
 8002532:	4214      	tst	r4, r2
 8002534:	d0d7      	beq.n	80024e6 <__aeabi_dsub+0x612>
 8002536:	9f02      	ldr	r7, [sp, #8]
 8002538:	08fd      	lsrs	r5, r7, #3
 800253a:	4215      	tst	r5, r2
 800253c:	d1d3      	bne.n	80024e6 <__aeabi_dsub+0x612>
 800253e:	4663      	mov	r3, ip
 8002540:	2601      	movs	r6, #1
 8002542:	08d8      	lsrs	r0, r3, #3
 8002544:	077b      	lsls	r3, r7, #29
 8002546:	002c      	movs	r4, r5
 8002548:	4318      	orrs	r0, r3
 800254a:	400e      	ands	r6, r1
 800254c:	e7cb      	b.n	80024e6 <__aeabi_dsub+0x612>
 800254e:	000a      	movs	r2, r1
 8002550:	0027      	movs	r7, r4
 8002552:	3a20      	subs	r2, #32
 8002554:	40d7      	lsrs	r7, r2
 8002556:	2920      	cmp	r1, #32
 8002558:	d005      	beq.n	8002566 <__aeabi_dsub+0x692>
 800255a:	2240      	movs	r2, #64	@ 0x40
 800255c:	1a52      	subs	r2, r2, r1
 800255e:	4094      	lsls	r4, r2
 8002560:	0025      	movs	r5, r4
 8002562:	4305      	orrs	r5, r0
 8002564:	9503      	str	r5, [sp, #12]
 8002566:	9d03      	ldr	r5, [sp, #12]
 8002568:	1e6a      	subs	r2, r5, #1
 800256a:	4195      	sbcs	r5, r2
 800256c:	432f      	orrs	r7, r5
 800256e:	e610      	b.n	8002192 <__aeabi_dsub+0x2be>
 8002570:	0014      	movs	r4, r2
 8002572:	2500      	movs	r5, #0
 8002574:	2200      	movs	r2, #0
 8002576:	e556      	b.n	8002026 <__aeabi_dsub+0x152>
 8002578:	9b02      	ldr	r3, [sp, #8]
 800257a:	4460      	add	r0, ip
 800257c:	4699      	mov	r9, r3
 800257e:	4560      	cmp	r0, ip
 8002580:	4192      	sbcs	r2, r2
 8002582:	444c      	add	r4, r9
 8002584:	4252      	negs	r2, r2
 8002586:	0005      	movs	r5, r0
 8002588:	18a4      	adds	r4, r4, r2
 800258a:	e74c      	b.n	8002426 <__aeabi_dsub+0x552>
 800258c:	001a      	movs	r2, r3
 800258e:	001c      	movs	r4, r3
 8002590:	432a      	orrs	r2, r5
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x6c2>
 8002594:	e6b3      	b.n	80022fe <__aeabi_dsub+0x42a>
 8002596:	e6c9      	b.n	800232c <__aeabi_dsub+0x458>
 8002598:	2480      	movs	r4, #128	@ 0x80
 800259a:	2600      	movs	r6, #0
 800259c:	0324      	lsls	r4, r4, #12
 800259e:	e5ae      	b.n	80020fe <__aeabi_dsub+0x22a>
 80025a0:	2120      	movs	r1, #32
 80025a2:	2500      	movs	r5, #0
 80025a4:	1a09      	subs	r1, r1, r0
 80025a6:	e517      	b.n	8001fd8 <__aeabi_dsub+0x104>
 80025a8:	2200      	movs	r2, #0
 80025aa:	2500      	movs	r5, #0
 80025ac:	4c0b      	ldr	r4, [pc, #44]	@ (80025dc <__aeabi_dsub+0x708>)
 80025ae:	e53a      	b.n	8002026 <__aeabi_dsub+0x152>
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x6e2>
 80025b4:	e5f6      	b.n	80021a4 <__aeabi_dsub+0x2d0>
 80025b6:	464b      	mov	r3, r9
 80025b8:	1bda      	subs	r2, r3, r7
 80025ba:	4692      	mov	sl, r2
 80025bc:	2f00      	cmp	r7, #0
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x6ee>
 80025c0:	e66f      	b.n	80022a2 <__aeabi_dsub+0x3ce>
 80025c2:	2a38      	cmp	r2, #56	@ 0x38
 80025c4:	dc05      	bgt.n	80025d2 <__aeabi_dsub+0x6fe>
 80025c6:	2680      	movs	r6, #128	@ 0x80
 80025c8:	0436      	lsls	r6, r6, #16
 80025ca:	4334      	orrs	r4, r6
 80025cc:	4688      	mov	r8, r1
 80025ce:	000e      	movs	r6, r1
 80025d0:	e6d1      	b.n	8002376 <__aeabi_dsub+0x4a2>
 80025d2:	4688      	mov	r8, r1
 80025d4:	000e      	movs	r6, r1
 80025d6:	2501      	movs	r5, #1
 80025d8:	e6de      	b.n	8002398 <__aeabi_dsub+0x4c4>
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	000007ff 	.word	0x000007ff
 80025e0:	ff7fffff 	.word	0xff7fffff
 80025e4:	000007fe 	.word	0x000007fe
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x71a>
 80025ec:	e668      	b.n	80022c0 <__aeabi_dsub+0x3ec>
 80025ee:	464b      	mov	r3, r9
 80025f0:	1bd9      	subs	r1, r3, r7
 80025f2:	2f00      	cmp	r7, #0
 80025f4:	d101      	bne.n	80025fa <__aeabi_dsub+0x726>
 80025f6:	468a      	mov	sl, r1
 80025f8:	e5a7      	b.n	800214a <__aeabi_dsub+0x276>
 80025fa:	2701      	movs	r7, #1
 80025fc:	2938      	cmp	r1, #56	@ 0x38
 80025fe:	dd00      	ble.n	8002602 <__aeabi_dsub+0x72e>
 8002600:	e5c7      	b.n	8002192 <__aeabi_dsub+0x2be>
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	0412      	lsls	r2, r2, #16
 8002606:	4314      	orrs	r4, r2
 8002608:	e5af      	b.n	800216a <__aeabi_dsub+0x296>
 800260a:	46c0      	nop			@ (mov r8, r8)

0800260c <__aeabi_dcmpun>:
 800260c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260e:	46c6      	mov	lr, r8
 8002610:	031e      	lsls	r6, r3, #12
 8002612:	0b36      	lsrs	r6, r6, #12
 8002614:	46b0      	mov	r8, r6
 8002616:	4e0d      	ldr	r6, [pc, #52]	@ (800264c <__aeabi_dcmpun+0x40>)
 8002618:	030c      	lsls	r4, r1, #12
 800261a:	004d      	lsls	r5, r1, #1
 800261c:	005f      	lsls	r7, r3, #1
 800261e:	b500      	push	{lr}
 8002620:	0b24      	lsrs	r4, r4, #12
 8002622:	0d6d      	lsrs	r5, r5, #21
 8002624:	0d7f      	lsrs	r7, r7, #21
 8002626:	42b5      	cmp	r5, r6
 8002628:	d00b      	beq.n	8002642 <__aeabi_dcmpun+0x36>
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__aeabi_dcmpun+0x40>)
 800262c:	2000      	movs	r0, #0
 800262e:	428f      	cmp	r7, r1
 8002630:	d104      	bne.n	800263c <__aeabi_dcmpun+0x30>
 8002632:	4646      	mov	r6, r8
 8002634:	4316      	orrs	r6, r2
 8002636:	0030      	movs	r0, r6
 8002638:	1e43      	subs	r3, r0, #1
 800263a:	4198      	sbcs	r0, r3
 800263c:	bc80      	pop	{r7}
 800263e:	46b8      	mov	r8, r7
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	4304      	orrs	r4, r0
 8002644:	2001      	movs	r0, #1
 8002646:	2c00      	cmp	r4, #0
 8002648:	d1f8      	bne.n	800263c <__aeabi_dcmpun+0x30>
 800264a:	e7ee      	b.n	800262a <__aeabi_dcmpun+0x1e>
 800264c:	000007ff 	.word	0x000007ff

08002650 <__aeabi_d2iz>:
 8002650:	000b      	movs	r3, r1
 8002652:	0002      	movs	r2, r0
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	4d16      	ldr	r5, [pc, #88]	@ (80026b0 <__aeabi_d2iz+0x60>)
 8002658:	030c      	lsls	r4, r1, #12
 800265a:	b082      	sub	sp, #8
 800265c:	0049      	lsls	r1, r1, #1
 800265e:	2000      	movs	r0, #0
 8002660:	9200      	str	r2, [sp, #0]
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	0b24      	lsrs	r4, r4, #12
 8002666:	0d49      	lsrs	r1, r1, #21
 8002668:	0fde      	lsrs	r6, r3, #31
 800266a:	42a9      	cmp	r1, r5
 800266c:	dd04      	ble.n	8002678 <__aeabi_d2iz+0x28>
 800266e:	4811      	ldr	r0, [pc, #68]	@ (80026b4 <__aeabi_d2iz+0x64>)
 8002670:	4281      	cmp	r1, r0
 8002672:	dd03      	ble.n	800267c <__aeabi_d2iz+0x2c>
 8002674:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <__aeabi_d2iz+0x68>)
 8002676:	18f0      	adds	r0, r6, r3
 8002678:	b002      	add	sp, #8
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	2080      	movs	r0, #128	@ 0x80
 800267e:	0340      	lsls	r0, r0, #13
 8002680:	4320      	orrs	r0, r4
 8002682:	4c0e      	ldr	r4, [pc, #56]	@ (80026bc <__aeabi_d2iz+0x6c>)
 8002684:	1a64      	subs	r4, r4, r1
 8002686:	2c1f      	cmp	r4, #31
 8002688:	dd08      	ble.n	800269c <__aeabi_d2iz+0x4c>
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <__aeabi_d2iz+0x70>)
 800268c:	1a5b      	subs	r3, r3, r1
 800268e:	40d8      	lsrs	r0, r3
 8002690:	0003      	movs	r3, r0
 8002692:	4258      	negs	r0, r3
 8002694:	2e00      	cmp	r6, #0
 8002696:	d1ef      	bne.n	8002678 <__aeabi_d2iz+0x28>
 8002698:	0018      	movs	r0, r3
 800269a:	e7ed      	b.n	8002678 <__aeabi_d2iz+0x28>
 800269c:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <__aeabi_d2iz+0x74>)
 800269e:	9a00      	ldr	r2, [sp, #0]
 80026a0:	469c      	mov	ip, r3
 80026a2:	0003      	movs	r3, r0
 80026a4:	4461      	add	r1, ip
 80026a6:	408b      	lsls	r3, r1
 80026a8:	40e2      	lsrs	r2, r4
 80026aa:	4313      	orrs	r3, r2
 80026ac:	e7f1      	b.n	8002692 <__aeabi_d2iz+0x42>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	000003fe 	.word	0x000003fe
 80026b4:	0000041d 	.word	0x0000041d
 80026b8:	7fffffff 	.word	0x7fffffff
 80026bc:	00000433 	.word	0x00000433
 80026c0:	00000413 	.word	0x00000413
 80026c4:	fffffbed 	.word	0xfffffbed

080026c8 <__aeabi_i2d>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d016      	beq.n	80026fc <__aeabi_i2d+0x34>
 80026ce:	17c3      	asrs	r3, r0, #31
 80026d0:	18c5      	adds	r5, r0, r3
 80026d2:	405d      	eors	r5, r3
 80026d4:	0fc4      	lsrs	r4, r0, #31
 80026d6:	0028      	movs	r0, r5
 80026d8:	f000 f890 	bl	80027fc <__clzsi2>
 80026dc:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <__aeabi_i2d+0x58>)
 80026de:	1a1b      	subs	r3, r3, r0
 80026e0:	055b      	lsls	r3, r3, #21
 80026e2:	0d5b      	lsrs	r3, r3, #21
 80026e4:	280a      	cmp	r0, #10
 80026e6:	dc14      	bgt.n	8002712 <__aeabi_i2d+0x4a>
 80026e8:	0002      	movs	r2, r0
 80026ea:	002e      	movs	r6, r5
 80026ec:	3215      	adds	r2, #21
 80026ee:	4096      	lsls	r6, r2
 80026f0:	220b      	movs	r2, #11
 80026f2:	1a12      	subs	r2, r2, r0
 80026f4:	40d5      	lsrs	r5, r2
 80026f6:	032d      	lsls	r5, r5, #12
 80026f8:	0b2d      	lsrs	r5, r5, #12
 80026fa:	e003      	b.n	8002704 <__aeabi_i2d+0x3c>
 80026fc:	2400      	movs	r4, #0
 80026fe:	2300      	movs	r3, #0
 8002700:	2500      	movs	r5, #0
 8002702:	2600      	movs	r6, #0
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	432b      	orrs	r3, r5
 8002708:	07e4      	lsls	r4, r4, #31
 800270a:	4323      	orrs	r3, r4
 800270c:	0030      	movs	r0, r6
 800270e:	0019      	movs	r1, r3
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	380b      	subs	r0, #11
 8002714:	4085      	lsls	r5, r0
 8002716:	032d      	lsls	r5, r5, #12
 8002718:	2600      	movs	r6, #0
 800271a:	0b2d      	lsrs	r5, r5, #12
 800271c:	e7f2      	b.n	8002704 <__aeabi_i2d+0x3c>
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	0000041e 	.word	0x0000041e

08002724 <__aeabi_ui2d>:
 8002724:	b510      	push	{r4, lr}
 8002726:	1e04      	subs	r4, r0, #0
 8002728:	d010      	beq.n	800274c <__aeabi_ui2d+0x28>
 800272a:	f000 f867 	bl	80027fc <__clzsi2>
 800272e:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <__aeabi_ui2d+0x44>)
 8002730:	1a1b      	subs	r3, r3, r0
 8002732:	055b      	lsls	r3, r3, #21
 8002734:	0d5b      	lsrs	r3, r3, #21
 8002736:	280a      	cmp	r0, #10
 8002738:	dc0f      	bgt.n	800275a <__aeabi_ui2d+0x36>
 800273a:	220b      	movs	r2, #11
 800273c:	0021      	movs	r1, r4
 800273e:	1a12      	subs	r2, r2, r0
 8002740:	40d1      	lsrs	r1, r2
 8002742:	3015      	adds	r0, #21
 8002744:	030a      	lsls	r2, r1, #12
 8002746:	4084      	lsls	r4, r0
 8002748:	0b12      	lsrs	r2, r2, #12
 800274a:	e001      	b.n	8002750 <__aeabi_ui2d+0x2c>
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	051b      	lsls	r3, r3, #20
 8002752:	4313      	orrs	r3, r2
 8002754:	0020      	movs	r0, r4
 8002756:	0019      	movs	r1, r3
 8002758:	bd10      	pop	{r4, pc}
 800275a:	0022      	movs	r2, r4
 800275c:	380b      	subs	r0, #11
 800275e:	4082      	lsls	r2, r0
 8002760:	0312      	lsls	r2, r2, #12
 8002762:	2400      	movs	r4, #0
 8002764:	0b12      	lsrs	r2, r2, #12
 8002766:	e7f3      	b.n	8002750 <__aeabi_ui2d+0x2c>
 8002768:	0000041e 	.word	0x0000041e

0800276c <__aeabi_f2d>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	0242      	lsls	r2, r0, #9
 8002770:	0043      	lsls	r3, r0, #1
 8002772:	0fc4      	lsrs	r4, r0, #31
 8002774:	20fe      	movs	r0, #254	@ 0xfe
 8002776:	0e1b      	lsrs	r3, r3, #24
 8002778:	1c59      	adds	r1, r3, #1
 800277a:	0a55      	lsrs	r5, r2, #9
 800277c:	4208      	tst	r0, r1
 800277e:	d00c      	beq.n	800279a <__aeabi_f2d+0x2e>
 8002780:	21e0      	movs	r1, #224	@ 0xe0
 8002782:	0089      	lsls	r1, r1, #2
 8002784:	468c      	mov	ip, r1
 8002786:	076d      	lsls	r5, r5, #29
 8002788:	0b12      	lsrs	r2, r2, #12
 800278a:	4463      	add	r3, ip
 800278c:	051b      	lsls	r3, r3, #20
 800278e:	4313      	orrs	r3, r2
 8002790:	07e4      	lsls	r4, r4, #31
 8002792:	4323      	orrs	r3, r4
 8002794:	0028      	movs	r0, r5
 8002796:	0019      	movs	r1, r3
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <__aeabi_f2d+0x5c>
 800279e:	2d00      	cmp	r5, #0
 80027a0:	d01b      	beq.n	80027da <__aeabi_f2d+0x6e>
 80027a2:	0028      	movs	r0, r5
 80027a4:	f000 f82a 	bl	80027fc <__clzsi2>
 80027a8:	280a      	cmp	r0, #10
 80027aa:	dc1c      	bgt.n	80027e6 <__aeabi_f2d+0x7a>
 80027ac:	230b      	movs	r3, #11
 80027ae:	002a      	movs	r2, r5
 80027b0:	1a1b      	subs	r3, r3, r0
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	0003      	movs	r3, r0
 80027b6:	3315      	adds	r3, #21
 80027b8:	409d      	lsls	r5, r3
 80027ba:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <__aeabi_f2d+0x88>)
 80027bc:	0312      	lsls	r2, r2, #12
 80027be:	1a1b      	subs	r3, r3, r0
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	0b12      	lsrs	r2, r2, #12
 80027c4:	0d5b      	lsrs	r3, r3, #21
 80027c6:	e7e1      	b.n	800278c <__aeabi_f2d+0x20>
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d009      	beq.n	80027e0 <__aeabi_f2d+0x74>
 80027cc:	0b13      	lsrs	r3, r2, #12
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0312      	lsls	r2, r2, #12
 80027d2:	431a      	orrs	r2, r3
 80027d4:	076d      	lsls	r5, r5, #29
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <__aeabi_f2d+0x8c>)
 80027d8:	e7d8      	b.n	800278c <__aeabi_f2d+0x20>
 80027da:	2300      	movs	r3, #0
 80027dc:	2200      	movs	r2, #0
 80027de:	e7d5      	b.n	800278c <__aeabi_f2d+0x20>
 80027e0:	2200      	movs	r2, #0
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <__aeabi_f2d+0x8c>)
 80027e4:	e7d2      	b.n	800278c <__aeabi_f2d+0x20>
 80027e6:	0003      	movs	r3, r0
 80027e8:	002a      	movs	r2, r5
 80027ea:	3b0b      	subs	r3, #11
 80027ec:	409a      	lsls	r2, r3
 80027ee:	2500      	movs	r5, #0
 80027f0:	e7e3      	b.n	80027ba <__aeabi_f2d+0x4e>
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	00000389 	.word	0x00000389
 80027f8:	000007ff 	.word	0x000007ff

080027fc <__clzsi2>:
 80027fc:	211c      	movs	r1, #28
 80027fe:	2301      	movs	r3, #1
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	4298      	cmp	r0, r3
 8002804:	d301      	bcc.n	800280a <__clzsi2+0xe>
 8002806:	0c00      	lsrs	r0, r0, #16
 8002808:	3910      	subs	r1, #16
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	4298      	cmp	r0, r3
 800280e:	d301      	bcc.n	8002814 <__clzsi2+0x18>
 8002810:	0a00      	lsrs	r0, r0, #8
 8002812:	3908      	subs	r1, #8
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	4298      	cmp	r0, r3
 8002818:	d301      	bcc.n	800281e <__clzsi2+0x22>
 800281a:	0900      	lsrs	r0, r0, #4
 800281c:	3904      	subs	r1, #4
 800281e:	a202      	add	r2, pc, #8	@ (adr r2, 8002828 <__clzsi2+0x2c>)
 8002820:	5c10      	ldrb	r0, [r2, r0]
 8002822:	1840      	adds	r0, r0, r1
 8002824:	4770      	bx	lr
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	02020304 	.word	0x02020304
 800282c:	01010101 	.word	0x01010101
	...

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283e:	f000 fca7 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002842:	f000 f95d 	bl	8002b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002846:	f000 fa2d 	bl	8002ca4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800284a:	f000 f9ad 	bl	8002ba8 <MX_I2C1_Init>
  MX_SPI2_Init();
 800284e:	f000 f9eb 	bl	8002c28 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 8002852:	f002 ffbb 	bl	80057cc <ssd1306_Init>
	ssd1306_Fill(Black);
 8002856:	2000      	movs	r0, #0
 8002858:	f003 f824 	bl	80058a4 <ssd1306_Fill>
	HAL_Delay(25);
 800285c:	2019      	movs	r0, #25
 800285e:	f000 fd1d 	bl	800329c <HAL_Delay>
	ssd1306_SetCursor(15, 2);
 8002862:	2102      	movs	r1, #2
 8002864:	200f      	movs	r0, #15
 8002866:	f003 f993 	bl	8005b90 <ssd1306_SetCursor>
	ssd1306_WriteString("DEMSAY", Font_16x26, White);
 800286a:	4a93      	ldr	r2, [pc, #588]	@ (8002ab8 <main+0x280>)
 800286c:	4893      	ldr	r0, [pc, #588]	@ (8002abc <main+0x284>)
 800286e:	2301      	movs	r3, #1
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	6852      	ldr	r2, [r2, #4]
 8002874:	f003 f962 	bl	8005b3c <ssd1306_WriteString>
	ssd1306_SetCursor(14, 27);
 8002878:	211b      	movs	r1, #27
 800287a:	200e      	movs	r0, #14
 800287c:	f003 f988 	bl	8005b90 <ssd1306_SetCursor>
	ssd1306_WriteString("EDUCATION", Font_11x18, White);
 8002880:	4a8f      	ldr	r2, [pc, #572]	@ (8002ac0 <main+0x288>)
 8002882:	4890      	ldr	r0, [pc, #576]	@ (8002ac4 <main+0x28c>)
 8002884:	2301      	movs	r3, #1
 8002886:	6811      	ldr	r1, [r2, #0]
 8002888:	6852      	ldr	r2, [r2, #4]
 800288a:	f003 f957 	bl	8005b3c <ssd1306_WriteString>
	ssd1306_SetCursor(45, 46);
 800288e:	212e      	movs	r1, #46	@ 0x2e
 8002890:	202d      	movs	r0, #45	@ 0x2d
 8002892:	f003 f97d 	bl	8005b90 <ssd1306_SetCursor>
	ssd1306_WriteString("KIT", Font_11x18, White);
 8002896:	4a8a      	ldr	r2, [pc, #552]	@ (8002ac0 <main+0x288>)
 8002898:	488b      	ldr	r0, [pc, #556]	@ (8002ac8 <main+0x290>)
 800289a:	2301      	movs	r3, #1
 800289c:	6811      	ldr	r1, [r2, #0]
 800289e:	6852      	ldr	r2, [r2, #4]
 80028a0:	f003 f94c 	bl	8005b3c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80028a4:	f003 f822 	bl	80058ec <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80028a8:	23fa      	movs	r3, #250	@ 0xfa
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fcf5 	bl	800329c <HAL_Delay>
	ssd1306_Fill(Black);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f002 fff6 	bl	80058a4 <ssd1306_Fill>

	dev_ctx.write_reg = platform_write;
 80028b8:	4b84      	ldr	r3, [pc, #528]	@ (8002acc <main+0x294>)
 80028ba:	4a85      	ldr	r2, [pc, #532]	@ (8002ad0 <main+0x298>)
 80028bc:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 80028be:	4b83      	ldr	r3, [pc, #524]	@ (8002acc <main+0x294>)
 80028c0:	4a84      	ldr	r2, [pc, #528]	@ (8002ad4 <main+0x29c>)
 80028c2:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &SENSOR_BUS;
 80028c4:	4b81      	ldr	r3, [pc, #516]	@ (8002acc <main+0x294>)
 80028c6:	4a84      	ldr	r2, [pc, #528]	@ (8002ad8 <main+0x2a0>)
 80028c8:	60da      	str	r2, [r3, #12]

	lis2dw12_device_id_get(&dev_ctx, &whoamI);
 80028ca:	4a84      	ldr	r2, [pc, #528]	@ (8002adc <main+0x2a4>)
 80028cc:	4b7f      	ldr	r3, [pc, #508]	@ (8002acc <main+0x294>)
 80028ce:	0011      	movs	r1, r2
 80028d0:	0018      	movs	r0, r3
 80028d2:	f002 fe5c 	bl	800558e <lis2dw12_device_id_get>
	lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80028d6:	4b7d      	ldr	r3, [pc, #500]	@ (8002acc <main+0x294>)
 80028d8:	2101      	movs	r1, #1
 80028da:	0018      	movs	r0, r3
 80028dc:	f002 fe69 	bl	80055b2 <lis2dw12_reset_set>

	do
	{
		lis2dw12_reset_get(&dev_ctx, &rst);
 80028e0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae0 <main+0x2a8>)
 80028e2:	4b7a      	ldr	r3, [pc, #488]	@ (8002acc <main+0x294>)
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f002 fe93 	bl	8005612 <lis2dw12_reset_get>
	} while (rst);
 80028ec:	4b7c      	ldr	r3, [pc, #496]	@ (8002ae0 <main+0x2a8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f5      	bne.n	80028e0 <main+0xa8>

	/* Enable Block Data Update */
	lis2dw12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80028f4:	4b75      	ldr	r3, [pc, #468]	@ (8002acc <main+0x294>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	0018      	movs	r0, r3
 80028fa:	f002 fd7d 	bl	80053f8 <lis2dw12_block_data_update_set>
	/* Set full scale */
	lis2dw12_full_scale_set(&dev_ctx, LIS2DW12_2g);
 80028fe:	4b73      	ldr	r3, [pc, #460]	@ (8002acc <main+0x294>)
 8002900:	2100      	movs	r1, #0
 8002902:	0018      	movs	r0, r3
 8002904:	f002 fda8 	bl	8005458 <lis2dw12_full_scale_set>
	/* Configure filtering chain
	 * Accelerometer - filter path / bandwidth
	 */
	lis2dw12_filter_path_set(&dev_ctx, LIS2DW12_LPF_ON_OUT);
 8002908:	4b70      	ldr	r3, [pc, #448]	@ (8002acc <main+0x294>)
 800290a:	2100      	movs	r1, #0
 800290c:	0018      	movs	r0, r3
 800290e:	f002 fe9b 	bl	8005648 <lis2dw12_filter_path_set>
	lis2dw12_filter_bandwidth_set(&dev_ctx, LIS2DW12_ODR_DIV_4);
 8002912:	4b6e      	ldr	r3, [pc, #440]	@ (8002acc <main+0x294>)
 8002914:	2101      	movs	r1, #1
 8002916:	0018      	movs	r0, r3
 8002918:	f002 fef0 	bl	80056fc <lis2dw12_filter_bandwidth_set>
	/* Configure power mode */
	lis2dw12_power_mode_set(&dev_ctx, LIS2DW12_HIGH_PERFORMANCE);
 800291c:	4b6b      	ldr	r3, [pc, #428]	@ (8002acc <main+0x294>)
 800291e:	2104      	movs	r1, #4
 8002920:	0018      	movs	r0, r3
 8002922:	f002 fca5 	bl	8005270 <lis2dw12_power_mode_set>
	/* Set Output Data Rate */
	lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_25Hz);
 8002926:	4b69      	ldr	r3, [pc, #420]	@ (8002acc <main+0x294>)
 8002928:	2103      	movs	r1, #3
 800292a:	0018      	movs	r0, r3
 800292c:	f002 fd0c 	bl	8005348 <lis2dw12_data_rate_set>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		uint8_t reg;
		/* Read output only if new value is available */
		lis2dw12_flag_data_ready_get(&dev_ctx, &reg);
 8002930:	2427      	movs	r4, #39	@ 0x27
 8002932:	193a      	adds	r2, r7, r4
 8002934:	4b65      	ldr	r3, [pc, #404]	@ (8002acc <main+0x294>)
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fdbd 	bl	80054b8 <lis2dw12_flag_data_ready_get>

		if (reg)
 800293e:	193b      	adds	r3, r7, r4
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d026      	beq.n	8002994 <main+0x15c>
		{
			/* Read acceleration data */
			memset(data_raw_acceleration, 0, sizeof(data_raw_acceleration));
 8002946:	4b67      	ldr	r3, [pc, #412]	@ (8002ae4 <main+0x2ac>)
 8002948:	2206      	movs	r2, #6
 800294a:	2100      	movs	r1, #0
 800294c:	0018      	movs	r0, r3
 800294e:	f003 ff1c 	bl	800678a <memset>
			lis2dw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);				//reading values from the accelerometer
 8002952:	4a64      	ldr	r2, [pc, #400]	@ (8002ae4 <main+0x2ac>)
 8002954:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <main+0x294>)
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f002 fdc8 	bl	80054ee <lis2dw12_acceleration_raw_get>
			acceleration_mg[0] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[0]);
 800295e:	4b61      	ldr	r3, [pc, #388]	@ (8002ae4 <main+0x2ac>)
 8002960:	2200      	movs	r2, #0
 8002962:	5e9b      	ldrsh	r3, [r3, r2]
 8002964:	0018      	movs	r0, r3
 8002966:	f002 fc6b 	bl	8005240 <lis2dw12_from_fs2_to_mg>
 800296a:	1c02      	adds	r2, r0, #0
 800296c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae8 <main+0x2b0>)
 800296e:	601a      	str	r2, [r3, #0]
			acceleration_mg[1] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[1]);
 8002970:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae4 <main+0x2ac>)
 8002972:	2202      	movs	r2, #2
 8002974:	5e9b      	ldrsh	r3, [r3, r2]
 8002976:	0018      	movs	r0, r3
 8002978:	f002 fc62 	bl	8005240 <lis2dw12_from_fs2_to_mg>
 800297c:	1c02      	adds	r2, r0, #0
 800297e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae8 <main+0x2b0>)
 8002980:	605a      	str	r2, [r3, #4]
			acceleration_mg[2] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[2]);
 8002982:	4b58      	ldr	r3, [pc, #352]	@ (8002ae4 <main+0x2ac>)
 8002984:	2204      	movs	r2, #4
 8002986:	5e9b      	ldrsh	r3, [r3, r2]
 8002988:	0018      	movs	r0, r3
 800298a:	f002 fc59 	bl	8005240 <lis2dw12_from_fs2_to_mg>
 800298e:	1c02      	adds	r2, r0, #0
 8002990:	4b55      	ldr	r3, [pc, #340]	@ (8002ae8 <main+0x2b0>)
 8002992:	609a      	str	r2, [r3, #8]
		}
		char str0[10] = { 0 };
 8002994:	241c      	movs	r4, #28
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	3304      	adds	r3, #4
 800299e:	2206      	movs	r2, #6
 80029a0:	2100      	movs	r1, #0
 80029a2:	0018      	movs	r0, r3
 80029a4:	f003 fef1 	bl	800678a <memset>
		char str1[10] = { 0 };
 80029a8:	2510      	movs	r5, #16
 80029aa:	197b      	adds	r3, r7, r5
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2206      	movs	r2, #6
 80029b4:	2100      	movs	r1, #0
 80029b6:	0018      	movs	r0, r3
 80029b8:	f003 fee7 	bl	800678a <memset>
		char str2[10] = { 0 };
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	3304      	adds	r3, #4
 80029c4:	2206      	movs	r2, #6
 80029c6:	2100      	movs	r1, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f003 fede 	bl	800678a <memset>
		sprintf(str0, "%.2f m/s2", acceleration_mg[2] / 100);
 80029ce:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <main+0x2b0>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4946      	ldr	r1, [pc, #280]	@ (8002aec <main+0x2b4>)
 80029d4:	1c18      	adds	r0, r3, #0
 80029d6:	f7fd fd63 	bl	80004a0 <__aeabi_fdiv>
 80029da:	1c03      	adds	r3, r0, #0
 80029dc:	1c18      	adds	r0, r3, #0
 80029de:	f7ff fec5 	bl	800276c <__aeabi_f2d>
 80029e2:	0002      	movs	r2, r0
 80029e4:	000b      	movs	r3, r1
 80029e6:	4942      	ldr	r1, [pc, #264]	@ (8002af0 <main+0x2b8>)
 80029e8:	1938      	adds	r0, r7, r4
 80029ea:	f003 fe4f 	bl	800668c <siprintf>
		sprintf(str1, "%.2f m/s2", acceleration_mg[1] / 100);
 80029ee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae8 <main+0x2b0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	493e      	ldr	r1, [pc, #248]	@ (8002aec <main+0x2b4>)
 80029f4:	1c18      	adds	r0, r3, #0
 80029f6:	f7fd fd53 	bl	80004a0 <__aeabi_fdiv>
 80029fa:	1c03      	adds	r3, r0, #0
 80029fc:	1c18      	adds	r0, r3, #0
 80029fe:	f7ff feb5 	bl	800276c <__aeabi_f2d>
 8002a02:	0002      	movs	r2, r0
 8002a04:	000b      	movs	r3, r1
 8002a06:	493a      	ldr	r1, [pc, #232]	@ (8002af0 <main+0x2b8>)
 8002a08:	1978      	adds	r0, r7, r5
 8002a0a:	f003 fe3f 	bl	800668c <siprintf>
		sprintf(str2, "%.2f m/s2", acceleration_mg[0] / 100);
 8002a0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <main+0x2b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4936      	ldr	r1, [pc, #216]	@ (8002aec <main+0x2b4>)
 8002a14:	1c18      	adds	r0, r3, #0
 8002a16:	f7fd fd43 	bl	80004a0 <__aeabi_fdiv>
 8002a1a:	1c03      	adds	r3, r0, #0
 8002a1c:	1c18      	adds	r0, r3, #0
 8002a1e:	f7ff fea5 	bl	800276c <__aeabi_f2d>
 8002a22:	0002      	movs	r2, r0
 8002a24:	000b      	movs	r3, r1
 8002a26:	4932      	ldr	r1, [pc, #200]	@ (8002af0 <main+0x2b8>)
 8002a28:	1d38      	adds	r0, r7, #4
 8002a2a:	f003 fe2f 	bl	800668c <siprintf>
		ssd1306_SetCursor(2, 0);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2002      	movs	r0, #2
 8002a32:	f003 f8ad 	bl	8005b90 <ssd1306_SetCursor>
		ssd1306_WriteString("G:", Font_11x18, White);
 8002a36:	4a22      	ldr	r2, [pc, #136]	@ (8002ac0 <main+0x288>)
 8002a38:	482e      	ldr	r0, [pc, #184]	@ (8002af4 <main+0x2bc>)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	6811      	ldr	r1, [r2, #0]
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	f003 f87c 	bl	8005b3c <ssd1306_WriteString>
		ssd1306_SetCursor(25, 0);
 8002a44:	2100      	movs	r1, #0
 8002a46:	2019      	movs	r0, #25
 8002a48:	f003 f8a2 	bl	8005b90 <ssd1306_SetCursor>
		ssd1306_WriteString(str2, Font_11x18, White);
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac0 <main+0x288>)
 8002a4e:	1d38      	adds	r0, r7, #4
 8002a50:	2301      	movs	r3, #1
 8002a52:	6811      	ldr	r1, [r2, #0]
 8002a54:	6852      	ldr	r2, [r2, #4]
 8002a56:	f003 f871 	bl	8005b3c <ssd1306_WriteString>
		// printing the values from the accelerometer
		ssd1306_SetCursor(2, 20);
 8002a5a:	2114      	movs	r1, #20
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f003 f897 	bl	8005b90 <ssd1306_SetCursor>
		ssd1306_WriteString("X:", Font_11x18, White);
 8002a62:	4a17      	ldr	r2, [pc, #92]	@ (8002ac0 <main+0x288>)
 8002a64:	4824      	ldr	r0, [pc, #144]	@ (8002af8 <main+0x2c0>)
 8002a66:	2301      	movs	r3, #1
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	6852      	ldr	r2, [r2, #4]
 8002a6c:	f003 f866 	bl	8005b3c <ssd1306_WriteString>
		ssd1306_SetCursor(25, 20);
 8002a70:	2114      	movs	r1, #20
 8002a72:	2019      	movs	r0, #25
 8002a74:	f003 f88c 	bl	8005b90 <ssd1306_SetCursor>
		ssd1306_WriteString(str1, Font_11x18, White);
 8002a78:	4a11      	ldr	r2, [pc, #68]	@ (8002ac0 <main+0x288>)
 8002a7a:	1978      	adds	r0, r7, r5
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	6811      	ldr	r1, [r2, #0]
 8002a80:	6852      	ldr	r2, [r2, #4]
 8002a82:	f003 f85b 	bl	8005b3c <ssd1306_WriteString>

		ssd1306_SetCursor(2, 40);
 8002a86:	2128      	movs	r1, #40	@ 0x28
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f003 f881 	bl	8005b90 <ssd1306_SetCursor>
		ssd1306_WriteString("Y:", Font_11x18, White);
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <main+0x288>)
 8002a90:	481a      	ldr	r0, [pc, #104]	@ (8002afc <main+0x2c4>)
 8002a92:	2301      	movs	r3, #1
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	6852      	ldr	r2, [r2, #4]
 8002a98:	f003 f850 	bl	8005b3c <ssd1306_WriteString>
		ssd1306_SetCursor(25, 40);
 8002a9c:	2128      	movs	r1, #40	@ 0x28
 8002a9e:	2019      	movs	r0, #25
 8002aa0:	f003 f876 	bl	8005b90 <ssd1306_SetCursor>
		ssd1306_WriteString(str0, Font_11x18, White);
 8002aa4:	4a06      	ldr	r2, [pc, #24]	@ (8002ac0 <main+0x288>)
 8002aa6:	1938      	adds	r0, r7, r4
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	6811      	ldr	r1, [r2, #0]
 8002aac:	6852      	ldr	r2, [r2, #4]
 8002aae:	f003 f845 	bl	8005b3c <ssd1306_WriteString>
		// printing the values from the accelerometer
		ssd1306_UpdateScreen();
 8002ab2:	f002 ff1b 	bl	80058ec <ssd1306_UpdateScreen>
  {
 8002ab6:	e73b      	b.n	8002930 <main+0xf8>
 8002ab8:	20000014 	.word	0x20000014
 8002abc:	08008a68 	.word	0x08008a68
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	08008a70 	.word	0x08008a70
 8002ac8:	08008a7c 	.word	0x08008a7c
 8002acc:	200002b8 	.word	0x200002b8
 8002ad0:	08002d19 	.word	0x08002d19
 8002ad4:	08002d61 	.word	0x08002d61
 8002ad8:	20000200 	.word	0x20000200
 8002adc:	200002dc 	.word	0x200002dc
 8002ae0:	200002dd 	.word	0x200002dd
 8002ae4:	200002c8 	.word	0x200002c8
 8002ae8:	200002d0 	.word	0x200002d0
 8002aec:	42c80000 	.word	0x42c80000
 8002af0:	08008a80 	.word	0x08008a80
 8002af4:	08008a8c 	.word	0x08008a8c
 8002af8:	08008a90 	.word	0x08008a90
 8002afc:	08008a94 	.word	0x08008a94

08002b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b093      	sub	sp, #76	@ 0x4c
 8002b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	2414      	movs	r4, #20
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	2334      	movs	r3, #52	@ 0x34
 8002b0e:	001a      	movs	r2, r3
 8002b10:	2100      	movs	r1, #0
 8002b12:	f003 fe3a 	bl	800678a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	0018      	movs	r0, r3
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f003 fe33 	bl	800678a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f001 fc8f 	bl	800444c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	0252      	lsls	r2, r2, #9
 8002b3a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2202      	movs	r2, #2
 8002b42:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2203      	movs	r2, #3
 8002b48:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	2210      	movs	r2, #16
 8002b54:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	2280      	movs	r2, #128	@ 0x80
 8002b5a:	0292      	lsls	r2, r2, #10
 8002b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2280      	movs	r2, #128	@ 0x80
 8002b62:	0592      	lsls	r2, r2, #22
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f001 fcaf 	bl	80044cc <HAL_RCC_OscConfig>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002b72:	f000 f919 	bl	8002da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2207      	movs	r2, #7
 8002b7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2202      	movs	r2, #2
 8002b80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2102      	movs	r1, #2
 8002b92:	0018      	movs	r0, r3
 8002b94:	f001 ffaa 	bl	8004aec <HAL_RCC_ClockConfig>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002b9c:	f000 f904 	bl	8002da8 <Error_Handler>
  }
}
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b013      	add	sp, #76	@ 0x4c
 8002ba6:	bd90      	pop	{r4, r7, pc}

08002ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bae:	4a1c      	ldr	r2, [pc, #112]	@ (8002c20 <MX_I2C1_Init+0x78>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <MX_I2C1_Init+0x7c>)
 8002bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bca:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bd6:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fd95 	bl	8003714 <HAL_I2C_Init>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bee:	f000 f8db 	bl	8002da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f001 fb90 	bl	800431c <HAL_I2CEx_ConfigAnalogFilter>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c00:	f000 f8d2 	bl	8002da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <MX_I2C1_Init+0x74>)
 8002c06:	2100      	movs	r1, #0
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f001 fbd3 	bl	80043b4 <HAL_I2CEx_ConfigDigitalFilter>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d001      	beq.n	8002c16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c12:	f000 f8c9 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000200 	.word	0x20000200
 8002c20:	40005400 	.word	0x40005400
 8002c24:	10b17db5 	.word	0x10b17db5

08002c28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca0 <MX_SPI2_Init+0x78>)
 8002c30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c34:	2282      	movs	r2, #130	@ 0x82
 8002c36:	0052      	lsls	r2, r2, #1
 8002c38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c3a:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c40:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c42:	22e0      	movs	r2, #224	@ 0xe0
 8002c44:	00d2      	lsls	r2, r2, #3
 8002c46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c48:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c56:	2280      	movs	r2, #128	@ 0x80
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c76:	2207      	movs	r2, #7
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c82:	2208      	movs	r2, #8
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <MX_SPI2_Init+0x74>)
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f002 f9df 	bl	800504c <HAL_SPI_Init>
 8002c8e:	1e03      	subs	r3, r0, #0
 8002c90:	d001      	beq.n	8002c96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c92:	f000 f889 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000254 	.word	0x20000254
 8002ca0:	40003800 	.word	0x40003800

08002ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cae:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	2204      	movs	r2, #4
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc6:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cc8:	2120      	movs	r1, #32
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <MX_GPIO_Init+0x70>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000

08002d18 <platform_write>:

/* USER CODE BEGIN 4 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af04      	add	r7, sp, #16
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	0008      	movs	r0, r1
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	0019      	movs	r1, r3
 8002d26:	240b      	movs	r4, #11
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	1c02      	adds	r2, r0, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	2508      	movs	r5, #8
 8002d30:	197b      	adds	r3, r7, r5
 8002d32:	1c0a      	adds	r2, r1, #0
 8002d34:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg,
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	23fa      	movs	r3, #250	@ 0xfa
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	197b      	adds	r3, r7, r5
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2301      	movs	r3, #1
 8002d50:	2133      	movs	r1, #51	@ 0x33
 8002d52:	f000 fd85 	bl	8003860 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);

	return 0;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}

08002d60 <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	0008      	movs	r0, r1
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	240b      	movs	r4, #11
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	1c02      	adds	r2, r0, #0
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	2508      	movs	r5, #8
 8002d78:	197b      	adds	r3, r7, r5
 8002d7a:	1c0a      	adds	r2, r1, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg,
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	23fa      	movs	r3, #250	@ 0xfa
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	197b      	adds	r3, r7, r5
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2301      	movs	r3, #1
 8002d98:	2133      	movs	r1, #51	@ 0x33
 8002d9a:	f000 fe8f 	bl	8003abc <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}

08002da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dac:	b672      	cpsid	i
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	e7fd      	b.n	8002db0 <Error_Handler+0x8>

08002db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <HAL_MspInit+0x44>)
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <HAL_MspInit+0x44>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_MspInit+0x44>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_MspInit+0x44>)
 8002dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_MspInit+0x44>)
 8002dd8:	2180      	movs	r1, #128	@ 0x80
 8002dda:	0549      	lsls	r1, r1, #21
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_MspInit+0x44>)
 8002de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	055b      	lsls	r3, r3, #21
 8002de8:	4013      	ands	r3, r2
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b091      	sub	sp, #68	@ 0x44
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	232c      	movs	r3, #44	@ 0x2c
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	0018      	movs	r0, r3
 8002e0a:	2314      	movs	r3, #20
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f003 fcbb 	bl	800678a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e14:	2414      	movs	r4, #20
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	0018      	movs	r0, r3
 8002e1a:	2318      	movs	r3, #24
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f003 fcb3 	bl	800678a <memset>
  if(hi2c->Instance==I2C1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	@ (8002eb4 <HAL_I2C_MspInit+0xb8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d13d      	bne.n	8002eaa <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	2220      	movs	r2, #32
 8002e32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e34:	193b      	adds	r3, r7, r4
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f001 ffdf 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e46:	f7ff ffaf 	bl	8002da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_I2C_MspInit+0xbc>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_I2C_MspInit+0xbc>)
 8002e50:	2102      	movs	r1, #2
 8002e52:	430a      	orrs	r2, r1
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e56:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <HAL_I2C_MspInit+0xbc>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e62:	212c      	movs	r1, #44	@ 0x2c
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	22c0      	movs	r2, #192	@ 0xc0
 8002e68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2212      	movs	r2, #18
 8002e6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2206      	movs	r2, #6
 8002e80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_I2C_MspInit+0xc0>)
 8002e86:	0019      	movs	r1, r3
 8002e88:	0010      	movs	r0, r2
 8002e8a:	f000 fadf 	bl	800344c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_I2C_MspInit+0xbc>)
 8002e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e92:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_I2C_MspInit+0xbc>)
 8002e94:	2180      	movs	r1, #128	@ 0x80
 8002e96:	0389      	lsls	r1, r1, #14
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_I2C_MspInit+0xbc>)
 8002e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	039b      	lsls	r3, r3, #14
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b011      	add	sp, #68	@ 0x44
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	50000400 	.word	0x50000400

08002ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b08b      	sub	sp, #44	@ 0x2c
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	2414      	movs	r4, #20
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	0018      	movs	r0, r3
 8002ece:	2314      	movs	r3, #20
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f003 fc59 	bl	800678a <memset>
  if(hspi->Instance==SPI2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a26      	ldr	r2, [pc, #152]	@ (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d146      	bne.n	8002f70 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ee2:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ee6:	4b25      	ldr	r3, [pc, #148]	@ (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	01c9      	lsls	r1, r1, #7
 8002eec:	430a      	orrs	r2, r1
 8002eee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ef0:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	01db      	lsls	r3, r3, #7
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	2209      	movs	r2, #9
 8002f1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	2202      	movs	r2, #2
 8002f20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	193b      	adds	r3, r7, r4
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	193a      	adds	r2, r7, r4
 8002f36:	23a0      	movs	r3, #160	@ 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 fa85 	bl	800344c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f42:	0021      	movs	r1, r4
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	2210      	movs	r2, #16
 8002f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2201      	movs	r2, #1
 8002f60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	187a      	adds	r2, r7, r1
 8002f64:	23a0      	movs	r3, #160	@ 0xa0
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	0011      	movs	r1, r2
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 fa6e 	bl	800344c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b00b      	add	sp, #44	@ 0x2c
 8002f76:	bd90      	pop	{r4, r7, pc}
 8002f78:	40003800 	.word	0x40003800
 8002f7c:	40021000 	.word	0x40021000

08002f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f84:	46c0      	nop			@ (mov r8, r8)
 8002f86:	e7fd      	b.n	8002f84 <NMI_Handler+0x4>

08002f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	e7fd      	b.n	8002f8c <HardFault_Handler+0x4>

08002f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa8:	f000 f95c 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
  return 1;
 8002fb6:	2301      	movs	r3, #1
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_kill>:

int _kill(int pid, int sig)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fc8:	f003 fc3a 	bl	8006840 <__errno>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	2216      	movs	r2, #22
 8002fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	425b      	negs	r3, r3
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_exit>:

void _exit (int status)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	425a      	negs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0011      	movs	r1, r2
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff ffe5 	bl	8002fbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	e7fd      	b.n	8002ff4 <_exit+0x16>

08002ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e00a      	b.n	8003020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800300a:	e000      	b.n	800300e <_read+0x16>
 800300c:	bf00      	nop
 800300e:	0001      	movs	r1, r0
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	60ba      	str	r2, [r7, #8]
 8003016:	b2ca      	uxtb	r2, r1
 8003018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3301      	adds	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	dbf0      	blt.n	800300a <_read+0x12>
  }

  return len;
 8003028:	687b      	ldr	r3, [r7, #4]
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b006      	add	sp, #24
 8003030:	bd80      	pop	{r7, pc}

08003032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e009      	b.n	8003058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	0018      	movs	r0, r3
 800304e:	e000      	b.n	8003052 <_write+0x20>
 8003050:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	dbf1      	blt.n	8003044 <_write+0x12>
  }
  return len;
 8003060:	687b      	ldr	r3, [r7, #4]
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b006      	add	sp, #24
 8003068:	bd80      	pop	{r7, pc}

0800306a <_close>:

int _close(int file)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003072:	2301      	movs	r3, #1
 8003074:	425b      	negs	r3, r3
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}

0800307e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2280      	movs	r2, #128	@ 0x80
 800308c:	0192      	lsls	r2, r2, #6
 800308e:	605a      	str	r2, [r3, #4]
  return 0;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}

0800309a <_isatty>:

int _isatty(int file)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	@ (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	18d3      	adds	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f003 fba4 	bl	8006840 <__errno>
 80030f8:	0003      	movs	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	2301      	movs	r3, #1
 8003100:	425b      	negs	r3, r3
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	18d2      	adds	r2, r2, r3
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <_sbrk+0x64>)
 8003114:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b006      	add	sp, #24
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20002000 	.word	0x20002000
 8003124:	00000400 	.word	0x00000400
 8003128:	200002e0 	.word	0x200002e0
 800312c:	20000840 	.word	0x20000840

08003130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800313c:	480d      	ldr	r0, [pc, #52]	@ (8003174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800313e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003140:	f7ff fff6 	bl	8003130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003144:	480c      	ldr	r0, [pc, #48]	@ (8003178 <LoopForever+0x6>)
  ldr r1, =_edata
 8003146:	490d      	ldr	r1, [pc, #52]	@ (800317c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <LoopForever+0xe>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800315c:	4c0a      	ldr	r4, [pc, #40]	@ (8003188 <LoopForever+0x16>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800316a:	f003 fb6f 	bl	800684c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800316e:	f7ff fb63 	bl	8002838 <main>

08003172 <LoopForever>:

LoopForever:
  b LoopForever
 8003172:	e7fe      	b.n	8003172 <LoopForever>
  ldr   r0, =_estack
 8003174:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003180:	0800afb8 	.word	0x0800afb8
  ldr r2, =_sbss
 8003184:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003188:	2000083c 	.word	0x2000083c

0800318c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC1_IRQHandler>
	...

08003190 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_Init+0x3c>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <HAL_Init+0x3c>)
 80031a2:	2180      	movs	r1, #128	@ 0x80
 80031a4:	0049      	lsls	r1, r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031aa:	2003      	movs	r0, #3
 80031ac:	f000 f810 	bl	80031d0 <HAL_InitTick>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d003      	beq.n	80031bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e001      	b.n	80031c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031bc:	f7ff fdfa 	bl	8002db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031c0:	1dfb      	adds	r3, r7, #7
 80031c2:	781b      	ldrb	r3, [r3, #0]
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40022000 	.word	0x40022000

080031d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031d8:	230f      	movs	r3, #15
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_InitTick+0x88>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d02b      	beq.n	8003240 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031e8:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <HAL_InitTick+0x8c>)
 80031ea:	681c      	ldr	r4, [r3, #0]
 80031ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <HAL_InitTick+0x88>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	0019      	movs	r1, r3
 80031f2:	23fa      	movs	r3, #250	@ 0xfa
 80031f4:	0098      	lsls	r0, r3, #2
 80031f6:	f7fc ff9f 	bl	8000138 <__udivsi3>
 80031fa:	0003      	movs	r3, r0
 80031fc:	0019      	movs	r1, r3
 80031fe:	0020      	movs	r0, r4
 8003200:	f7fc ff9a 	bl	8000138 <__udivsi3>
 8003204:	0003      	movs	r3, r0
 8003206:	0018      	movs	r0, r3
 8003208:	f000 f913 	bl	8003432 <HAL_SYSTICK_Config>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d112      	bne.n	8003236 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d80a      	bhi.n	800322c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	2301      	movs	r3, #1
 800321a:	425b      	negs	r3, r3
 800321c:	2200      	movs	r2, #0
 800321e:	0018      	movs	r0, r3
 8003220:	f000 f8f2 	bl	8003408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <HAL_InitTick+0x90>)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e00d      	b.n	8003248 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e008      	b.n	8003248 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003236:	230f      	movs	r3, #15
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e003      	b.n	8003248 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003240:	230f      	movs	r3, #15
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003248:	230f      	movs	r3, #15
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	781b      	ldrb	r3, [r3, #0]
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b005      	add	sp, #20
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	20000008 	.word	0x20000008
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003268:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <HAL_IncTick+0x1c>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	001a      	movs	r2, r3
 800326e:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <HAL_IncTick+0x20>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	18d2      	adds	r2, r2, r3
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_IncTick+0x20>)
 8003276:	601a      	str	r2, [r3, #0]
}
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	20000008 	.word	0x20000008
 8003284:	200002e4 	.word	0x200002e4

08003288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  return uwTick;
 800328c:	4b02      	ldr	r3, [pc, #8]	@ (8003298 <HAL_GetTick+0x10>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	200002e4 	.word	0x200002e4

0800329c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7ff fff0 	bl	8003288 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	d005      	beq.n	80032c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_Delay+0x44>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	001a      	movs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	f7ff ffe0 	bl	8003288 <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d8f7      	bhi.n	80032c4 <HAL_Delay+0x28>
  {
  }
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	20000008 	.word	0x20000008

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	0002      	movs	r2, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80032f8:	d828      	bhi.n	800334c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fa:	4a2f      	ldr	r2, [pc, #188]	@ (80033b8 <__NVIC_SetPriority+0xd4>)
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	33c0      	adds	r3, #192	@ 0xc0
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	589b      	ldr	r3, [r3, r2]
 800330a:	1dfa      	adds	r2, r7, #7
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	0011      	movs	r1, r2
 8003310:	2203      	movs	r2, #3
 8003312:	400a      	ands	r2, r1
 8003314:	00d2      	lsls	r2, r2, #3
 8003316:	21ff      	movs	r1, #255	@ 0xff
 8003318:	4091      	lsls	r1, r2
 800331a:	000a      	movs	r2, r1
 800331c:	43d2      	mvns	r2, r2
 800331e:	401a      	ands	r2, r3
 8003320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	22ff      	movs	r2, #255	@ 0xff
 8003328:	401a      	ands	r2, r3
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	2303      	movs	r3, #3
 8003332:	4003      	ands	r3, r0
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	481f      	ldr	r0, [pc, #124]	@ (80033b8 <__NVIC_SetPriority+0xd4>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b25b      	sxtb	r3, r3
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	430a      	orrs	r2, r1
 8003344:	33c0      	adds	r3, #192	@ 0xc0
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800334a:	e031      	b.n	80033b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <__NVIC_SetPriority+0xd8>)
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0019      	movs	r1, r3
 8003354:	230f      	movs	r3, #15
 8003356:	400b      	ands	r3, r1
 8003358:	3b08      	subs	r3, #8
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3306      	adds	r3, #6
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	3304      	adds	r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1dfa      	adds	r2, r7, #7
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	0011      	movs	r1, r2
 800336c:	2203      	movs	r2, #3
 800336e:	400a      	ands	r2, r1
 8003370:	00d2      	lsls	r2, r2, #3
 8003372:	21ff      	movs	r1, #255	@ 0xff
 8003374:	4091      	lsls	r1, r2
 8003376:	000a      	movs	r2, r1
 8003378:	43d2      	mvns	r2, r2
 800337a:	401a      	ands	r2, r3
 800337c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	22ff      	movs	r2, #255	@ 0xff
 8003384:	401a      	ands	r2, r3
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	2303      	movs	r3, #3
 800338e:	4003      	ands	r3, r0
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4809      	ldr	r0, [pc, #36]	@ (80033bc <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	001c      	movs	r4, r3
 800339c:	230f      	movs	r3, #15
 800339e:	4023      	ands	r3, r4
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	430a      	orrs	r2, r1
 80033a6:	3306      	adds	r3, #6
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	18c3      	adds	r3, r0, r3
 80033ac:	3304      	adds	r3, #4
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b003      	add	sp, #12
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	045b      	lsls	r3, r3, #17
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d301      	bcc.n	80033d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d4:	2301      	movs	r3, #1
 80033d6:	e010      	b.n	80033fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <SysTick_Config+0x44>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	3a01      	subs	r2, #1
 80033de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e0:	2301      	movs	r3, #1
 80033e2:	425b      	negs	r3, r3
 80033e4:	2103      	movs	r1, #3
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff ff7c 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <SysTick_Config+0x44>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f2:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <SysTick_Config+0x44>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	e000e010 	.word	0xe000e010

08003408 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	210f      	movs	r1, #15
 8003414:	187b      	adds	r3, r7, r1
 8003416:	1c02      	adds	r2, r0, #0
 8003418:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	187b      	adds	r3, r7, r1
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ff5d 	bl	80032e4 <__NVIC_SetPriority>
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b004      	add	sp, #16
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff ffbf 	bl	80033c0 <SysTick_Config>
 8003442:	0003      	movs	r3, r0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800345a:	e147      	b.n	80036ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4091      	lsls	r1, r2
 8003466:	000a      	movs	r2, r1
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d100      	bne.n	8003474 <HAL_GPIO_Init+0x28>
 8003472:	e138      	b.n	80036e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	4013      	ands	r3, r2
 800347c:	2b01      	cmp	r3, #1
 800347e:	d005      	beq.n	800348c <HAL_GPIO_Init+0x40>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	4013      	ands	r3, r2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d130      	bne.n	80034ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	409a      	lsls	r2, r3
 800349a:	0013      	movs	r3, r2
 800349c:	43da      	mvns	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	409a      	lsls	r2, r3
 80034ae:	0013      	movs	r3, r2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034c2:	2201      	movs	r2, #1
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
 80034c8:	0013      	movs	r3, r2
 80034ca:	43da      	mvns	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	2201      	movs	r2, #1
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d017      	beq.n	800352a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2203      	movs	r2, #3
 8003506:	409a      	lsls	r2, r3
 8003508:	0013      	movs	r3, r2
 800350a:	43da      	mvns	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	0013      	movs	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2203      	movs	r2, #3
 8003530:	4013      	ands	r3, r2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d123      	bne.n	800357e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	58d3      	ldr	r3, [r2, r3]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2207      	movs	r2, #7
 8003548:	4013      	ands	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	220f      	movs	r2, #15
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	43da      	mvns	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2107      	movs	r1, #7
 8003562:	400b      	ands	r3, r1
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	409a      	lsls	r2, r3
 8003568:	0013      	movs	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	6939      	ldr	r1, [r7, #16]
 800357c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	43da      	mvns	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	401a      	ands	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	0013      	movs	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	23c0      	movs	r3, #192	@ 0xc0
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	4013      	ands	r3, r2
 80035bc:	d100      	bne.n	80035c0 <HAL_GPIO_Init+0x174>
 80035be:	e092      	b.n	80036e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035c0:	4a50      	ldr	r2, [pc, #320]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3318      	adds	r3, #24
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	589b      	ldr	r3, [r3, r2]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2203      	movs	r2, #3
 80035d2:	4013      	ands	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	220f      	movs	r2, #15
 80035d8:	409a      	lsls	r2, r3
 80035da:	0013      	movs	r3, r2
 80035dc:	43da      	mvns	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	23a0      	movs	r3, #160	@ 0xa0
 80035e8:	05db      	lsls	r3, r3, #23
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x1ca>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a45      	ldr	r2, [pc, #276]	@ (8003708 <HAL_GPIO_Init+0x2bc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x1c6>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a44      	ldr	r2, [pc, #272]	@ (800370c <HAL_GPIO_Init+0x2c0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x1c2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a43      	ldr	r2, [pc, #268]	@ (8003710 <HAL_GPIO_Init+0x2c4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x1be>
 8003606:	2303      	movs	r3, #3
 8003608:	e006      	b.n	8003618 <HAL_GPIO_Init+0x1cc>
 800360a:	2305      	movs	r3, #5
 800360c:	e004      	b.n	8003618 <HAL_GPIO_Init+0x1cc>
 800360e:	2302      	movs	r3, #2
 8003610:	e002      	b.n	8003618 <HAL_GPIO_Init+0x1cc>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_GPIO_Init+0x1cc>
 8003616:	2300      	movs	r3, #0
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	2103      	movs	r1, #3
 800361c:	400a      	ands	r2, r1
 800361e:	00d2      	lsls	r2, r2, #3
 8003620:	4093      	lsls	r3, r2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003628:	4936      	ldr	r1, [pc, #216]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3318      	adds	r3, #24
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003636:	4b33      	ldr	r3, [pc, #204]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43da      	mvns	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	035b      	lsls	r3, r3, #13
 800364e:	4013      	ands	r3, r2
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800365a:	4b2a      	ldr	r3, [pc, #168]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003660:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43da      	mvns	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	039b      	lsls	r3, r3, #14
 8003678:	4013      	ands	r3, r2
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003684:	4b1f      	ldr	r3, [pc, #124]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800368a:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 800368c:	2384      	movs	r3, #132	@ 0x84
 800368e:	58d3      	ldr	r3, [r2, r3]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43da      	mvns	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	4013      	ands	r3, r2
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036b0:	4914      	ldr	r1, [pc, #80]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 80036b2:	2284      	movs	r2, #132	@ 0x84
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036b8:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 80036ba:	2380      	movs	r3, #128	@ 0x80
 80036bc:	58d3      	ldr	r3, [r2, r3]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	025b      	lsls	r3, r3, #9
 80036d2:	4013      	ands	r3, r2
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036de:	4909      	ldr	r1, [pc, #36]	@ (8003704 <HAL_GPIO_Init+0x2b8>)
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3301      	adds	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	40da      	lsrs	r2, r3
 80036f4:	1e13      	subs	r3, r2, #0
 80036f6:	d000      	beq.n	80036fa <HAL_GPIO_Init+0x2ae>
 80036f8:	e6b0      	b.n	800345c <HAL_GPIO_Init+0x10>
  }
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b006      	add	sp, #24
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021800 	.word	0x40021800
 8003708:	50000400 	.word	0x50000400
 800370c:	50000800 	.word	0x50000800
 8003710:	50000c00 	.word	0x50000c00

08003714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e08f      	b.n	8003846 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2241      	movs	r2, #65	@ 0x41
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2240      	movs	r2, #64	@ 0x40
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff fb5d 	bl	8002dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2241      	movs	r2, #65	@ 0x41
 8003746:	2124      	movs	r1, #36	@ 0x24
 8003748:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2101      	movs	r1, #1
 8003756:	438a      	bics	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	493b      	ldr	r1, [pc, #236]	@ (8003850 <HAL_I2C_Init+0x13c>)
 8003764:	400a      	ands	r2, r1
 8003766:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4938      	ldr	r1, [pc, #224]	@ (8003854 <HAL_I2C_Init+0x140>)
 8003774:	400a      	ands	r2, r1
 8003776:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d108      	bne.n	8003792 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2180      	movs	r1, #128	@ 0x80
 800378a:	0209      	lsls	r1, r1, #8
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e007      	b.n	80037a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2184      	movs	r1, #132	@ 0x84
 800379c:	0209      	lsls	r1, r1, #8
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d109      	bne.n	80037be <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	0109      	lsls	r1, r1, #4
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e007      	b.n	80037ce <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4923      	ldr	r1, [pc, #140]	@ (8003858 <HAL_I2C_Init+0x144>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4920      	ldr	r1, [pc, #128]	@ (800385c <HAL_I2C_Init+0x148>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	491a      	ldr	r1, [pc, #104]	@ (8003854 <HAL_I2C_Init+0x140>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2241      	movs	r2, #65	@ 0x41
 8003832:	2120      	movs	r1, #32
 8003834:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2242      	movs	r2, #66	@ 0x42
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	f0ffffff 	.word	0xf0ffffff
 8003854:	ffff7fff 	.word	0xffff7fff
 8003858:	fffff7ff 	.word	0xfffff7ff
 800385c:	02008000 	.word	0x02008000

08003860 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	000c      	movs	r4, r1
 800386a:	0010      	movs	r0, r2
 800386c:	0019      	movs	r1, r3
 800386e:	230a      	movs	r3, #10
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	1c22      	adds	r2, r4, #0
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	2308      	movs	r3, #8
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	1c02      	adds	r2, r0, #0
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	1c0a      	adds	r2, r1, #0
 8003882:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2241      	movs	r2, #65	@ 0x41
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	d000      	beq.n	8003892 <HAL_I2C_Mem_Write+0x32>
 8003890:	e10c      	b.n	8003aac <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_I2C_Mem_Write+0x42>
 8003898:	232c      	movs	r3, #44	@ 0x2c
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2280      	movs	r2, #128	@ 0x80
 80038a6:	0092      	lsls	r2, r2, #2
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0ff      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2240      	movs	r2, #64	@ 0x40
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_I2C_Mem_Write+0x5c>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e0f8      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	2101      	movs	r1, #1
 80038c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c4:	f7ff fce0 	bl	8003288 <HAL_GetTick>
 80038c8:	0003      	movs	r3, r0
 80038ca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	0219      	lsls	r1, r3, #8
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2319      	movs	r3, #25
 80038d8:	2201      	movs	r2, #1
 80038da:	f000 fb0b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0e3      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2241      	movs	r2, #65	@ 0x41
 80038ea:	2121      	movs	r1, #33	@ 0x21
 80038ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2242      	movs	r2, #66	@ 0x42
 80038f2:	2140      	movs	r1, #64	@ 0x40
 80038f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	222c      	movs	r2, #44	@ 0x2c
 8003906:	18ba      	adds	r2, r7, r2
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003912:	1dbb      	adds	r3, r7, #6
 8003914:	881c      	ldrh	r4, [r3, #0]
 8003916:	2308      	movs	r3, #8
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	230a      	movs	r3, #10
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	8819      	ldrh	r1, [r3, #0]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	0023      	movs	r3, r4
 800392e:	f000 f9f9 	bl	8003d24 <I2C_RequestMemoryWrite>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d005      	beq.n	8003942 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2240      	movs	r2, #64	@ 0x40
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0b5      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	2bff      	cmp	r3, #255	@ 0xff
 800394a:	d911      	bls.n	8003970 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	22ff      	movs	r2, #255	@ 0xff
 8003950:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003956:	b2da      	uxtb	r2, r3
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	045c      	lsls	r4, r3, #17
 800395c:	230a      	movs	r3, #10
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	8819      	ldrh	r1, [r3, #0]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	2300      	movs	r3, #0
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	0023      	movs	r3, r4
 800396a:	f000 fc9d 	bl	80042a8 <I2C_TransferConfig>
 800396e:	e012      	b.n	8003996 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397e:	b2da      	uxtb	r2, r3
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	049c      	lsls	r4, r3, #18
 8003984:	230a      	movs	r3, #10
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	8819      	ldrh	r1, [r3, #0]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	2300      	movs	r3, #0
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	0023      	movs	r3, r4
 8003992:	f000 fc89 	bl	80042a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fb01 	bl	8003fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e081      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d03a      	beq.n	8003a5a <HAL_I2C_Mem_Write+0x1fa>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d136      	bne.n	8003a5a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	0013      	movs	r3, r2
 80039f6:	2200      	movs	r2, #0
 80039f8:	2180      	movs	r1, #128	@ 0x80
 80039fa:	f000 fa7b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	1e03      	subs	r3, r0, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e053      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2bff      	cmp	r3, #255	@ 0xff
 8003a0e:	d911      	bls.n	8003a34 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	045c      	lsls	r4, r3, #17
 8003a20:	230a      	movs	r3, #10
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	8819      	ldrh	r1, [r3, #0]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	0023      	movs	r3, r4
 8003a2e:	f000 fc3b 	bl	80042a8 <I2C_TransferConfig>
 8003a32:	e012      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	2380      	movs	r3, #128	@ 0x80
 8003a46:	049c      	lsls	r4, r3, #18
 8003a48:	230a      	movs	r3, #10
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	8819      	ldrh	r1, [r3, #0]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	2300      	movs	r3, #0
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	0023      	movs	r3, r4
 8003a56:	f000 fc27 	bl	80042a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d198      	bne.n	8003996 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fae0 	bl	8004030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a70:	1e03      	subs	r3, r0, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e01a      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	490b      	ldr	r1, [pc, #44]	@ (8003ab8 <HAL_I2C_Mem_Write+0x258>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2241      	movs	r2, #65	@ 0x41
 8003a94:	2120      	movs	r1, #32
 8003a96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2242      	movs	r2, #66	@ 0x42
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	@ 0x40
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b007      	add	sp, #28
 8003ab4:	bd90      	pop	{r4, r7, pc}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	fe00e800 	.word	0xfe00e800

08003abc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b089      	sub	sp, #36	@ 0x24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	000c      	movs	r4, r1
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	230a      	movs	r3, #10
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	1c22      	adds	r2, r4, #0
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	1c02      	adds	r2, r0, #0
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	1dbb      	adds	r3, r7, #6
 8003adc:	1c0a      	adds	r2, r1, #0
 8003ade:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2241      	movs	r2, #65	@ 0x41
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d000      	beq.n	8003aee <HAL_I2C_Mem_Read+0x32>
 8003aec:	e110      	b.n	8003d10 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <HAL_I2C_Mem_Read+0x42>
 8003af4:	232c      	movs	r3, #44	@ 0x2c
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2280      	movs	r2, #128	@ 0x80
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e103      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2240      	movs	r2, #64	@ 0x40
 8003b0e:	5c9b      	ldrb	r3, [r3, r2]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_I2C_Mem_Read+0x5c>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0fc      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	@ 0x40
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b20:	f7ff fbb2 	bl	8003288 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	0219      	lsls	r1, r3, #8
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2319      	movs	r3, #25
 8003b34:	2201      	movs	r2, #1
 8003b36:	f000 f9dd 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0e7      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2241      	movs	r2, #65	@ 0x41
 8003b46:	2122      	movs	r1, #34	@ 0x22
 8003b48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2242      	movs	r2, #66	@ 0x42
 8003b4e:	2140      	movs	r1, #64	@ 0x40
 8003b50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	222c      	movs	r2, #44	@ 0x2c
 8003b62:	18ba      	adds	r2, r7, r2
 8003b64:	8812      	ldrh	r2, [r2, #0]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	881c      	ldrh	r4, [r3, #0]
 8003b72:	2308      	movs	r3, #8
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	230a      	movs	r3, #10
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	8819      	ldrh	r1, [r3, #0]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	0023      	movs	r3, r4
 8003b8a:	f000 f92f 	bl	8003dec <I2C_RequestMemoryRead>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2240      	movs	r2, #64	@ 0x40
 8003b96:	2100      	movs	r1, #0
 8003b98:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0b9      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2bff      	cmp	r3, #255	@ 0xff
 8003ba6:	d911      	bls.n	8003bcc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	22ff      	movs	r2, #255	@ 0xff
 8003bac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	2380      	movs	r3, #128	@ 0x80
 8003bb6:	045c      	lsls	r4, r3, #17
 8003bb8:	230a      	movs	r3, #10
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	8819      	ldrh	r1, [r3, #0]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	4b56      	ldr	r3, [pc, #344]	@ (8003d1c <HAL_I2C_Mem_Read+0x260>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	0023      	movs	r3, r4
 8003bc6:	f000 fb6f 	bl	80042a8 <I2C_TransferConfig>
 8003bca:	e012      	b.n	8003bf2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	049c      	lsls	r4, r3, #18
 8003be0:	230a      	movs	r3, #10
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	8819      	ldrh	r1, [r3, #0]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	4b4c      	ldr	r3, [pc, #304]	@ (8003d1c <HAL_I2C_Mem_Read+0x260>)
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	0023      	movs	r3, r4
 8003bee:	f000 fb5b 	bl	80042a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	0013      	movs	r3, r2
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2104      	movs	r1, #4
 8003c00:	f000 f978 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e082      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d03a      	beq.n	8003cbe <HAL_I2C_Mem_Read+0x202>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d136      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	0013      	movs	r3, r2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2180      	movs	r1, #128	@ 0x80
 8003c5e:	f000 f949 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e053      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2bff      	cmp	r3, #255	@ 0xff
 8003c72:	d911      	bls.n	8003c98 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	22ff      	movs	r2, #255	@ 0xff
 8003c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	045c      	lsls	r4, r3, #17
 8003c84:	230a      	movs	r3, #10
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	8819      	ldrh	r1, [r3, #0]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	0023      	movs	r3, r4
 8003c92:	f000 fb09 	bl	80042a8 <I2C_TransferConfig>
 8003c96:	e012      	b.n	8003cbe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	049c      	lsls	r4, r3, #18
 8003cac:	230a      	movs	r3, #10
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	8819      	ldrh	r1, [r3, #0]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0023      	movs	r3, r4
 8003cba:	f000 faf5 	bl	80042a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d194      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f9ae 	bl	8004030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cd4:	1e03      	subs	r3, r0, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e01a      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <HAL_I2C_Mem_Read+0x264>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2241      	movs	r2, #65	@ 0x41
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2242      	movs	r2, #66	@ 0x42
 8003d00:	2100      	movs	r1, #0
 8003d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2240      	movs	r2, #64	@ 0x40
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b007      	add	sp, #28
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	80002400 	.word	0x80002400
 8003d20:	fe00e800 	.word	0xfe00e800

08003d24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d24:	b5b0      	push	{r4, r5, r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	000c      	movs	r4, r1
 8003d2e:	0010      	movs	r0, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	250a      	movs	r5, #10
 8003d34:	197b      	adds	r3, r7, r5
 8003d36:	1c22      	adds	r2, r4, #0
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	1c02      	adds	r2, r0, #0
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	1c0a      	adds	r2, r1, #0
 8003d46:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d48:	1dbb      	adds	r3, r7, #6
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	2380      	movs	r3, #128	@ 0x80
 8003d50:	045c      	lsls	r4, r3, #17
 8003d52:	197b      	adds	r3, r7, r5
 8003d54:	8819      	ldrh	r1, [r3, #0]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	4b23      	ldr	r3, [pc, #140]	@ (8003de8 <I2C_RequestMemoryWrite+0xc4>)
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	0023      	movs	r3, r4
 8003d5e:	f000 faa3 	bl	80042a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	6a39      	ldr	r1, [r7, #32]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f91b 	bl	8003fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e033      	b.n	8003dde <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d76:	1dbb      	adds	r3, r7, #6
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7e:	2308      	movs	r3, #8
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d8c:	e019      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8e:	2308      	movs	r3, #8
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da2:	6a39      	ldr	r1, [r7, #32]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 f8fc 	bl	8003fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e014      	b.n	8003dde <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	2308      	movs	r3, #8
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a3a      	ldr	r2, [r7, #32]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	0013      	movs	r3, r2
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	@ 0x80
 8003dd0:	f000 f890 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bdb0      	pop	{r4, r5, r7, pc}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	80002000 	.word	0x80002000

08003dec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003dec:	b5b0      	push	{r4, r5, r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	000c      	movs	r4, r1
 8003df6:	0010      	movs	r0, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	250a      	movs	r5, #10
 8003dfc:	197b      	adds	r3, r7, r5
 8003dfe:	1c22      	adds	r2, r4, #0
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	2308      	movs	r3, #8
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	1c02      	adds	r2, r0, #0
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	1dbb      	adds	r3, r7, #6
 8003e0c:	1c0a      	adds	r2, r1, #0
 8003e0e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e10:	1dbb      	adds	r3, r7, #6
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	197b      	adds	r3, r7, r5
 8003e18:	8819      	ldrh	r1, [r3, #0]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	4b23      	ldr	r3, [pc, #140]	@ (8003eac <I2C_RequestMemoryRead+0xc0>)
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2300      	movs	r3, #0
 8003e22:	f000 fa41 	bl	80042a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	6a39      	ldr	r1, [r7, #32]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f8b9 	bl	8003fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e32:	1e03      	subs	r3, r0, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e033      	b.n	8003ea2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e3a:	1dbb      	adds	r3, r7, #6
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e42:	2308      	movs	r3, #8
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e50:	e019      	b.n	8003e86 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e52:	2308      	movs	r3, #8
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e66:	6a39      	ldr	r1, [r7, #32]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 f89a 	bl	8003fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e014      	b.n	8003ea2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e78:	2308      	movs	r3, #8
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	0013      	movs	r3, r2
 8003e90:	2200      	movs	r2, #0
 8003e92:	2140      	movs	r1, #64	@ 0x40
 8003e94:	f000 f82e 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	80002000 	.word	0x80002000

08003eb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d103      	bne.n	8003ece <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d007      	beq.n	8003eec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
  }
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e03a      	b.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f000 f8d3 	bl	80040b8 <I2C_IsErrorOccurred>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e040      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	d02d      	beq.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f20:	f7ff f9b2 	bl	8003288 <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d122      	bne.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	425a      	negs	r2, r3
 8003f46:	4153      	adcs	r3, r2
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	1dfb      	adds	r3, r7, #7
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d113      	bne.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	2220      	movs	r2, #32
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2241      	movs	r2, #65	@ 0x41
 8003f64:	2120      	movs	r1, #32
 8003f66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2242      	movs	r2, #66	@ 0x42
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2240      	movs	r2, #64	@ 0x40
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e00f      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4013      	ands	r3, r2
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	425a      	negs	r2, r3
 8003f8c:	4153      	adcs	r3, r2
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	001a      	movs	r2, r3
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d0b5      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fb0:	e032      	b.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 f87d 	bl	80040b8 <I2C_IsErrorOccurred>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e030      	b.n	8004028 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	d025      	beq.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fcc:	f7ff f95c 	bl	8003288 <HAL_GetTick>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11a      	bne.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d013      	beq.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2241      	movs	r2, #65	@ 0x41
 8004000:	2120      	movs	r1, #32
 8004002:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2242      	movs	r2, #66	@ 0x42
 8004008:	2100      	movs	r1, #0
 800400a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	2100      	movs	r1, #0
 8004012:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e007      	b.n	8004028 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2202      	movs	r2, #2
 8004020:	4013      	ands	r3, r2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d1c5      	bne.n	8003fb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800403c:	e02f      	b.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 f837 	bl	80040b8 <I2C_IsErrorOccurred>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d001      	beq.n	8004052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e02d      	b.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7ff f919 	bl	8003288 <HAL_GetTick>
 8004056:	0002      	movs	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d11a      	bne.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2220      	movs	r2, #32
 8004070:	4013      	ands	r3, r2
 8004072:	2b20      	cmp	r3, #32
 8004074:	d013      	beq.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	2220      	movs	r2, #32
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2241      	movs	r2, #65	@ 0x41
 8004086:	2120      	movs	r1, #32
 8004088:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2242      	movs	r2, #66	@ 0x42
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2240      	movs	r2, #64	@ 0x40
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e007      	b.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2220      	movs	r2, #32
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d1c8      	bne.n	800403e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	@ 0x28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2327      	movs	r3, #39	@ 0x27
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2210      	movs	r2, #16
 80040e0:	4013      	ands	r3, r2
 80040e2:	d100      	bne.n	80040e6 <I2C_IsErrorOccurred+0x2e>
 80040e4:	e079      	b.n	80041da <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2210      	movs	r2, #16
 80040ec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040ee:	e057      	b.n	80041a0 <I2C_IsErrorOccurred+0xe8>
 80040f0:	2227      	movs	r2, #39	@ 0x27
 80040f2:	18bb      	adds	r3, r7, r2
 80040f4:	18ba      	adds	r2, r7, r2
 80040f6:	7812      	ldrb	r2, [r2, #0]
 80040f8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3301      	adds	r3, #1
 80040fe:	d04f      	beq.n	80041a0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004100:	f7ff f8c2 	bl	8003288 <HAL_GetTick>
 8004104:	0002      	movs	r2, r0
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <I2C_IsErrorOccurred+0x5e>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d144      	bne.n	80041a0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	4013      	ands	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004124:	2013      	movs	r0, #19
 8004126:	183b      	adds	r3, r7, r0
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	2142      	movs	r1, #66	@ 0x42
 800412c:	5c52      	ldrb	r2, [r2, r1]
 800412e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	401a      	ands	r2, r3
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	429a      	cmp	r2, r3
 8004142:	d126      	bne.n	8004192 <I2C_IsErrorOccurred+0xda>
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	01db      	lsls	r3, r3, #7
 800414a:	429a      	cmp	r2, r3
 800414c:	d021      	beq.n	8004192 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800414e:	183b      	adds	r3, r7, r0
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b20      	cmp	r3, #32
 8004154:	d01d      	beq.n	8004192 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2180      	movs	r1, #128	@ 0x80
 8004162:	01c9      	lsls	r1, r1, #7
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004168:	f7ff f88e 	bl	8003288 <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004170:	e00f      	b.n	8004192 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004172:	f7ff f889 	bl	8003288 <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b19      	cmp	r3, #25
 800417e:	d908      	bls.n	8004192 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	2220      	movs	r2, #32
 8004184:	4313      	orrs	r3, r2
 8004186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004188:	2327      	movs	r3, #39	@ 0x27
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]

              break;
 8004190:	e006      	b.n	80041a0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2220      	movs	r2, #32
 800419a:	4013      	ands	r3, r2
 800419c:	2b20      	cmp	r3, #32
 800419e:	d1e8      	bne.n	8004172 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d004      	beq.n	80041b8 <I2C_IsErrorOccurred+0x100>
 80041ae:	2327      	movs	r3, #39	@ 0x27
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d09b      	beq.n	80040f0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041b8:	2327      	movs	r3, #39	@ 0x27
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2220      	movs	r2, #32
 80041c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2204      	movs	r2, #4
 80041ce:	4313      	orrs	r3, r2
 80041d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041d2:	2327      	movs	r3, #39	@ 0x27
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4013      	ands	r3, r2
 80041ea:	d00c      	beq.n	8004206 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2280      	movs	r2, #128	@ 0x80
 80041fa:	0052      	lsls	r2, r2, #1
 80041fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041fe:	2327      	movs	r3, #39	@ 0x27
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4013      	ands	r3, r2
 800420e:	d00c      	beq.n	800422a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2208      	movs	r2, #8
 8004214:	4313      	orrs	r3, r2
 8004216:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2280      	movs	r2, #128	@ 0x80
 800421e:	00d2      	lsls	r2, r2, #3
 8004220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004222:	2327      	movs	r3, #39	@ 0x27
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4013      	ands	r3, r2
 8004232:	d00c      	beq.n	800424e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2202      	movs	r2, #2
 8004238:	4313      	orrs	r3, r2
 800423a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2280      	movs	r2, #128	@ 0x80
 8004242:	0092      	lsls	r2, r2, #2
 8004244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004246:	2327      	movs	r3, #39	@ 0x27
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800424e:	2327      	movs	r3, #39	@ 0x27
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01d      	beq.n	8004294 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	0018      	movs	r0, r3
 800425c:	f7ff fe28 	bl	8003eb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	490e      	ldr	r1, [pc, #56]	@ (80042a4 <I2C_IsErrorOccurred+0x1ec>)
 800426c:	400a      	ands	r2, r1
 800426e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2241      	movs	r2, #65	@ 0x41
 8004280:	2120      	movs	r1, #32
 8004282:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2242      	movs	r2, #66	@ 0x42
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2240      	movs	r2, #64	@ 0x40
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004294:	2327      	movs	r3, #39	@ 0x27
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	781b      	ldrb	r3, [r3, #0]
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b00a      	add	sp, #40	@ 0x28
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	fe00e800 	.word	0xfe00e800

080042a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	0008      	movs	r0, r1
 80042b2:	0011      	movs	r1, r2
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	240a      	movs	r4, #10
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	1c02      	adds	r2, r0, #0
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	2009      	movs	r0, #9
 80042c0:	183b      	adds	r3, r7, r0
 80042c2:	1c0a      	adds	r2, r1, #0
 80042c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	059b      	lsls	r3, r3, #22
 80042cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	0419      	lsls	r1, r3, #16
 80042d4:	23ff      	movs	r3, #255	@ 0xff
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	4313      	orrs	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f2:	0d51      	lsrs	r1, r2, #21
 80042f4:	2280      	movs	r2, #128	@ 0x80
 80042f6:	00d2      	lsls	r2, r2, #3
 80042f8:	400a      	ands	r2, r1
 80042fa:	4907      	ldr	r1, [pc, #28]	@ (8004318 <I2C_TransferConfig+0x70>)
 80042fc:	430a      	orrs	r2, r1
 80042fe:	43d2      	mvns	r2, r2
 8004300:	401a      	ands	r2, r3
 8004302:	0011      	movs	r1, r2
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b007      	add	sp, #28
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	03ff63ff 	.word	0x03ff63ff

0800431c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2241      	movs	r2, #65	@ 0x41
 800432a:	5c9b      	ldrb	r3, [r3, r2]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	d138      	bne.n	80043a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2240      	movs	r2, #64	@ 0x40
 8004336:	5c9b      	ldrb	r3, [r3, r2]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800433c:	2302      	movs	r3, #2
 800433e:	e032      	b.n	80043a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2240      	movs	r2, #64	@ 0x40
 8004344:	2101      	movs	r1, #1
 8004346:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2241      	movs	r2, #65	@ 0x41
 800434c:	2124      	movs	r1, #36	@ 0x24
 800434e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	438a      	bics	r2, r1
 800435e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4911      	ldr	r1, [pc, #68]	@ (80043b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800436c:	400a      	ands	r2, r1
 800436e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2241      	movs	r2, #65	@ 0x41
 8004394:	2120      	movs	r1, #32
 8004396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	0018      	movs	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b002      	add	sp, #8
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	ffffefff 	.word	0xffffefff

080043b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2241      	movs	r2, #65	@ 0x41
 80043c2:	5c9b      	ldrb	r3, [r3, r2]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d139      	bne.n	800443e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2240      	movs	r2, #64	@ 0x40
 80043ce:	5c9b      	ldrb	r3, [r3, r2]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e033      	b.n	8004440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2240      	movs	r2, #64	@ 0x40
 80043dc:	2101      	movs	r1, #1
 80043de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2241      	movs	r2, #65	@ 0x41
 80043e4:	2124      	movs	r1, #36	@ 0x24
 80043e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2101      	movs	r1, #1
 80043f4:	438a      	bics	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a11      	ldr	r2, [pc, #68]	@ (8004448 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2241      	movs	r2, #65	@ 0x41
 800442e:	2120      	movs	r1, #32
 8004430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2240      	movs	r2, #64	@ 0x40
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b004      	add	sp, #16
 8004446:	bd80      	pop	{r7, pc}
 8004448:	fffff0ff 	.word	0xfffff0ff

0800444c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	429a      	cmp	r2, r3
 800446e:	d11f      	bne.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004470:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	0013      	movs	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	189b      	adds	r3, r3, r2
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4912      	ldr	r1, [pc, #72]	@ (80044c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800447e:	0018      	movs	r0, r3
 8004480:	f7fb fe5a 	bl	8000138 <__udivsi3>
 8004484:	0003      	movs	r3, r0
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448a:	e008      	b.n	800449e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b01      	subs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e001      	b.n	800449e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e009      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800449e:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	401a      	ands	r2, r3
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d0ed      	beq.n	800448c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b004      	add	sp, #16
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	40007000 	.word	0x40007000
 80044c0:	fffff9ff 	.word	0xfffff9ff
 80044c4:	20000000 	.word	0x20000000
 80044c8:	000f4240 	.word	0x000f4240

080044cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e2f3      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	4013      	ands	r3, r2
 80044e6:	d100      	bne.n	80044ea <HAL_RCC_OscConfig+0x1e>
 80044e8:	e07c      	b.n	80045e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ea:	4bc3      	ldr	r3, [pc, #780]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2238      	movs	r2, #56	@ 0x38
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f4:	4bc0      	ldr	r3, [pc, #768]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2203      	movs	r2, #3
 80044fa:	4013      	ands	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b10      	cmp	r3, #16
 8004502:	d102      	bne.n	800450a <HAL_RCC_OscConfig+0x3e>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d002      	beq.n	8004510 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d10b      	bne.n	8004528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	4bb9      	ldr	r3, [pc, #740]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	4013      	ands	r3, r2
 800451a:	d062      	beq.n	80045e2 <HAL_RCC_OscConfig+0x116>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d15e      	bne.n	80045e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e2ce      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	025b      	lsls	r3, r3, #9
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x78>
 8004534:	4bb0      	ldr	r3, [pc, #704]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4baf      	ldr	r3, [pc, #700]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800453a:	2180      	movs	r1, #128	@ 0x80
 800453c:	0249      	lsls	r1, r1, #9
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e020      	b.n	8004586 <HAL_RCC_OscConfig+0xba>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	23a0      	movs	r3, #160	@ 0xa0
 800454a:	02db      	lsls	r3, r3, #11
 800454c:	429a      	cmp	r2, r3
 800454e:	d10e      	bne.n	800456e <HAL_RCC_OscConfig+0xa2>
 8004550:	4ba9      	ldr	r3, [pc, #676]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4ba8      	ldr	r3, [pc, #672]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004556:	2180      	movs	r1, #128	@ 0x80
 8004558:	02c9      	lsls	r1, r1, #11
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	4ba6      	ldr	r3, [pc, #664]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4ba5      	ldr	r3, [pc, #660]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004564:	2180      	movs	r1, #128	@ 0x80
 8004566:	0249      	lsls	r1, r1, #9
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e00b      	b.n	8004586 <HAL_RCC_OscConfig+0xba>
 800456e:	4ba2      	ldr	r3, [pc, #648]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4ba1      	ldr	r3, [pc, #644]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004574:	49a1      	ldr	r1, [pc, #644]	@ (80047fc <HAL_RCC_OscConfig+0x330>)
 8004576:	400a      	ands	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	4b9f      	ldr	r3, [pc, #636]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b9e      	ldr	r3, [pc, #632]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004580:	499f      	ldr	r1, [pc, #636]	@ (8004800 <HAL_RCC_OscConfig+0x334>)
 8004582:	400a      	ands	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fe fe7b 	bl	8003288 <HAL_GetTick>
 8004592:	0003      	movs	r3, r0
 8004594:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fe fe76 	bl	8003288 <HAL_GetTick>
 800459c:	0002      	movs	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e28d      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	4b93      	ldr	r3, [pc, #588]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	2380      	movs	r3, #128	@ 0x80
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	4013      	ands	r3, r2
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0xcc>
 80045b6:	e015      	b.n	80045e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fe fe66 	bl	8003288 <HAL_GetTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c2:	f7fe fe61 	bl	8003288 <HAL_GetTick>
 80045c6:	0002      	movs	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	@ 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e278      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045d4:	4b88      	ldr	r3, [pc, #544]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2380      	movs	r3, #128	@ 0x80
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	4013      	ands	r3, r2
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0xf6>
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2202      	movs	r2, #2
 80045ea:	4013      	ands	r3, r2
 80045ec:	d100      	bne.n	80045f0 <HAL_RCC_OscConfig+0x124>
 80045ee:	e099      	b.n	8004724 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f0:	4b81      	ldr	r3, [pc, #516]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2238      	movs	r2, #56	@ 0x38
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045fa:	4b7f      	ldr	r3, [pc, #508]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2203      	movs	r2, #3
 8004600:	4013      	ands	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b10      	cmp	r3, #16
 8004608:	d102      	bne.n	8004610 <HAL_RCC_OscConfig+0x144>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d002      	beq.n	8004616 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d135      	bne.n	8004682 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004616:	4b78      	ldr	r3, [pc, #480]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4013      	ands	r3, r2
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x162>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e24b      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b72      	ldr	r3, [pc, #456]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4a74      	ldr	r2, [pc, #464]	@ (8004804 <HAL_RCC_OscConfig+0x338>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	4b6e      	ldr	r3, [pc, #440]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d112      	bne.n	8004670 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800464a:	4b6b      	ldr	r3, [pc, #428]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6e      	ldr	r2, [pc, #440]	@ (8004808 <HAL_RCC_OscConfig+0x33c>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	4b67      	ldr	r3, [pc, #412]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800465e:	4b66      	ldr	r3, [pc, #408]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	0adb      	lsrs	r3, r3, #11
 8004664:	2207      	movs	r2, #7
 8004666:	4013      	ands	r3, r2
 8004668:	4a68      	ldr	r2, [pc, #416]	@ (800480c <HAL_RCC_OscConfig+0x340>)
 800466a:	40da      	lsrs	r2, r3
 800466c:	4b68      	ldr	r3, [pc, #416]	@ (8004810 <HAL_RCC_OscConfig+0x344>)
 800466e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004670:	4b68      	ldr	r3, [pc, #416]	@ (8004814 <HAL_RCC_OscConfig+0x348>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0018      	movs	r0, r3
 8004676:	f7fe fdab 	bl	80031d0 <HAL_InitTick>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d051      	beq.n	8004722 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e221      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d030      	beq.n	80046ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800468a:	4b5b      	ldr	r3, [pc, #364]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5e      	ldr	r2, [pc, #376]	@ (8004808 <HAL_RCC_OscConfig+0x33c>)
 8004690:	4013      	ands	r3, r2
 8004692:	0019      	movs	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	4b57      	ldr	r3, [pc, #348]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800469e:	4b56      	ldr	r3, [pc, #344]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b55      	ldr	r3, [pc, #340]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046a4:	2180      	movs	r1, #128	@ 0x80
 80046a6:	0049      	lsls	r1, r1, #1
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fe fdec 	bl	8003288 <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fe fde7 	bl	8003288 <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e1fe      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c8:	4b4b      	ldr	r3, [pc, #300]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4013      	ands	r3, r2
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b48      	ldr	r3, [pc, #288]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004804 <HAL_RCC_OscConfig+0x338>)
 80046da:	4013      	ands	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	4b44      	ldr	r3, [pc, #272]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e01b      	b.n	8004724 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80046ec:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80046f2:	4949      	ldr	r1, [pc, #292]	@ (8004818 <HAL_RCC_OscConfig+0x34c>)
 80046f4:	400a      	ands	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fe fdc6 	bl	8003288 <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004702:	f7fe fdc1 	bl	8003288 <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1d8      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004714:	4b38      	ldr	r3, [pc, #224]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4013      	ands	r3, r2
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x236>
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004722:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2208      	movs	r2, #8
 800472a:	4013      	ands	r3, r2
 800472c:	d047      	beq.n	80047be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800472e:	4b32      	ldr	r3, [pc, #200]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2238      	movs	r2, #56	@ 0x38
 8004734:	4013      	ands	r3, r2
 8004736:	2b18      	cmp	r3, #24
 8004738:	d10a      	bne.n	8004750 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800473a:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800473c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473e:	2202      	movs	r2, #2
 8004740:	4013      	ands	r3, r2
 8004742:	d03c      	beq.n	80047be <HAL_RCC_OscConfig+0x2f2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d138      	bne.n	80047be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e1ba      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004758:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800475a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800475c:	4b26      	ldr	r3, [pc, #152]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800475e:	2101      	movs	r1, #1
 8004760:	430a      	orrs	r2, r1
 8004762:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fe fd90 	bl	8003288 <HAL_GetTick>
 8004768:	0003      	movs	r3, r0
 800476a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476e:	f7fe fd8b 	bl	8003288 <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1a2      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004780:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004784:	2202      	movs	r2, #2
 8004786:	4013      	ands	r3, r2
 8004788:	d0f1      	beq.n	800476e <HAL_RCC_OscConfig+0x2a2>
 800478a:	e018      	b.n	80047be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800478c:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 800478e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004790:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 8004792:	2101      	movs	r1, #1
 8004794:	438a      	bics	r2, r1
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fe fd76 	bl	8003288 <HAL_GetTick>
 800479c:	0003      	movs	r3, r0
 800479e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fe fd71 	bl	8003288 <HAL_GetTick>
 80047a6:	0002      	movs	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e188      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b4:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80047b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b8:	2202      	movs	r2, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d1f1      	bne.n	80047a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2204      	movs	r2, #4
 80047c4:	4013      	ands	r3, r2
 80047c6:	d100      	bne.n	80047ca <HAL_RCC_OscConfig+0x2fe>
 80047c8:	e0c6      	b.n	8004958 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	231f      	movs	r3, #31
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047d2:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2238      	movs	r2, #56	@ 0x38
 80047d8:	4013      	ands	r3, r2
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d11e      	bne.n	800481c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_OscConfig+0x32c>)
 80047e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	d100      	bne.n	80047ea <HAL_RCC_OscConfig+0x31e>
 80047e8:	e0b6      	b.n	8004958 <HAL_RCC_OscConfig+0x48c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d000      	beq.n	80047f4 <HAL_RCC_OscConfig+0x328>
 80047f2:	e0b1      	b.n	8004958 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e166      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
 80047f8:	40021000 	.word	0x40021000
 80047fc:	fffeffff 	.word	0xfffeffff
 8004800:	fffbffff 	.word	0xfffbffff
 8004804:	ffff80ff 	.word	0xffff80ff
 8004808:	ffffc7ff 	.word	0xffffc7ff
 800480c:	00f42400 	.word	0x00f42400
 8004810:	20000000 	.word	0x20000000
 8004814:	20000004 	.word	0x20000004
 8004818:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800481c:	4bac      	ldr	r3, [pc, #688]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 800481e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	055b      	lsls	r3, r3, #21
 8004824:	4013      	ands	r3, r2
 8004826:	d101      	bne.n	800482c <HAL_RCC_OscConfig+0x360>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x362>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d011      	beq.n	8004856 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004832:	4ba7      	ldr	r3, [pc, #668]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004836:	4ba6      	ldr	r3, [pc, #664]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004838:	2180      	movs	r1, #128	@ 0x80
 800483a:	0549      	lsls	r1, r1, #21
 800483c:	430a      	orrs	r2, r1
 800483e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004840:	4ba3      	ldr	r3, [pc, #652]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	055b      	lsls	r3, r3, #21
 8004848:	4013      	ands	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800484e:	231f      	movs	r3, #31
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004856:	4b9f      	ldr	r3, [pc, #636]	@ (8004ad4 <HAL_RCC_OscConfig+0x608>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4013      	ands	r3, r2
 8004860:	d11a      	bne.n	8004898 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004862:	4b9c      	ldr	r3, [pc, #624]	@ (8004ad4 <HAL_RCC_OscConfig+0x608>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b9b      	ldr	r3, [pc, #620]	@ (8004ad4 <HAL_RCC_OscConfig+0x608>)
 8004868:	2180      	movs	r1, #128	@ 0x80
 800486a:	0049      	lsls	r1, r1, #1
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004870:	f7fe fd0a 	bl	8003288 <HAL_GetTick>
 8004874:	0003      	movs	r3, r0
 8004876:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487a:	f7fe fd05 	bl	8003288 <HAL_GetTick>
 800487e:	0002      	movs	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e11c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488c:	4b91      	ldr	r3, [pc, #580]	@ (8004ad4 <HAL_RCC_OscConfig+0x608>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x3e2>
 80048a0:	4b8b      	ldr	r3, [pc, #556]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048a4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	430a      	orrs	r2, r1
 80048aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ac:	e01c      	b.n	80048e8 <HAL_RCC_OscConfig+0x41c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x404>
 80048b6:	4b86      	ldr	r3, [pc, #536]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048ba:	4b85      	ldr	r3, [pc, #532]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048bc:	2104      	movs	r1, #4
 80048be:	430a      	orrs	r2, r1
 80048c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048c2:	4b83      	ldr	r3, [pc, #524]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048c6:	4b82      	ldr	r3, [pc, #520]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0x41c>
 80048d0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048d6:	2101      	movs	r1, #1
 80048d8:	438a      	bics	r2, r1
 80048da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048dc:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048e0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80048e2:	2104      	movs	r1, #4
 80048e4:	438a      	bics	r2, r1
 80048e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d014      	beq.n	800491a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fe fcca 	bl	8003288 <HAL_GetTick>
 80048f4:	0003      	movs	r3, r0
 80048f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f8:	e009      	b.n	800490e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fe fcc5 	bl	8003288 <HAL_GetTick>
 80048fe:	0002      	movs	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	4a74      	ldr	r2, [pc, #464]	@ (8004ad8 <HAL_RCC_OscConfig+0x60c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0db      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490e:	4b70      	ldr	r3, [pc, #448]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	2202      	movs	r2, #2
 8004914:	4013      	ands	r3, r2
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x42e>
 8004918:	e013      	b.n	8004942 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fe fcb5 	bl	8003288 <HAL_GetTick>
 800491e:	0003      	movs	r3, r0
 8004920:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004922:	e009      	b.n	8004938 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fe fcb0 	bl	8003288 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ad8 <HAL_RCC_OscConfig+0x60c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0c6      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004938:	4b65      	ldr	r3, [pc, #404]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 800493a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493c:	2202      	movs	r2, #2
 800493e:	4013      	ands	r3, r2
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004942:	231f      	movs	r3, #31
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800494c:	4b60      	ldr	r3, [pc, #384]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 800494e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004950:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004952:	4962      	ldr	r1, [pc, #392]	@ (8004adc <HAL_RCC_OscConfig+0x610>)
 8004954:	400a      	ands	r2, r1
 8004956:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d100      	bne.n	8004962 <HAL_RCC_OscConfig+0x496>
 8004960:	e0b0      	b.n	8004ac4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004962:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2238      	movs	r2, #56	@ 0x38
 8004968:	4013      	ands	r3, r2
 800496a:	2b10      	cmp	r3, #16
 800496c:	d100      	bne.n	8004970 <HAL_RCC_OscConfig+0x4a4>
 800496e:	e078      	b.n	8004a62 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d153      	bne.n	8004a20 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004978:	4b55      	ldr	r3, [pc, #340]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b54      	ldr	r3, [pc, #336]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 800497e:	4958      	ldr	r1, [pc, #352]	@ (8004ae0 <HAL_RCC_OscConfig+0x614>)
 8004980:	400a      	ands	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fe fc80 	bl	8003288 <HAL_GetTick>
 8004988:	0003      	movs	r3, r0
 800498a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498e:	f7fe fc7b 	bl	8003288 <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e092      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	049b      	lsls	r3, r3, #18
 80049a8:	4013      	ands	r3, r2
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ac:	4b48      	ldr	r3, [pc, #288]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a4c      	ldr	r2, [pc, #304]	@ (8004ae4 <HAL_RCC_OscConfig+0x618>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1a      	ldr	r2, [r3, #32]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	431a      	orrs	r2, r3
 80049d4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049d6:	430a      	orrs	r2, r1
 80049d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049da:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0449      	lsls	r1, r1, #17
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80049e8:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 80049ee:	2180      	movs	r1, #128	@ 0x80
 80049f0:	0549      	lsls	r1, r1, #21
 80049f2:	430a      	orrs	r2, r1
 80049f4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fe fc47 	bl	8003288 <HAL_GetTick>
 80049fa:	0003      	movs	r3, r0
 80049fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fe fc42 	bl	8003288 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e059      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	049b      	lsls	r3, r3, #18
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x534>
 8004a1e:	e051      	b.n	8004ac4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a20:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a26:	492e      	ldr	r1, [pc, #184]	@ (8004ae0 <HAL_RCC_OscConfig+0x614>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fc2c 	bl	8003288 <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a36:	f7fe fc27 	bl	8003288 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e03e      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a48:	4b21      	ldr	r3, [pc, #132]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	049b      	lsls	r3, r3, #18
 8004a50:	4013      	ands	r3, r2
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004a54:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a5a:	4923      	ldr	r1, [pc, #140]	@ (8004ae8 <HAL_RCC_OscConfig+0x61c>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e030      	b.n	8004ac4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e02b      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a6e:	4b18      	ldr	r3, [pc, #96]	@ (8004ad0 <HAL_RCC_OscConfig+0x604>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2203      	movs	r2, #3
 8004a78:	401a      	ands	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d11e      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2270      	movs	r2, #112	@ 0x70
 8004a86:	401a      	ands	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d117      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	23fe      	movs	r3, #254	@ 0xfe
 8004a94:	01db      	lsls	r3, r3, #7
 8004a96:	401a      	ands	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	23f8      	movs	r3, #248	@ 0xf8
 8004aa6:	039b      	lsls	r3, r3, #14
 8004aa8:	401a      	ands	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	0f5b      	lsrs	r3, r3, #29
 8004ab6:	075a      	lsls	r2, r3, #29
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b008      	add	sp, #32
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	00001388 	.word	0x00001388
 8004adc:	efffffff 	.word	0xefffffff
 8004ae0:	feffffff 	.word	0xfeffffff
 8004ae4:	1fc1808c 	.word	0x1fc1808c
 8004ae8:	effefffc 	.word	0xeffefffc

08004aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0e9      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b76      	ldr	r3, [pc, #472]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2207      	movs	r2, #7
 8004b06:	4013      	ands	r3, r2
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d91e      	bls.n	8004b4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b73      	ldr	r3, [pc, #460]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2207      	movs	r2, #7
 8004b14:	4393      	bics	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b20:	f7fe fbb2 	bl	8003288 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b28:	e009      	b.n	8004b3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2a:	f7fe fbad 	bl	8003288 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	4a6a      	ldr	r2, [pc, #424]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0ca      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b3e:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2207      	movs	r2, #7
 8004b44:	4013      	ands	r3, r2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d1ee      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2202      	movs	r2, #2
 8004b52:	4013      	ands	r3, r2
 8004b54:	d015      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d006      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b60:	4b60      	ldr	r3, [pc, #384]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	4b5f      	ldr	r3, [pc, #380]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b66:	21e0      	movs	r1, #224	@ 0xe0
 8004b68:	01c9      	lsls	r1, r1, #7
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4a5d      	ldr	r2, [pc, #372]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b59      	ldr	r3, [pc, #356]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2201      	movs	r2, #1
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d057      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b94:	4b53      	ldr	r3, [pc, #332]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	2380      	movs	r3, #128	@ 0x80
 8004b9a:	029b      	lsls	r3, r3, #10
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d12b      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e097      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bac:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	049b      	lsls	r3, r3, #18
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d11f      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e08b      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc4:	4b47      	ldr	r3, [pc, #284]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d113      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e07f      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bdc:	4b41      	ldr	r3, [pc, #260]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be0:	2202      	movs	r2, #2
 8004be2:	4013      	ands	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e074      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bee:	2202      	movs	r2, #2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e06d      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2207      	movs	r2, #7
 8004bfe:	4393      	bics	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b37      	ldr	r3, [pc, #220]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fe fb3c 	bl	8003288 <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c14:	e009      	b.n	8004c2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c16:	f7fe fb37 	bl	8003288 <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e054      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2238      	movs	r2, #56	@ 0x38
 8004c30:	401a      	ands	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1ec      	bne.n	8004c16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2207      	movs	r2, #7
 8004c42:	4013      	ands	r3, r2
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d21e      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2207      	movs	r2, #7
 8004c50:	4393      	bics	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c5c:	f7fe fb14 	bl	8003288 <HAL_GetTick>
 8004c60:	0003      	movs	r3, r0
 8004c62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c64:	e009      	b.n	8004c7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c66:	f7fe fb0f 	bl	8003288 <HAL_GetTick>
 8004c6a:	0002      	movs	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e02c      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c7a:	4b18      	ldr	r3, [pc, #96]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2207      	movs	r2, #7
 8004c80:	4013      	ands	r3, r2
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1ee      	bne.n	8004c66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4a15      	ldr	r2, [pc, #84]	@ (8004cec <HAL_RCC_ClockConfig+0x200>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ca6:	f000 f829 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004caa:	0001      	movs	r1, r0
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	220f      	movs	r2, #15
 8004cb4:	401a      	ands	r2, r3
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <HAL_RCC_ClockConfig+0x204>)
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	58d3      	ldr	r3, [r2, r3]
 8004cbc:	221f      	movs	r2, #31
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	000a      	movs	r2, r1
 8004cc2:	40da      	lsrs	r2, r3
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <HAL_RCC_ClockConfig+0x208>)
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <HAL_RCC_ClockConfig+0x20c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7fe fa7f 	bl	80031d0 <HAL_InitTick>
 8004cd2:	0003      	movs	r3, r0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	00001388 	.word	0x00001388
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	fffff0ff 	.word	0xfffff0ff
 8004cec:	ffff8fff 	.word	0xffff8fff
 8004cf0:	08008b54 	.word	0x08008b54
 8004cf4:	20000000 	.word	0x20000000
 8004cf8:	20000004 	.word	0x20000004

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d02:	4b3c      	ldr	r3, [pc, #240]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2238      	movs	r2, #56	@ 0x38
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d10f      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d0c:	4b39      	ldr	r3, [pc, #228]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0adb      	lsrs	r3, r3, #11
 8004d12:	2207      	movs	r2, #7
 8004d14:	4013      	ands	r3, r2
 8004d16:	2201      	movs	r2, #1
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	4835      	ldr	r0, [pc, #212]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d22:	f7fb fa09 	bl	8000138 <__udivsi3>
 8004d26:	0003      	movs	r3, r0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e05d      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d2c:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2238      	movs	r2, #56	@ 0x38
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d38:	4b30      	ldr	r3, [pc, #192]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	e054      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2238      	movs	r2, #56	@ 0x38
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d138      	bne.n	8004dbc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d54:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	4824      	ldr	r0, [pc, #144]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8004d6c:	f7fb f9e4 	bl	8000138 <__udivsi3>
 8004d70:	0003      	movs	r3, r0
 8004d72:	0019      	movs	r1, r3
 8004d74:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	227f      	movs	r2, #127	@ 0x7f
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	434b      	muls	r3, r1
 8004d80:	617b      	str	r3, [r7, #20]
        break;
 8004d82:	e00d      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	481c      	ldr	r0, [pc, #112]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d88:	f7fb f9d6 	bl	8000138 <__udivsi3>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	0019      	movs	r1, r3
 8004d90:	4b18      	ldr	r3, [pc, #96]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	227f      	movs	r2, #127	@ 0x7f
 8004d98:	4013      	ands	r3, r2
 8004d9a:	434b      	muls	r3, r1
 8004d9c:	617b      	str	r3, [r7, #20]
        break;
 8004d9e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004da0:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	0f5b      	lsrs	r3, r3, #29
 8004da6:	2207      	movs	r2, #7
 8004da8:	4013      	ands	r3, r2
 8004daa:	3301      	adds	r3, #1
 8004dac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	6978      	ldr	r0, [r7, #20]
 8004db2:	f7fb f9c1 	bl	8000138 <__udivsi3>
 8004db6:	0003      	movs	r3, r0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e015      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2238      	movs	r2, #56	@ 0x38
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d103      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004dd0:	4b08      	ldr	r3, [pc, #32]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2238      	movs	r2, #56	@ 0x38
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b18      	cmp	r3, #24
 8004dda:	d103      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ddc:	23fa      	movs	r3, #250	@ 0xfa
 8004dde:	01db      	lsls	r3, r3, #7
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e001      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004de8:	693b      	ldr	r3, [r7, #16]
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b006      	add	sp, #24
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	40021000 	.word	0x40021000
 8004df8:	00f42400 	.word	0x00f42400
 8004dfc:	007a1200 	.word	0x007a1200

08004e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e08:	2313      	movs	r3, #19
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e10:	2312      	movs	r3, #18
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	@ 0x80
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	4013      	ands	r3, r2
 8004e22:	d100      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e24:	e0a3      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e26:	2011      	movs	r0, #17
 8004e28:	183b      	adds	r3, r7, r0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e32:	2380      	movs	r3, #128	@ 0x80
 8004e34:	055b      	lsls	r3, r3, #21
 8004e36:	4013      	ands	r3, r2
 8004e38:	d110      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b7c      	ldr	r3, [pc, #496]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e40:	2180      	movs	r1, #128	@ 0x80
 8004e42:	0549      	lsls	r1, r1, #21
 8004e44:	430a      	orrs	r2, r1
 8004e46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e48:	4b78      	ldr	r3, [pc, #480]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	055b      	lsls	r3, r3, #21
 8004e50:	4013      	ands	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5c:	4b74      	ldr	r3, [pc, #464]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b73      	ldr	r3, [pc, #460]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e62:	2180      	movs	r1, #128	@ 0x80
 8004e64:	0049      	lsls	r1, r1, #1
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e6a:	f7fe fa0d 	bl	8003288 <HAL_GetTick>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e72:	e00b      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e74:	f7fe fa08 	bl	8003288 <HAL_GetTick>
 8004e78:	0002      	movs	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d904      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e82:	2313      	movs	r3, #19
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2203      	movs	r2, #3
 8004e88:	701a      	strb	r2, [r3, #0]
        break;
 8004e8a:	e005      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e8c:	4b68      	ldr	r3, [pc, #416]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2380      	movs	r3, #128	@ 0x80
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4013      	ands	r3, r2
 8004e96:	d0ed      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e98:	2313      	movs	r3, #19
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d154      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ea2:	4b62      	ldr	r3, [pc, #392]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ea4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ea6:	23c0      	movs	r3, #192	@ 0xc0
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d019      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d014      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec2:	4a5c      	ldr	r2, [pc, #368]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec8:	4b58      	ldr	r3, [pc, #352]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ecc:	4b57      	ldr	r3, [pc, #348]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ece:	2180      	movs	r1, #128	@ 0x80
 8004ed0:	0249      	lsls	r1, r1, #9
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed6:	4b55      	ldr	r3, [pc, #340]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004eda:	4b54      	ldr	r3, [pc, #336]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004edc:	4956      	ldr	r1, [pc, #344]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004ede:	400a      	ands	r2, r1
 8004ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ee2:	4b52      	ldr	r3, [pc, #328]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2201      	movs	r2, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	d016      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fe f9ca 	bl	8003288 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef8:	e00c      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fe f9c5 	bl	8003288 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	4a4d      	ldr	r2, [pc, #308]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d904      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f0a:	2313      	movs	r3, #19
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	2203      	movs	r2, #3
 8004f10:	701a      	strb	r2, [r3, #0]
            break;
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f14:	4b45      	ldr	r3, [pc, #276]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d0ed      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f1e:	2313      	movs	r3, #19
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f28:	4b40      	ldr	r3, [pc, #256]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	4a41      	ldr	r2, [pc, #260]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f3c:	e00c      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f3e:	2312      	movs	r3, #18
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	2213      	movs	r2, #19
 8004f44:	18ba      	adds	r2, r7, r2
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e005      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4c:	2312      	movs	r3, #18
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	2213      	movs	r2, #19
 8004f52:	18ba      	adds	r2, r7, r2
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f58:	2311      	movs	r3, #17
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f62:	4b32      	ldr	r3, [pc, #200]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f66:	4b31      	ldr	r3, [pc, #196]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f68:	4935      	ldr	r1, [pc, #212]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2201      	movs	r2, #1
 8004f74:	4013      	ands	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f78:	4b2c      	ldr	r3, [pc, #176]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	4393      	bics	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	4b29      	ldr	r3, [pc, #164]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2220      	movs	r2, #32
 8004f92:	4013      	ands	r3, r2
 8004f94:	d009      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f96:	4b25      	ldr	r3, [pc, #148]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	4b21      	ldr	r3, [pc, #132]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	01db      	lsls	r3, r3, #7
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d015      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	0899      	lsrs	r1, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	2380      	movs	r3, #128	@ 0x80
 8004fce:	05db      	lsls	r3, r3, #23
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004fd4:	4b15      	ldr	r3, [pc, #84]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004fda:	2180      	movs	r1, #128	@ 0x80
 8004fdc:	0249      	lsls	r1, r1, #9
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	2380      	movs	r3, #128	@ 0x80
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	4013      	ands	r3, r2
 8004fec:	d016      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004fee:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff2:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ffe:	430a      	orrs	r2, r1
 8005000:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	2380      	movs	r3, #128	@ 0x80
 8005008:	01db      	lsls	r3, r3, #7
 800500a:	429a      	cmp	r2, r3
 800500c:	d106      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800500e:	4b07      	ldr	r3, [pc, #28]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005014:	2180      	movs	r1, #128	@ 0x80
 8005016:	0249      	lsls	r1, r1, #9
 8005018:	430a      	orrs	r2, r1
 800501a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800501c:	2312      	movs	r3, #18
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	781b      	ldrb	r3, [r3, #0]
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b006      	add	sp, #24
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	40021000 	.word	0x40021000
 8005030:	40007000 	.word	0x40007000
 8005034:	fffffcff 	.word	0xfffffcff
 8005038:	fffeffff 	.word	0xfffeffff
 800503c:	00001388 	.word	0x00001388
 8005040:	efffffff 	.word	0xefffffff
 8005044:	ffffcfff 	.word	0xffffcfff
 8005048:	ffff3fff 	.word	0xffff3fff

0800504c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0a8      	b.n	80051b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	2382      	movs	r3, #130	@ 0x82
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	429a      	cmp	r2, r3
 8005070:	d009      	beq.n	8005086 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	61da      	str	r2, [r3, #28]
 8005078:	e005      	b.n	8005086 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	225d      	movs	r2, #93	@ 0x5d
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	225c      	movs	r2, #92	@ 0x5c
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f7fd ff0c 	bl	8002ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	225d      	movs	r2, #93	@ 0x5d
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2140      	movs	r1, #64	@ 0x40
 80050bc:	438a      	bics	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	23e0      	movs	r3, #224	@ 0xe0
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d902      	bls.n	80050d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e002      	b.n	80050d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	015b      	lsls	r3, r3, #5
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	23f0      	movs	r3, #240	@ 0xf0
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d008      	beq.n	80050f6 <HAL_SPI_Init+0xaa>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	23e0      	movs	r3, #224	@ 0xe0
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d002      	beq.n	80050f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	2382      	movs	r3, #130	@ 0x82
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	401a      	ands	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6899      	ldr	r1, [r3, #8]
 8005104:	2384      	movs	r3, #132	@ 0x84
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	400b      	ands	r3, r1
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2102      	movs	r1, #2
 8005112:	400b      	ands	r3, r1
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2101      	movs	r1, #1
 800511c:	400b      	ands	r3, r1
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6999      	ldr	r1, [r3, #24]
 8005124:	2380      	movs	r3, #128	@ 0x80
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	400b      	ands	r3, r1
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2138      	movs	r1, #56	@ 0x38
 8005132:	400b      	ands	r3, r1
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	2180      	movs	r1, #128	@ 0x80
 800513c:	400b      	ands	r3, r1
 800513e:	431a      	orrs	r2, r3
 8005140:	0011      	movs	r1, r2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	401a      	ands	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	2204      	movs	r2, #4
 800515c:	401a      	ands	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	2110      	movs	r1, #16
 8005164:	400b      	ands	r3, r1
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516c:	2108      	movs	r1, #8
 800516e:	400b      	ands	r3, r1
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	23f0      	movs	r3, #240	@ 0xf0
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	400b      	ands	r3, r1
 800517c:	431a      	orrs	r2, r3
 800517e:	0011      	movs	r1, r2
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	2380      	movs	r3, #128	@ 0x80
 8005184:	015b      	lsls	r3, r3, #5
 8005186:	401a      	ands	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4907      	ldr	r1, [pc, #28]	@ (80051b8 <HAL_SPI_Init+0x16c>)
 800519c:	400a      	ands	r2, r1
 800519e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	225d      	movs	r2, #93	@ 0x5d
 80051aa:	2101      	movs	r1, #1
 80051ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b004      	add	sp, #16
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	fffff7ff 	.word	0xfffff7ff

080051bc <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	0008      	movs	r0, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	0019      	movs	r1, r3
 80051ca:	260b      	movs	r6, #11
 80051cc:	19bb      	adds	r3, r7, r6
 80051ce:	1c02      	adds	r2, r0, #0
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	2508      	movs	r5, #8
 80051d4:	197b      	adds	r3, r7, r5
 80051d6:	1c0a      	adds	r2, r1, #0
 80051d8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685c      	ldr	r4, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68d8      	ldr	r0, [r3, #12]
 80051e2:	197b      	adds	r3, r7, r5
 80051e4:	881d      	ldrh	r5, [r3, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	19bb      	adds	r3, r7, r6
 80051ea:	7819      	ldrb	r1, [r3, #0]
 80051ec:	002b      	movs	r3, r5
 80051ee:	47a0      	blx	r4
 80051f0:	0003      	movs	r3, r0
 80051f2:	617b      	str	r3, [r7, #20]

  return ret;
 80051f4:	697b      	ldr	r3, [r7, #20]
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b007      	add	sp, #28
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051fe <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80051fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	0008      	movs	r0, r1
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	0019      	movs	r1, r3
 800520c:	260b      	movs	r6, #11
 800520e:	19bb      	adds	r3, r7, r6
 8005210:	1c02      	adds	r2, r0, #0
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	2508      	movs	r5, #8
 8005216:	197b      	adds	r3, r7, r5
 8005218:	1c0a      	adds	r2, r1, #0
 800521a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681c      	ldr	r4, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68d8      	ldr	r0, [r3, #12]
 8005224:	197b      	adds	r3, r7, r5
 8005226:	881d      	ldrh	r5, [r3, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	19bb      	adds	r3, r7, r6
 800522c:	7819      	ldrb	r1, [r3, #0]
 800522e:	002b      	movs	r3, r5
 8005230:	47a0      	blx	r4
 8005232:	0003      	movs	r3, r0
 8005234:	617b      	str	r3, [r7, #20]

  return ret;
 8005236:	697b      	ldr	r3, [r7, #20]
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b007      	add	sp, #28
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005240 <lis2dw12_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis2dw12_from_fs2_to_mg(int16_t lsb)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	0002      	movs	r2, r0
 8005248:	1dbb      	adds	r3, r7, #6
 800524a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
 800524c:	1dbb      	adds	r3, r7, #6
 800524e:	2200      	movs	r2, #0
 8005250:	5e9b      	ldrsh	r3, [r3, r2]
 8005252:	0018      	movs	r0, r3
 8005254:	f7fb fb82 	bl	800095c <__aeabi_i2f>
 8005258:	1c03      	adds	r3, r0, #0
 800525a:	4904      	ldr	r1, [pc, #16]	@ (800526c <lis2dw12_from_fs2_to_mg+0x2c>)
 800525c:	1c18      	adds	r0, r3, #0
 800525e:	f7fb fa3f 	bl	80006e0 <__aeabi_fmul>
 8005262:	1c03      	adds	r3, r0, #0
}
 8005264:	1c18      	adds	r0, r3, #0
 8005266:	46bd      	mov	sp, r7
 8005268:	b002      	add	sp, #8
 800526a:	bd80      	pop	{r7, pc}
 800526c:	3d79db23 	.word	0x3d79db23

08005270 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	000a      	movs	r2, r1
 800527a:	1cfb      	adds	r3, r7, #3
 800527c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800527e:	2410      	movs	r4, #16
 8005280:	193a      	adds	r2, r7, r4
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	2301      	movs	r3, #1
 8005286:	2120      	movs	r1, #32
 8005288:	f7ff ff98 	bl	80051bc <lis2dw12_read_reg>
 800528c:	0003      	movs	r3, r0
 800528e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d129      	bne.n	80052ea <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8005296:	1cfb      	adds	r3, r7, #3
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	1c1a      	adds	r2, r3, #0
 800529e:	2303      	movs	r3, #3
 80052a0:	4013      	ands	r3, r2
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	193b      	adds	r3, r7, r4
 80052a6:	2103      	movs	r1, #3
 80052a8:	400a      	ands	r2, r1
 80052aa:	0090      	lsls	r0, r2, #2
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	210c      	movs	r1, #12
 80052b0:	438a      	bics	r2, r1
 80052b2:	1c11      	adds	r1, r2, #0
 80052b4:	1c02      	adds	r2, r0, #0
 80052b6:	430a      	orrs	r2, r1
 80052b8:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80052ba:	1cfb      	adds	r3, r7, #3
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2203      	movs	r2, #3
 80052c0:	4013      	ands	r3, r2
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	2103      	movs	r1, #3
 80052c8:	400a      	ands	r2, r1
 80052ca:	0010      	movs	r0, r2
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	2103      	movs	r1, #3
 80052d0:	438a      	bics	r2, r1
 80052d2:	1c11      	adds	r1, r2, #0
 80052d4:	1c02      	adds	r2, r0, #0
 80052d6:	430a      	orrs	r2, r1
 80052d8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80052da:	193a      	adds	r2, r7, r4
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	2301      	movs	r3, #1
 80052e0:	2120      	movs	r1, #32
 80052e2:	f7ff ff8c 	bl	80051fe <lis2dw12_write_reg>
 80052e6:	0003      	movs	r3, r0
 80052e8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80052f0:	230c      	movs	r3, #12
 80052f2:	18fa      	adds	r2, r7, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	2301      	movs	r3, #1
 80052f8:	2125      	movs	r1, #37	@ 0x25
 80052fa:	f7ff ff5f 	bl	80051bc <lis2dw12_read_reg>
 80052fe:	0003      	movs	r3, r0
 8005300:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11a      	bne.n	800533e <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8005308:	1cfb      	adds	r3, r7, #3
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	1c1a      	adds	r2, r3, #0
 8005310:	2301      	movs	r3, #1
 8005312:	4013      	ands	r3, r2
 8005314:	b2da      	uxtb	r2, r3
 8005316:	240c      	movs	r4, #12
 8005318:	193b      	adds	r3, r7, r4
 800531a:	2101      	movs	r1, #1
 800531c:	400a      	ands	r2, r1
 800531e:	0090      	lsls	r0, r2, #2
 8005320:	781a      	ldrb	r2, [r3, #0]
 8005322:	2104      	movs	r1, #4
 8005324:	438a      	bics	r2, r1
 8005326:	1c11      	adds	r1, r2, #0
 8005328:	1c02      	adds	r2, r0, #0
 800532a:	430a      	orrs	r2, r1
 800532c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800532e:	193a      	adds	r2, r7, r4
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	2301      	movs	r3, #1
 8005334:	2125      	movs	r1, #37	@ 0x25
 8005336:	f7ff ff62 	bl	80051fe <lis2dw12_write_reg>
 800533a:	0003      	movs	r3, r0
 800533c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800533e:	697b      	ldr	r3, [r7, #20]
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b007      	add	sp, #28
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	000a      	movs	r2, r1
 8005352:	1cfb      	adds	r3, r7, #3
 8005354:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8005356:	2410      	movs	r4, #16
 8005358:	193a      	adds	r2, r7, r4
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	2301      	movs	r3, #1
 800535e:	2120      	movs	r1, #32
 8005360:	f7ff ff2c 	bl	80051bc <lis2dw12_read_reg>
 8005364:	0003      	movs	r3, r0
 8005366:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 800536e:	1cfb      	adds	r3, r7, #3
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	220f      	movs	r2, #15
 8005374:	4013      	ands	r3, r2
 8005376:	b2da      	uxtb	r2, r3
 8005378:	193b      	adds	r3, r7, r4
 800537a:	0110      	lsls	r0, r2, #4
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	210f      	movs	r1, #15
 8005380:	400a      	ands	r2, r1
 8005382:	1c11      	adds	r1, r2, #0
 8005384:	1c02      	adds	r2, r0, #0
 8005386:	430a      	orrs	r2, r1
 8005388:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800538a:	193a      	adds	r2, r7, r4
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	2301      	movs	r3, #1
 8005390:	2120      	movs	r1, #32
 8005392:	f7ff ff34 	bl	80051fe <lis2dw12_write_reg>
 8005396:	0003      	movs	r3, r0
 8005398:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d108      	bne.n	80053b2 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80053a0:	230c      	movs	r3, #12
 80053a2:	18fa      	adds	r2, r7, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	2301      	movs	r3, #1
 80053a8:	2122      	movs	r1, #34	@ 0x22
 80053aa:	f7ff ff07 	bl	80051bc <lis2dw12_read_reg>
 80053ae:	0003      	movs	r3, r0
 80053b0:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11a      	bne.n	80053ee <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80053b8:	1cfb      	adds	r3, r7, #3
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	1c1a      	adds	r2, r3, #0
 80053c0:	2303      	movs	r3, #3
 80053c2:	4013      	ands	r3, r2
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	240c      	movs	r4, #12
 80053c8:	193b      	adds	r3, r7, r4
 80053ca:	2103      	movs	r1, #3
 80053cc:	400a      	ands	r2, r1
 80053ce:	0010      	movs	r0, r2
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	2103      	movs	r1, #3
 80053d4:	438a      	bics	r2, r1
 80053d6:	1c11      	adds	r1, r2, #0
 80053d8:	1c02      	adds	r2, r0, #0
 80053da:	430a      	orrs	r2, r1
 80053dc:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80053de:	193a      	adds	r2, r7, r4
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	2301      	movs	r3, #1
 80053e4:	2122      	movs	r1, #34	@ 0x22
 80053e6:	f7ff ff0a 	bl	80051fe <lis2dw12_write_reg>
 80053ea:	0003      	movs	r3, r0
 80053ec:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80053ee:	697b      	ldr	r3, [r7, #20]
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b007      	add	sp, #28
 80053f6:	bd90      	pop	{r4, r7, pc}

080053f8 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	000a      	movs	r2, r1
 8005402:	1cfb      	adds	r3, r7, #3
 8005404:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8005406:	2408      	movs	r4, #8
 8005408:	193a      	adds	r2, r7, r4
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	2301      	movs	r3, #1
 800540e:	2121      	movs	r1, #33	@ 0x21
 8005410:	f7ff fed4 	bl	80051bc <lis2dw12_read_reg>
 8005414:	0003      	movs	r3, r0
 8005416:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d117      	bne.n	800544e <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 800541e:	1cfb      	adds	r3, r7, #3
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	4013      	ands	r3, r2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	193b      	adds	r3, r7, r4
 800542a:	2101      	movs	r1, #1
 800542c:	400a      	ands	r2, r1
 800542e:	00d0      	lsls	r0, r2, #3
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	2108      	movs	r1, #8
 8005434:	438a      	bics	r2, r1
 8005436:	1c11      	adds	r1, r2, #0
 8005438:	1c02      	adds	r2, r0, #0
 800543a:	430a      	orrs	r2, r1
 800543c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800543e:	193a      	adds	r2, r7, r4
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	2301      	movs	r3, #1
 8005444:	2121      	movs	r1, #33	@ 0x21
 8005446:	f7ff feda 	bl	80051fe <lis2dw12_write_reg>
 800544a:	0003      	movs	r3, r0
 800544c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800544e:	68fb      	ldr	r3, [r7, #12]
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	b005      	add	sp, #20
 8005456:	bd90      	pop	{r4, r7, pc}

08005458 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	000a      	movs	r2, r1
 8005462:	1cfb      	adds	r3, r7, #3
 8005464:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8005466:	2408      	movs	r4, #8
 8005468:	193a      	adds	r2, r7, r4
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	2301      	movs	r3, #1
 800546e:	2125      	movs	r1, #37	@ 0x25
 8005470:	f7ff fea4 	bl	80051bc <lis2dw12_read_reg>
 8005474:	0003      	movs	r3, r0
 8005476:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d117      	bne.n	80054ae <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 800547e:	1cfb      	adds	r3, r7, #3
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2203      	movs	r2, #3
 8005484:	4013      	ands	r3, r2
 8005486:	b2da      	uxtb	r2, r3
 8005488:	193b      	adds	r3, r7, r4
 800548a:	2103      	movs	r1, #3
 800548c:	400a      	ands	r2, r1
 800548e:	0110      	lsls	r0, r2, #4
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	2130      	movs	r1, #48	@ 0x30
 8005494:	438a      	bics	r2, r1
 8005496:	1c11      	adds	r1, r2, #0
 8005498:	1c02      	adds	r2, r0, #0
 800549a:	430a      	orrs	r2, r1
 800549c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800549e:	193a      	adds	r2, r7, r4
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	2301      	movs	r3, #1
 80054a4:	2125      	movs	r1, #37	@ 0x25
 80054a6:	f7ff feaa 	bl	80051fe <lis2dw12_write_reg>
 80054aa:	0003      	movs	r3, r0
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b005      	add	sp, #20
 80054b6:	bd90      	pop	{r4, r7, pc}

080054b8 <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 80054c2:	2408      	movs	r4, #8
 80054c4:	193a      	adds	r2, r7, r4
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	2301      	movs	r3, #1
 80054ca:	2127      	movs	r1, #39	@ 0x27
 80054cc:	f7ff fe76 	bl	80051bc <lis2dw12_read_reg>
 80054d0:	0003      	movs	r3, r0
 80054d2:	60fb      	str	r3, [r7, #12]
  *val = reg.drdy;
 80054d4:	193b      	adds	r3, r7, r4
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	07db      	lsls	r3, r3, #31
 80054da:	0fdb      	lsrs	r3, r3, #31
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	001a      	movs	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	701a      	strb	r2, [r3, #0]

  return ret;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b005      	add	sp, #20
 80054ec:	bd90      	pop	{r4, r7, pc}

080054ee <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054ee:	b590      	push	{r4, r7, lr}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80054f8:	240c      	movs	r4, #12
 80054fa:	193a      	adds	r2, r7, r4
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	2306      	movs	r3, #6
 8005500:	2128      	movs	r1, #40	@ 0x28
 8005502:	f7ff fe5b 	bl	80051bc <lis2dw12_read_reg>
 8005506:	0003      	movs	r3, r0
 8005508:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800550a:	0021      	movs	r1, r4
 800550c:	187b      	adds	r3, r7, r1
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	b21a      	sxth	r2, r3
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2200      	movs	r2, #0
 800551a:	5e9b      	ldrsh	r3, [r3, r2]
 800551c:	b29b      	uxth	r3, r3
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	b29b      	uxth	r3, r3
 8005522:	187a      	adds	r2, r7, r1
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	189b      	adds	r3, r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	b21a      	sxth	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005530:	187b      	adds	r3, r7, r1
 8005532:	78da      	ldrb	r2, [r3, #3]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	3302      	adds	r3, #2
 8005538:	b212      	sxth	r2, r2
 800553a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3302      	adds	r3, #2
 8005540:	2200      	movs	r2, #0
 8005542:	5e9b      	ldrsh	r3, [r3, r2]
 8005544:	b29b      	uxth	r3, r3
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	b29b      	uxth	r3, r3
 800554a:	187a      	adds	r2, r7, r1
 800554c:	7892      	ldrb	r2, [r2, #2]
 800554e:	189b      	adds	r3, r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3302      	adds	r3, #2
 8005556:	b212      	sxth	r2, r2
 8005558:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800555a:	187b      	adds	r3, r7, r1
 800555c:	795a      	ldrb	r2, [r3, #5]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	3304      	adds	r3, #4
 8005562:	b212      	sxth	r2, r2
 8005564:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	3304      	adds	r3, #4
 800556a:	2200      	movs	r2, #0
 800556c:	5e9b      	ldrsh	r3, [r3, r2]
 800556e:	b29b      	uxth	r3, r3
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	b29b      	uxth	r3, r3
 8005574:	187a      	adds	r2, r7, r1
 8005576:	7912      	ldrb	r2, [r2, #4]
 8005578:	189b      	adds	r3, r3, r2
 800557a:	b29a      	uxth	r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3304      	adds	r3, #4
 8005580:	b212      	sxth	r2, r2
 8005582:	801a      	strh	r2, [r3, #0]

  return ret;
 8005584:	697b      	ldr	r3, [r7, #20]
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b007      	add	sp, #28
 800558c:	bd90      	pop	{r4, r7, pc}

0800558e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	2301      	movs	r3, #1
 800559e:	210f      	movs	r1, #15
 80055a0:	f7ff fe0c 	bl	80051bc <lis2dw12_read_reg>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]

  return ret;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b004      	add	sp, #16
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055b2:	b590      	push	{r4, r7, lr}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	000a      	movs	r2, r1
 80055bc:	1cfb      	adds	r3, r7, #3
 80055be:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80055c0:	2408      	movs	r4, #8
 80055c2:	193a      	adds	r2, r7, r4
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	2301      	movs	r3, #1
 80055c8:	2121      	movs	r1, #33	@ 0x21
 80055ca:	f7ff fdf7 	bl	80051bc <lis2dw12_read_reg>
 80055ce:	0003      	movs	r3, r0
 80055d0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d117      	bne.n	8005608 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 80055d8:	1cfb      	adds	r3, r7, #3
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2201      	movs	r2, #1
 80055de:	4013      	ands	r3, r2
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	193b      	adds	r3, r7, r4
 80055e4:	2101      	movs	r1, #1
 80055e6:	400a      	ands	r2, r1
 80055e8:	0190      	lsls	r0, r2, #6
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	2140      	movs	r1, #64	@ 0x40
 80055ee:	438a      	bics	r2, r1
 80055f0:	1c11      	adds	r1, r2, #0
 80055f2:	1c02      	adds	r2, r0, #0
 80055f4:	430a      	orrs	r2, r1
 80055f6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80055f8:	193a      	adds	r2, r7, r4
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	2301      	movs	r3, #1
 80055fe:	2121      	movs	r1, #33	@ 0x21
 8005600:	f7ff fdfd 	bl	80051fe <lis2dw12_write_reg>
 8005604:	0003      	movs	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005608:	68fb      	ldr	r3, [r7, #12]
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b005      	add	sp, #20
 8005610:	bd90      	pop	{r4, r7, pc}

08005612 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005612:	b590      	push	{r4, r7, lr}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800561c:	2408      	movs	r4, #8
 800561e:	193a      	adds	r2, r7, r4
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	2301      	movs	r3, #1
 8005624:	2121      	movs	r1, #33	@ 0x21
 8005626:	f7ff fdc9 	bl	80051bc <lis2dw12_read_reg>
 800562a:	0003      	movs	r3, r0
 800562c:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 800562e:	193b      	adds	r3, r7, r4
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	065b      	lsls	r3, r3, #25
 8005634:	0fdb      	lsrs	r3, r3, #31
 8005636:	b2db      	uxtb	r3, r3
 8005638:	001a      	movs	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	701a      	strb	r2, [r3, #0]

  return ret;
 800563e:	68fb      	ldr	r3, [r7, #12]
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b005      	add	sp, #20
 8005646:	bd90      	pop	{r4, r7, pc}

08005648 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	000a      	movs	r2, r1
 8005652:	1cfb      	adds	r3, r7, #3
 8005654:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8005656:	2410      	movs	r4, #16
 8005658:	193a      	adds	r2, r7, r4
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	2301      	movs	r3, #1
 800565e:	2125      	movs	r1, #37	@ 0x25
 8005660:	f7ff fdac 	bl	80051bc <lis2dw12_read_reg>
 8005664:	0003      	movs	r3, r0
 8005666:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d119      	bne.n	80056a2 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 800566e:	1cfb      	adds	r3, r7, #3
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	1c1a      	adds	r2, r3, #0
 8005676:	2301      	movs	r3, #1
 8005678:	4013      	ands	r3, r2
 800567a:	b2da      	uxtb	r2, r3
 800567c:	193b      	adds	r3, r7, r4
 800567e:	2101      	movs	r1, #1
 8005680:	400a      	ands	r2, r1
 8005682:	00d0      	lsls	r0, r2, #3
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	2108      	movs	r1, #8
 8005688:	438a      	bics	r2, r1
 800568a:	1c11      	adds	r1, r2, #0
 800568c:	1c02      	adds	r2, r0, #0
 800568e:	430a      	orrs	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8005692:	193a      	adds	r2, r7, r4
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	2301      	movs	r3, #1
 8005698:	2125      	movs	r1, #37	@ 0x25
 800569a:	f7ff fdb0 	bl	80051fe <lis2dw12_write_reg>
 800569e:	0003      	movs	r3, r0
 80056a0:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d108      	bne.n	80056ba <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 80056a8:	230c      	movs	r3, #12
 80056aa:	18fa      	adds	r2, r7, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	2301      	movs	r3, #1
 80056b0:	213f      	movs	r1, #63	@ 0x3f
 80056b2:	f7ff fd83 	bl	80051bc <lis2dw12_read_reg>
 80056b6:	0003      	movs	r3, r0
 80056b8:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d118      	bne.n	80056f2 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 80056c0:	1cfb      	adds	r3, r7, #3
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2201      	movs	r2, #1
 80056c6:	4013      	ands	r3, r2
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	240c      	movs	r4, #12
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	2101      	movs	r1, #1
 80056d0:	400a      	ands	r2, r1
 80056d2:	0110      	lsls	r0, r2, #4
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	2110      	movs	r1, #16
 80056d8:	438a      	bics	r2, r1
 80056da:	1c11      	adds	r1, r2, #0
 80056dc:	1c02      	adds	r2, r0, #0
 80056de:	430a      	orrs	r2, r1
 80056e0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 80056e2:	193a      	adds	r2, r7, r4
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	2301      	movs	r3, #1
 80056e8:	213f      	movs	r1, #63	@ 0x3f
 80056ea:	f7ff fd88 	bl	80051fe <lis2dw12_write_reg>
 80056ee:	0003      	movs	r3, r0
 80056f0:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 80056f2:	697b      	ldr	r3, [r7, #20]
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b007      	add	sp, #28
 80056fa:	bd90      	pop	{r4, r7, pc}

080056fc <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	000a      	movs	r2, r1
 8005706:	1cfb      	adds	r3, r7, #3
 8005708:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800570a:	2408      	movs	r4, #8
 800570c:	193a      	adds	r2, r7, r4
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	2301      	movs	r3, #1
 8005712:	2125      	movs	r1, #37	@ 0x25
 8005714:	f7ff fd52 	bl	80051bc <lis2dw12_read_reg>
 8005718:	0003      	movs	r3, r0
 800571a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d115      	bne.n	800574e <lis2dw12_filter_bandwidth_set+0x52>
  {
    reg.bw_filt = (uint8_t) val;
 8005722:	1cfb      	adds	r3, r7, #3
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2203      	movs	r2, #3
 8005728:	4013      	ands	r3, r2
 800572a:	b2da      	uxtb	r2, r3
 800572c:	193b      	adds	r3, r7, r4
 800572e:	0190      	lsls	r0, r2, #6
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	213f      	movs	r1, #63	@ 0x3f
 8005734:	400a      	ands	r2, r1
 8005736:	1c11      	adds	r1, r2, #0
 8005738:	1c02      	adds	r2, r0, #0
 800573a:	430a      	orrs	r2, r1
 800573c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800573e:	193a      	adds	r2, r7, r4
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	2301      	movs	r3, #1
 8005744:	2125      	movs	r1, #37	@ 0x25
 8005746:	f7ff fd5a 	bl	80051fe <lis2dw12_write_reg>
 800574a:	0003      	movs	r3, r0
 800574c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b005      	add	sp, #20
 8005756:	bd90      	pop	{r4, r7, pc}

08005758 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800575c:	46c0      	nop			@ (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af04      	add	r7, sp, #16
 800576a:	0002      	movs	r2, r0
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005770:	4808      	ldr	r0, [pc, #32]	@ (8005794 <ssd1306_WriteCommand+0x30>)
 8005772:	2301      	movs	r3, #1
 8005774:	425b      	negs	r3, r3
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	2301      	movs	r3, #1
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	1dfb      	adds	r3, r7, #7
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	2301      	movs	r3, #1
 8005782:	2200      	movs	r2, #0
 8005784:	2178      	movs	r1, #120	@ 0x78
 8005786:	f7fe f86b 	bl	8003860 <HAL_I2C_Mem_Write>
}
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	b002      	add	sp, #8
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			@ (mov r8, r8)
 8005794:	20000200 	.word	0x20000200

08005798 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af04      	add	r7, sp, #16
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4808      	ldr	r0, [pc, #32]	@ (80057c8 <ssd1306_WriteData+0x30>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	4252      	negs	r2, r2
 80057ac:	9202      	str	r2, [sp, #8]
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2301      	movs	r3, #1
 80057b6:	2240      	movs	r2, #64	@ 0x40
 80057b8:	2178      	movs	r1, #120	@ 0x78
 80057ba:	f7fe f851 	bl	8003860 <HAL_I2C_Mem_Write>
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	20000200 	.word	0x20000200

080057cc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80057d0:	f7ff ffc2 	bl	8005758 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80057d4:	2064      	movs	r0, #100	@ 0x64
 80057d6:	f7fd fd61 	bl	800329c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80057da:	2000      	movs	r0, #0
 80057dc:	f000 fa0a 	bl	8005bf4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80057e0:	2020      	movs	r0, #32
 80057e2:	f7ff ffbf 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7ff ffbc 	bl	8005764 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80057ec:	20b0      	movs	r0, #176	@ 0xb0
 80057ee:	f7ff ffb9 	bl	8005764 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80057f2:	20c8      	movs	r0, #200	@ 0xc8
 80057f4:	f7ff ffb6 	bl	8005764 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7ff ffb3 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80057fe:	2010      	movs	r0, #16
 8005800:	f7ff ffb0 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005804:	2040      	movs	r0, #64	@ 0x40
 8005806:	f7ff ffad 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800580a:	20ff      	movs	r0, #255	@ 0xff
 800580c:	f000 f9da 	bl	8005bc4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005810:	20a1      	movs	r0, #161	@ 0xa1
 8005812:	f7ff ffa7 	bl	8005764 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005816:	20a6      	movs	r0, #166	@ 0xa6
 8005818:	f7ff ffa4 	bl	8005764 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800581c:	20a8      	movs	r0, #168	@ 0xa8
 800581e:	f7ff ffa1 	bl	8005764 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005822:	203f      	movs	r0, #63	@ 0x3f
 8005824:	f7ff ff9e 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005828:	20a4      	movs	r0, #164	@ 0xa4
 800582a:	f7ff ff9b 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800582e:	20d3      	movs	r0, #211	@ 0xd3
 8005830:	f7ff ff98 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005834:	2000      	movs	r0, #0
 8005836:	f7ff ff95 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800583a:	20d5      	movs	r0, #213	@ 0xd5
 800583c:	f7ff ff92 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005840:	20f0      	movs	r0, #240	@ 0xf0
 8005842:	f7ff ff8f 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005846:	20d9      	movs	r0, #217	@ 0xd9
 8005848:	f7ff ff8c 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800584c:	2022      	movs	r0, #34	@ 0x22
 800584e:	f7ff ff89 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005852:	20da      	movs	r0, #218	@ 0xda
 8005854:	f7ff ff86 	bl	8005764 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005858:	2012      	movs	r0, #18
 800585a:	f7ff ff83 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800585e:	20db      	movs	r0, #219	@ 0xdb
 8005860:	f7ff ff80 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005864:	2020      	movs	r0, #32
 8005866:	f7ff ff7d 	bl	8005764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800586a:	208d      	movs	r0, #141	@ 0x8d
 800586c:	f7ff ff7a 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005870:	2014      	movs	r0, #20
 8005872:	f7ff ff77 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005876:	2001      	movs	r0, #1
 8005878:	f000 f9bc 	bl	8005bf4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800587c:	2000      	movs	r0, #0
 800587e:	f000 f811 	bl	80058a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005882:	f000 f833 	bl	80058ec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <ssd1306_Init+0xd4>)
 8005888:	2200      	movs	r2, #0
 800588a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800588c:	4b04      	ldr	r3, [pc, #16]	@ (80058a0 <ssd1306_Init+0xd4>)
 800588e:	2200      	movs	r2, #0
 8005890:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005892:	4b03      	ldr	r3, [pc, #12]	@ (80058a0 <ssd1306_Init+0xd4>)
 8005894:	2201      	movs	r2, #1
 8005896:	711a      	strb	r2, [r3, #4]
}
 8005898:	46c0      	nop			@ (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	200006e8 	.word	0x200006e8

080058a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	0002      	movs	r2, r0
 80058ac:	1dfb      	adds	r3, r7, #7
 80058ae:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e00e      	b.n	80058d4 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <ssd1306_Fill+0x1e>
 80058be:	2100      	movs	r1, #0
 80058c0:	e000      	b.n	80058c4 <ssd1306_Fill+0x20>
 80058c2:	21ff      	movs	r1, #255	@ 0xff
 80058c4:	4a08      	ldr	r2, [pc, #32]	@ (80058e8 <ssd1306_Fill+0x44>)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	18d3      	adds	r3, r2, r3
 80058ca:	1c0a      	adds	r2, r1, #0
 80058cc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	429a      	cmp	r2, r3
 80058dc:	d3eb      	bcc.n	80058b6 <ssd1306_Fill+0x12>
    }
}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	46c0      	nop			@ (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b004      	add	sp, #16
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200002e8 	.word	0x200002e8

080058ec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80058f2:	1dfb      	adds	r3, r7, #7
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e01a      	b.n	8005930 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80058fa:	1dfb      	adds	r3, r7, #7
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	3b50      	subs	r3, #80	@ 0x50
 8005900:	b2db      	uxtb	r3, r3
 8005902:	0018      	movs	r0, r3
 8005904:	f7ff ff2e 	bl	8005764 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005908:	2000      	movs	r0, #0
 800590a:	f7ff ff2b 	bl	8005764 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800590e:	2010      	movs	r0, #16
 8005910:	f7ff ff28 	bl	8005764 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005914:	1dfb      	adds	r3, r7, #7
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	01da      	lsls	r2, r3, #7
 800591a:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <ssd1306_UpdateScreen+0x58>)
 800591c:	18d3      	adds	r3, r2, r3
 800591e:	2180      	movs	r1, #128	@ 0x80
 8005920:	0018      	movs	r0, r3
 8005922:	f7ff ff39 	bl	8005798 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005926:	1dfb      	adds	r3, r7, #7
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	1dfb      	adds	r3, r7, #7
 800592c:	3201      	adds	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b07      	cmp	r3, #7
 8005936:	d9e0      	bls.n	80058fa <ssd1306_UpdateScreen+0xe>
    }
}
 8005938:	46c0      	nop			@ (mov r8, r8)
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	46bd      	mov	sp, r7
 800593e:	b002      	add	sp, #8
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	200002e8 	.word	0x200002e8

08005948 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	0004      	movs	r4, r0
 8005950:	0008      	movs	r0, r1
 8005952:	0011      	movs	r1, r2
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	1c22      	adds	r2, r4, #0
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	1dbb      	adds	r3, r7, #6
 800595c:	1c02      	adds	r2, r0, #0
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	1d7b      	adds	r3, r7, #5
 8005962:	1c0a      	adds	r2, r1, #0
 8005964:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005966:	1dfb      	adds	r3, r7, #7
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b25b      	sxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	db47      	blt.n	8005a00 <ssd1306_DrawPixel+0xb8>
 8005970:	1dbb      	adds	r3, r7, #6
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b3f      	cmp	r3, #63	@ 0x3f
 8005976:	d843      	bhi.n	8005a00 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005978:	1d7b      	adds	r3, r7, #5
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d11e      	bne.n	80059be <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005980:	1dfb      	adds	r3, r7, #7
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	1dbb      	adds	r3, r7, #6
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	b2d8      	uxtb	r0, r3
 800598c:	0003      	movs	r3, r0
 800598e:	01db      	lsls	r3, r3, #7
 8005990:	18d3      	adds	r3, r2, r3
 8005992:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <ssd1306_DrawPixel+0xc0>)
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	b25a      	sxtb	r2, r3
 8005998:	1dbb      	adds	r3, r7, #6
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2107      	movs	r1, #7
 800599e:	400b      	ands	r3, r1
 80059a0:	2101      	movs	r1, #1
 80059a2:	4099      	lsls	r1, r3
 80059a4:	000b      	movs	r3, r1
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b259      	sxtb	r1, r3
 80059ac:	1dfb      	adds	r3, r7, #7
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	0003      	movs	r3, r0
 80059b2:	01db      	lsls	r3, r3, #7
 80059b4:	18d3      	adds	r3, r2, r3
 80059b6:	b2c9      	uxtb	r1, r1
 80059b8:	4a13      	ldr	r2, [pc, #76]	@ (8005a08 <ssd1306_DrawPixel+0xc0>)
 80059ba:	54d1      	strb	r1, [r2, r3]
 80059bc:	e021      	b.n	8005a02 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	1dbb      	adds	r3, r7, #6
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	08db      	lsrs	r3, r3, #3
 80059c8:	b2d8      	uxtb	r0, r3
 80059ca:	0003      	movs	r3, r0
 80059cc:	01db      	lsls	r3, r3, #7
 80059ce:	18d3      	adds	r3, r2, r3
 80059d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a08 <ssd1306_DrawPixel+0xc0>)
 80059d2:	5cd3      	ldrb	r3, [r2, r3]
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	1dba      	adds	r2, r7, #6
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	2107      	movs	r1, #7
 80059dc:	400a      	ands	r2, r1
 80059de:	2101      	movs	r1, #1
 80059e0:	4091      	lsls	r1, r2
 80059e2:	000a      	movs	r2, r1
 80059e4:	b252      	sxtb	r2, r2
 80059e6:	43d2      	mvns	r2, r2
 80059e8:	b252      	sxtb	r2, r2
 80059ea:	4013      	ands	r3, r2
 80059ec:	b259      	sxtb	r1, r3
 80059ee:	1dfb      	adds	r3, r7, #7
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	0003      	movs	r3, r0
 80059f4:	01db      	lsls	r3, r3, #7
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	b2c9      	uxtb	r1, r1
 80059fa:	4a03      	ldr	r2, [pc, #12]	@ (8005a08 <ssd1306_DrawPixel+0xc0>)
 80059fc:	54d1      	strb	r1, [r2, r3]
 80059fe:	e000      	b.n	8005a02 <ssd1306_DrawPixel+0xba>
        return;
 8005a00:	46c0      	nop			@ (mov r8, r8)
    }
}
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b003      	add	sp, #12
 8005a06:	bd90      	pop	{r4, r7, pc}
 8005a08:	200002e8 	.word	0x200002e8

08005a0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b089      	sub	sp, #36	@ 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	0004      	movs	r4, r0
 8005a14:	1d38      	adds	r0, r7, #4
 8005a16:	6001      	str	r1, [r0, #0]
 8005a18:	6042      	str	r2, [r0, #4]
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	200f      	movs	r0, #15
 8005a1e:	183b      	adds	r3, r7, r0
 8005a20:	1c22      	adds	r2, r4, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	230e      	movs	r3, #14
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	1c0a      	adds	r2, r1, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005a2c:	183b      	adds	r3, r7, r0
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b1f      	cmp	r3, #31
 8005a32:	d903      	bls.n	8005a3c <ssd1306_WriteChar+0x30>
 8005a34:	183b      	adds	r3, r7, r0
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b7e      	cmp	r3, #126	@ 0x7e
 8005a3a:	d901      	bls.n	8005a40 <ssd1306_WriteChar+0x34>
        return 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e077      	b.n	8005b30 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005a40:	4b3d      	ldr	r3, [pc, #244]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	001a      	movs	r2, r3
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	18d3      	adds	r3, r2, r3
 8005a4c:	2b80      	cmp	r3, #128	@ 0x80
 8005a4e:	dc07      	bgt.n	8005a60 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005a50:	4b39      	ldr	r3, [pc, #228]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005a52:	885b      	ldrh	r3, [r3, #2]
 8005a54:	001a      	movs	r2, r3
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005a5c:	2b40      	cmp	r3, #64	@ 0x40
 8005a5e:	dd01      	ble.n	8005a64 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e065      	b.n	8005b30 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005a64:	2300      	movs	r3, #0
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e051      	b.n	8005b0e <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	230f      	movs	r3, #15
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	3b20      	subs	r3, #32
 8005a76:	1d39      	adds	r1, r7, #4
 8005a78:	7849      	ldrb	r1, [r1, #1]
 8005a7a:	434b      	muls	r3, r1
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	18cb      	adds	r3, r1, r3
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	18d3      	adds	r3, r2, r3
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	e035      	b.n	8005afc <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	409a      	lsls	r2, r3
 8005a96:	2380      	movs	r3, #128	@ 0x80
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d014      	beq.n	8005ac8 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005a9e:	4b26      	ldr	r3, [pc, #152]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	b2d8      	uxtb	r0, r3
 8005aac:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005aae:	885b      	ldrh	r3, [r3, #2]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	18d3      	adds	r3, r2, r3
 8005ab8:	b2d9      	uxtb	r1, r3
 8005aba:	230e      	movs	r3, #14
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	f7ff ff41 	bl	8005948 <ssd1306_DrawPixel>
 8005ac6:	e016      	b.n	8005af6 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	18d3      	adds	r3, r2, r3
 8005ad4:	b2d8      	uxtb	r0, r3
 8005ad6:	4b18      	ldr	r3, [pc, #96]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	18d3      	adds	r3, r2, r3
 8005ae2:	b2d9      	uxtb	r1, r3
 8005ae4:	230e      	movs	r3, #14
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	425a      	negs	r2, r3
 8005aec:	4153      	adcs	r3, r2
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	001a      	movs	r2, r3
 8005af2:	f7ff ff29 	bl	8005948 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	1d3b      	adds	r3, r7, #4
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	001a      	movs	r2, r3
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d3c3      	bcc.n	8005a90 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	001a      	movs	r2, r3
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d3a7      	bcc.n	8005a6a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005b1a:	4b07      	ldr	r3, [pc, #28]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	1d3a      	adds	r2, r7, #4
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	4b04      	ldr	r3, [pc, #16]	@ (8005b38 <ssd1306_WriteChar+0x12c>)
 8005b28:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005b2a:	230f      	movs	r3, #15
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	781b      	ldrb	r3, [r3, #0]
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b009      	add	sp, #36	@ 0x24
 8005b36:	bd90      	pop	{r4, r7, pc}
 8005b38:	200006e8 	.word	0x200006e8

08005b3c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	1d38      	adds	r0, r7, #4
 8005b46:	6001      	str	r1, [r0, #0]
 8005b48:	6042      	str	r2, [r0, #4]
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	1cfb      	adds	r3, r7, #3
 8005b4e:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8005b50:	e014      	b.n	8005b7c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7818      	ldrb	r0, [r3, #0]
 8005b56:	1cfb      	adds	r3, r7, #3
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	1d3a      	adds	r2, r7, #4
 8005b5c:	6811      	ldr	r1, [r2, #0]
 8005b5e:	6852      	ldr	r2, [r2, #4]
 8005b60:	f7ff ff54 	bl	8005a0c <ssd1306_WriteChar>
 8005b64:	0003      	movs	r3, r0
 8005b66:	001a      	movs	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d002      	beq.n	8005b76 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	e008      	b.n	8005b88 <ssd1306_WriteString+0x4c>
        }
        str++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e6      	bne.n	8005b52 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	781b      	ldrb	r3, [r3, #0]
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b004      	add	sp, #16
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	0002      	movs	r2, r0
 8005b98:	1dfb      	adds	r3, r7, #7
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	1dbb      	adds	r3, r7, #6
 8005b9e:	1c0a      	adds	r2, r1, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8005ba2:	1dfb      	adds	r3, r7, #7
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <ssd1306_SetCursor+0x30>)
 8005baa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005bac:	1dbb      	adds	r3, r7, #6
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <ssd1306_SetCursor+0x30>)
 8005bb4:	805a      	strh	r2, [r3, #2]
}
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b002      	add	sp, #8
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	200006e8 	.word	0x200006e8

08005bc4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	0002      	movs	r2, r0
 8005bcc:	1dfb      	adds	r3, r7, #7
 8005bce:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005bd0:	210f      	movs	r1, #15
 8005bd2:	187b      	adds	r3, r7, r1
 8005bd4:	2281      	movs	r2, #129	@ 0x81
 8005bd6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005bd8:	187b      	adds	r3, r7, r1
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7ff fdc1 	bl	8005764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005be2:	1dfb      	adds	r3, r7, #7
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7ff fdbc 	bl	8005764 <ssd1306_WriteCommand>
}
 8005bec:	46c0      	nop			@ (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b004      	add	sp, #16
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	1dfb      	adds	r3, r7, #7
 8005bfe:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8005c00:	1dfb      	adds	r3, r7, #7
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8005c08:	230f      	movs	r3, #15
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	22af      	movs	r2, #175	@ 0xaf
 8005c0e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	@ (8005c3c <ssd1306_SetDisplayOn+0x48>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	715a      	strb	r2, [r3, #5]
 8005c16:	e006      	b.n	8005c26 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8005c18:	230f      	movs	r3, #15
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	22ae      	movs	r2, #174	@ 0xae
 8005c1e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <ssd1306_SetDisplayOn+0x48>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005c26:	230f      	movs	r3, #15
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff fd99 	bl	8005764 <ssd1306_WriteCommand>
}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	200006e8 	.word	0x200006e8

08005c40 <__cvt>:
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	001f      	movs	r7, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	0016      	movs	r6, r2
 8005c48:	b08b      	sub	sp, #44	@ 0x2c
 8005c4a:	429f      	cmp	r7, r3
 8005c4c:	da04      	bge.n	8005c58 <__cvt+0x18>
 8005c4e:	2180      	movs	r1, #128	@ 0x80
 8005c50:	0609      	lsls	r1, r1, #24
 8005c52:	187b      	adds	r3, r7, r1
 8005c54:	001f      	movs	r7, r3
 8005c56:	232d      	movs	r3, #45	@ 0x2d
 8005c58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c5a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005c5c:	7013      	strb	r3, [r2, #0]
 8005c5e:	2320      	movs	r3, #32
 8005c60:	2203      	movs	r2, #3
 8005c62:	439d      	bics	r5, r3
 8005c64:	2d46      	cmp	r5, #70	@ 0x46
 8005c66:	d007      	beq.n	8005c78 <__cvt+0x38>
 8005c68:	002b      	movs	r3, r5
 8005c6a:	3b45      	subs	r3, #69	@ 0x45
 8005c6c:	4259      	negs	r1, r3
 8005c6e:	414b      	adcs	r3, r1
 8005c70:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005c72:	3a01      	subs	r2, #1
 8005c74:	18cb      	adds	r3, r1, r3
 8005c76:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c78:	ab09      	add	r3, sp, #36	@ 0x24
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	ab08      	add	r3, sp, #32
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c82:	9200      	str	r2, [sp, #0]
 8005c84:	9302      	str	r3, [sp, #8]
 8005c86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c88:	0032      	movs	r2, r6
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	003b      	movs	r3, r7
 8005c8e:	f000 fea7 	bl	80069e0 <_dtoa_r>
 8005c92:	0004      	movs	r4, r0
 8005c94:	2d47      	cmp	r5, #71	@ 0x47
 8005c96:	d11b      	bne.n	8005cd0 <__cvt+0x90>
 8005c98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c9a:	07db      	lsls	r3, r3, #31
 8005c9c:	d511      	bpl.n	8005cc2 <__cvt+0x82>
 8005c9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ca0:	18c3      	adds	r3, r0, r3
 8005ca2:	9307      	str	r3, [sp, #28]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	0030      	movs	r0, r6
 8005caa:	0039      	movs	r1, r7
 8005cac:	f7fa fbca 	bl	8000444 <__aeabi_dcmpeq>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <__cvt+0x78>
 8005cb4:	9b07      	ldr	r3, [sp, #28]
 8005cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cb8:	2230      	movs	r2, #48	@ 0x30
 8005cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cbc:	9907      	ldr	r1, [sp, #28]
 8005cbe:	428b      	cmp	r3, r1
 8005cc0:	d320      	bcc.n	8005d04 <__cvt+0xc4>
 8005cc2:	0020      	movs	r0, r4
 8005cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005cc8:	1b1b      	subs	r3, r3, r4
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	b00b      	add	sp, #44	@ 0x2c
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cd2:	18c3      	adds	r3, r0, r3
 8005cd4:	9307      	str	r3, [sp, #28]
 8005cd6:	2d46      	cmp	r5, #70	@ 0x46
 8005cd8:	d1e4      	bne.n	8005ca4 <__cvt+0x64>
 8005cda:	7803      	ldrb	r3, [r0, #0]
 8005cdc:	2b30      	cmp	r3, #48	@ 0x30
 8005cde:	d10c      	bne.n	8005cfa <__cvt+0xba>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	0030      	movs	r0, r6
 8005ce6:	0039      	movs	r1, r7
 8005ce8:	f7fa fbac 	bl	8000444 <__aeabi_dcmpeq>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d104      	bne.n	8005cfa <__cvt+0xba>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cfc:	9a07      	ldr	r2, [sp, #28]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	18d3      	adds	r3, r2, r3
 8005d02:	e7ce      	b.n	8005ca2 <__cvt+0x62>
 8005d04:	1c59      	adds	r1, r3, #1
 8005d06:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	e7d6      	b.n	8005cba <__cvt+0x7a>

08005d0c <__exponent>:
 8005d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0e:	232b      	movs	r3, #43	@ 0x2b
 8005d10:	0005      	movs	r5, r0
 8005d12:	000c      	movs	r4, r1
 8005d14:	b085      	sub	sp, #20
 8005d16:	7002      	strb	r2, [r0, #0]
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	da01      	bge.n	8005d20 <__exponent+0x14>
 8005d1c:	424c      	negs	r4, r1
 8005d1e:	3302      	adds	r3, #2
 8005d20:	706b      	strb	r3, [r5, #1]
 8005d22:	2c09      	cmp	r4, #9
 8005d24:	dd2c      	ble.n	8005d80 <__exponent+0x74>
 8005d26:	ab02      	add	r3, sp, #8
 8005d28:	1dde      	adds	r6, r3, #7
 8005d2a:	0020      	movs	r0, r4
 8005d2c:	210a      	movs	r1, #10
 8005d2e:	f7fa fb73 	bl	8000418 <__aeabi_idivmod>
 8005d32:	0037      	movs	r7, r6
 8005d34:	3130      	adds	r1, #48	@ 0x30
 8005d36:	3e01      	subs	r6, #1
 8005d38:	0020      	movs	r0, r4
 8005d3a:	7031      	strb	r1, [r6, #0]
 8005d3c:	210a      	movs	r1, #10
 8005d3e:	9401      	str	r4, [sp, #4]
 8005d40:	f7fa fa84 	bl	800024c <__divsi3>
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	0004      	movs	r4, r0
 8005d48:	2b63      	cmp	r3, #99	@ 0x63
 8005d4a:	dcee      	bgt.n	8005d2a <__exponent+0x1e>
 8005d4c:	1eba      	subs	r2, r7, #2
 8005d4e:	1ca8      	adds	r0, r5, #2
 8005d50:	0001      	movs	r1, r0
 8005d52:	0013      	movs	r3, r2
 8005d54:	3430      	adds	r4, #48	@ 0x30
 8005d56:	7014      	strb	r4, [r2, #0]
 8005d58:	ac02      	add	r4, sp, #8
 8005d5a:	3407      	adds	r4, #7
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d80a      	bhi.n	8005d76 <__exponent+0x6a>
 8005d60:	2300      	movs	r3, #0
 8005d62:	42a2      	cmp	r2, r4
 8005d64:	d803      	bhi.n	8005d6e <__exponent+0x62>
 8005d66:	3309      	adds	r3, #9
 8005d68:	aa02      	add	r2, sp, #8
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	1bdb      	subs	r3, r3, r7
 8005d6e:	18c0      	adds	r0, r0, r3
 8005d70:	1b40      	subs	r0, r0, r5
 8005d72:	b005      	add	sp, #20
 8005d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d76:	781c      	ldrb	r4, [r3, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	700c      	strb	r4, [r1, #0]
 8005d7c:	3101      	adds	r1, #1
 8005d7e:	e7eb      	b.n	8005d58 <__exponent+0x4c>
 8005d80:	2330      	movs	r3, #48	@ 0x30
 8005d82:	18e4      	adds	r4, r4, r3
 8005d84:	70ab      	strb	r3, [r5, #2]
 8005d86:	1d28      	adds	r0, r5, #4
 8005d88:	70ec      	strb	r4, [r5, #3]
 8005d8a:	e7f1      	b.n	8005d70 <__exponent+0x64>

08005d8c <_printf_float>:
 8005d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8e:	b097      	sub	sp, #92	@ 0x5c
 8005d90:	000d      	movs	r5, r1
 8005d92:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d94:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d98:	9009      	str	r0, [sp, #36]	@ 0x24
 8005d9a:	f000 fcff 	bl	800679c <_localeconv_r>
 8005d9e:	6803      	ldr	r3, [r0, #0]
 8005da0:	0018      	movs	r0, r3
 8005da2:	930d      	str	r3, [sp, #52]	@ 0x34
 8005da4:	f7fa f9ac 	bl	8000100 <strlen>
 8005da8:	2300      	movs	r3, #0
 8005daa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005dac:	9314      	str	r3, [sp, #80]	@ 0x50
 8005dae:	7e2b      	ldrb	r3, [r5, #24]
 8005db0:	2207      	movs	r2, #7
 8005db2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	930e      	str	r3, [sp, #56]	@ 0x38
 8005db8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	05c9      	lsls	r1, r1, #23
 8005dbe:	d545      	bpl.n	8005e4c <_printf_float+0xc0>
 8005dc0:	189b      	adds	r3, r3, r2
 8005dc2:	4393      	bics	r3, r2
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	3208      	adds	r2, #8
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	681e      	ldr	r6, [r3, #0]
 8005dce:	685f      	ldr	r7, [r3, #4]
 8005dd0:	007b      	lsls	r3, r7, #1
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	9311      	str	r3, [sp, #68]	@ 0x44
 8005dd6:	9610      	str	r6, [sp, #64]	@ 0x40
 8005dd8:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005dda:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005ddc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005dde:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005de0:	4ba7      	ldr	r3, [pc, #668]	@ (8006080 <_printf_float+0x2f4>)
 8005de2:	4252      	negs	r2, r2
 8005de4:	f7fc fc12 	bl	800260c <__aeabi_dcmpun>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d131      	bne.n	8005e50 <_printf_float+0xc4>
 8005dec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005dee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005df0:	2201      	movs	r2, #1
 8005df2:	4ba3      	ldr	r3, [pc, #652]	@ (8006080 <_printf_float+0x2f4>)
 8005df4:	4252      	negs	r2, r2
 8005df6:	f7fa fb35 	bl	8000464 <__aeabi_dcmple>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d128      	bne.n	8005e50 <_printf_float+0xc4>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2300      	movs	r3, #0
 8005e02:	0030      	movs	r0, r6
 8005e04:	0039      	movs	r1, r7
 8005e06:	f7fa fb23 	bl	8000450 <__aeabi_dcmplt>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d003      	beq.n	8005e16 <_printf_float+0x8a>
 8005e0e:	002b      	movs	r3, r5
 8005e10:	222d      	movs	r2, #45	@ 0x2d
 8005e12:	3343      	adds	r3, #67	@ 0x43
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e18:	4f9a      	ldr	r7, [pc, #616]	@ (8006084 <_printf_float+0x2f8>)
 8005e1a:	2b47      	cmp	r3, #71	@ 0x47
 8005e1c:	d900      	bls.n	8005e20 <_printf_float+0x94>
 8005e1e:	4f9a      	ldr	r7, [pc, #616]	@ (8006088 <_printf_float+0x2fc>)
 8005e20:	2303      	movs	r3, #3
 8005e22:	2400      	movs	r4, #0
 8005e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e26:	612b      	str	r3, [r5, #16]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	439a      	bics	r2, r3
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e30:	0029      	movs	r1, r5
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e38:	aa15      	add	r2, sp, #84	@ 0x54
 8005e3a:	f000 f9e5 	bl	8006208 <_printf_common>
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d000      	beq.n	8005e44 <_printf_float+0xb8>
 8005e42:	e09f      	b.n	8005f84 <_printf_float+0x1f8>
 8005e44:	2001      	movs	r0, #1
 8005e46:	4240      	negs	r0, r0
 8005e48:	b017      	add	sp, #92	@ 0x5c
 8005e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	e7b8      	b.n	8005dc2 <_printf_float+0x36>
 8005e50:	0032      	movs	r2, r6
 8005e52:	003b      	movs	r3, r7
 8005e54:	0030      	movs	r0, r6
 8005e56:	0039      	movs	r1, r7
 8005e58:	f7fc fbd8 	bl	800260c <__aeabi_dcmpun>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d00b      	beq.n	8005e78 <_printf_float+0xec>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_float+0xe0>
 8005e64:	002b      	movs	r3, r5
 8005e66:	222d      	movs	r2, #45	@ 0x2d
 8005e68:	3343      	adds	r3, #67	@ 0x43
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e6e:	4f87      	ldr	r7, [pc, #540]	@ (800608c <_printf_float+0x300>)
 8005e70:	2b47      	cmp	r3, #71	@ 0x47
 8005e72:	d9d5      	bls.n	8005e20 <_printf_float+0x94>
 8005e74:	4f86      	ldr	r7, [pc, #536]	@ (8006090 <_printf_float+0x304>)
 8005e76:	e7d3      	b.n	8005e20 <_printf_float+0x94>
 8005e78:	2220      	movs	r2, #32
 8005e7a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005e7c:	686b      	ldr	r3, [r5, #4]
 8005e7e:	4394      	bics	r4, r2
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	d146      	bne.n	8005f12 <_printf_float+0x186>
 8005e84:	3307      	adds	r3, #7
 8005e86:	606b      	str	r3, [r5, #4]
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	2200      	movs	r2, #0
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	9206      	str	r2, [sp, #24]
 8005e96:	aa14      	add	r2, sp, #80	@ 0x50
 8005e98:	9205      	str	r2, [sp, #20]
 8005e9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e9c:	a90a      	add	r1, sp, #40	@ 0x28
 8005e9e:	9204      	str	r2, [sp, #16]
 8005ea0:	aa13      	add	r2, sp, #76	@ 0x4c
 8005ea2:	9203      	str	r2, [sp, #12]
 8005ea4:	2223      	movs	r2, #35	@ 0x23
 8005ea6:	1852      	adds	r2, r2, r1
 8005ea8:	9202      	str	r2, [sp, #8]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	686b      	ldr	r3, [r5, #4]
 8005eae:	0032      	movs	r2, r6
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb4:	003b      	movs	r3, r7
 8005eb6:	f7ff fec3 	bl	8005c40 <__cvt>
 8005eba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ebc:	0007      	movs	r7, r0
 8005ebe:	2c47      	cmp	r4, #71	@ 0x47
 8005ec0:	d12d      	bne.n	8005f1e <_printf_float+0x192>
 8005ec2:	1cd3      	adds	r3, r2, #3
 8005ec4:	db02      	blt.n	8005ecc <_printf_float+0x140>
 8005ec6:	686b      	ldr	r3, [r5, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	dd48      	ble.n	8005f5e <_printf_float+0x1d2>
 8005ecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ece:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ed0:	3b02      	subs	r3, #2
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ed6:	0028      	movs	r0, r5
 8005ed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005eda:	3901      	subs	r1, #1
 8005edc:	3050      	adds	r0, #80	@ 0x50
 8005ede:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ee0:	f7ff ff14 	bl	8005d0c <__exponent>
 8005ee4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ee6:	0004      	movs	r4, r0
 8005ee8:	1813      	adds	r3, r2, r0
 8005eea:	612b      	str	r3, [r5, #16]
 8005eec:	2a01      	cmp	r2, #1
 8005eee:	dc02      	bgt.n	8005ef6 <_printf_float+0x16a>
 8005ef0:	682a      	ldr	r2, [r5, #0]
 8005ef2:	07d2      	lsls	r2, r2, #31
 8005ef4:	d501      	bpl.n	8005efa <_printf_float+0x16e>
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	612b      	str	r3, [r5, #16]
 8005efa:	2323      	movs	r3, #35	@ 0x23
 8005efc:	aa0a      	add	r2, sp, #40	@ 0x28
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d100      	bne.n	8005f08 <_printf_float+0x17c>
 8005f06:	e792      	b.n	8005e2e <_printf_float+0xa2>
 8005f08:	002b      	movs	r3, r5
 8005f0a:	222d      	movs	r2, #45	@ 0x2d
 8005f0c:	3343      	adds	r3, #67	@ 0x43
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	e78d      	b.n	8005e2e <_printf_float+0xa2>
 8005f12:	2c47      	cmp	r4, #71	@ 0x47
 8005f14:	d1b8      	bne.n	8005e88 <_printf_float+0xfc>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1b6      	bne.n	8005e88 <_printf_float+0xfc>
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	e7b3      	b.n	8005e86 <_printf_float+0xfa>
 8005f1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f20:	0011      	movs	r1, r2
 8005f22:	2b65      	cmp	r3, #101	@ 0x65
 8005f24:	d9d7      	bls.n	8005ed6 <_printf_float+0x14a>
 8005f26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f28:	2b66      	cmp	r3, #102	@ 0x66
 8005f2a:	d11a      	bne.n	8005f62 <_printf_float+0x1d6>
 8005f2c:	686b      	ldr	r3, [r5, #4]
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	dd09      	ble.n	8005f46 <_printf_float+0x1ba>
 8005f32:	612a      	str	r2, [r5, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <_printf_float+0x1b2>
 8005f38:	6829      	ldr	r1, [r5, #0]
 8005f3a:	07c9      	lsls	r1, r1, #31
 8005f3c:	d50b      	bpl.n	8005f56 <_printf_float+0x1ca>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	189b      	adds	r3, r3, r2
 8005f42:	612b      	str	r3, [r5, #16]
 8005f44:	e007      	b.n	8005f56 <_printf_float+0x1ca>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <_printf_float+0x1c6>
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	6829      	ldr	r1, [r5, #0]
 8005f4e:	4211      	tst	r1, r2
 8005f50:	d000      	beq.n	8005f54 <_printf_float+0x1c8>
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	612a      	str	r2, [r5, #16]
 8005f56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f58:	2400      	movs	r4, #0
 8005f5a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005f5c:	e7cd      	b.n	8005efa <_printf_float+0x16e>
 8005f5e:	2367      	movs	r3, #103	@ 0x67
 8005f60:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f66:	4299      	cmp	r1, r3
 8005f68:	db06      	blt.n	8005f78 <_printf_float+0x1ec>
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	6129      	str	r1, [r5, #16]
 8005f6e:	07db      	lsls	r3, r3, #31
 8005f70:	d5f1      	bpl.n	8005f56 <_printf_float+0x1ca>
 8005f72:	3101      	adds	r1, #1
 8005f74:	6129      	str	r1, [r5, #16]
 8005f76:	e7ee      	b.n	8005f56 <_printf_float+0x1ca>
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2900      	cmp	r1, #0
 8005f7c:	dce0      	bgt.n	8005f40 <_printf_float+0x1b4>
 8005f7e:	1892      	adds	r2, r2, r2
 8005f80:	1a52      	subs	r2, r2, r1
 8005f82:	e7dd      	b.n	8005f40 <_printf_float+0x1b4>
 8005f84:	682a      	ldr	r2, [r5, #0]
 8005f86:	0553      	lsls	r3, r2, #21
 8005f88:	d408      	bmi.n	8005f9c <_printf_float+0x210>
 8005f8a:	692b      	ldr	r3, [r5, #16]
 8005f8c:	003a      	movs	r2, r7
 8005f8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f94:	47a0      	blx	r4
 8005f96:	3001      	adds	r0, #1
 8005f98:	d129      	bne.n	8005fee <_printf_float+0x262>
 8005f9a:	e753      	b.n	8005e44 <_printf_float+0xb8>
 8005f9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f9e:	2b65      	cmp	r3, #101	@ 0x65
 8005fa0:	d800      	bhi.n	8005fa4 <_printf_float+0x218>
 8005fa2:	e0da      	b.n	800615a <_printf_float+0x3ce>
 8005fa4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005fa6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2300      	movs	r3, #0
 8005fac:	f7fa fa4a 	bl	8000444 <__aeabi_dcmpeq>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d033      	beq.n	800601c <_printf_float+0x290>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4a37      	ldr	r2, [pc, #220]	@ (8006094 <_printf_float+0x308>)
 8005fb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fbe:	47a0      	blx	r4
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d100      	bne.n	8005fc6 <_printf_float+0x23a>
 8005fc4:	e73e      	b.n	8005e44 <_printf_float+0xb8>
 8005fc6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005fc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fca:	42b3      	cmp	r3, r6
 8005fcc:	db02      	blt.n	8005fd4 <_printf_float+0x248>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	07db      	lsls	r3, r3, #31
 8005fd2:	d50c      	bpl.n	8005fee <_printf_float+0x262>
 8005fd4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fdc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fde:	47a0      	blx	r4
 8005fe0:	2400      	movs	r4, #0
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d100      	bne.n	8005fe8 <_printf_float+0x25c>
 8005fe6:	e72d      	b.n	8005e44 <_printf_float+0xb8>
 8005fe8:	1e73      	subs	r3, r6, #1
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	dc0a      	bgt.n	8006004 <_printf_float+0x278>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	079b      	lsls	r3, r3, #30
 8005ff2:	d500      	bpl.n	8005ff6 <_printf_float+0x26a>
 8005ff4:	e105      	b.n	8006202 <_printf_float+0x476>
 8005ff6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ff8:	68e8      	ldr	r0, [r5, #12]
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	db00      	blt.n	8006000 <_printf_float+0x274>
 8005ffe:	e723      	b.n	8005e48 <_printf_float+0xbc>
 8006000:	0018      	movs	r0, r3
 8006002:	e721      	b.n	8005e48 <_printf_float+0xbc>
 8006004:	002a      	movs	r2, r5
 8006006:	2301      	movs	r3, #1
 8006008:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800600a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800600c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800600e:	321a      	adds	r2, #26
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	d100      	bne.n	8006018 <_printf_float+0x28c>
 8006016:	e715      	b.n	8005e44 <_printf_float+0xb8>
 8006018:	3401      	adds	r4, #1
 800601a:	e7e5      	b.n	8005fe8 <_printf_float+0x25c>
 800601c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800601e:	2b00      	cmp	r3, #0
 8006020:	dc3a      	bgt.n	8006098 <_printf_float+0x30c>
 8006022:	2301      	movs	r3, #1
 8006024:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <_printf_float+0x308>)
 8006026:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006028:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800602a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800602c:	47a0      	blx	r4
 800602e:	3001      	adds	r0, #1
 8006030:	d100      	bne.n	8006034 <_printf_float+0x2a8>
 8006032:	e707      	b.n	8005e44 <_printf_float+0xb8>
 8006034:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006036:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006038:	4333      	orrs	r3, r6
 800603a:	d102      	bne.n	8006042 <_printf_float+0x2b6>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	07db      	lsls	r3, r3, #31
 8006040:	d5d5      	bpl.n	8005fee <_printf_float+0x262>
 8006042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006046:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006048:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800604a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800604c:	47a0      	blx	r4
 800604e:	2300      	movs	r3, #0
 8006050:	3001      	adds	r0, #1
 8006052:	d100      	bne.n	8006056 <_printf_float+0x2ca>
 8006054:	e6f6      	b.n	8005e44 <_printf_float+0xb8>
 8006056:	930c      	str	r3, [sp, #48]	@ 0x30
 8006058:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800605a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800605c:	425b      	negs	r3, r3
 800605e:	4293      	cmp	r3, r2
 8006060:	dc01      	bgt.n	8006066 <_printf_float+0x2da>
 8006062:	0033      	movs	r3, r6
 8006064:	e792      	b.n	8005f8c <_printf_float+0x200>
 8006066:	002a      	movs	r2, r5
 8006068:	2301      	movs	r3, #1
 800606a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800606c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800606e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006070:	321a      	adds	r2, #26
 8006072:	47a0      	blx	r4
 8006074:	3001      	adds	r0, #1
 8006076:	d100      	bne.n	800607a <_printf_float+0x2ee>
 8006078:	e6e4      	b.n	8005e44 <_printf_float+0xb8>
 800607a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800607c:	3301      	adds	r3, #1
 800607e:	e7ea      	b.n	8006056 <_printf_float+0x2ca>
 8006080:	7fefffff 	.word	0x7fefffff
 8006084:	0800ac3c 	.word	0x0800ac3c
 8006088:	0800ac40 	.word	0x0800ac40
 800608c:	0800ac44 	.word	0x0800ac44
 8006090:	0800ac48 	.word	0x0800ac48
 8006094:	0800ac4c 	.word	0x0800ac4c
 8006098:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800609a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800609c:	930c      	str	r3, [sp, #48]	@ 0x30
 800609e:	429e      	cmp	r6, r3
 80060a0:	dd00      	ble.n	80060a4 <_printf_float+0x318>
 80060a2:	001e      	movs	r6, r3
 80060a4:	2e00      	cmp	r6, #0
 80060a6:	dc31      	bgt.n	800610c <_printf_float+0x380>
 80060a8:	43f3      	mvns	r3, r6
 80060aa:	2400      	movs	r4, #0
 80060ac:	17db      	asrs	r3, r3, #31
 80060ae:	4033      	ands	r3, r6
 80060b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80060b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80060b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060b6:	1af3      	subs	r3, r6, r3
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	dc30      	bgt.n	800611e <_printf_float+0x392>
 80060bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060c0:	429a      	cmp	r2, r3
 80060c2:	dc38      	bgt.n	8006136 <_printf_float+0x3aa>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	07db      	lsls	r3, r3, #31
 80060c8:	d435      	bmi.n	8006136 <_printf_float+0x3aa>
 80060ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80060cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060d0:	1b9b      	subs	r3, r3, r6
 80060d2:	1b14      	subs	r4, r2, r4
 80060d4:	429c      	cmp	r4, r3
 80060d6:	dd00      	ble.n	80060da <_printf_float+0x34e>
 80060d8:	001c      	movs	r4, r3
 80060da:	2c00      	cmp	r4, #0
 80060dc:	dc34      	bgt.n	8006148 <_printf_float+0x3bc>
 80060de:	43e3      	mvns	r3, r4
 80060e0:	2600      	movs	r6, #0
 80060e2:	17db      	asrs	r3, r3, #31
 80060e4:	401c      	ands	r4, r3
 80060e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	1b1b      	subs	r3, r3, r4
 80060ee:	42b3      	cmp	r3, r6
 80060f0:	dc00      	bgt.n	80060f4 <_printf_float+0x368>
 80060f2:	e77c      	b.n	8005fee <_printf_float+0x262>
 80060f4:	002a      	movs	r2, r5
 80060f6:	2301      	movs	r3, #1
 80060f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80060fe:	321a      	adds	r2, #26
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	d100      	bne.n	8006108 <_printf_float+0x37c>
 8006106:	e69d      	b.n	8005e44 <_printf_float+0xb8>
 8006108:	3601      	adds	r6, #1
 800610a:	e7ec      	b.n	80060e6 <_printf_float+0x35a>
 800610c:	0033      	movs	r3, r6
 800610e:	003a      	movs	r2, r7
 8006110:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006114:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006116:	47a0      	blx	r4
 8006118:	3001      	adds	r0, #1
 800611a:	d1c5      	bne.n	80060a8 <_printf_float+0x31c>
 800611c:	e692      	b.n	8005e44 <_printf_float+0xb8>
 800611e:	002a      	movs	r2, r5
 8006120:	2301      	movs	r3, #1
 8006122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006124:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006126:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006128:	321a      	adds	r2, #26
 800612a:	47b0      	blx	r6
 800612c:	3001      	adds	r0, #1
 800612e:	d100      	bne.n	8006132 <_printf_float+0x3a6>
 8006130:	e688      	b.n	8005e44 <_printf_float+0xb8>
 8006132:	3401      	adds	r4, #1
 8006134:	e7bd      	b.n	80060b2 <_printf_float+0x326>
 8006136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006138:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800613a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800613c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800613e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006140:	47a0      	blx	r4
 8006142:	3001      	adds	r0, #1
 8006144:	d1c1      	bne.n	80060ca <_printf_float+0x33e>
 8006146:	e67d      	b.n	8005e44 <_printf_float+0xb8>
 8006148:	19ba      	adds	r2, r7, r6
 800614a:	0023      	movs	r3, r4
 800614c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800614e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006150:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006152:	47b0      	blx	r6
 8006154:	3001      	adds	r0, #1
 8006156:	d1c2      	bne.n	80060de <_printf_float+0x352>
 8006158:	e674      	b.n	8005e44 <_printf_float+0xb8>
 800615a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800615c:	930c      	str	r3, [sp, #48]	@ 0x30
 800615e:	2b01      	cmp	r3, #1
 8006160:	dc02      	bgt.n	8006168 <_printf_float+0x3dc>
 8006162:	2301      	movs	r3, #1
 8006164:	421a      	tst	r2, r3
 8006166:	d039      	beq.n	80061dc <_printf_float+0x450>
 8006168:	2301      	movs	r3, #1
 800616a:	003a      	movs	r2, r7
 800616c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800616e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006170:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006172:	47b0      	blx	r6
 8006174:	3001      	adds	r0, #1
 8006176:	d100      	bne.n	800617a <_printf_float+0x3ee>
 8006178:	e664      	b.n	8005e44 <_printf_float+0xb8>
 800617a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800617c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800617e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006180:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006182:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006184:	47b0      	blx	r6
 8006186:	3001      	adds	r0, #1
 8006188:	d100      	bne.n	800618c <_printf_float+0x400>
 800618a:	e65b      	b.n	8005e44 <_printf_float+0xb8>
 800618c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800618e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006192:	2200      	movs	r2, #0
 8006194:	3b01      	subs	r3, #1
 8006196:	930c      	str	r3, [sp, #48]	@ 0x30
 8006198:	2300      	movs	r3, #0
 800619a:	f7fa f953 	bl	8000444 <__aeabi_dcmpeq>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d11a      	bne.n	80061d8 <_printf_float+0x44c>
 80061a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061a4:	1c7a      	adds	r2, r7, #1
 80061a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061aa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061ac:	47b0      	blx	r6
 80061ae:	3001      	adds	r0, #1
 80061b0:	d10e      	bne.n	80061d0 <_printf_float+0x444>
 80061b2:	e647      	b.n	8005e44 <_printf_float+0xb8>
 80061b4:	002a      	movs	r2, r5
 80061b6:	2301      	movs	r3, #1
 80061b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80061be:	321a      	adds	r2, #26
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	d100      	bne.n	80061c8 <_printf_float+0x43c>
 80061c6:	e63d      	b.n	8005e44 <_printf_float+0xb8>
 80061c8:	3601      	adds	r6, #1
 80061ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061cc:	429e      	cmp	r6, r3
 80061ce:	dbf1      	blt.n	80061b4 <_printf_float+0x428>
 80061d0:	002a      	movs	r2, r5
 80061d2:	0023      	movs	r3, r4
 80061d4:	3250      	adds	r2, #80	@ 0x50
 80061d6:	e6da      	b.n	8005f8e <_printf_float+0x202>
 80061d8:	2600      	movs	r6, #0
 80061da:	e7f6      	b.n	80061ca <_printf_float+0x43e>
 80061dc:	003a      	movs	r2, r7
 80061de:	e7e2      	b.n	80061a6 <_printf_float+0x41a>
 80061e0:	002a      	movs	r2, r5
 80061e2:	2301      	movs	r3, #1
 80061e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061ea:	3219      	adds	r2, #25
 80061ec:	47b0      	blx	r6
 80061ee:	3001      	adds	r0, #1
 80061f0:	d100      	bne.n	80061f4 <_printf_float+0x468>
 80061f2:	e627      	b.n	8005e44 <_printf_float+0xb8>
 80061f4:	3401      	adds	r4, #1
 80061f6:	68eb      	ldr	r3, [r5, #12]
 80061f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	dcef      	bgt.n	80061e0 <_printf_float+0x454>
 8006200:	e6f9      	b.n	8005ff6 <_printf_float+0x26a>
 8006202:	2400      	movs	r4, #0
 8006204:	e7f7      	b.n	80061f6 <_printf_float+0x46a>
 8006206:	46c0      	nop			@ (mov r8, r8)

08006208 <_printf_common>:
 8006208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620a:	0016      	movs	r6, r2
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	688a      	ldr	r2, [r1, #8]
 8006210:	690b      	ldr	r3, [r1, #16]
 8006212:	000c      	movs	r4, r1
 8006214:	9000      	str	r0, [sp, #0]
 8006216:	4293      	cmp	r3, r2
 8006218:	da00      	bge.n	800621c <_printf_common+0x14>
 800621a:	0013      	movs	r3, r2
 800621c:	0022      	movs	r2, r4
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	3243      	adds	r2, #67	@ 0x43
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	2a00      	cmp	r2, #0
 8006226:	d001      	beq.n	800622c <_printf_common+0x24>
 8006228:	3301      	adds	r3, #1
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	069b      	lsls	r3, r3, #26
 8006230:	d502      	bpl.n	8006238 <_printf_common+0x30>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	3302      	adds	r3, #2
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	6822      	ldr	r2, [r4, #0]
 800623a:	2306      	movs	r3, #6
 800623c:	0015      	movs	r5, r2
 800623e:	401d      	ands	r5, r3
 8006240:	421a      	tst	r2, r3
 8006242:	d027      	beq.n	8006294 <_printf_common+0x8c>
 8006244:	0023      	movs	r3, r4
 8006246:	3343      	adds	r3, #67	@ 0x43
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	1e5a      	subs	r2, r3, #1
 800624c:	4193      	sbcs	r3, r2
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	0692      	lsls	r2, r2, #26
 8006252:	d430      	bmi.n	80062b6 <_printf_common+0xae>
 8006254:	0022      	movs	r2, r4
 8006256:	9901      	ldr	r1, [sp, #4]
 8006258:	9800      	ldr	r0, [sp, #0]
 800625a:	9d08      	ldr	r5, [sp, #32]
 800625c:	3243      	adds	r2, #67	@ 0x43
 800625e:	47a8      	blx	r5
 8006260:	3001      	adds	r0, #1
 8006262:	d025      	beq.n	80062b0 <_printf_common+0xa8>
 8006264:	2206      	movs	r2, #6
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	2500      	movs	r5, #0
 800626a:	4013      	ands	r3, r2
 800626c:	2b04      	cmp	r3, #4
 800626e:	d105      	bne.n	800627c <_printf_common+0x74>
 8006270:	6833      	ldr	r3, [r6, #0]
 8006272:	68e5      	ldr	r5, [r4, #12]
 8006274:	1aed      	subs	r5, r5, r3
 8006276:	43eb      	mvns	r3, r5
 8006278:	17db      	asrs	r3, r3, #31
 800627a:	401d      	ands	r5, r3
 800627c:	68a3      	ldr	r3, [r4, #8]
 800627e:	6922      	ldr	r2, [r4, #16]
 8006280:	4293      	cmp	r3, r2
 8006282:	dd01      	ble.n	8006288 <_printf_common+0x80>
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	18ed      	adds	r5, r5, r3
 8006288:	2600      	movs	r6, #0
 800628a:	42b5      	cmp	r5, r6
 800628c:	d120      	bne.n	80062d0 <_printf_common+0xc8>
 800628e:	2000      	movs	r0, #0
 8006290:	e010      	b.n	80062b4 <_printf_common+0xac>
 8006292:	3501      	adds	r5, #1
 8006294:	68e3      	ldr	r3, [r4, #12]
 8006296:	6832      	ldr	r2, [r6, #0]
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	42ab      	cmp	r3, r5
 800629c:	ddd2      	ble.n	8006244 <_printf_common+0x3c>
 800629e:	0022      	movs	r2, r4
 80062a0:	2301      	movs	r3, #1
 80062a2:	9901      	ldr	r1, [sp, #4]
 80062a4:	9800      	ldr	r0, [sp, #0]
 80062a6:	9f08      	ldr	r7, [sp, #32]
 80062a8:	3219      	adds	r2, #25
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	d1f0      	bne.n	8006292 <_printf_common+0x8a>
 80062b0:	2001      	movs	r0, #1
 80062b2:	4240      	negs	r0, r0
 80062b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062b6:	2030      	movs	r0, #48	@ 0x30
 80062b8:	18e1      	adds	r1, r4, r3
 80062ba:	3143      	adds	r1, #67	@ 0x43
 80062bc:	7008      	strb	r0, [r1, #0]
 80062be:	0021      	movs	r1, r4
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	3145      	adds	r1, #69	@ 0x45
 80062c4:	7809      	ldrb	r1, [r1, #0]
 80062c6:	18a2      	adds	r2, r4, r2
 80062c8:	3243      	adds	r2, #67	@ 0x43
 80062ca:	3302      	adds	r3, #2
 80062cc:	7011      	strb	r1, [r2, #0]
 80062ce:	e7c1      	b.n	8006254 <_printf_common+0x4c>
 80062d0:	0022      	movs	r2, r4
 80062d2:	2301      	movs	r3, #1
 80062d4:	9901      	ldr	r1, [sp, #4]
 80062d6:	9800      	ldr	r0, [sp, #0]
 80062d8:	9f08      	ldr	r7, [sp, #32]
 80062da:	321a      	adds	r2, #26
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	d0e6      	beq.n	80062b0 <_printf_common+0xa8>
 80062e2:	3601      	adds	r6, #1
 80062e4:	e7d1      	b.n	800628a <_printf_common+0x82>
	...

080062e8 <_printf_i>:
 80062e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ea:	b08b      	sub	sp, #44	@ 0x2c
 80062ec:	9206      	str	r2, [sp, #24]
 80062ee:	000a      	movs	r2, r1
 80062f0:	3243      	adds	r2, #67	@ 0x43
 80062f2:	9307      	str	r3, [sp, #28]
 80062f4:	9005      	str	r0, [sp, #20]
 80062f6:	9203      	str	r2, [sp, #12]
 80062f8:	7e0a      	ldrb	r2, [r1, #24]
 80062fa:	000c      	movs	r4, r1
 80062fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062fe:	2a78      	cmp	r2, #120	@ 0x78
 8006300:	d809      	bhi.n	8006316 <_printf_i+0x2e>
 8006302:	2a62      	cmp	r2, #98	@ 0x62
 8006304:	d80b      	bhi.n	800631e <_printf_i+0x36>
 8006306:	2a00      	cmp	r2, #0
 8006308:	d100      	bne.n	800630c <_printf_i+0x24>
 800630a:	e0bc      	b.n	8006486 <_printf_i+0x19e>
 800630c:	497b      	ldr	r1, [pc, #492]	@ (80064fc <_printf_i+0x214>)
 800630e:	9104      	str	r1, [sp, #16]
 8006310:	2a58      	cmp	r2, #88	@ 0x58
 8006312:	d100      	bne.n	8006316 <_printf_i+0x2e>
 8006314:	e090      	b.n	8006438 <_printf_i+0x150>
 8006316:	0025      	movs	r5, r4
 8006318:	3542      	adds	r5, #66	@ 0x42
 800631a:	702a      	strb	r2, [r5, #0]
 800631c:	e022      	b.n	8006364 <_printf_i+0x7c>
 800631e:	0010      	movs	r0, r2
 8006320:	3863      	subs	r0, #99	@ 0x63
 8006322:	2815      	cmp	r0, #21
 8006324:	d8f7      	bhi.n	8006316 <_printf_i+0x2e>
 8006326:	f7f9 fefd 	bl	8000124 <__gnu_thumb1_case_shi>
 800632a:	0016      	.short	0x0016
 800632c:	fff6001f 	.word	0xfff6001f
 8006330:	fff6fff6 	.word	0xfff6fff6
 8006334:	001ffff6 	.word	0x001ffff6
 8006338:	fff6fff6 	.word	0xfff6fff6
 800633c:	fff6fff6 	.word	0xfff6fff6
 8006340:	003600a1 	.word	0x003600a1
 8006344:	fff60080 	.word	0xfff60080
 8006348:	00b2fff6 	.word	0x00b2fff6
 800634c:	0036fff6 	.word	0x0036fff6
 8006350:	fff6fff6 	.word	0xfff6fff6
 8006354:	0084      	.short	0x0084
 8006356:	0025      	movs	r5, r4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	3542      	adds	r5, #66	@ 0x42
 800635c:	1d11      	adds	r1, r2, #4
 800635e:	6019      	str	r1, [r3, #0]
 8006360:	6813      	ldr	r3, [r2, #0]
 8006362:	702b      	strb	r3, [r5, #0]
 8006364:	2301      	movs	r3, #1
 8006366:	e0a0      	b.n	80064aa <_printf_i+0x1c2>
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	6809      	ldr	r1, [r1, #0]
 800636c:	1d02      	adds	r2, r0, #4
 800636e:	060d      	lsls	r5, r1, #24
 8006370:	d50b      	bpl.n	800638a <_printf_i+0xa2>
 8006372:	6806      	ldr	r6, [r0, #0]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	2e00      	cmp	r6, #0
 8006378:	da03      	bge.n	8006382 <_printf_i+0x9a>
 800637a:	232d      	movs	r3, #45	@ 0x2d
 800637c:	9a03      	ldr	r2, [sp, #12]
 800637e:	4276      	negs	r6, r6
 8006380:	7013      	strb	r3, [r2, #0]
 8006382:	4b5e      	ldr	r3, [pc, #376]	@ (80064fc <_printf_i+0x214>)
 8006384:	270a      	movs	r7, #10
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	e018      	b.n	80063bc <_printf_i+0xd4>
 800638a:	6806      	ldr	r6, [r0, #0]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	0649      	lsls	r1, r1, #25
 8006390:	d5f1      	bpl.n	8006376 <_printf_i+0x8e>
 8006392:	b236      	sxth	r6, r6
 8006394:	e7ef      	b.n	8006376 <_printf_i+0x8e>
 8006396:	6808      	ldr	r0, [r1, #0]
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	c940      	ldmia	r1!, {r6}
 800639c:	0605      	lsls	r5, r0, #24
 800639e:	d402      	bmi.n	80063a6 <_printf_i+0xbe>
 80063a0:	0640      	lsls	r0, r0, #25
 80063a2:	d500      	bpl.n	80063a6 <_printf_i+0xbe>
 80063a4:	b2b6      	uxth	r6, r6
 80063a6:	6019      	str	r1, [r3, #0]
 80063a8:	4b54      	ldr	r3, [pc, #336]	@ (80064fc <_printf_i+0x214>)
 80063aa:	270a      	movs	r7, #10
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	2a6f      	cmp	r2, #111	@ 0x6f
 80063b0:	d100      	bne.n	80063b4 <_printf_i+0xcc>
 80063b2:	3f02      	subs	r7, #2
 80063b4:	0023      	movs	r3, r4
 80063b6:	2200      	movs	r2, #0
 80063b8:	3343      	adds	r3, #67	@ 0x43
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	60a3      	str	r3, [r4, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db03      	blt.n	80063cc <_printf_i+0xe4>
 80063c4:	2104      	movs	r1, #4
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	438a      	bics	r2, r1
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	d102      	bne.n	80063d6 <_printf_i+0xee>
 80063d0:	9d03      	ldr	r5, [sp, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <_printf_i+0x108>
 80063d6:	9d03      	ldr	r5, [sp, #12]
 80063d8:	0030      	movs	r0, r6
 80063da:	0039      	movs	r1, r7
 80063dc:	f7f9 ff32 	bl	8000244 <__aeabi_uidivmod>
 80063e0:	9b04      	ldr	r3, [sp, #16]
 80063e2:	3d01      	subs	r5, #1
 80063e4:	5c5b      	ldrb	r3, [r3, r1]
 80063e6:	702b      	strb	r3, [r5, #0]
 80063e8:	0033      	movs	r3, r6
 80063ea:	0006      	movs	r6, r0
 80063ec:	429f      	cmp	r7, r3
 80063ee:	d9f3      	bls.n	80063d8 <_printf_i+0xf0>
 80063f0:	2f08      	cmp	r7, #8
 80063f2:	d109      	bne.n	8006408 <_printf_i+0x120>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	07db      	lsls	r3, r3, #31
 80063f8:	d506      	bpl.n	8006408 <_printf_i+0x120>
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	429a      	cmp	r2, r3
 8006400:	dc02      	bgt.n	8006408 <_printf_i+0x120>
 8006402:	2330      	movs	r3, #48	@ 0x30
 8006404:	3d01      	subs	r5, #1
 8006406:	702b      	strb	r3, [r5, #0]
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	1b5b      	subs	r3, r3, r5
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	0021      	movs	r1, r4
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	9805      	ldr	r0, [sp, #20]
 8006416:	9b06      	ldr	r3, [sp, #24]
 8006418:	aa09      	add	r2, sp, #36	@ 0x24
 800641a:	f7ff fef5 	bl	8006208 <_printf_common>
 800641e:	3001      	adds	r0, #1
 8006420:	d148      	bne.n	80064b4 <_printf_i+0x1cc>
 8006422:	2001      	movs	r0, #1
 8006424:	4240      	negs	r0, r0
 8006426:	b00b      	add	sp, #44	@ 0x2c
 8006428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642a:	2220      	movs	r2, #32
 800642c:	6809      	ldr	r1, [r1, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	6022      	str	r2, [r4, #0]
 8006432:	2278      	movs	r2, #120	@ 0x78
 8006434:	4932      	ldr	r1, [pc, #200]	@ (8006500 <_printf_i+0x218>)
 8006436:	9104      	str	r1, [sp, #16]
 8006438:	0021      	movs	r1, r4
 800643a:	3145      	adds	r1, #69	@ 0x45
 800643c:	700a      	strb	r2, [r1, #0]
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	c940      	ldmia	r1!, {r6}
 8006444:	0610      	lsls	r0, r2, #24
 8006446:	d402      	bmi.n	800644e <_printf_i+0x166>
 8006448:	0650      	lsls	r0, r2, #25
 800644a:	d500      	bpl.n	800644e <_printf_i+0x166>
 800644c:	b2b6      	uxth	r6, r6
 800644e:	6019      	str	r1, [r3, #0]
 8006450:	07d3      	lsls	r3, r2, #31
 8006452:	d502      	bpl.n	800645a <_printf_i+0x172>
 8006454:	2320      	movs	r3, #32
 8006456:	4313      	orrs	r3, r2
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2e00      	cmp	r6, #0
 800645c:	d001      	beq.n	8006462 <_printf_i+0x17a>
 800645e:	2710      	movs	r7, #16
 8006460:	e7a8      	b.n	80063b4 <_printf_i+0xcc>
 8006462:	2220      	movs	r2, #32
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	4393      	bics	r3, r2
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	e7f8      	b.n	800645e <_printf_i+0x176>
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	680d      	ldr	r5, [r1, #0]
 8006470:	1d10      	adds	r0, r2, #4
 8006472:	6949      	ldr	r1, [r1, #20]
 8006474:	6018      	str	r0, [r3, #0]
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	062e      	lsls	r6, r5, #24
 800647a:	d501      	bpl.n	8006480 <_printf_i+0x198>
 800647c:	6019      	str	r1, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0x19e>
 8006480:	066d      	lsls	r5, r5, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0x194>
 8006484:	8019      	strh	r1, [r3, #0]
 8006486:	2300      	movs	r3, #0
 8006488:	9d03      	ldr	r5, [sp, #12]
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	e7bf      	b.n	800640e <_printf_i+0x126>
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	1d11      	adds	r1, r2, #4
 8006492:	6019      	str	r1, [r3, #0]
 8006494:	6815      	ldr	r5, [r2, #0]
 8006496:	2100      	movs	r1, #0
 8006498:	0028      	movs	r0, r5
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	f000 f9fd 	bl	800689a <memchr>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d001      	beq.n	80064a8 <_printf_i+0x1c0>
 80064a4:	1b40      	subs	r0, r0, r5
 80064a6:	6060      	str	r0, [r4, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9a03      	ldr	r2, [sp, #12]
 80064b0:	7013      	strb	r3, [r2, #0]
 80064b2:	e7ac      	b.n	800640e <_printf_i+0x126>
 80064b4:	002a      	movs	r2, r5
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	9906      	ldr	r1, [sp, #24]
 80064ba:	9805      	ldr	r0, [sp, #20]
 80064bc:	9d07      	ldr	r5, [sp, #28]
 80064be:	47a8      	blx	r5
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0ae      	beq.n	8006422 <_printf_i+0x13a>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	079b      	lsls	r3, r3, #30
 80064c8:	d415      	bmi.n	80064f6 <_printf_i+0x20e>
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	4298      	cmp	r0, r3
 80064d0:	daa9      	bge.n	8006426 <_printf_i+0x13e>
 80064d2:	0018      	movs	r0, r3
 80064d4:	e7a7      	b.n	8006426 <_printf_i+0x13e>
 80064d6:	0022      	movs	r2, r4
 80064d8:	2301      	movs	r3, #1
 80064da:	9906      	ldr	r1, [sp, #24]
 80064dc:	9805      	ldr	r0, [sp, #20]
 80064de:	9e07      	ldr	r6, [sp, #28]
 80064e0:	3219      	adds	r2, #25
 80064e2:	47b0      	blx	r6
 80064e4:	3001      	adds	r0, #1
 80064e6:	d09c      	beq.n	8006422 <_printf_i+0x13a>
 80064e8:	3501      	adds	r5, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_i+0x1ee>
 80064f4:	e7e9      	b.n	80064ca <_printf_i+0x1e2>
 80064f6:	2500      	movs	r5, #0
 80064f8:	e7f7      	b.n	80064ea <_printf_i+0x202>
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	0800ac4e 	.word	0x0800ac4e
 8006500:	0800ac5f 	.word	0x0800ac5f

08006504 <std>:
 8006504:	2300      	movs	r3, #0
 8006506:	b510      	push	{r4, lr}
 8006508:	0004      	movs	r4, r0
 800650a:	6003      	str	r3, [r0, #0]
 800650c:	6043      	str	r3, [r0, #4]
 800650e:	6083      	str	r3, [r0, #8]
 8006510:	8181      	strh	r1, [r0, #12]
 8006512:	6643      	str	r3, [r0, #100]	@ 0x64
 8006514:	81c2      	strh	r2, [r0, #14]
 8006516:	6103      	str	r3, [r0, #16]
 8006518:	6143      	str	r3, [r0, #20]
 800651a:	6183      	str	r3, [r0, #24]
 800651c:	0019      	movs	r1, r3
 800651e:	2208      	movs	r2, #8
 8006520:	305c      	adds	r0, #92	@ 0x5c
 8006522:	f000 f932 	bl	800678a <memset>
 8006526:	4b0b      	ldr	r3, [pc, #44]	@ (8006554 <std+0x50>)
 8006528:	6224      	str	r4, [r4, #32]
 800652a:	6263      	str	r3, [r4, #36]	@ 0x24
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <std+0x54>)
 800652e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006530:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <std+0x58>)
 8006532:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006534:	4b0a      	ldr	r3, [pc, #40]	@ (8006560 <std+0x5c>)
 8006536:	6323      	str	r3, [r4, #48]	@ 0x30
 8006538:	4b0a      	ldr	r3, [pc, #40]	@ (8006564 <std+0x60>)
 800653a:	429c      	cmp	r4, r3
 800653c:	d005      	beq.n	800654a <std+0x46>
 800653e:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <std+0x64>)
 8006540:	429c      	cmp	r4, r3
 8006542:	d002      	beq.n	800654a <std+0x46>
 8006544:	4b09      	ldr	r3, [pc, #36]	@ (800656c <std+0x68>)
 8006546:	429c      	cmp	r4, r3
 8006548:	d103      	bne.n	8006552 <std+0x4e>
 800654a:	0020      	movs	r0, r4
 800654c:	3058      	adds	r0, #88	@ 0x58
 800654e:	f000 f9a1 	bl	8006894 <__retarget_lock_init_recursive>
 8006552:	bd10      	pop	{r4, pc}
 8006554:	080066cd 	.word	0x080066cd
 8006558:	080066f5 	.word	0x080066f5
 800655c:	0800672d 	.word	0x0800672d
 8006560:	08006759 	.word	0x08006759
 8006564:	200006f0 	.word	0x200006f0
 8006568:	20000758 	.word	0x20000758
 800656c:	200007c0 	.word	0x200007c0

08006570 <stdio_exit_handler>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4a03      	ldr	r2, [pc, #12]	@ (8006580 <stdio_exit_handler+0x10>)
 8006574:	4903      	ldr	r1, [pc, #12]	@ (8006584 <stdio_exit_handler+0x14>)
 8006576:	4804      	ldr	r0, [pc, #16]	@ (8006588 <stdio_exit_handler+0x18>)
 8006578:	f000 f86c 	bl	8006654 <_fwalk_sglue>
 800657c:	bd10      	pop	{r4, pc}
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	2000001c 	.word	0x2000001c
 8006584:	080082e5 	.word	0x080082e5
 8006588:	2000002c 	.word	0x2000002c

0800658c <cleanup_stdio>:
 800658c:	6841      	ldr	r1, [r0, #4]
 800658e:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <cleanup_stdio+0x30>)
 8006590:	b510      	push	{r4, lr}
 8006592:	0004      	movs	r4, r0
 8006594:	4299      	cmp	r1, r3
 8006596:	d001      	beq.n	800659c <cleanup_stdio+0x10>
 8006598:	f001 fea4 	bl	80082e4 <_fflush_r>
 800659c:	68a1      	ldr	r1, [r4, #8]
 800659e:	4b08      	ldr	r3, [pc, #32]	@ (80065c0 <cleanup_stdio+0x34>)
 80065a0:	4299      	cmp	r1, r3
 80065a2:	d002      	beq.n	80065aa <cleanup_stdio+0x1e>
 80065a4:	0020      	movs	r0, r4
 80065a6:	f001 fe9d 	bl	80082e4 <_fflush_r>
 80065aa:	68e1      	ldr	r1, [r4, #12]
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <cleanup_stdio+0x38>)
 80065ae:	4299      	cmp	r1, r3
 80065b0:	d002      	beq.n	80065b8 <cleanup_stdio+0x2c>
 80065b2:	0020      	movs	r0, r4
 80065b4:	f001 fe96 	bl	80082e4 <_fflush_r>
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	200006f0 	.word	0x200006f0
 80065c0:	20000758 	.word	0x20000758
 80065c4:	200007c0 	.word	0x200007c0

080065c8 <global_stdio_init.part.0>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <global_stdio_init.part.0+0x28>)
 80065cc:	4a09      	ldr	r2, [pc, #36]	@ (80065f4 <global_stdio_init.part.0+0x2c>)
 80065ce:	2104      	movs	r1, #4
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	4809      	ldr	r0, [pc, #36]	@ (80065f8 <global_stdio_init.part.0+0x30>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	f7ff ff95 	bl	8006504 <std>
 80065da:	2201      	movs	r2, #1
 80065dc:	2109      	movs	r1, #9
 80065de:	4807      	ldr	r0, [pc, #28]	@ (80065fc <global_stdio_init.part.0+0x34>)
 80065e0:	f7ff ff90 	bl	8006504 <std>
 80065e4:	2202      	movs	r2, #2
 80065e6:	2112      	movs	r1, #18
 80065e8:	4805      	ldr	r0, [pc, #20]	@ (8006600 <global_stdio_init.part.0+0x38>)
 80065ea:	f7ff ff8b 	bl	8006504 <std>
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	20000828 	.word	0x20000828
 80065f4:	08006571 	.word	0x08006571
 80065f8:	200006f0 	.word	0x200006f0
 80065fc:	20000758 	.word	0x20000758
 8006600:	200007c0 	.word	0x200007c0

08006604 <__sfp_lock_acquire>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4802      	ldr	r0, [pc, #8]	@ (8006610 <__sfp_lock_acquire+0xc>)
 8006608:	f000 f945 	bl	8006896 <__retarget_lock_acquire_recursive>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	20000831 	.word	0x20000831

08006614 <__sfp_lock_release>:
 8006614:	b510      	push	{r4, lr}
 8006616:	4802      	ldr	r0, [pc, #8]	@ (8006620 <__sfp_lock_release+0xc>)
 8006618:	f000 f93e 	bl	8006898 <__retarget_lock_release_recursive>
 800661c:	bd10      	pop	{r4, pc}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	20000831 	.word	0x20000831

08006624 <__sinit>:
 8006624:	b510      	push	{r4, lr}
 8006626:	0004      	movs	r4, r0
 8006628:	f7ff ffec 	bl	8006604 <__sfp_lock_acquire>
 800662c:	6a23      	ldr	r3, [r4, #32]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <__sinit+0x14>
 8006632:	f7ff ffef 	bl	8006614 <__sfp_lock_release>
 8006636:	bd10      	pop	{r4, pc}
 8006638:	4b04      	ldr	r3, [pc, #16]	@ (800664c <__sinit+0x28>)
 800663a:	6223      	str	r3, [r4, #32]
 800663c:	4b04      	ldr	r3, [pc, #16]	@ (8006650 <__sinit+0x2c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f6      	bne.n	8006632 <__sinit+0xe>
 8006644:	f7ff ffc0 	bl	80065c8 <global_stdio_init.part.0>
 8006648:	e7f3      	b.n	8006632 <__sinit+0xe>
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	0800658d 	.word	0x0800658d
 8006650:	20000828 	.word	0x20000828

08006654 <_fwalk_sglue>:
 8006654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006656:	0014      	movs	r4, r2
 8006658:	2600      	movs	r6, #0
 800665a:	9000      	str	r0, [sp, #0]
 800665c:	9101      	str	r1, [sp, #4]
 800665e:	68a5      	ldr	r5, [r4, #8]
 8006660:	6867      	ldr	r7, [r4, #4]
 8006662:	3f01      	subs	r7, #1
 8006664:	d504      	bpl.n	8006670 <_fwalk_sglue+0x1c>
 8006666:	6824      	ldr	r4, [r4, #0]
 8006668:	2c00      	cmp	r4, #0
 800666a:	d1f8      	bne.n	800665e <_fwalk_sglue+0xa>
 800666c:	0030      	movs	r0, r6
 800666e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006670:	89ab      	ldrh	r3, [r5, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d908      	bls.n	8006688 <_fwalk_sglue+0x34>
 8006676:	220e      	movs	r2, #14
 8006678:	5eab      	ldrsh	r3, [r5, r2]
 800667a:	3301      	adds	r3, #1
 800667c:	d004      	beq.n	8006688 <_fwalk_sglue+0x34>
 800667e:	0029      	movs	r1, r5
 8006680:	9800      	ldr	r0, [sp, #0]
 8006682:	9b01      	ldr	r3, [sp, #4]
 8006684:	4798      	blx	r3
 8006686:	4306      	orrs	r6, r0
 8006688:	3568      	adds	r5, #104	@ 0x68
 800668a:	e7ea      	b.n	8006662 <_fwalk_sglue+0xe>

0800668c <siprintf>:
 800668c:	b40e      	push	{r1, r2, r3}
 800668e:	b500      	push	{lr}
 8006690:	490b      	ldr	r1, [pc, #44]	@ (80066c0 <siprintf+0x34>)
 8006692:	b09c      	sub	sp, #112	@ 0x70
 8006694:	ab1d      	add	r3, sp, #116	@ 0x74
 8006696:	9002      	str	r0, [sp, #8]
 8006698:	9006      	str	r0, [sp, #24]
 800669a:	9107      	str	r1, [sp, #28]
 800669c:	9104      	str	r1, [sp, #16]
 800669e:	4809      	ldr	r0, [pc, #36]	@ (80066c4 <siprintf+0x38>)
 80066a0:	4909      	ldr	r1, [pc, #36]	@ (80066c8 <siprintf+0x3c>)
 80066a2:	cb04      	ldmia	r3!, {r2}
 80066a4:	9105      	str	r1, [sp, #20]
 80066a6:	6800      	ldr	r0, [r0, #0]
 80066a8:	a902      	add	r1, sp, #8
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	f001 fc96 	bl	8007fdc <_svfiprintf_r>
 80066b0:	2200      	movs	r2, #0
 80066b2:	9b02      	ldr	r3, [sp, #8]
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	b01c      	add	sp, #112	@ 0x70
 80066b8:	bc08      	pop	{r3}
 80066ba:	b003      	add	sp, #12
 80066bc:	4718      	bx	r3
 80066be:	46c0      	nop			@ (mov r8, r8)
 80066c0:	7fffffff 	.word	0x7fffffff
 80066c4:	20000028 	.word	0x20000028
 80066c8:	ffff0208 	.word	0xffff0208

080066cc <__sread>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	000c      	movs	r4, r1
 80066d0:	250e      	movs	r5, #14
 80066d2:	5f49      	ldrsh	r1, [r1, r5]
 80066d4:	f000 f88c 	bl	80067f0 <_read_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	db03      	blt.n	80066e4 <__sread+0x18>
 80066dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80066de:	181b      	adds	r3, r3, r0
 80066e0:	6563      	str	r3, [r4, #84]	@ 0x54
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	4a02      	ldr	r2, [pc, #8]	@ (80066f0 <__sread+0x24>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	e7f9      	b.n	80066e2 <__sread+0x16>
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	ffffefff 	.word	0xffffefff

080066f4 <__swrite>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	001f      	movs	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	0005      	movs	r5, r0
 80066fc:	000c      	movs	r4, r1
 80066fe:	0016      	movs	r6, r2
 8006700:	05db      	lsls	r3, r3, #23
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1c>
 8006704:	230e      	movs	r3, #14
 8006706:	5ec9      	ldrsh	r1, [r1, r3]
 8006708:	2200      	movs	r2, #0
 800670a:	2302      	movs	r3, #2
 800670c:	f000 f85c 	bl	80067c8 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	4a05      	ldr	r2, [pc, #20]	@ (8006728 <__swrite+0x34>)
 8006714:	0028      	movs	r0, r5
 8006716:	4013      	ands	r3, r2
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	0032      	movs	r2, r6
 800671c:	230e      	movs	r3, #14
 800671e:	5ee1      	ldrsh	r1, [r4, r3]
 8006720:	003b      	movs	r3, r7
 8006722:	f000 f879 	bl	8006818 <_write_r>
 8006726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006728:	ffffefff 	.word	0xffffefff

0800672c <__sseek>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	000c      	movs	r4, r1
 8006730:	250e      	movs	r5, #14
 8006732:	5f49      	ldrsh	r1, [r1, r5]
 8006734:	f000 f848 	bl	80067c8 <_lseek_r>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	1c42      	adds	r2, r0, #1
 800673c:	d103      	bne.n	8006746 <__sseek+0x1a>
 800673e:	4a05      	ldr	r2, [pc, #20]	@ (8006754 <__sseek+0x28>)
 8006740:	4013      	ands	r3, r2
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	bd70      	pop	{r4, r5, r6, pc}
 8006746:	2280      	movs	r2, #128	@ 0x80
 8006748:	0152      	lsls	r2, r2, #5
 800674a:	4313      	orrs	r3, r2
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006750:	e7f8      	b.n	8006744 <__sseek+0x18>
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	ffffefff 	.word	0xffffefff

08006758 <__sclose>:
 8006758:	b510      	push	{r4, lr}
 800675a:	230e      	movs	r3, #14
 800675c:	5ec9      	ldrsh	r1, [r1, r3]
 800675e:	f000 f821 	bl	80067a4 <_close_r>
 8006762:	bd10      	pop	{r4, pc}

08006764 <memmove>:
 8006764:	b510      	push	{r4, lr}
 8006766:	4288      	cmp	r0, r1
 8006768:	d806      	bhi.n	8006778 <memmove+0x14>
 800676a:	2300      	movs	r3, #0
 800676c:	429a      	cmp	r2, r3
 800676e:	d008      	beq.n	8006782 <memmove+0x1e>
 8006770:	5ccc      	ldrb	r4, [r1, r3]
 8006772:	54c4      	strb	r4, [r0, r3]
 8006774:	3301      	adds	r3, #1
 8006776:	e7f9      	b.n	800676c <memmove+0x8>
 8006778:	188b      	adds	r3, r1, r2
 800677a:	4298      	cmp	r0, r3
 800677c:	d2f5      	bcs.n	800676a <memmove+0x6>
 800677e:	3a01      	subs	r2, #1
 8006780:	d200      	bcs.n	8006784 <memmove+0x20>
 8006782:	bd10      	pop	{r4, pc}
 8006784:	5c8b      	ldrb	r3, [r1, r2]
 8006786:	5483      	strb	r3, [r0, r2]
 8006788:	e7f9      	b.n	800677e <memmove+0x1a>

0800678a <memset>:
 800678a:	0003      	movs	r3, r0
 800678c:	1882      	adds	r2, r0, r2
 800678e:	4293      	cmp	r3, r2
 8006790:	d100      	bne.n	8006794 <memset+0xa>
 8006792:	4770      	bx	lr
 8006794:	7019      	strb	r1, [r3, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	e7f9      	b.n	800678e <memset+0x4>
	...

0800679c <_localeconv_r>:
 800679c:	4800      	ldr	r0, [pc, #0]	@ (80067a0 <_localeconv_r+0x4>)
 800679e:	4770      	bx	lr
 80067a0:	20000168 	.word	0x20000168

080067a4 <_close_r>:
 80067a4:	2300      	movs	r3, #0
 80067a6:	b570      	push	{r4, r5, r6, lr}
 80067a8:	4d06      	ldr	r5, [pc, #24]	@ (80067c4 <_close_r+0x20>)
 80067aa:	0004      	movs	r4, r0
 80067ac:	0008      	movs	r0, r1
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	f7fc fc5b 	bl	800306a <_close>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d103      	bne.n	80067c0 <_close_r+0x1c>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d000      	beq.n	80067c0 <_close_r+0x1c>
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	2000082c 	.word	0x2000082c

080067c8 <_lseek_r>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	0004      	movs	r4, r0
 80067cc:	0008      	movs	r0, r1
 80067ce:	0011      	movs	r1, r2
 80067d0:	001a      	movs	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	4d05      	ldr	r5, [pc, #20]	@ (80067ec <_lseek_r+0x24>)
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fc fc68 	bl	80030ac <_lseek>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d103      	bne.n	80067e8 <_lseek_r+0x20>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d000      	beq.n	80067e8 <_lseek_r+0x20>
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	2000082c 	.word	0x2000082c

080067f0 <_read_r>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	0004      	movs	r4, r0
 80067f4:	0008      	movs	r0, r1
 80067f6:	0011      	movs	r1, r2
 80067f8:	001a      	movs	r2, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	4d05      	ldr	r5, [pc, #20]	@ (8006814 <_read_r+0x24>)
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	f7fc fbfa 	bl	8002ff8 <_read>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d103      	bne.n	8006810 <_read_r+0x20>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d000      	beq.n	8006810 <_read_r+0x20>
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	2000082c 	.word	0x2000082c

08006818 <_write_r>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	0004      	movs	r4, r0
 800681c:	0008      	movs	r0, r1
 800681e:	0011      	movs	r1, r2
 8006820:	001a      	movs	r2, r3
 8006822:	2300      	movs	r3, #0
 8006824:	4d05      	ldr	r5, [pc, #20]	@ (800683c <_write_r+0x24>)
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fc fc03 	bl	8003032 <_write>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d103      	bne.n	8006838 <_write_r+0x20>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d000      	beq.n	8006838 <_write_r+0x20>
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	bd70      	pop	{r4, r5, r6, pc}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	2000082c 	.word	0x2000082c

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	@ (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	46c0      	nop			@ (mov r8, r8)
 8006848:	20000028 	.word	0x20000028

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	2600      	movs	r6, #0
 8006850:	4c0c      	ldr	r4, [pc, #48]	@ (8006884 <__libc_init_array+0x38>)
 8006852:	4d0d      	ldr	r5, [pc, #52]	@ (8006888 <__libc_init_array+0x3c>)
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	2600      	movs	r6, #0
 800685e:	f002 f8f5 	bl	8008a4c <_init>
 8006862:	4c0a      	ldr	r4, [pc, #40]	@ (800688c <__libc_init_array+0x40>)
 8006864:	4d0a      	ldr	r5, [pc, #40]	@ (8006890 <__libc_init_array+0x44>)
 8006866:	1b64      	subs	r4, r4, r5
 8006868:	10a4      	asrs	r4, r4, #2
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	00b3      	lsls	r3, r6, #2
 8006872:	58eb      	ldr	r3, [r5, r3]
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	00b3      	lsls	r3, r6, #2
 800687c:	58eb      	ldr	r3, [r5, r3]
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	0800afb0 	.word	0x0800afb0
 8006888:	0800afb0 	.word	0x0800afb0
 800688c:	0800afb4 	.word	0x0800afb4
 8006890:	0800afb0 	.word	0x0800afb0

08006894 <__retarget_lock_init_recursive>:
 8006894:	4770      	bx	lr

08006896 <__retarget_lock_acquire_recursive>:
 8006896:	4770      	bx	lr

08006898 <__retarget_lock_release_recursive>:
 8006898:	4770      	bx	lr

0800689a <memchr>:
 800689a:	b2c9      	uxtb	r1, r1
 800689c:	1882      	adds	r2, r0, r2
 800689e:	4290      	cmp	r0, r2
 80068a0:	d101      	bne.n	80068a6 <memchr+0xc>
 80068a2:	2000      	movs	r0, #0
 80068a4:	4770      	bx	lr
 80068a6:	7803      	ldrb	r3, [r0, #0]
 80068a8:	428b      	cmp	r3, r1
 80068aa:	d0fb      	beq.n	80068a4 <memchr+0xa>
 80068ac:	3001      	adds	r0, #1
 80068ae:	e7f6      	b.n	800689e <memchr+0x4>

080068b0 <memcpy>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b510      	push	{r4, lr}
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d100      	bne.n	80068ba <memcpy+0xa>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	5ccc      	ldrb	r4, [r1, r3]
 80068bc:	54c4      	strb	r4, [r0, r3]
 80068be:	3301      	adds	r3, #1
 80068c0:	e7f8      	b.n	80068b4 <memcpy+0x4>

080068c2 <quorem>:
 80068c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c4:	6902      	ldr	r2, [r0, #16]
 80068c6:	690f      	ldr	r7, [r1, #16]
 80068c8:	b087      	sub	sp, #28
 80068ca:	0006      	movs	r6, r0
 80068cc:	000b      	movs	r3, r1
 80068ce:	2000      	movs	r0, #0
 80068d0:	9102      	str	r1, [sp, #8]
 80068d2:	42ba      	cmp	r2, r7
 80068d4:	db6d      	blt.n	80069b2 <quorem+0xf0>
 80068d6:	3f01      	subs	r7, #1
 80068d8:	00bc      	lsls	r4, r7, #2
 80068da:	3314      	adds	r3, #20
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	191b      	adds	r3, r3, r4
 80068e0:	9303      	str	r3, [sp, #12]
 80068e2:	0033      	movs	r3, r6
 80068e4:	3314      	adds	r3, #20
 80068e6:	191c      	adds	r4, r3, r4
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	9804      	ldr	r0, [sp, #16]
 80068f2:	681d      	ldr	r5, [r3, #0]
 80068f4:	3501      	adds	r5, #1
 80068f6:	0029      	movs	r1, r5
 80068f8:	f7f9 fc1e 	bl	8000138 <__udivsi3>
 80068fc:	9b04      	ldr	r3, [sp, #16]
 80068fe:	9000      	str	r0, [sp, #0]
 8006900:	42ab      	cmp	r3, r5
 8006902:	d32b      	bcc.n	800695c <quorem+0x9a>
 8006904:	9b05      	ldr	r3, [sp, #20]
 8006906:	9d01      	ldr	r5, [sp, #4]
 8006908:	469c      	mov	ip, r3
 800690a:	2300      	movs	r3, #0
 800690c:	9305      	str	r3, [sp, #20]
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	4662      	mov	r2, ip
 8006912:	ca08      	ldmia	r2!, {r3}
 8006914:	6828      	ldr	r0, [r5, #0]
 8006916:	4694      	mov	ip, r2
 8006918:	9a00      	ldr	r2, [sp, #0]
 800691a:	b299      	uxth	r1, r3
 800691c:	4351      	muls	r1, r2
 800691e:	9a05      	ldr	r2, [sp, #20]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	1889      	adds	r1, r1, r2
 8006924:	9a00      	ldr	r2, [sp, #0]
 8006926:	4353      	muls	r3, r2
 8006928:	0c0a      	lsrs	r2, r1, #16
 800692a:	189b      	adds	r3, r3, r2
 800692c:	0c1a      	lsrs	r2, r3, #16
 800692e:	b289      	uxth	r1, r1
 8006930:	9205      	str	r2, [sp, #20]
 8006932:	b282      	uxth	r2, r0
 8006934:	1a52      	subs	r2, r2, r1
 8006936:	9904      	ldr	r1, [sp, #16]
 8006938:	0c00      	lsrs	r0, r0, #16
 800693a:	1852      	adds	r2, r2, r1
 800693c:	b29b      	uxth	r3, r3
 800693e:	1411      	asrs	r1, r2, #16
 8006940:	1ac3      	subs	r3, r0, r3
 8006942:	185b      	adds	r3, r3, r1
 8006944:	1419      	asrs	r1, r3, #16
 8006946:	b292      	uxth	r2, r2
 8006948:	041b      	lsls	r3, r3, #16
 800694a:	431a      	orrs	r2, r3
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	9104      	str	r1, [sp, #16]
 8006950:	c504      	stmia	r5!, {r2}
 8006952:	4563      	cmp	r3, ip
 8006954:	d2dc      	bcs.n	8006910 <quorem+0x4e>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d030      	beq.n	80069be <quorem+0xfc>
 800695c:	0030      	movs	r0, r6
 800695e:	9902      	ldr	r1, [sp, #8]
 8006960:	f001 f9c6 	bl	8007cf0 <__mcmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	db23      	blt.n	80069b0 <quorem+0xee>
 8006968:	0034      	movs	r4, r6
 800696a:	2500      	movs	r5, #0
 800696c:	9902      	ldr	r1, [sp, #8]
 800696e:	3414      	adds	r4, #20
 8006970:	3114      	adds	r1, #20
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	c901      	ldmia	r1!, {r0}
 8006976:	9302      	str	r3, [sp, #8]
 8006978:	466b      	mov	r3, sp
 800697a:	891b      	ldrh	r3, [r3, #8]
 800697c:	b282      	uxth	r2, r0
 800697e:	1a9a      	subs	r2, r3, r2
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	1952      	adds	r2, r2, r5
 8006984:	0c00      	lsrs	r0, r0, #16
 8006986:	0c1b      	lsrs	r3, r3, #16
 8006988:	1a1b      	subs	r3, r3, r0
 800698a:	1410      	asrs	r0, r2, #16
 800698c:	181b      	adds	r3, r3, r0
 800698e:	141d      	asrs	r5, r3, #16
 8006990:	b292      	uxth	r2, r2
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	431a      	orrs	r2, r3
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	c404      	stmia	r4!, {r2}
 800699a:	428b      	cmp	r3, r1
 800699c:	d2e9      	bcs.n	8006972 <quorem+0xb0>
 800699e:	9a01      	ldr	r2, [sp, #4]
 80069a0:	00bb      	lsls	r3, r7, #2
 80069a2:	18d3      	adds	r3, r2, r3
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	d013      	beq.n	80069d2 <quorem+0x110>
 80069aa:	9b00      	ldr	r3, [sp, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	9800      	ldr	r0, [sp, #0]
 80069b2:	b007      	add	sp, #28
 80069b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <quorem+0x104>
 80069bc:	3f01      	subs	r7, #1
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	3c04      	subs	r4, #4
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	d3f7      	bcc.n	80069b6 <quorem+0xf4>
 80069c6:	6137      	str	r7, [r6, #16]
 80069c8:	e7c8      	b.n	800695c <quorem+0x9a>
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	d104      	bne.n	80069da <quorem+0x118>
 80069d0:	3f01      	subs	r7, #1
 80069d2:	9a01      	ldr	r2, [sp, #4]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d3f7      	bcc.n	80069ca <quorem+0x108>
 80069da:	6137      	str	r7, [r6, #16]
 80069dc:	e7e5      	b.n	80069aa <quorem+0xe8>
	...

080069e0 <_dtoa_r>:
 80069e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e2:	0014      	movs	r4, r2
 80069e4:	001d      	movs	r5, r3
 80069e6:	69c6      	ldr	r6, [r0, #28]
 80069e8:	b09d      	sub	sp, #116	@ 0x74
 80069ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80069ec:	950b      	str	r5, [sp, #44]	@ 0x2c
 80069ee:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80069f0:	9003      	str	r0, [sp, #12]
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	d10f      	bne.n	8006a16 <_dtoa_r+0x36>
 80069f6:	2010      	movs	r0, #16
 80069f8:	f000 fe30 	bl	800765c <malloc>
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	1e02      	subs	r2, r0, #0
 8006a00:	61d8      	str	r0, [r3, #28]
 8006a02:	d104      	bne.n	8006a0e <_dtoa_r+0x2e>
 8006a04:	21ef      	movs	r1, #239	@ 0xef
 8006a06:	4bc7      	ldr	r3, [pc, #796]	@ (8006d24 <_dtoa_r+0x344>)
 8006a08:	48c7      	ldr	r0, [pc, #796]	@ (8006d28 <_dtoa_r+0x348>)
 8006a0a:	f001 fca9 	bl	8008360 <__assert_func>
 8006a0e:	6046      	str	r6, [r0, #4]
 8006a10:	6086      	str	r6, [r0, #8]
 8006a12:	6006      	str	r6, [r0, #0]
 8006a14:	60c6      	str	r6, [r0, #12]
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d00b      	beq.n	8006a38 <_dtoa_r+0x58>
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	2301      	movs	r3, #1
 8006a24:	4093      	lsls	r3, r2
 8006a26:	604a      	str	r2, [r1, #4]
 8006a28:	608b      	str	r3, [r1, #8]
 8006a2a:	9803      	ldr	r0, [sp, #12]
 8006a2c:	f000 ff16 	bl	800785c <_Bfree>
 8006a30:	2200      	movs	r2, #0
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	da1e      	bge.n	8006a7a <_dtoa_r+0x9a>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	006b      	lsls	r3, r5, #1
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a46:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006a48:	4bb8      	ldr	r3, [pc, #736]	@ (8006d2c <_dtoa_r+0x34c>)
 8006a4a:	4ab8      	ldr	r2, [pc, #736]	@ (8006d2c <_dtoa_r+0x34c>)
 8006a4c:	403b      	ands	r3, r7
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d116      	bne.n	8006a80 <_dtoa_r+0xa0>
 8006a52:	4bb7      	ldr	r3, [pc, #732]	@ (8006d30 <_dtoa_r+0x350>)
 8006a54:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	033b      	lsls	r3, r7, #12
 8006a5a:	0b1b      	lsrs	r3, r3, #12
 8006a5c:	4323      	orrs	r3, r4
 8006a5e:	d101      	bne.n	8006a64 <_dtoa_r+0x84>
 8006a60:	f000 fd83 	bl	800756a <_dtoa_r+0xb8a>
 8006a64:	4bb3      	ldr	r3, [pc, #716]	@ (8006d34 <_dtoa_r+0x354>)
 8006a66:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006a68:	9308      	str	r3, [sp, #32]
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	d002      	beq.n	8006a74 <_dtoa_r+0x94>
 8006a6e:	4bb2      	ldr	r3, [pc, #712]	@ (8006d38 <_dtoa_r+0x358>)
 8006a70:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	9808      	ldr	r0, [sp, #32]
 8006a76:	b01d      	add	sp, #116	@ 0x74
 8006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	e7e2      	b.n	8006a46 <_dtoa_r+0x66>
 8006a80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a84:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006a8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f7f9 fcd8 	bl	8000444 <__aeabi_dcmpeq>
 8006a94:	1e06      	subs	r6, r0, #0
 8006a96:	d00b      	beq.n	8006ab0 <_dtoa_r+0xd0>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <_dtoa_r+0xca>
 8006aa4:	4ba5      	ldr	r3, [pc, #660]	@ (8006d3c <_dtoa_r+0x35c>)
 8006aa6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	4ba5      	ldr	r3, [pc, #660]	@ (8006d40 <_dtoa_r+0x360>)
 8006aac:	9308      	str	r3, [sp, #32]
 8006aae:	e7e1      	b.n	8006a74 <_dtoa_r+0x94>
 8006ab0:	ab1a      	add	r3, sp, #104	@ 0x68
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	9803      	ldr	r0, [sp, #12]
 8006aba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006abc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006abe:	f001 f9cd 	bl	8007e5c <__d2b>
 8006ac2:	007a      	lsls	r2, r7, #1
 8006ac4:	9005      	str	r0, [sp, #20]
 8006ac6:	0d52      	lsrs	r2, r2, #21
 8006ac8:	d100      	bne.n	8006acc <_dtoa_r+0xec>
 8006aca:	e07b      	b.n	8006bc4 <_dtoa_r+0x1e4>
 8006acc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ace:	9618      	str	r6, [sp, #96]	@ 0x60
 8006ad0:	0319      	lsls	r1, r3, #12
 8006ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8006d44 <_dtoa_r+0x364>)
 8006ad4:	0b09      	lsrs	r1, r1, #12
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	499b      	ldr	r1, [pc, #620]	@ (8006d48 <_dtoa_r+0x368>)
 8006ada:	1857      	adds	r7, r2, r1
 8006adc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006ade:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4b99      	ldr	r3, [pc, #612]	@ (8006d4c <_dtoa_r+0x36c>)
 8006ae6:	f7fb f9f5 	bl	8001ed4 <__aeabi_dsub>
 8006aea:	4a99      	ldr	r2, [pc, #612]	@ (8006d50 <_dtoa_r+0x370>)
 8006aec:	4b99      	ldr	r3, [pc, #612]	@ (8006d54 <_dtoa_r+0x374>)
 8006aee:	f7fa ff29 	bl	8001944 <__aeabi_dmul>
 8006af2:	4a99      	ldr	r2, [pc, #612]	@ (8006d58 <_dtoa_r+0x378>)
 8006af4:	4b99      	ldr	r3, [pc, #612]	@ (8006d5c <_dtoa_r+0x37c>)
 8006af6:	f7f9 ff7d 	bl	80009f4 <__aeabi_dadd>
 8006afa:	0004      	movs	r4, r0
 8006afc:	0038      	movs	r0, r7
 8006afe:	000d      	movs	r5, r1
 8006b00:	f7fb fde2 	bl	80026c8 <__aeabi_i2d>
 8006b04:	4a96      	ldr	r2, [pc, #600]	@ (8006d60 <_dtoa_r+0x380>)
 8006b06:	4b97      	ldr	r3, [pc, #604]	@ (8006d64 <_dtoa_r+0x384>)
 8006b08:	f7fa ff1c 	bl	8001944 <__aeabi_dmul>
 8006b0c:	0002      	movs	r2, r0
 8006b0e:	000b      	movs	r3, r1
 8006b10:	0020      	movs	r0, r4
 8006b12:	0029      	movs	r1, r5
 8006b14:	f7f9 ff6e 	bl	80009f4 <__aeabi_dadd>
 8006b18:	0004      	movs	r4, r0
 8006b1a:	000d      	movs	r5, r1
 8006b1c:	f7fb fd98 	bl	8002650 <__aeabi_d2iz>
 8006b20:	2200      	movs	r2, #0
 8006b22:	9004      	str	r0, [sp, #16]
 8006b24:	2300      	movs	r3, #0
 8006b26:	0020      	movs	r0, r4
 8006b28:	0029      	movs	r1, r5
 8006b2a:	f7f9 fc91 	bl	8000450 <__aeabi_dcmplt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d00b      	beq.n	8006b4a <_dtoa_r+0x16a>
 8006b32:	9804      	ldr	r0, [sp, #16]
 8006b34:	f7fb fdc8 	bl	80026c8 <__aeabi_i2d>
 8006b38:	002b      	movs	r3, r5
 8006b3a:	0022      	movs	r2, r4
 8006b3c:	f7f9 fc82 	bl	8000444 <__aeabi_dcmpeq>
 8006b40:	4243      	negs	r3, r0
 8006b42:	4158      	adcs	r0, r3
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	1a1b      	subs	r3, r3, r0
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	2b16      	cmp	r3, #22
 8006b52:	d810      	bhi.n	8006b76 <_dtoa_r+0x196>
 8006b54:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b58:	9a04      	ldr	r2, [sp, #16]
 8006b5a:	4b83      	ldr	r3, [pc, #524]	@ (8006d68 <_dtoa_r+0x388>)
 8006b5c:	00d2      	lsls	r2, r2, #3
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f7f9 fc74 	bl	8000450 <__aeabi_dcmplt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d047      	beq.n	8006bfc <_dtoa_r+0x21c>
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b76:	2200      	movs	r2, #0
 8006b78:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006b7a:	9206      	str	r2, [sp, #24]
 8006b7c:	1bdb      	subs	r3, r3, r7
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	d53e      	bpl.n	8006c00 <_dtoa_r+0x220>
 8006b82:	2201      	movs	r2, #1
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	9306      	str	r3, [sp, #24]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b8c:	9b04      	ldr	r3, [sp, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	db38      	blt.n	8006c04 <_dtoa_r+0x224>
 8006b92:	9a04      	ldr	r2, [sp, #16]
 8006b94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b96:	4694      	mov	ip, r2
 8006b98:	4463      	add	r3, ip
 8006b9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ba0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ba2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006ba4:	2401      	movs	r4, #1
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	d867      	bhi.n	8006c7a <_dtoa_r+0x29a>
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	dd02      	ble.n	8006bb4 <_dtoa_r+0x1d4>
 8006bae:	2400      	movs	r4, #0
 8006bb0:	3b04      	subs	r3, #4
 8006bb2:	9322      	str	r3, [sp, #136]	@ 0x88
 8006bb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006bb6:	1e98      	subs	r0, r3, #2
 8006bb8:	2803      	cmp	r0, #3
 8006bba:	d867      	bhi.n	8006c8c <_dtoa_r+0x2ac>
 8006bbc:	f7f9 faa8 	bl	8000110 <__gnu_thumb1_case_uqi>
 8006bc0:	5b383a2b 	.word	0x5b383a2b
 8006bc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006bc6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006bc8:	18f6      	adds	r6, r6, r3
 8006bca:	4b68      	ldr	r3, [pc, #416]	@ (8006d6c <_dtoa_r+0x38c>)
 8006bcc:	18f2      	adds	r2, r6, r3
 8006bce:	2a20      	cmp	r2, #32
 8006bd0:	dd0f      	ble.n	8006bf2 <_dtoa_r+0x212>
 8006bd2:	2340      	movs	r3, #64	@ 0x40
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	409f      	lsls	r7, r3
 8006bd8:	4b65      	ldr	r3, [pc, #404]	@ (8006d70 <_dtoa_r+0x390>)
 8006bda:	0038      	movs	r0, r7
 8006bdc:	18f3      	adds	r3, r6, r3
 8006bde:	40dc      	lsrs	r4, r3
 8006be0:	4320      	orrs	r0, r4
 8006be2:	f7fb fd9f 	bl	8002724 <__aeabi_ui2d>
 8006be6:	2201      	movs	r2, #1
 8006be8:	4b62      	ldr	r3, [pc, #392]	@ (8006d74 <_dtoa_r+0x394>)
 8006bea:	1e77      	subs	r7, r6, #1
 8006bec:	18cb      	adds	r3, r1, r3
 8006bee:	9218      	str	r2, [sp, #96]	@ 0x60
 8006bf0:	e776      	b.n	8006ae0 <_dtoa_r+0x100>
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	0020      	movs	r0, r4
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	4098      	lsls	r0, r3
 8006bfa:	e7f2      	b.n	8006be2 <_dtoa_r+0x202>
 8006bfc:	9015      	str	r0, [sp, #84]	@ 0x54
 8006bfe:	e7ba      	b.n	8006b76 <_dtoa_r+0x196>
 8006c00:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c02:	e7c3      	b.n	8006b8c <_dtoa_r+0x1ac>
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	9a04      	ldr	r2, [sp, #16]
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	9306      	str	r3, [sp, #24]
 8006c0c:	4253      	negs	r3, r2
 8006c0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c10:	2300      	movs	r3, #0
 8006c12:	9314      	str	r3, [sp, #80]	@ 0x50
 8006c14:	e7c5      	b.n	8006ba2 <_dtoa_r+0x1c2>
 8006c16:	2300      	movs	r3, #0
 8006c18:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dc13      	bgt.n	8006c4c <_dtoa_r+0x26c>
 8006c24:	2301      	movs	r3, #1
 8006c26:	001a      	movs	r2, r3
 8006c28:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c2c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006c2e:	e00d      	b.n	8006c4c <_dtoa_r+0x26c>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e7f1      	b.n	8006c18 <_dtoa_r+0x238>
 8006c34:	2300      	movs	r3, #0
 8006c36:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c3a:	4694      	mov	ip, r2
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	4463      	add	r3, ip
 8006c40:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c42:	3301      	adds	r3, #1
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dc00      	bgt.n	8006c4c <_dtoa_r+0x26c>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	9a03      	ldr	r2, [sp, #12]
 8006c4e:	2100      	movs	r1, #0
 8006c50:	69d0      	ldr	r0, [r2, #28]
 8006c52:	2204      	movs	r2, #4
 8006c54:	0015      	movs	r5, r2
 8006c56:	3514      	adds	r5, #20
 8006c58:	429d      	cmp	r5, r3
 8006c5a:	d91b      	bls.n	8006c94 <_dtoa_r+0x2b4>
 8006c5c:	6041      	str	r1, [r0, #4]
 8006c5e:	9803      	ldr	r0, [sp, #12]
 8006c60:	f000 fdb8 	bl	80077d4 <_Balloc>
 8006c64:	9008      	str	r0, [sp, #32]
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d117      	bne.n	8006c9a <_dtoa_r+0x2ba>
 8006c6a:	21b0      	movs	r1, #176	@ 0xb0
 8006c6c:	4b42      	ldr	r3, [pc, #264]	@ (8006d78 <_dtoa_r+0x398>)
 8006c6e:	482e      	ldr	r0, [pc, #184]	@ (8006d28 <_dtoa_r+0x348>)
 8006c70:	9a08      	ldr	r2, [sp, #32]
 8006c72:	31ff      	adds	r1, #255	@ 0xff
 8006c74:	e6c9      	b.n	8006a0a <_dtoa_r+0x2a>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7dd      	b.n	8006c36 <_dtoa_r+0x256>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9410      	str	r4, [sp, #64]	@ 0x40
 8006c7e:	9322      	str	r3, [sp, #136]	@ 0x88
 8006c80:	3b01      	subs	r3, #1
 8006c82:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	2200      	movs	r2, #0
 8006c88:	3313      	adds	r3, #19
 8006c8a:	e7cf      	b.n	8006c2c <_dtoa_r+0x24c>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c90:	3b02      	subs	r3, #2
 8006c92:	e7f6      	b.n	8006c82 <_dtoa_r+0x2a2>
 8006c94:	3101      	adds	r1, #1
 8006c96:	0052      	lsls	r2, r2, #1
 8006c98:	e7dc      	b.n	8006c54 <_dtoa_r+0x274>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	9a08      	ldr	r2, [sp, #32]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca4:	2b0e      	cmp	r3, #14
 8006ca6:	d900      	bls.n	8006caa <_dtoa_r+0x2ca>
 8006ca8:	e0d9      	b.n	8006e5e <_dtoa_r+0x47e>
 8006caa:	2c00      	cmp	r4, #0
 8006cac:	d100      	bne.n	8006cb0 <_dtoa_r+0x2d0>
 8006cae:	e0d6      	b.n	8006e5e <_dtoa_r+0x47e>
 8006cb0:	9b04      	ldr	r3, [sp, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dd64      	ble.n	8006d80 <_dtoa_r+0x3a0>
 8006cb6:	210f      	movs	r1, #15
 8006cb8:	9a04      	ldr	r2, [sp, #16]
 8006cba:	4b2b      	ldr	r3, [pc, #172]	@ (8006d68 <_dtoa_r+0x388>)
 8006cbc:	400a      	ands	r2, r1
 8006cbe:	00d2      	lsls	r2, r2, #3
 8006cc0:	189b      	adds	r3, r3, r2
 8006cc2:	681e      	ldr	r6, [r3, #0]
 8006cc4:	685f      	ldr	r7, [r3, #4]
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	2402      	movs	r4, #2
 8006cca:	111d      	asrs	r5, r3, #4
 8006ccc:	05db      	lsls	r3, r3, #23
 8006cce:	d50a      	bpl.n	8006ce6 <_dtoa_r+0x306>
 8006cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d7c <_dtoa_r+0x39c>)
 8006cd2:	400d      	ands	r5, r1
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006cda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006cdc:	f7fa f9ee 	bl	80010bc <__aeabi_ddiv>
 8006ce0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ce2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ce4:	3401      	adds	r4, #1
 8006ce6:	4b25      	ldr	r3, [pc, #148]	@ (8006d7c <_dtoa_r+0x39c>)
 8006ce8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	d108      	bne.n	8006d00 <_dtoa_r+0x320>
 8006cee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006cf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cf2:	0032      	movs	r2, r6
 8006cf4:	003b      	movs	r3, r7
 8006cf6:	f7fa f9e1 	bl	80010bc <__aeabi_ddiv>
 8006cfa:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006cfe:	e05a      	b.n	8006db6 <_dtoa_r+0x3d6>
 8006d00:	2301      	movs	r3, #1
 8006d02:	421d      	tst	r5, r3
 8006d04:	d009      	beq.n	8006d1a <_dtoa_r+0x33a>
 8006d06:	18e4      	adds	r4, r4, r3
 8006d08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d0a:	0030      	movs	r0, r6
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	0039      	movs	r1, r7
 8006d12:	f7fa fe17 	bl	8001944 <__aeabi_dmul>
 8006d16:	0006      	movs	r6, r0
 8006d18:	000f      	movs	r7, r1
 8006d1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d1c:	106d      	asrs	r5, r5, #1
 8006d1e:	3308      	adds	r3, #8
 8006d20:	e7e2      	b.n	8006ce8 <_dtoa_r+0x308>
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	0800ac7d 	.word	0x0800ac7d
 8006d28:	0800ac94 	.word	0x0800ac94
 8006d2c:	7ff00000 	.word	0x7ff00000
 8006d30:	0000270f 	.word	0x0000270f
 8006d34:	0800ac79 	.word	0x0800ac79
 8006d38:	0800ac7c 	.word	0x0800ac7c
 8006d3c:	0800ac4d 	.word	0x0800ac4d
 8006d40:	0800ac4c 	.word	0x0800ac4c
 8006d44:	3ff00000 	.word	0x3ff00000
 8006d48:	fffffc01 	.word	0xfffffc01
 8006d4c:	3ff80000 	.word	0x3ff80000
 8006d50:	636f4361 	.word	0x636f4361
 8006d54:	3fd287a7 	.word	0x3fd287a7
 8006d58:	8b60c8b3 	.word	0x8b60c8b3
 8006d5c:	3fc68a28 	.word	0x3fc68a28
 8006d60:	509f79fb 	.word	0x509f79fb
 8006d64:	3fd34413 	.word	0x3fd34413
 8006d68:	0800ad90 	.word	0x0800ad90
 8006d6c:	00000432 	.word	0x00000432
 8006d70:	00000412 	.word	0x00000412
 8006d74:	fe100000 	.word	0xfe100000
 8006d78:	0800acec 	.word	0x0800acec
 8006d7c:	0800ad68 	.word	0x0800ad68
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	2402      	movs	r4, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d016      	beq.n	8006db6 <_dtoa_r+0x3d6>
 8006d88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d8c:	220f      	movs	r2, #15
 8006d8e:	425d      	negs	r5, r3
 8006d90:	402a      	ands	r2, r5
 8006d92:	4bd7      	ldr	r3, [pc, #860]	@ (80070f0 <_dtoa_r+0x710>)
 8006d94:	00d2      	lsls	r2, r2, #3
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f7fa fdd2 	bl	8001944 <__aeabi_dmul>
 8006da0:	2701      	movs	r7, #1
 8006da2:	2300      	movs	r3, #0
 8006da4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006da6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006da8:	4ed2      	ldr	r6, [pc, #840]	@ (80070f4 <_dtoa_r+0x714>)
 8006daa:	112d      	asrs	r5, r5, #4
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d000      	beq.n	8006db2 <_dtoa_r+0x3d2>
 8006db0:	e0ba      	b.n	8006f28 <_dtoa_r+0x548>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1a1      	bne.n	8006cfa <_dtoa_r+0x31a>
 8006db6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006db8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006dba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d100      	bne.n	8006dc2 <_dtoa_r+0x3e2>
 8006dc0:	e0bd      	b.n	8006f3e <_dtoa_r+0x55e>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	0030      	movs	r0, r6
 8006dc6:	0039      	movs	r1, r7
 8006dc8:	4bcb      	ldr	r3, [pc, #812]	@ (80070f8 <_dtoa_r+0x718>)
 8006dca:	f7f9 fb41 	bl	8000450 <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d100      	bne.n	8006dd4 <_dtoa_r+0x3f4>
 8006dd2:	e0b4      	b.n	8006f3e <_dtoa_r+0x55e>
 8006dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d100      	bne.n	8006ddc <_dtoa_r+0x3fc>
 8006dda:	e0b0      	b.n	8006f3e <_dtoa_r+0x55e>
 8006ddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd39      	ble.n	8006e56 <_dtoa_r+0x476>
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	2200      	movs	r2, #0
 8006de6:	3b01      	subs	r3, #1
 8006de8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006dea:	0030      	movs	r0, r6
 8006dec:	4bc3      	ldr	r3, [pc, #780]	@ (80070fc <_dtoa_r+0x71c>)
 8006dee:	0039      	movs	r1, r7
 8006df0:	f7fa fda8 	bl	8001944 <__aeabi_dmul>
 8006df4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006df6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dfa:	3401      	adds	r4, #1
 8006dfc:	0020      	movs	r0, r4
 8006dfe:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e00:	f7fb fc62 	bl	80026c8 <__aeabi_i2d>
 8006e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e08:	f7fa fd9c 	bl	8001944 <__aeabi_dmul>
 8006e0c:	4bbc      	ldr	r3, [pc, #752]	@ (8007100 <_dtoa_r+0x720>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f7f9 fdf0 	bl	80009f4 <__aeabi_dadd>
 8006e14:	4bbb      	ldr	r3, [pc, #748]	@ (8007104 <_dtoa_r+0x724>)
 8006e16:	0006      	movs	r6, r0
 8006e18:	18cf      	adds	r7, r1, r3
 8006e1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d000      	beq.n	8006e22 <_dtoa_r+0x442>
 8006e20:	e091      	b.n	8006f46 <_dtoa_r+0x566>
 8006e22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e26:	2200      	movs	r2, #0
 8006e28:	4bb7      	ldr	r3, [pc, #732]	@ (8007108 <_dtoa_r+0x728>)
 8006e2a:	f7fb f853 	bl	8001ed4 <__aeabi_dsub>
 8006e2e:	0032      	movs	r2, r6
 8006e30:	003b      	movs	r3, r7
 8006e32:	0004      	movs	r4, r0
 8006e34:	000d      	movs	r5, r1
 8006e36:	f7f9 fb1f 	bl	8000478 <__aeabi_dcmpgt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d000      	beq.n	8006e40 <_dtoa_r+0x460>
 8006e3e:	e29d      	b.n	800737c <_dtoa_r+0x99c>
 8006e40:	2180      	movs	r1, #128	@ 0x80
 8006e42:	0609      	lsls	r1, r1, #24
 8006e44:	187b      	adds	r3, r7, r1
 8006e46:	0032      	movs	r2, r6
 8006e48:	0020      	movs	r0, r4
 8006e4a:	0029      	movs	r1, r5
 8006e4c:	f7f9 fb00 	bl	8000450 <__aeabi_dcmplt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d000      	beq.n	8006e56 <_dtoa_r+0x476>
 8006e54:	e130      	b.n	80070b8 <_dtoa_r+0x6d8>
 8006e56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da00      	bge.n	8006e66 <_dtoa_r+0x486>
 8006e64:	e177      	b.n	8007156 <_dtoa_r+0x776>
 8006e66:	9a04      	ldr	r2, [sp, #16]
 8006e68:	2a0e      	cmp	r2, #14
 8006e6a:	dd00      	ble.n	8006e6e <_dtoa_r+0x48e>
 8006e6c:	e173      	b.n	8007156 <_dtoa_r+0x776>
 8006e6e:	4ba0      	ldr	r3, [pc, #640]	@ (80070f0 <_dtoa_r+0x710>)
 8006e70:	00d2      	lsls	r2, r2, #3
 8006e72:	189b      	adds	r3, r3, r2
 8006e74:	685c      	ldr	r4, [r3, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	9407      	str	r4, [sp, #28]
 8006e7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da03      	bge.n	8006e8a <_dtoa_r+0x4aa>
 8006e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dc00      	bgt.n	8006e8a <_dtoa_r+0x4aa>
 8006e88:	e106      	b.n	8007098 <_dtoa_r+0x6b8>
 8006e8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006e8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	9d08      	ldr	r5, [sp, #32]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	195b      	adds	r3, r3, r5
 8006e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e98:	9a06      	ldr	r2, [sp, #24]
 8006e9a:	9b07      	ldr	r3, [sp, #28]
 8006e9c:	0030      	movs	r0, r6
 8006e9e:	0039      	movs	r1, r7
 8006ea0:	f7fa f90c 	bl	80010bc <__aeabi_ddiv>
 8006ea4:	f7fb fbd4 	bl	8002650 <__aeabi_d2iz>
 8006ea8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006eaa:	f7fb fc0d 	bl	80026c8 <__aeabi_i2d>
 8006eae:	9a06      	ldr	r2, [sp, #24]
 8006eb0:	9b07      	ldr	r3, [sp, #28]
 8006eb2:	f7fa fd47 	bl	8001944 <__aeabi_dmul>
 8006eb6:	0002      	movs	r2, r0
 8006eb8:	000b      	movs	r3, r1
 8006eba:	0030      	movs	r0, r6
 8006ebc:	0039      	movs	r1, r7
 8006ebe:	f7fb f809 	bl	8001ed4 <__aeabi_dsub>
 8006ec2:	002b      	movs	r3, r5
 8006ec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec6:	3501      	adds	r5, #1
 8006ec8:	3230      	adds	r2, #48	@ 0x30
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ece:	002c      	movs	r4, r5
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d000      	beq.n	8006ed6 <_dtoa_r+0x4f6>
 8006ed4:	e131      	b.n	800713a <_dtoa_r+0x75a>
 8006ed6:	0002      	movs	r2, r0
 8006ed8:	000b      	movs	r3, r1
 8006eda:	f7f9 fd8b 	bl	80009f4 <__aeabi_dadd>
 8006ede:	9a06      	ldr	r2, [sp, #24]
 8006ee0:	9b07      	ldr	r3, [sp, #28]
 8006ee2:	0006      	movs	r6, r0
 8006ee4:	000f      	movs	r7, r1
 8006ee6:	f7f9 fac7 	bl	8000478 <__aeabi_dcmpgt>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d000      	beq.n	8006ef0 <_dtoa_r+0x510>
 8006eee:	e10f      	b.n	8007110 <_dtoa_r+0x730>
 8006ef0:	9a06      	ldr	r2, [sp, #24]
 8006ef2:	9b07      	ldr	r3, [sp, #28]
 8006ef4:	0030      	movs	r0, r6
 8006ef6:	0039      	movs	r1, r7
 8006ef8:	f7f9 faa4 	bl	8000444 <__aeabi_dcmpeq>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d003      	beq.n	8006f08 <_dtoa_r+0x528>
 8006f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f02:	07dd      	lsls	r5, r3, #31
 8006f04:	d500      	bpl.n	8006f08 <_dtoa_r+0x528>
 8006f06:	e103      	b.n	8007110 <_dtoa_r+0x730>
 8006f08:	9905      	ldr	r1, [sp, #20]
 8006f0a:	9803      	ldr	r0, [sp, #12]
 8006f0c:	f000 fca6 	bl	800785c <_Bfree>
 8006f10:	2300      	movs	r3, #0
 8006f12:	7023      	strb	r3, [r4, #0]
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f18:	3301      	adds	r3, #1
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d100      	bne.n	8006f24 <_dtoa_r+0x544>
 8006f22:	e5a7      	b.n	8006a74 <_dtoa_r+0x94>
 8006f24:	601c      	str	r4, [r3, #0]
 8006f26:	e5a5      	b.n	8006a74 <_dtoa_r+0x94>
 8006f28:	423d      	tst	r5, r7
 8006f2a:	d005      	beq.n	8006f38 <_dtoa_r+0x558>
 8006f2c:	6832      	ldr	r2, [r6, #0]
 8006f2e:	6873      	ldr	r3, [r6, #4]
 8006f30:	f7fa fd08 	bl	8001944 <__aeabi_dmul>
 8006f34:	003b      	movs	r3, r7
 8006f36:	3401      	adds	r4, #1
 8006f38:	106d      	asrs	r5, r5, #1
 8006f3a:	3608      	adds	r6, #8
 8006f3c:	e736      	b.n	8006dac <_dtoa_r+0x3cc>
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f44:	e75a      	b.n	8006dfc <_dtoa_r+0x41c>
 8006f46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f48:	4b69      	ldr	r3, [pc, #420]	@ (80070f0 <_dtoa_r+0x710>)
 8006f4a:	3a01      	subs	r2, #1
 8006f4c:	00d2      	lsls	r2, r2, #3
 8006f4e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006f50:	189b      	adds	r3, r3, r2
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d04c      	beq.n	8006ff4 <_dtoa_r+0x614>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	496b      	ldr	r1, [pc, #428]	@ (800710c <_dtoa_r+0x72c>)
 8006f5e:	f7fa f8ad 	bl	80010bc <__aeabi_ddiv>
 8006f62:	0032      	movs	r2, r6
 8006f64:	003b      	movs	r3, r7
 8006f66:	f7fa ffb5 	bl	8001ed4 <__aeabi_dsub>
 8006f6a:	9a08      	ldr	r2, [sp, #32]
 8006f6c:	0006      	movs	r6, r0
 8006f6e:	4694      	mov	ip, r2
 8006f70:	000f      	movs	r7, r1
 8006f72:	9b08      	ldr	r3, [sp, #32]
 8006f74:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f78:	4463      	add	r3, ip
 8006f7a:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f80:	f7fb fb66 	bl	8002650 <__aeabi_d2iz>
 8006f84:	0005      	movs	r5, r0
 8006f86:	f7fb fb9f 	bl	80026c8 <__aeabi_i2d>
 8006f8a:	0002      	movs	r2, r0
 8006f8c:	000b      	movs	r3, r1
 8006f8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f92:	f7fa ff9f 	bl	8001ed4 <__aeabi_dsub>
 8006f96:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f98:	3530      	adds	r5, #48	@ 0x30
 8006f9a:	1c5c      	adds	r4, r3, #1
 8006f9c:	701d      	strb	r5, [r3, #0]
 8006f9e:	0032      	movs	r2, r6
 8006fa0:	003b      	movs	r3, r7
 8006fa2:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fa6:	f7f9 fa53 	bl	8000450 <__aeabi_dcmplt>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d16a      	bne.n	8007084 <_dtoa_r+0x6a4>
 8006fae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	4950      	ldr	r1, [pc, #320]	@ (80070f8 <_dtoa_r+0x718>)
 8006fb6:	f7fa ff8d 	bl	8001ed4 <__aeabi_dsub>
 8006fba:	0032      	movs	r2, r6
 8006fbc:	003b      	movs	r3, r7
 8006fbe:	f7f9 fa47 	bl	8000450 <__aeabi_dcmplt>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d000      	beq.n	8006fc8 <_dtoa_r+0x5e8>
 8006fc6:	e0a5      	b.n	8007114 <_dtoa_r+0x734>
 8006fc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fca:	42a3      	cmp	r3, r4
 8006fcc:	d100      	bne.n	8006fd0 <_dtoa_r+0x5f0>
 8006fce:	e742      	b.n	8006e56 <_dtoa_r+0x476>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	0030      	movs	r0, r6
 8006fd4:	0039      	movs	r1, r7
 8006fd6:	4b49      	ldr	r3, [pc, #292]	@ (80070fc <_dtoa_r+0x71c>)
 8006fd8:	f7fa fcb4 	bl	8001944 <__aeabi_dmul>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	0006      	movs	r6, r0
 8006fe0:	000f      	movs	r7, r1
 8006fe2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fe6:	4b45      	ldr	r3, [pc, #276]	@ (80070fc <_dtoa_r+0x71c>)
 8006fe8:	f7fa fcac 	bl	8001944 <__aeabi_dmul>
 8006fec:	9416      	str	r4, [sp, #88]	@ 0x58
 8006fee:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ff0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ff2:	e7c3      	b.n	8006f7c <_dtoa_r+0x59c>
 8006ff4:	0030      	movs	r0, r6
 8006ff6:	0039      	movs	r1, r7
 8006ff8:	f7fa fca4 	bl	8001944 <__aeabi_dmul>
 8006ffc:	9d08      	ldr	r5, [sp, #32]
 8006ffe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007000:	002b      	movs	r3, r5
 8007002:	4694      	mov	ip, r2
 8007004:	9016      	str	r0, [sp, #88]	@ 0x58
 8007006:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007008:	4463      	add	r3, ip
 800700a:	9319      	str	r3, [sp, #100]	@ 0x64
 800700c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800700e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007010:	f7fb fb1e 	bl	8002650 <__aeabi_d2iz>
 8007014:	0004      	movs	r4, r0
 8007016:	f7fb fb57 	bl	80026c8 <__aeabi_i2d>
 800701a:	000b      	movs	r3, r1
 800701c:	0002      	movs	r2, r0
 800701e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007022:	f7fa ff57 	bl	8001ed4 <__aeabi_dsub>
 8007026:	3430      	adds	r4, #48	@ 0x30
 8007028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800702a:	702c      	strb	r4, [r5, #0]
 800702c:	3501      	adds	r5, #1
 800702e:	0006      	movs	r6, r0
 8007030:	000f      	movs	r7, r1
 8007032:	42ab      	cmp	r3, r5
 8007034:	d129      	bne.n	800708a <_dtoa_r+0x6aa>
 8007036:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007038:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800703a:	9b08      	ldr	r3, [sp, #32]
 800703c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800703e:	469c      	mov	ip, r3
 8007040:	2200      	movs	r2, #0
 8007042:	4b32      	ldr	r3, [pc, #200]	@ (800710c <_dtoa_r+0x72c>)
 8007044:	4464      	add	r4, ip
 8007046:	f7f9 fcd5 	bl	80009f4 <__aeabi_dadd>
 800704a:	0002      	movs	r2, r0
 800704c:	000b      	movs	r3, r1
 800704e:	0030      	movs	r0, r6
 8007050:	0039      	movs	r1, r7
 8007052:	f7f9 fa11 	bl	8000478 <__aeabi_dcmpgt>
 8007056:	2800      	cmp	r0, #0
 8007058:	d15c      	bne.n	8007114 <_dtoa_r+0x734>
 800705a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800705c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800705e:	2000      	movs	r0, #0
 8007060:	492a      	ldr	r1, [pc, #168]	@ (800710c <_dtoa_r+0x72c>)
 8007062:	f7fa ff37 	bl	8001ed4 <__aeabi_dsub>
 8007066:	0002      	movs	r2, r0
 8007068:	000b      	movs	r3, r1
 800706a:	0030      	movs	r0, r6
 800706c:	0039      	movs	r1, r7
 800706e:	f7f9 f9ef 	bl	8000450 <__aeabi_dcmplt>
 8007072:	2800      	cmp	r0, #0
 8007074:	d100      	bne.n	8007078 <_dtoa_r+0x698>
 8007076:	e6ee      	b.n	8006e56 <_dtoa_r+0x476>
 8007078:	0023      	movs	r3, r4
 800707a:	3c01      	subs	r4, #1
 800707c:	7822      	ldrb	r2, [r4, #0]
 800707e:	2a30      	cmp	r2, #48	@ 0x30
 8007080:	d0fa      	beq.n	8007078 <_dtoa_r+0x698>
 8007082:	001c      	movs	r4, r3
 8007084:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007086:	9304      	str	r3, [sp, #16]
 8007088:	e73e      	b.n	8006f08 <_dtoa_r+0x528>
 800708a:	2200      	movs	r2, #0
 800708c:	4b1b      	ldr	r3, [pc, #108]	@ (80070fc <_dtoa_r+0x71c>)
 800708e:	f7fa fc59 	bl	8001944 <__aeabi_dmul>
 8007092:	900a      	str	r0, [sp, #40]	@ 0x28
 8007094:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007096:	e7b9      	b.n	800700c <_dtoa_r+0x62c>
 8007098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <_dtoa_r+0x6d8>
 800709e:	9806      	ldr	r0, [sp, #24]
 80070a0:	9907      	ldr	r1, [sp, #28]
 80070a2:	2200      	movs	r2, #0
 80070a4:	4b18      	ldr	r3, [pc, #96]	@ (8007108 <_dtoa_r+0x728>)
 80070a6:	f7fa fc4d 	bl	8001944 <__aeabi_dmul>
 80070aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ae:	f7f9 f9ed 	bl	800048c <__aeabi_dcmpge>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d100      	bne.n	80070b8 <_dtoa_r+0x6d8>
 80070b6:	e164      	b.n	8007382 <_dtoa_r+0x9a2>
 80070b8:	2600      	movs	r6, #0
 80070ba:	0037      	movs	r7, r6
 80070bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070be:	9c08      	ldr	r4, [sp, #32]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80070c4:	2300      	movs	r3, #0
 80070c6:	9304      	str	r3, [sp, #16]
 80070c8:	0031      	movs	r1, r6
 80070ca:	9803      	ldr	r0, [sp, #12]
 80070cc:	f000 fbc6 	bl	800785c <_Bfree>
 80070d0:	2f00      	cmp	r7, #0
 80070d2:	d0d7      	beq.n	8007084 <_dtoa_r+0x6a4>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <_dtoa_r+0x706>
 80070da:	42bb      	cmp	r3, r7
 80070dc:	d003      	beq.n	80070e6 <_dtoa_r+0x706>
 80070de:	0019      	movs	r1, r3
 80070e0:	9803      	ldr	r0, [sp, #12]
 80070e2:	f000 fbbb 	bl	800785c <_Bfree>
 80070e6:	0039      	movs	r1, r7
 80070e8:	9803      	ldr	r0, [sp, #12]
 80070ea:	f000 fbb7 	bl	800785c <_Bfree>
 80070ee:	e7c9      	b.n	8007084 <_dtoa_r+0x6a4>
 80070f0:	0800ad90 	.word	0x0800ad90
 80070f4:	0800ad68 	.word	0x0800ad68
 80070f8:	3ff00000 	.word	0x3ff00000
 80070fc:	40240000 	.word	0x40240000
 8007100:	401c0000 	.word	0x401c0000
 8007104:	fcc00000 	.word	0xfcc00000
 8007108:	40140000 	.word	0x40140000
 800710c:	3fe00000 	.word	0x3fe00000
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	930c      	str	r3, [sp, #48]	@ 0x30
 8007114:	0023      	movs	r3, r4
 8007116:	001c      	movs	r4, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	2a39      	cmp	r2, #57	@ 0x39
 800711e:	d108      	bne.n	8007132 <_dtoa_r+0x752>
 8007120:	9a08      	ldr	r2, [sp, #32]
 8007122:	429a      	cmp	r2, r3
 8007124:	d1f7      	bne.n	8007116 <_dtoa_r+0x736>
 8007126:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007128:	9908      	ldr	r1, [sp, #32]
 800712a:	3201      	adds	r2, #1
 800712c:	920c      	str	r2, [sp, #48]	@ 0x30
 800712e:	2230      	movs	r2, #48	@ 0x30
 8007130:	700a      	strb	r2, [r1, #0]
 8007132:	781a      	ldrb	r2, [r3, #0]
 8007134:	3201      	adds	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e7a4      	b.n	8007084 <_dtoa_r+0x6a4>
 800713a:	2200      	movs	r2, #0
 800713c:	4bc6      	ldr	r3, [pc, #792]	@ (8007458 <_dtoa_r+0xa78>)
 800713e:	f7fa fc01 	bl	8001944 <__aeabi_dmul>
 8007142:	2200      	movs	r2, #0
 8007144:	2300      	movs	r3, #0
 8007146:	0006      	movs	r6, r0
 8007148:	000f      	movs	r7, r1
 800714a:	f7f9 f97b 	bl	8000444 <__aeabi_dcmpeq>
 800714e:	2800      	cmp	r0, #0
 8007150:	d100      	bne.n	8007154 <_dtoa_r+0x774>
 8007152:	e6a1      	b.n	8006e98 <_dtoa_r+0x4b8>
 8007154:	e6d8      	b.n	8006f08 <_dtoa_r+0x528>
 8007156:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007158:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800715a:	9c06      	ldr	r4, [sp, #24]
 800715c:	2f00      	cmp	r7, #0
 800715e:	d014      	beq.n	800718a <_dtoa_r+0x7aa>
 8007160:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007162:	2a01      	cmp	r2, #1
 8007164:	dd00      	ble.n	8007168 <_dtoa_r+0x788>
 8007166:	e0c8      	b.n	80072fa <_dtoa_r+0x91a>
 8007168:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800716a:	2a00      	cmp	r2, #0
 800716c:	d100      	bne.n	8007170 <_dtoa_r+0x790>
 800716e:	e0be      	b.n	80072ee <_dtoa_r+0x90e>
 8007170:	4aba      	ldr	r2, [pc, #744]	@ (800745c <_dtoa_r+0xa7c>)
 8007172:	189b      	adds	r3, r3, r2
 8007174:	9a06      	ldr	r2, [sp, #24]
 8007176:	2101      	movs	r1, #1
 8007178:	18d2      	adds	r2, r2, r3
 800717a:	9206      	str	r2, [sp, #24]
 800717c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800717e:	9803      	ldr	r0, [sp, #12]
 8007180:	18d3      	adds	r3, r2, r3
 8007182:	930d      	str	r3, [sp, #52]	@ 0x34
 8007184:	f000 fc22 	bl	80079cc <__i2b>
 8007188:	0007      	movs	r7, r0
 800718a:	2c00      	cmp	r4, #0
 800718c:	d00e      	beq.n	80071ac <_dtoa_r+0x7cc>
 800718e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007190:	2b00      	cmp	r3, #0
 8007192:	dd0b      	ble.n	80071ac <_dtoa_r+0x7cc>
 8007194:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007196:	0023      	movs	r3, r4
 8007198:	4294      	cmp	r4, r2
 800719a:	dd00      	ble.n	800719e <_dtoa_r+0x7be>
 800719c:	0013      	movs	r3, r2
 800719e:	9a06      	ldr	r2, [sp, #24]
 80071a0:	1ae4      	subs	r4, r4, r3
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	9206      	str	r2, [sp, #24]
 80071a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80071ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01f      	beq.n	80071f2 <_dtoa_r+0x812>
 80071b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d100      	bne.n	80071ba <_dtoa_r+0x7da>
 80071b8:	e0b5      	b.n	8007326 <_dtoa_r+0x946>
 80071ba:	2d00      	cmp	r5, #0
 80071bc:	d010      	beq.n	80071e0 <_dtoa_r+0x800>
 80071be:	0039      	movs	r1, r7
 80071c0:	002a      	movs	r2, r5
 80071c2:	9803      	ldr	r0, [sp, #12]
 80071c4:	f000 fccc 	bl	8007b60 <__pow5mult>
 80071c8:	9a05      	ldr	r2, [sp, #20]
 80071ca:	0001      	movs	r1, r0
 80071cc:	0007      	movs	r7, r0
 80071ce:	9803      	ldr	r0, [sp, #12]
 80071d0:	f000 fc14 	bl	80079fc <__multiply>
 80071d4:	0006      	movs	r6, r0
 80071d6:	9905      	ldr	r1, [sp, #20]
 80071d8:	9803      	ldr	r0, [sp, #12]
 80071da:	f000 fb3f 	bl	800785c <_Bfree>
 80071de:	9605      	str	r6, [sp, #20]
 80071e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e2:	1b5a      	subs	r2, r3, r5
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	d004      	beq.n	80071f2 <_dtoa_r+0x812>
 80071e8:	9905      	ldr	r1, [sp, #20]
 80071ea:	9803      	ldr	r0, [sp, #12]
 80071ec:	f000 fcb8 	bl	8007b60 <__pow5mult>
 80071f0:	9005      	str	r0, [sp, #20]
 80071f2:	2101      	movs	r1, #1
 80071f4:	9803      	ldr	r0, [sp, #12]
 80071f6:	f000 fbe9 	bl	80079cc <__i2b>
 80071fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071fc:	0006      	movs	r6, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d100      	bne.n	8007204 <_dtoa_r+0x824>
 8007202:	e1bc      	b.n	800757e <_dtoa_r+0xb9e>
 8007204:	001a      	movs	r2, r3
 8007206:	0001      	movs	r1, r0
 8007208:	9803      	ldr	r0, [sp, #12]
 800720a:	f000 fca9 	bl	8007b60 <__pow5mult>
 800720e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007210:	0006      	movs	r6, r0
 8007212:	2500      	movs	r5, #0
 8007214:	2b01      	cmp	r3, #1
 8007216:	dc16      	bgt.n	8007246 <_dtoa_r+0x866>
 8007218:	2500      	movs	r5, #0
 800721a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800721c:	42ab      	cmp	r3, r5
 800721e:	d10e      	bne.n	800723e <_dtoa_r+0x85e>
 8007220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007222:	031b      	lsls	r3, r3, #12
 8007224:	42ab      	cmp	r3, r5
 8007226:	d10a      	bne.n	800723e <_dtoa_r+0x85e>
 8007228:	4b8d      	ldr	r3, [pc, #564]	@ (8007460 <_dtoa_r+0xa80>)
 800722a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800722c:	4213      	tst	r3, r2
 800722e:	d006      	beq.n	800723e <_dtoa_r+0x85e>
 8007230:	9b06      	ldr	r3, [sp, #24]
 8007232:	3501      	adds	r5, #1
 8007234:	3301      	adds	r3, #1
 8007236:	9306      	str	r3, [sp, #24]
 8007238:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800723a:	3301      	adds	r3, #1
 800723c:	930d      	str	r3, [sp, #52]	@ 0x34
 800723e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007240:	2001      	movs	r0, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <_dtoa_r+0x878>
 8007246:	6933      	ldr	r3, [r6, #16]
 8007248:	3303      	adds	r3, #3
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	18f3      	adds	r3, r6, r3
 800724e:	6858      	ldr	r0, [r3, #4]
 8007250:	f000 fb6c 	bl	800792c <__hi0bits>
 8007254:	2320      	movs	r3, #32
 8007256:	1a18      	subs	r0, r3, r0
 8007258:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800725a:	1818      	adds	r0, r3, r0
 800725c:	0002      	movs	r2, r0
 800725e:	231f      	movs	r3, #31
 8007260:	401a      	ands	r2, r3
 8007262:	4218      	tst	r0, r3
 8007264:	d065      	beq.n	8007332 <_dtoa_r+0x952>
 8007266:	3301      	adds	r3, #1
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	2b04      	cmp	r3, #4
 800726c:	dd5d      	ble.n	800732a <_dtoa_r+0x94a>
 800726e:	231c      	movs	r3, #28
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	9a06      	ldr	r2, [sp, #24]
 8007274:	18e4      	adds	r4, r4, r3
 8007276:	18d2      	adds	r2, r2, r3
 8007278:	9206      	str	r2, [sp, #24]
 800727a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007280:	9b06      	ldr	r3, [sp, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	dd05      	ble.n	8007292 <_dtoa_r+0x8b2>
 8007286:	001a      	movs	r2, r3
 8007288:	9905      	ldr	r1, [sp, #20]
 800728a:	9803      	ldr	r0, [sp, #12]
 800728c:	f000 fcc4 	bl	8007c18 <__lshift>
 8007290:	9005      	str	r0, [sp, #20]
 8007292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007294:	2b00      	cmp	r3, #0
 8007296:	dd05      	ble.n	80072a4 <_dtoa_r+0x8c4>
 8007298:	0031      	movs	r1, r6
 800729a:	001a      	movs	r2, r3
 800729c:	9803      	ldr	r0, [sp, #12]
 800729e:	f000 fcbb 	bl	8007c18 <__lshift>
 80072a2:	0006      	movs	r6, r0
 80072a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d045      	beq.n	8007336 <_dtoa_r+0x956>
 80072aa:	0031      	movs	r1, r6
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f000 fd1f 	bl	8007cf0 <__mcmp>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	da3f      	bge.n	8007336 <_dtoa_r+0x956>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	220a      	movs	r2, #10
 80072ba:	3b01      	subs	r3, #1
 80072bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80072be:	9905      	ldr	r1, [sp, #20]
 80072c0:	2300      	movs	r3, #0
 80072c2:	9803      	ldr	r0, [sp, #12]
 80072c4:	f000 faee 	bl	80078a4 <__multadd>
 80072c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072ca:	9005      	str	r0, [sp, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d100      	bne.n	80072d2 <_dtoa_r+0x8f2>
 80072d0:	e15c      	b.n	800758c <_dtoa_r+0xbac>
 80072d2:	2300      	movs	r3, #0
 80072d4:	0039      	movs	r1, r7
 80072d6:	220a      	movs	r2, #10
 80072d8:	9803      	ldr	r0, [sp, #12]
 80072da:	f000 fae3 	bl	80078a4 <__multadd>
 80072de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072e0:	0007      	movs	r7, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	dc55      	bgt.n	8007392 <_dtoa_r+0x9b2>
 80072e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	dc2d      	bgt.n	8007348 <_dtoa_r+0x968>
 80072ec:	e051      	b.n	8007392 <_dtoa_r+0x9b2>
 80072ee:	2336      	movs	r3, #54	@ 0x36
 80072f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072f2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80072f4:	9c06      	ldr	r4, [sp, #24]
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	e73c      	b.n	8007174 <_dtoa_r+0x794>
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	1e5d      	subs	r5, r3, #1
 80072fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007300:	42ab      	cmp	r3, r5
 8007302:	db08      	blt.n	8007316 <_dtoa_r+0x936>
 8007304:	1b5d      	subs	r5, r3, r5
 8007306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007308:	9c06      	ldr	r4, [sp, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	db00      	blt.n	8007310 <_dtoa_r+0x930>
 800730e:	e731      	b.n	8007174 <_dtoa_r+0x794>
 8007310:	1ae4      	subs	r4, r4, r3
 8007312:	2300      	movs	r3, #0
 8007314:	e72e      	b.n	8007174 <_dtoa_r+0x794>
 8007316:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007318:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800731a:	1aeb      	subs	r3, r5, r3
 800731c:	18d3      	adds	r3, r2, r3
 800731e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007320:	9314      	str	r3, [sp, #80]	@ 0x50
 8007322:	2500      	movs	r5, #0
 8007324:	e7ef      	b.n	8007306 <_dtoa_r+0x926>
 8007326:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007328:	e75e      	b.n	80071e8 <_dtoa_r+0x808>
 800732a:	2b04      	cmp	r3, #4
 800732c:	d0a8      	beq.n	8007280 <_dtoa_r+0x8a0>
 800732e:	331c      	adds	r3, #28
 8007330:	e79f      	b.n	8007272 <_dtoa_r+0x892>
 8007332:	0013      	movs	r3, r2
 8007334:	e7fb      	b.n	800732e <_dtoa_r+0x94e>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	930c      	str	r3, [sp, #48]	@ 0x30
 800733a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733c:	930e      	str	r3, [sp, #56]	@ 0x38
 800733e:	2b00      	cmp	r3, #0
 8007340:	dc23      	bgt.n	800738a <_dtoa_r+0x9aa>
 8007342:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007344:	2b02      	cmp	r3, #2
 8007346:	dd20      	ble.n	800738a <_dtoa_r+0x9aa>
 8007348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d000      	beq.n	8007350 <_dtoa_r+0x970>
 800734e:	e6b5      	b.n	80070bc <_dtoa_r+0x6dc>
 8007350:	0031      	movs	r1, r6
 8007352:	2205      	movs	r2, #5
 8007354:	9803      	ldr	r0, [sp, #12]
 8007356:	f000 faa5 	bl	80078a4 <__multadd>
 800735a:	0006      	movs	r6, r0
 800735c:	0001      	movs	r1, r0
 800735e:	9805      	ldr	r0, [sp, #20]
 8007360:	f000 fcc6 	bl	8007cf0 <__mcmp>
 8007364:	2800      	cmp	r0, #0
 8007366:	dc00      	bgt.n	800736a <_dtoa_r+0x98a>
 8007368:	e6a8      	b.n	80070bc <_dtoa_r+0x6dc>
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	9a08      	ldr	r2, [sp, #32]
 800736e:	1c5c      	adds	r4, r3, #1
 8007370:	2331      	movs	r3, #49	@ 0x31
 8007372:	7013      	strb	r3, [r2, #0]
 8007374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007376:	3301      	adds	r3, #1
 8007378:	930c      	str	r3, [sp, #48]	@ 0x30
 800737a:	e6a3      	b.n	80070c4 <_dtoa_r+0x6e4>
 800737c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800737e:	0037      	movs	r7, r6
 8007380:	e7f3      	b.n	800736a <_dtoa_r+0x98a>
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007386:	930c      	str	r3, [sp, #48]	@ 0x30
 8007388:	e7f9      	b.n	800737e <_dtoa_r+0x99e>
 800738a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d100      	bne.n	8007392 <_dtoa_r+0x9b2>
 8007390:	e100      	b.n	8007594 <_dtoa_r+0xbb4>
 8007392:	2c00      	cmp	r4, #0
 8007394:	dd05      	ble.n	80073a2 <_dtoa_r+0x9c2>
 8007396:	0039      	movs	r1, r7
 8007398:	0022      	movs	r2, r4
 800739a:	9803      	ldr	r0, [sp, #12]
 800739c:	f000 fc3c 	bl	8007c18 <__lshift>
 80073a0:	0007      	movs	r7, r0
 80073a2:	0038      	movs	r0, r7
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	d018      	beq.n	80073da <_dtoa_r+0x9fa>
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	9803      	ldr	r0, [sp, #12]
 80073ac:	f000 fa12 	bl	80077d4 <_Balloc>
 80073b0:	1e04      	subs	r4, r0, #0
 80073b2:	d105      	bne.n	80073c0 <_dtoa_r+0x9e0>
 80073b4:	0022      	movs	r2, r4
 80073b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007464 <_dtoa_r+0xa84>)
 80073b8:	482b      	ldr	r0, [pc, #172]	@ (8007468 <_dtoa_r+0xa88>)
 80073ba:	492c      	ldr	r1, [pc, #176]	@ (800746c <_dtoa_r+0xa8c>)
 80073bc:	f7ff fb25 	bl	8006a0a <_dtoa_r+0x2a>
 80073c0:	0039      	movs	r1, r7
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	310c      	adds	r1, #12
 80073c6:	3202      	adds	r2, #2
 80073c8:	0092      	lsls	r2, r2, #2
 80073ca:	300c      	adds	r0, #12
 80073cc:	f7ff fa70 	bl	80068b0 <memcpy>
 80073d0:	2201      	movs	r2, #1
 80073d2:	0021      	movs	r1, r4
 80073d4:	9803      	ldr	r0, [sp, #12]
 80073d6:	f000 fc1f 	bl	8007c18 <__lshift>
 80073da:	9b08      	ldr	r3, [sp, #32]
 80073dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073de:	9306      	str	r3, [sp, #24]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	2201      	movs	r2, #1
 80073e6:	9704      	str	r7, [sp, #16]
 80073e8:	0007      	movs	r7, r0
 80073ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ee:	4013      	ands	r3, r2
 80073f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80073f2:	0031      	movs	r1, r6
 80073f4:	9805      	ldr	r0, [sp, #20]
 80073f6:	f7ff fa64 	bl	80068c2 <quorem>
 80073fa:	9904      	ldr	r1, [sp, #16]
 80073fc:	0005      	movs	r5, r0
 80073fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8007400:	9805      	ldr	r0, [sp, #20]
 8007402:	f000 fc75 	bl	8007cf0 <__mcmp>
 8007406:	003a      	movs	r2, r7
 8007408:	900d      	str	r0, [sp, #52]	@ 0x34
 800740a:	0031      	movs	r1, r6
 800740c:	9803      	ldr	r0, [sp, #12]
 800740e:	f000 fc8b 	bl	8007d28 <__mdiff>
 8007412:	2201      	movs	r2, #1
 8007414:	68c3      	ldr	r3, [r0, #12]
 8007416:	0004      	movs	r4, r0
 8007418:	3530      	adds	r5, #48	@ 0x30
 800741a:	9209      	str	r2, [sp, #36]	@ 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <_dtoa_r+0xa4a>
 8007420:	0001      	movs	r1, r0
 8007422:	9805      	ldr	r0, [sp, #20]
 8007424:	f000 fc64 	bl	8007cf0 <__mcmp>
 8007428:	9009      	str	r0, [sp, #36]	@ 0x24
 800742a:	0021      	movs	r1, r4
 800742c:	9803      	ldr	r0, [sp, #12]
 800742e:	f000 fa15 	bl	800785c <_Bfree>
 8007432:	9b06      	ldr	r3, [sp, #24]
 8007434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007436:	1c5c      	adds	r4, r3, #1
 8007438:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800743a:	4313      	orrs	r3, r2
 800743c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743e:	4313      	orrs	r3, r2
 8007440:	d116      	bne.n	8007470 <_dtoa_r+0xa90>
 8007442:	2d39      	cmp	r5, #57	@ 0x39
 8007444:	d02f      	beq.n	80074a6 <_dtoa_r+0xac6>
 8007446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007448:	2b00      	cmp	r3, #0
 800744a:	dd01      	ble.n	8007450 <_dtoa_r+0xa70>
 800744c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800744e:	3531      	adds	r5, #49	@ 0x31
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	701d      	strb	r5, [r3, #0]
 8007454:	e638      	b.n	80070c8 <_dtoa_r+0x6e8>
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	40240000 	.word	0x40240000
 800745c:	00000433 	.word	0x00000433
 8007460:	7ff00000 	.word	0x7ff00000
 8007464:	0800acec 	.word	0x0800acec
 8007468:	0800ac94 	.word	0x0800ac94
 800746c:	000002ef 	.word	0x000002ef
 8007470:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007472:	2b00      	cmp	r3, #0
 8007474:	db04      	blt.n	8007480 <_dtoa_r+0xaa0>
 8007476:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007478:	4313      	orrs	r3, r2
 800747a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800747c:	4313      	orrs	r3, r2
 800747e:	d11e      	bne.n	80074be <_dtoa_r+0xade>
 8007480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007482:	2b00      	cmp	r3, #0
 8007484:	dde4      	ble.n	8007450 <_dtoa_r+0xa70>
 8007486:	9905      	ldr	r1, [sp, #20]
 8007488:	2201      	movs	r2, #1
 800748a:	9803      	ldr	r0, [sp, #12]
 800748c:	f000 fbc4 	bl	8007c18 <__lshift>
 8007490:	0031      	movs	r1, r6
 8007492:	9005      	str	r0, [sp, #20]
 8007494:	f000 fc2c 	bl	8007cf0 <__mcmp>
 8007498:	2800      	cmp	r0, #0
 800749a:	dc02      	bgt.n	80074a2 <_dtoa_r+0xac2>
 800749c:	d1d8      	bne.n	8007450 <_dtoa_r+0xa70>
 800749e:	07eb      	lsls	r3, r5, #31
 80074a0:	d5d6      	bpl.n	8007450 <_dtoa_r+0xa70>
 80074a2:	2d39      	cmp	r5, #57	@ 0x39
 80074a4:	d1d2      	bne.n	800744c <_dtoa_r+0xa6c>
 80074a6:	2339      	movs	r3, #57	@ 0x39
 80074a8:	9a06      	ldr	r2, [sp, #24]
 80074aa:	7013      	strb	r3, [r2, #0]
 80074ac:	0023      	movs	r3, r4
 80074ae:	001c      	movs	r4, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	2a39      	cmp	r2, #57	@ 0x39
 80074b6:	d04f      	beq.n	8007558 <_dtoa_r+0xb78>
 80074b8:	3201      	adds	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e604      	b.n	80070c8 <_dtoa_r+0x6e8>
 80074be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dd03      	ble.n	80074cc <_dtoa_r+0xaec>
 80074c4:	2d39      	cmp	r5, #57	@ 0x39
 80074c6:	d0ee      	beq.n	80074a6 <_dtoa_r+0xac6>
 80074c8:	3501      	adds	r5, #1
 80074ca:	e7c1      	b.n	8007450 <_dtoa_r+0xa70>
 80074cc:	9b06      	ldr	r3, [sp, #24]
 80074ce:	9a06      	ldr	r2, [sp, #24]
 80074d0:	701d      	strb	r5, [r3, #0]
 80074d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d02a      	beq.n	800752e <_dtoa_r+0xb4e>
 80074d8:	2300      	movs	r3, #0
 80074da:	220a      	movs	r2, #10
 80074dc:	9905      	ldr	r1, [sp, #20]
 80074de:	9803      	ldr	r0, [sp, #12]
 80074e0:	f000 f9e0 	bl	80078a4 <__multadd>
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	9005      	str	r0, [sp, #20]
 80074e8:	42bb      	cmp	r3, r7
 80074ea:	d109      	bne.n	8007500 <_dtoa_r+0xb20>
 80074ec:	2300      	movs	r3, #0
 80074ee:	220a      	movs	r2, #10
 80074f0:	9904      	ldr	r1, [sp, #16]
 80074f2:	9803      	ldr	r0, [sp, #12]
 80074f4:	f000 f9d6 	bl	80078a4 <__multadd>
 80074f8:	9004      	str	r0, [sp, #16]
 80074fa:	0007      	movs	r7, r0
 80074fc:	9406      	str	r4, [sp, #24]
 80074fe:	e778      	b.n	80073f2 <_dtoa_r+0xa12>
 8007500:	9904      	ldr	r1, [sp, #16]
 8007502:	2300      	movs	r3, #0
 8007504:	220a      	movs	r2, #10
 8007506:	9803      	ldr	r0, [sp, #12]
 8007508:	f000 f9cc 	bl	80078a4 <__multadd>
 800750c:	2300      	movs	r3, #0
 800750e:	9004      	str	r0, [sp, #16]
 8007510:	220a      	movs	r2, #10
 8007512:	0039      	movs	r1, r7
 8007514:	9803      	ldr	r0, [sp, #12]
 8007516:	f000 f9c5 	bl	80078a4 <__multadd>
 800751a:	e7ee      	b.n	80074fa <_dtoa_r+0xb1a>
 800751c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800751e:	2401      	movs	r4, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	dd00      	ble.n	8007526 <_dtoa_r+0xb46>
 8007524:	001c      	movs	r4, r3
 8007526:	9b08      	ldr	r3, [sp, #32]
 8007528:	191c      	adds	r4, r3, r4
 800752a:	2300      	movs	r3, #0
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	9905      	ldr	r1, [sp, #20]
 8007530:	2201      	movs	r2, #1
 8007532:	9803      	ldr	r0, [sp, #12]
 8007534:	f000 fb70 	bl	8007c18 <__lshift>
 8007538:	0031      	movs	r1, r6
 800753a:	9005      	str	r0, [sp, #20]
 800753c:	f000 fbd8 	bl	8007cf0 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	dcb3      	bgt.n	80074ac <_dtoa_r+0xacc>
 8007544:	d101      	bne.n	800754a <_dtoa_r+0xb6a>
 8007546:	07ed      	lsls	r5, r5, #31
 8007548:	d4b0      	bmi.n	80074ac <_dtoa_r+0xacc>
 800754a:	0023      	movs	r3, r4
 800754c:	001c      	movs	r4, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	2a30      	cmp	r2, #48	@ 0x30
 8007554:	d0fa      	beq.n	800754c <_dtoa_r+0xb6c>
 8007556:	e5b7      	b.n	80070c8 <_dtoa_r+0x6e8>
 8007558:	9a08      	ldr	r2, [sp, #32]
 800755a:	429a      	cmp	r2, r3
 800755c:	d1a7      	bne.n	80074ae <_dtoa_r+0xace>
 800755e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007560:	3301      	adds	r3, #1
 8007562:	930c      	str	r3, [sp, #48]	@ 0x30
 8007564:	2331      	movs	r3, #49	@ 0x31
 8007566:	7013      	strb	r3, [r2, #0]
 8007568:	e5ae      	b.n	80070c8 <_dtoa_r+0x6e8>
 800756a:	4b15      	ldr	r3, [pc, #84]	@ (80075c0 <_dtoa_r+0xbe0>)
 800756c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800756e:	9308      	str	r3, [sp, #32]
 8007570:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <_dtoa_r+0xbe4>)
 8007572:	2a00      	cmp	r2, #0
 8007574:	d001      	beq.n	800757a <_dtoa_r+0xb9a>
 8007576:	f7ff fa7b 	bl	8006a70 <_dtoa_r+0x90>
 800757a:	f7ff fa7b 	bl	8006a74 <_dtoa_r+0x94>
 800757e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007580:	2b01      	cmp	r3, #1
 8007582:	dc00      	bgt.n	8007586 <_dtoa_r+0xba6>
 8007584:	e648      	b.n	8007218 <_dtoa_r+0x838>
 8007586:	2001      	movs	r0, #1
 8007588:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800758a:	e665      	b.n	8007258 <_dtoa_r+0x878>
 800758c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800758e:	2b00      	cmp	r3, #0
 8007590:	dc00      	bgt.n	8007594 <_dtoa_r+0xbb4>
 8007592:	e6d6      	b.n	8007342 <_dtoa_r+0x962>
 8007594:	2400      	movs	r4, #0
 8007596:	0031      	movs	r1, r6
 8007598:	9805      	ldr	r0, [sp, #20]
 800759a:	f7ff f992 	bl	80068c2 <quorem>
 800759e:	9b08      	ldr	r3, [sp, #32]
 80075a0:	3030      	adds	r0, #48	@ 0x30
 80075a2:	5518      	strb	r0, [r3, r4]
 80075a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075a6:	3401      	adds	r4, #1
 80075a8:	0005      	movs	r5, r0
 80075aa:	429c      	cmp	r4, r3
 80075ac:	dab6      	bge.n	800751c <_dtoa_r+0xb3c>
 80075ae:	2300      	movs	r3, #0
 80075b0:	220a      	movs	r2, #10
 80075b2:	9905      	ldr	r1, [sp, #20]
 80075b4:	9803      	ldr	r0, [sp, #12]
 80075b6:	f000 f975 	bl	80078a4 <__multadd>
 80075ba:	9005      	str	r0, [sp, #20]
 80075bc:	e7eb      	b.n	8007596 <_dtoa_r+0xbb6>
 80075be:	46c0      	nop			@ (mov r8, r8)
 80075c0:	0800ac70 	.word	0x0800ac70
 80075c4:	0800ac78 	.word	0x0800ac78

080075c8 <_free_r>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	0005      	movs	r5, r0
 80075cc:	1e0c      	subs	r4, r1, #0
 80075ce:	d010      	beq.n	80075f2 <_free_r+0x2a>
 80075d0:	3c04      	subs	r4, #4
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	da00      	bge.n	80075da <_free_r+0x12>
 80075d8:	18e4      	adds	r4, r4, r3
 80075da:	0028      	movs	r0, r5
 80075dc:	f000 f8ea 	bl	80077b4 <__malloc_lock>
 80075e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007658 <_free_r+0x90>)
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d105      	bne.n	80075f4 <_free_r+0x2c>
 80075e8:	6063      	str	r3, [r4, #4]
 80075ea:	6014      	str	r4, [r2, #0]
 80075ec:	0028      	movs	r0, r5
 80075ee:	f000 f8e9 	bl	80077c4 <__malloc_unlock>
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d908      	bls.n	800760a <_free_r+0x42>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	1821      	adds	r1, r4, r0
 80075fc:	428b      	cmp	r3, r1
 80075fe:	d1f3      	bne.n	80075e8 <_free_r+0x20>
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	1809      	adds	r1, r1, r0
 8007606:	6021      	str	r1, [r4, #0]
 8007608:	e7ee      	b.n	80075e8 <_free_r+0x20>
 800760a:	001a      	movs	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <_free_r+0x4e>
 8007612:	42a3      	cmp	r3, r4
 8007614:	d9f9      	bls.n	800760a <_free_r+0x42>
 8007616:	6811      	ldr	r1, [r2, #0]
 8007618:	1850      	adds	r0, r2, r1
 800761a:	42a0      	cmp	r0, r4
 800761c:	d10b      	bne.n	8007636 <_free_r+0x6e>
 800761e:	6820      	ldr	r0, [r4, #0]
 8007620:	1809      	adds	r1, r1, r0
 8007622:	1850      	adds	r0, r2, r1
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	4283      	cmp	r3, r0
 8007628:	d1e0      	bne.n	80075ec <_free_r+0x24>
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	1841      	adds	r1, r0, r1
 8007630:	6011      	str	r1, [r2, #0]
 8007632:	6053      	str	r3, [r2, #4]
 8007634:	e7da      	b.n	80075ec <_free_r+0x24>
 8007636:	42a0      	cmp	r0, r4
 8007638:	d902      	bls.n	8007640 <_free_r+0x78>
 800763a:	230c      	movs	r3, #12
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	e7d5      	b.n	80075ec <_free_r+0x24>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	1821      	adds	r1, r4, r0
 8007644:	428b      	cmp	r3, r1
 8007646:	d103      	bne.n	8007650 <_free_r+0x88>
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	1809      	adds	r1, r1, r0
 800764e:	6021      	str	r1, [r4, #0]
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	6054      	str	r4, [r2, #4]
 8007654:	e7ca      	b.n	80075ec <_free_r+0x24>
 8007656:	46c0      	nop			@ (mov r8, r8)
 8007658:	20000838 	.word	0x20000838

0800765c <malloc>:
 800765c:	b510      	push	{r4, lr}
 800765e:	4b03      	ldr	r3, [pc, #12]	@ (800766c <malloc+0x10>)
 8007660:	0001      	movs	r1, r0
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	f000 f826 	bl	80076b4 <_malloc_r>
 8007668:	bd10      	pop	{r4, pc}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	20000028 	.word	0x20000028

08007670 <sbrk_aligned>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4e0f      	ldr	r6, [pc, #60]	@ (80076b0 <sbrk_aligned+0x40>)
 8007674:	000d      	movs	r5, r1
 8007676:	6831      	ldr	r1, [r6, #0]
 8007678:	0004      	movs	r4, r0
 800767a:	2900      	cmp	r1, #0
 800767c:	d102      	bne.n	8007684 <sbrk_aligned+0x14>
 800767e:	f000 fe5d 	bl	800833c <_sbrk_r>
 8007682:	6030      	str	r0, [r6, #0]
 8007684:	0029      	movs	r1, r5
 8007686:	0020      	movs	r0, r4
 8007688:	f000 fe58 	bl	800833c <_sbrk_r>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d103      	bne.n	8007698 <sbrk_aligned+0x28>
 8007690:	2501      	movs	r5, #1
 8007692:	426d      	negs	r5, r5
 8007694:	0028      	movs	r0, r5
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	2303      	movs	r3, #3
 800769a:	1cc5      	adds	r5, r0, #3
 800769c:	439d      	bics	r5, r3
 800769e:	42a8      	cmp	r0, r5
 80076a0:	d0f8      	beq.n	8007694 <sbrk_aligned+0x24>
 80076a2:	1a29      	subs	r1, r5, r0
 80076a4:	0020      	movs	r0, r4
 80076a6:	f000 fe49 	bl	800833c <_sbrk_r>
 80076aa:	3001      	adds	r0, #1
 80076ac:	d1f2      	bne.n	8007694 <sbrk_aligned+0x24>
 80076ae:	e7ef      	b.n	8007690 <sbrk_aligned+0x20>
 80076b0:	20000834 	.word	0x20000834

080076b4 <_malloc_r>:
 80076b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076b6:	2203      	movs	r2, #3
 80076b8:	1ccb      	adds	r3, r1, #3
 80076ba:	4393      	bics	r3, r2
 80076bc:	3308      	adds	r3, #8
 80076be:	0005      	movs	r5, r0
 80076c0:	001f      	movs	r7, r3
 80076c2:	2b0c      	cmp	r3, #12
 80076c4:	d234      	bcs.n	8007730 <_malloc_r+0x7c>
 80076c6:	270c      	movs	r7, #12
 80076c8:	42b9      	cmp	r1, r7
 80076ca:	d833      	bhi.n	8007734 <_malloc_r+0x80>
 80076cc:	0028      	movs	r0, r5
 80076ce:	f000 f871 	bl	80077b4 <__malloc_lock>
 80076d2:	4e37      	ldr	r6, [pc, #220]	@ (80077b0 <_malloc_r+0xfc>)
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	001c      	movs	r4, r3
 80076d8:	2c00      	cmp	r4, #0
 80076da:	d12f      	bne.n	800773c <_malloc_r+0x88>
 80076dc:	0039      	movs	r1, r7
 80076de:	0028      	movs	r0, r5
 80076e0:	f7ff ffc6 	bl	8007670 <sbrk_aligned>
 80076e4:	0004      	movs	r4, r0
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d15f      	bne.n	80077aa <_malloc_r+0xf6>
 80076ea:	6834      	ldr	r4, [r6, #0]
 80076ec:	9400      	str	r4, [sp, #0]
 80076ee:	9b00      	ldr	r3, [sp, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d14a      	bne.n	800778a <_malloc_r+0xd6>
 80076f4:	2c00      	cmp	r4, #0
 80076f6:	d052      	beq.n	800779e <_malloc_r+0xea>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	0028      	movs	r0, r5
 80076fc:	18e3      	adds	r3, r4, r3
 80076fe:	9900      	ldr	r1, [sp, #0]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	f000 fe1b 	bl	800833c <_sbrk_r>
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	4283      	cmp	r3, r0
 800770a:	d148      	bne.n	800779e <_malloc_r+0xea>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	0028      	movs	r0, r5
 8007710:	1aff      	subs	r7, r7, r3
 8007712:	0039      	movs	r1, r7
 8007714:	f7ff ffac 	bl	8007670 <sbrk_aligned>
 8007718:	3001      	adds	r0, #1
 800771a:	d040      	beq.n	800779e <_malloc_r+0xea>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	19db      	adds	r3, r3, r7
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	6833      	ldr	r3, [r6, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	2a00      	cmp	r2, #0
 8007728:	d133      	bne.n	8007792 <_malloc_r+0xde>
 800772a:	9b00      	ldr	r3, [sp, #0]
 800772c:	6033      	str	r3, [r6, #0]
 800772e:	e019      	b.n	8007764 <_malloc_r+0xb0>
 8007730:	2b00      	cmp	r3, #0
 8007732:	dac9      	bge.n	80076c8 <_malloc_r+0x14>
 8007734:	230c      	movs	r3, #12
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	2000      	movs	r0, #0
 800773a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800773c:	6821      	ldr	r1, [r4, #0]
 800773e:	1bc9      	subs	r1, r1, r7
 8007740:	d420      	bmi.n	8007784 <_malloc_r+0xd0>
 8007742:	290b      	cmp	r1, #11
 8007744:	d90a      	bls.n	800775c <_malloc_r+0xa8>
 8007746:	19e2      	adds	r2, r4, r7
 8007748:	6027      	str	r7, [r4, #0]
 800774a:	42a3      	cmp	r3, r4
 800774c:	d104      	bne.n	8007758 <_malloc_r+0xa4>
 800774e:	6032      	str	r2, [r6, #0]
 8007750:	6863      	ldr	r3, [r4, #4]
 8007752:	6011      	str	r1, [r2, #0]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	e005      	b.n	8007764 <_malloc_r+0xb0>
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	e7f9      	b.n	8007750 <_malloc_r+0x9c>
 800775c:	6862      	ldr	r2, [r4, #4]
 800775e:	42a3      	cmp	r3, r4
 8007760:	d10e      	bne.n	8007780 <_malloc_r+0xcc>
 8007762:	6032      	str	r2, [r6, #0]
 8007764:	0028      	movs	r0, r5
 8007766:	f000 f82d 	bl	80077c4 <__malloc_unlock>
 800776a:	0020      	movs	r0, r4
 800776c:	2207      	movs	r2, #7
 800776e:	300b      	adds	r0, #11
 8007770:	1d23      	adds	r3, r4, #4
 8007772:	4390      	bics	r0, r2
 8007774:	1ac2      	subs	r2, r0, r3
 8007776:	4298      	cmp	r0, r3
 8007778:	d0df      	beq.n	800773a <_malloc_r+0x86>
 800777a:	1a1b      	subs	r3, r3, r0
 800777c:	50a3      	str	r3, [r4, r2]
 800777e:	e7dc      	b.n	800773a <_malloc_r+0x86>
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	e7ef      	b.n	8007764 <_malloc_r+0xb0>
 8007784:	0023      	movs	r3, r4
 8007786:	6864      	ldr	r4, [r4, #4]
 8007788:	e7a6      	b.n	80076d8 <_malloc_r+0x24>
 800778a:	9c00      	ldr	r4, [sp, #0]
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	e7ad      	b.n	80076ee <_malloc_r+0x3a>
 8007792:	001a      	movs	r2, r3
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	42a3      	cmp	r3, r4
 8007798:	d1fb      	bne.n	8007792 <_malloc_r+0xde>
 800779a:	2300      	movs	r3, #0
 800779c:	e7da      	b.n	8007754 <_malloc_r+0xa0>
 800779e:	230c      	movs	r3, #12
 80077a0:	0028      	movs	r0, r5
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	f000 f80e 	bl	80077c4 <__malloc_unlock>
 80077a8:	e7c6      	b.n	8007738 <_malloc_r+0x84>
 80077aa:	6007      	str	r7, [r0, #0]
 80077ac:	e7da      	b.n	8007764 <_malloc_r+0xb0>
 80077ae:	46c0      	nop			@ (mov r8, r8)
 80077b0:	20000838 	.word	0x20000838

080077b4 <__malloc_lock>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4802      	ldr	r0, [pc, #8]	@ (80077c0 <__malloc_lock+0xc>)
 80077b8:	f7ff f86d 	bl	8006896 <__retarget_lock_acquire_recursive>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	20000830 	.word	0x20000830

080077c4 <__malloc_unlock>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4802      	ldr	r0, [pc, #8]	@ (80077d0 <__malloc_unlock+0xc>)
 80077c8:	f7ff f866 	bl	8006898 <__retarget_lock_release_recursive>
 80077cc:	bd10      	pop	{r4, pc}
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	20000830 	.word	0x20000830

080077d4 <_Balloc>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	69c5      	ldr	r5, [r0, #28]
 80077d8:	0006      	movs	r6, r0
 80077da:	000c      	movs	r4, r1
 80077dc:	2d00      	cmp	r5, #0
 80077de:	d10e      	bne.n	80077fe <_Balloc+0x2a>
 80077e0:	2010      	movs	r0, #16
 80077e2:	f7ff ff3b 	bl	800765c <malloc>
 80077e6:	1e02      	subs	r2, r0, #0
 80077e8:	61f0      	str	r0, [r6, #28]
 80077ea:	d104      	bne.n	80077f6 <_Balloc+0x22>
 80077ec:	216b      	movs	r1, #107	@ 0x6b
 80077ee:	4b19      	ldr	r3, [pc, #100]	@ (8007854 <_Balloc+0x80>)
 80077f0:	4819      	ldr	r0, [pc, #100]	@ (8007858 <_Balloc+0x84>)
 80077f2:	f000 fdb5 	bl	8008360 <__assert_func>
 80077f6:	6045      	str	r5, [r0, #4]
 80077f8:	6085      	str	r5, [r0, #8]
 80077fa:	6005      	str	r5, [r0, #0]
 80077fc:	60c5      	str	r5, [r0, #12]
 80077fe:	69f5      	ldr	r5, [r6, #28]
 8007800:	68eb      	ldr	r3, [r5, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d013      	beq.n	800782e <_Balloc+0x5a>
 8007806:	69f3      	ldr	r3, [r6, #28]
 8007808:	00a2      	lsls	r2, r4, #2
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	189b      	adds	r3, r3, r2
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	2800      	cmp	r0, #0
 8007812:	d118      	bne.n	8007846 <_Balloc+0x72>
 8007814:	2101      	movs	r1, #1
 8007816:	000d      	movs	r5, r1
 8007818:	40a5      	lsls	r5, r4
 800781a:	1d6a      	adds	r2, r5, #5
 800781c:	0030      	movs	r0, r6
 800781e:	0092      	lsls	r2, r2, #2
 8007820:	f000 fdbc 	bl	800839c <_calloc_r>
 8007824:	2800      	cmp	r0, #0
 8007826:	d00c      	beq.n	8007842 <_Balloc+0x6e>
 8007828:	6044      	str	r4, [r0, #4]
 800782a:	6085      	str	r5, [r0, #8]
 800782c:	e00d      	b.n	800784a <_Balloc+0x76>
 800782e:	2221      	movs	r2, #33	@ 0x21
 8007830:	2104      	movs	r1, #4
 8007832:	0030      	movs	r0, r6
 8007834:	f000 fdb2 	bl	800839c <_calloc_r>
 8007838:	69f3      	ldr	r3, [r6, #28]
 800783a:	60e8      	str	r0, [r5, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e1      	bne.n	8007806 <_Balloc+0x32>
 8007842:	2000      	movs	r0, #0
 8007844:	bd70      	pop	{r4, r5, r6, pc}
 8007846:	6802      	ldr	r2, [r0, #0]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	6103      	str	r3, [r0, #16]
 800784e:	60c3      	str	r3, [r0, #12]
 8007850:	e7f8      	b.n	8007844 <_Balloc+0x70>
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	0800ac7d 	.word	0x0800ac7d
 8007858:	0800acfd 	.word	0x0800acfd

0800785c <_Bfree>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	69c6      	ldr	r6, [r0, #28]
 8007860:	0005      	movs	r5, r0
 8007862:	000c      	movs	r4, r1
 8007864:	2e00      	cmp	r6, #0
 8007866:	d10e      	bne.n	8007886 <_Bfree+0x2a>
 8007868:	2010      	movs	r0, #16
 800786a:	f7ff fef7 	bl	800765c <malloc>
 800786e:	1e02      	subs	r2, r0, #0
 8007870:	61e8      	str	r0, [r5, #28]
 8007872:	d104      	bne.n	800787e <_Bfree+0x22>
 8007874:	218f      	movs	r1, #143	@ 0x8f
 8007876:	4b09      	ldr	r3, [pc, #36]	@ (800789c <_Bfree+0x40>)
 8007878:	4809      	ldr	r0, [pc, #36]	@ (80078a0 <_Bfree+0x44>)
 800787a:	f000 fd71 	bl	8008360 <__assert_func>
 800787e:	6046      	str	r6, [r0, #4]
 8007880:	6086      	str	r6, [r0, #8]
 8007882:	6006      	str	r6, [r0, #0]
 8007884:	60c6      	str	r6, [r0, #12]
 8007886:	2c00      	cmp	r4, #0
 8007888:	d007      	beq.n	800789a <_Bfree+0x3e>
 800788a:	69eb      	ldr	r3, [r5, #28]
 800788c:	6862      	ldr	r2, [r4, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	0092      	lsls	r2, r2, #2
 8007892:	189b      	adds	r3, r3, r2
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	601c      	str	r4, [r3, #0]
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	0800ac7d 	.word	0x0800ac7d
 80078a0:	0800acfd 	.word	0x0800acfd

080078a4 <__multadd>:
 80078a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078a6:	000f      	movs	r7, r1
 80078a8:	9001      	str	r0, [sp, #4]
 80078aa:	000c      	movs	r4, r1
 80078ac:	001e      	movs	r6, r3
 80078ae:	2000      	movs	r0, #0
 80078b0:	690d      	ldr	r5, [r1, #16]
 80078b2:	3714      	adds	r7, #20
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	3001      	adds	r0, #1
 80078b8:	b299      	uxth	r1, r3
 80078ba:	4351      	muls	r1, r2
 80078bc:	0c1b      	lsrs	r3, r3, #16
 80078be:	4353      	muls	r3, r2
 80078c0:	1989      	adds	r1, r1, r6
 80078c2:	0c0e      	lsrs	r6, r1, #16
 80078c4:	199b      	adds	r3, r3, r6
 80078c6:	0c1e      	lsrs	r6, r3, #16
 80078c8:	b289      	uxth	r1, r1
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	185b      	adds	r3, r3, r1
 80078ce:	c708      	stmia	r7!, {r3}
 80078d0:	4285      	cmp	r5, r0
 80078d2:	dcef      	bgt.n	80078b4 <__multadd+0x10>
 80078d4:	2e00      	cmp	r6, #0
 80078d6:	d022      	beq.n	800791e <__multadd+0x7a>
 80078d8:	68a3      	ldr	r3, [r4, #8]
 80078da:	42ab      	cmp	r3, r5
 80078dc:	dc19      	bgt.n	8007912 <__multadd+0x6e>
 80078de:	6861      	ldr	r1, [r4, #4]
 80078e0:	9801      	ldr	r0, [sp, #4]
 80078e2:	3101      	adds	r1, #1
 80078e4:	f7ff ff76 	bl	80077d4 <_Balloc>
 80078e8:	1e07      	subs	r7, r0, #0
 80078ea:	d105      	bne.n	80078f8 <__multadd+0x54>
 80078ec:	003a      	movs	r2, r7
 80078ee:	21ba      	movs	r1, #186	@ 0xba
 80078f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <__multadd+0x80>)
 80078f2:	480d      	ldr	r0, [pc, #52]	@ (8007928 <__multadd+0x84>)
 80078f4:	f000 fd34 	bl	8008360 <__assert_func>
 80078f8:	0021      	movs	r1, r4
 80078fa:	6922      	ldr	r2, [r4, #16]
 80078fc:	310c      	adds	r1, #12
 80078fe:	3202      	adds	r2, #2
 8007900:	0092      	lsls	r2, r2, #2
 8007902:	300c      	adds	r0, #12
 8007904:	f7fe ffd4 	bl	80068b0 <memcpy>
 8007908:	0021      	movs	r1, r4
 800790a:	9801      	ldr	r0, [sp, #4]
 800790c:	f7ff ffa6 	bl	800785c <_Bfree>
 8007910:	003c      	movs	r4, r7
 8007912:	1d2b      	adds	r3, r5, #4
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	18e3      	adds	r3, r4, r3
 8007918:	3501      	adds	r5, #1
 800791a:	605e      	str	r6, [r3, #4]
 800791c:	6125      	str	r5, [r4, #16]
 800791e:	0020      	movs	r0, r4
 8007920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007922:	46c0      	nop			@ (mov r8, r8)
 8007924:	0800acec 	.word	0x0800acec
 8007928:	0800acfd 	.word	0x0800acfd

0800792c <__hi0bits>:
 800792c:	2280      	movs	r2, #128	@ 0x80
 800792e:	0003      	movs	r3, r0
 8007930:	0252      	lsls	r2, r2, #9
 8007932:	2000      	movs	r0, #0
 8007934:	4293      	cmp	r3, r2
 8007936:	d201      	bcs.n	800793c <__hi0bits+0x10>
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	3010      	adds	r0, #16
 800793c:	2280      	movs	r2, #128	@ 0x80
 800793e:	0452      	lsls	r2, r2, #17
 8007940:	4293      	cmp	r3, r2
 8007942:	d201      	bcs.n	8007948 <__hi0bits+0x1c>
 8007944:	3008      	adds	r0, #8
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	2280      	movs	r2, #128	@ 0x80
 800794a:	0552      	lsls	r2, r2, #21
 800794c:	4293      	cmp	r3, r2
 800794e:	d201      	bcs.n	8007954 <__hi0bits+0x28>
 8007950:	3004      	adds	r0, #4
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	2280      	movs	r2, #128	@ 0x80
 8007956:	05d2      	lsls	r2, r2, #23
 8007958:	4293      	cmp	r3, r2
 800795a:	d201      	bcs.n	8007960 <__hi0bits+0x34>
 800795c:	3002      	adds	r0, #2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	db03      	blt.n	800796c <__hi0bits+0x40>
 8007964:	3001      	adds	r0, #1
 8007966:	4213      	tst	r3, r2
 8007968:	d100      	bne.n	800796c <__hi0bits+0x40>
 800796a:	2020      	movs	r0, #32
 800796c:	4770      	bx	lr

0800796e <__lo0bits>:
 800796e:	6803      	ldr	r3, [r0, #0]
 8007970:	0001      	movs	r1, r0
 8007972:	2207      	movs	r2, #7
 8007974:	0018      	movs	r0, r3
 8007976:	4010      	ands	r0, r2
 8007978:	4213      	tst	r3, r2
 800797a:	d00d      	beq.n	8007998 <__lo0bits+0x2a>
 800797c:	3a06      	subs	r2, #6
 800797e:	2000      	movs	r0, #0
 8007980:	4213      	tst	r3, r2
 8007982:	d105      	bne.n	8007990 <__lo0bits+0x22>
 8007984:	3002      	adds	r0, #2
 8007986:	4203      	tst	r3, r0
 8007988:	d003      	beq.n	8007992 <__lo0bits+0x24>
 800798a:	40d3      	lsrs	r3, r2
 800798c:	0010      	movs	r0, r2
 800798e:	600b      	str	r3, [r1, #0]
 8007990:	4770      	bx	lr
 8007992:	089b      	lsrs	r3, r3, #2
 8007994:	600b      	str	r3, [r1, #0]
 8007996:	e7fb      	b.n	8007990 <__lo0bits+0x22>
 8007998:	b29a      	uxth	r2, r3
 800799a:	2a00      	cmp	r2, #0
 800799c:	d101      	bne.n	80079a2 <__lo0bits+0x34>
 800799e:	2010      	movs	r0, #16
 80079a0:	0c1b      	lsrs	r3, r3, #16
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	2a00      	cmp	r2, #0
 80079a6:	d101      	bne.n	80079ac <__lo0bits+0x3e>
 80079a8:	3008      	adds	r0, #8
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	071a      	lsls	r2, r3, #28
 80079ae:	d101      	bne.n	80079b4 <__lo0bits+0x46>
 80079b0:	3004      	adds	r0, #4
 80079b2:	091b      	lsrs	r3, r3, #4
 80079b4:	079a      	lsls	r2, r3, #30
 80079b6:	d101      	bne.n	80079bc <__lo0bits+0x4e>
 80079b8:	3002      	adds	r0, #2
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	07da      	lsls	r2, r3, #31
 80079be:	d4e9      	bmi.n	8007994 <__lo0bits+0x26>
 80079c0:	3001      	adds	r0, #1
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	d1e6      	bne.n	8007994 <__lo0bits+0x26>
 80079c6:	2020      	movs	r0, #32
 80079c8:	e7e2      	b.n	8007990 <__lo0bits+0x22>
	...

080079cc <__i2b>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	000c      	movs	r4, r1
 80079d0:	2101      	movs	r1, #1
 80079d2:	f7ff feff 	bl	80077d4 <_Balloc>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d107      	bne.n	80079ea <__i2b+0x1e>
 80079da:	2146      	movs	r1, #70	@ 0x46
 80079dc:	4c05      	ldr	r4, [pc, #20]	@ (80079f4 <__i2b+0x28>)
 80079de:	0002      	movs	r2, r0
 80079e0:	4b05      	ldr	r3, [pc, #20]	@ (80079f8 <__i2b+0x2c>)
 80079e2:	0020      	movs	r0, r4
 80079e4:	31ff      	adds	r1, #255	@ 0xff
 80079e6:	f000 fcbb 	bl	8008360 <__assert_func>
 80079ea:	2301      	movs	r3, #1
 80079ec:	6144      	str	r4, [r0, #20]
 80079ee:	6103      	str	r3, [r0, #16]
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	46c0      	nop			@ (mov r8, r8)
 80079f4:	0800acfd 	.word	0x0800acfd
 80079f8:	0800acec 	.word	0x0800acec

080079fc <__multiply>:
 80079fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fe:	0014      	movs	r4, r2
 8007a00:	690a      	ldr	r2, [r1, #16]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	000d      	movs	r5, r1
 8007a06:	b08b      	sub	sp, #44	@ 0x2c
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	db02      	blt.n	8007a12 <__multiply+0x16>
 8007a0c:	0023      	movs	r3, r4
 8007a0e:	000c      	movs	r4, r1
 8007a10:	001d      	movs	r5, r3
 8007a12:	6927      	ldr	r7, [r4, #16]
 8007a14:	692e      	ldr	r6, [r5, #16]
 8007a16:	6861      	ldr	r1, [r4, #4]
 8007a18:	19bb      	adds	r3, r7, r6
 8007a1a:	9303      	str	r3, [sp, #12]
 8007a1c:	68a3      	ldr	r3, [r4, #8]
 8007a1e:	19ba      	adds	r2, r7, r6
 8007a20:	4293      	cmp	r3, r2
 8007a22:	da00      	bge.n	8007a26 <__multiply+0x2a>
 8007a24:	3101      	adds	r1, #1
 8007a26:	f7ff fed5 	bl	80077d4 <_Balloc>
 8007a2a:	9002      	str	r0, [sp, #8]
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d106      	bne.n	8007a3e <__multiply+0x42>
 8007a30:	21b1      	movs	r1, #177	@ 0xb1
 8007a32:	4b49      	ldr	r3, [pc, #292]	@ (8007b58 <__multiply+0x15c>)
 8007a34:	4849      	ldr	r0, [pc, #292]	@ (8007b5c <__multiply+0x160>)
 8007a36:	9a02      	ldr	r2, [sp, #8]
 8007a38:	0049      	lsls	r1, r1, #1
 8007a3a:	f000 fc91 	bl	8008360 <__assert_func>
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	3314      	adds	r3, #20
 8007a44:	469c      	mov	ip, r3
 8007a46:	19bb      	adds	r3, r7, r6
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4463      	add	r3, ip
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	4663      	mov	r3, ip
 8007a50:	9904      	ldr	r1, [sp, #16]
 8007a52:	428b      	cmp	r3, r1
 8007a54:	d32a      	bcc.n	8007aac <__multiply+0xb0>
 8007a56:	0023      	movs	r3, r4
 8007a58:	00bf      	lsls	r7, r7, #2
 8007a5a:	3314      	adds	r3, #20
 8007a5c:	3514      	adds	r5, #20
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	00b6      	lsls	r6, r6, #2
 8007a62:	19db      	adds	r3, r3, r7
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	19ab      	adds	r3, r5, r6
 8007a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	9306      	str	r3, [sp, #24]
 8007a6e:	0023      	movs	r3, r4
 8007a70:	9a05      	ldr	r2, [sp, #20]
 8007a72:	3315      	adds	r3, #21
 8007a74:	9501      	str	r5, [sp, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d305      	bcc.n	8007a86 <__multiply+0x8a>
 8007a7a:	1b13      	subs	r3, r2, r4
 8007a7c:	3b15      	subs	r3, #21
 8007a7e:	089b      	lsrs	r3, r3, #2
 8007a80:	3301      	adds	r3, #1
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	9306      	str	r3, [sp, #24]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d310      	bcc.n	8007ab0 <__multiply+0xb4>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dd05      	ble.n	8007aa0 <__multiply+0xa4>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	3b04      	subs	r3, #4
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d056      	beq.n	8007b4e <__multiply+0x152>
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	9a03      	ldr	r2, [sp, #12]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	611a      	str	r2, [r3, #16]
 8007aa8:	b00b      	add	sp, #44	@ 0x2c
 8007aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aac:	c304      	stmia	r3!, {r2}
 8007aae:	e7cf      	b.n	8007a50 <__multiply+0x54>
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	b280      	uxth	r0, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d01e      	beq.n	8007af8 <__multiply+0xfc>
 8007aba:	4667      	mov	r7, ip
 8007abc:	2500      	movs	r5, #0
 8007abe:	9e08      	ldr	r6, [sp, #32]
 8007ac0:	ce02      	ldmia	r6!, {r1}
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	9307      	str	r3, [sp, #28]
 8007ac6:	b28b      	uxth	r3, r1
 8007ac8:	4343      	muls	r3, r0
 8007aca:	001a      	movs	r2, r3
 8007acc:	466b      	mov	r3, sp
 8007ace:	0c09      	lsrs	r1, r1, #16
 8007ad0:	8b9b      	ldrh	r3, [r3, #28]
 8007ad2:	4341      	muls	r1, r0
 8007ad4:	18d3      	adds	r3, r2, r3
 8007ad6:	9a07      	ldr	r2, [sp, #28]
 8007ad8:	195b      	adds	r3, r3, r5
 8007ada:	0c12      	lsrs	r2, r2, #16
 8007adc:	1889      	adds	r1, r1, r2
 8007ade:	0c1a      	lsrs	r2, r3, #16
 8007ae0:	188a      	adds	r2, r1, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	0c15      	lsrs	r5, r2, #16
 8007ae6:	0412      	lsls	r2, r2, #16
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	c704      	stmia	r7!, {r2}
 8007aee:	42b3      	cmp	r3, r6
 8007af0:	d8e6      	bhi.n	8007ac0 <__multiply+0xc4>
 8007af2:	4663      	mov	r3, ip
 8007af4:	9a06      	ldr	r2, [sp, #24]
 8007af6:	509d      	str	r5, [r3, r2]
 8007af8:	9b01      	ldr	r3, [sp, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	0c00      	lsrs	r0, r0, #16
 8007afe:	d020      	beq.n	8007b42 <__multiply+0x146>
 8007b00:	4663      	mov	r3, ip
 8007b02:	0025      	movs	r5, r4
 8007b04:	4661      	mov	r1, ip
 8007b06:	2700      	movs	r7, #0
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3514      	adds	r5, #20
 8007b0c:	682a      	ldr	r2, [r5, #0]
 8007b0e:	680e      	ldr	r6, [r1, #0]
 8007b10:	b292      	uxth	r2, r2
 8007b12:	4342      	muls	r2, r0
 8007b14:	0c36      	lsrs	r6, r6, #16
 8007b16:	1992      	adds	r2, r2, r6
 8007b18:	19d2      	adds	r2, r2, r7
 8007b1a:	0416      	lsls	r6, r2, #16
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	431e      	orrs	r6, r3
 8007b20:	600e      	str	r6, [r1, #0]
 8007b22:	cd40      	ldmia	r5!, {r6}
 8007b24:	684b      	ldr	r3, [r1, #4]
 8007b26:	0c36      	lsrs	r6, r6, #16
 8007b28:	4346      	muls	r6, r0
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	0c12      	lsrs	r2, r2, #16
 8007b2e:	18f3      	adds	r3, r6, r3
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	9a05      	ldr	r2, [sp, #20]
 8007b34:	0c1f      	lsrs	r7, r3, #16
 8007b36:	3104      	adds	r1, #4
 8007b38:	42aa      	cmp	r2, r5
 8007b3a:	d8e7      	bhi.n	8007b0c <__multiply+0x110>
 8007b3c:	4662      	mov	r2, ip
 8007b3e:	9906      	ldr	r1, [sp, #24]
 8007b40:	5053      	str	r3, [r2, r1]
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	3304      	adds	r3, #4
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	2304      	movs	r3, #4
 8007b4a:	449c      	add	ip, r3
 8007b4c:	e79b      	b.n	8007a86 <__multiply+0x8a>
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	9303      	str	r3, [sp, #12]
 8007b54:	e79b      	b.n	8007a8e <__multiply+0x92>
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	0800acec 	.word	0x0800acec
 8007b5c:	0800acfd 	.word	0x0800acfd

08007b60 <__pow5mult>:
 8007b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b62:	2303      	movs	r3, #3
 8007b64:	0015      	movs	r5, r2
 8007b66:	0007      	movs	r7, r0
 8007b68:	000e      	movs	r6, r1
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	421d      	tst	r5, r3
 8007b6e:	d008      	beq.n	8007b82 <__pow5mult+0x22>
 8007b70:	4925      	ldr	r1, [pc, #148]	@ (8007c08 <__pow5mult+0xa8>)
 8007b72:	3a01      	subs	r2, #1
 8007b74:	0092      	lsls	r2, r2, #2
 8007b76:	5852      	ldr	r2, [r2, r1]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	0031      	movs	r1, r6
 8007b7c:	f7ff fe92 	bl	80078a4 <__multadd>
 8007b80:	0006      	movs	r6, r0
 8007b82:	10ad      	asrs	r5, r5, #2
 8007b84:	d03d      	beq.n	8007c02 <__pow5mult+0xa2>
 8007b86:	69fc      	ldr	r4, [r7, #28]
 8007b88:	2c00      	cmp	r4, #0
 8007b8a:	d10f      	bne.n	8007bac <__pow5mult+0x4c>
 8007b8c:	2010      	movs	r0, #16
 8007b8e:	f7ff fd65 	bl	800765c <malloc>
 8007b92:	1e02      	subs	r2, r0, #0
 8007b94:	61f8      	str	r0, [r7, #28]
 8007b96:	d105      	bne.n	8007ba4 <__pow5mult+0x44>
 8007b98:	21b4      	movs	r1, #180	@ 0xb4
 8007b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8007c0c <__pow5mult+0xac>)
 8007b9c:	481c      	ldr	r0, [pc, #112]	@ (8007c10 <__pow5mult+0xb0>)
 8007b9e:	31ff      	adds	r1, #255	@ 0xff
 8007ba0:	f000 fbde 	bl	8008360 <__assert_func>
 8007ba4:	6044      	str	r4, [r0, #4]
 8007ba6:	6084      	str	r4, [r0, #8]
 8007ba8:	6004      	str	r4, [r0, #0]
 8007baa:	60c4      	str	r4, [r0, #12]
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	689c      	ldr	r4, [r3, #8]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	d108      	bne.n	8007bc8 <__pow5mult+0x68>
 8007bb6:	0038      	movs	r0, r7
 8007bb8:	4916      	ldr	r1, [pc, #88]	@ (8007c14 <__pow5mult+0xb4>)
 8007bba:	f7ff ff07 	bl	80079cc <__i2b>
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	0004      	movs	r4, r0
 8007bc2:	6098      	str	r0, [r3, #8]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6003      	str	r3, [r0, #0]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	421d      	tst	r5, r3
 8007bcc:	d00a      	beq.n	8007be4 <__pow5mult+0x84>
 8007bce:	0031      	movs	r1, r6
 8007bd0:	0022      	movs	r2, r4
 8007bd2:	0038      	movs	r0, r7
 8007bd4:	f7ff ff12 	bl	80079fc <__multiply>
 8007bd8:	0031      	movs	r1, r6
 8007bda:	9001      	str	r0, [sp, #4]
 8007bdc:	0038      	movs	r0, r7
 8007bde:	f7ff fe3d 	bl	800785c <_Bfree>
 8007be2:	9e01      	ldr	r6, [sp, #4]
 8007be4:	106d      	asrs	r5, r5, #1
 8007be6:	d00c      	beq.n	8007c02 <__pow5mult+0xa2>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d107      	bne.n	8007bfe <__pow5mult+0x9e>
 8007bee:	0022      	movs	r2, r4
 8007bf0:	0021      	movs	r1, r4
 8007bf2:	0038      	movs	r0, r7
 8007bf4:	f7ff ff02 	bl	80079fc <__multiply>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6020      	str	r0, [r4, #0]
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	0004      	movs	r4, r0
 8007c00:	e7e2      	b.n	8007bc8 <__pow5mult+0x68>
 8007c02:	0030      	movs	r0, r6
 8007c04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	0800ad58 	.word	0x0800ad58
 8007c0c:	0800ac7d 	.word	0x0800ac7d
 8007c10:	0800acfd 	.word	0x0800acfd
 8007c14:	00000271 	.word	0x00000271

08007c18 <__lshift>:
 8007c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c1a:	000c      	movs	r4, r1
 8007c1c:	0016      	movs	r6, r2
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	1157      	asrs	r7, r2, #5
 8007c22:	b085      	sub	sp, #20
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	6849      	ldr	r1, [r1, #4]
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	9002      	str	r0, [sp, #8]
 8007c32:	9a00      	ldr	r2, [sp, #0]
 8007c34:	4293      	cmp	r3, r2
 8007c36:	db10      	blt.n	8007c5a <__lshift+0x42>
 8007c38:	9802      	ldr	r0, [sp, #8]
 8007c3a:	f7ff fdcb 	bl	80077d4 <_Balloc>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	0001      	movs	r1, r0
 8007c42:	0005      	movs	r5, r0
 8007c44:	001a      	movs	r2, r3
 8007c46:	3114      	adds	r1, #20
 8007c48:	4298      	cmp	r0, r3
 8007c4a:	d10c      	bne.n	8007c66 <__lshift+0x4e>
 8007c4c:	21ef      	movs	r1, #239	@ 0xef
 8007c4e:	002a      	movs	r2, r5
 8007c50:	4b25      	ldr	r3, [pc, #148]	@ (8007ce8 <__lshift+0xd0>)
 8007c52:	4826      	ldr	r0, [pc, #152]	@ (8007cec <__lshift+0xd4>)
 8007c54:	0049      	lsls	r1, r1, #1
 8007c56:	f000 fb83 	bl	8008360 <__assert_func>
 8007c5a:	3101      	adds	r1, #1
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	e7e8      	b.n	8007c32 <__lshift+0x1a>
 8007c60:	0098      	lsls	r0, r3, #2
 8007c62:	500a      	str	r2, [r1, r0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	42bb      	cmp	r3, r7
 8007c68:	dbfa      	blt.n	8007c60 <__lshift+0x48>
 8007c6a:	43fb      	mvns	r3, r7
 8007c6c:	17db      	asrs	r3, r3, #31
 8007c6e:	401f      	ands	r7, r3
 8007c70:	00bf      	lsls	r7, r7, #2
 8007c72:	0023      	movs	r3, r4
 8007c74:	201f      	movs	r0, #31
 8007c76:	19c9      	adds	r1, r1, r7
 8007c78:	0037      	movs	r7, r6
 8007c7a:	6922      	ldr	r2, [r4, #16]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	0092      	lsls	r2, r2, #2
 8007c80:	189a      	adds	r2, r3, r2
 8007c82:	4007      	ands	r7, r0
 8007c84:	4206      	tst	r6, r0
 8007c86:	d029      	beq.n	8007cdc <__lshift+0xc4>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	1bc0      	subs	r0, r0, r7
 8007c8c:	9003      	str	r0, [sp, #12]
 8007c8e:	468c      	mov	ip, r1
 8007c90:	2000      	movs	r0, #0
 8007c92:	681e      	ldr	r6, [r3, #0]
 8007c94:	40be      	lsls	r6, r7
 8007c96:	4306      	orrs	r6, r0
 8007c98:	4660      	mov	r0, ip
 8007c9a:	c040      	stmia	r0!, {r6}
 8007c9c:	4684      	mov	ip, r0
 8007c9e:	9e03      	ldr	r6, [sp, #12]
 8007ca0:	cb01      	ldmia	r3!, {r0}
 8007ca2:	40f0      	lsrs	r0, r6
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d8f4      	bhi.n	8007c92 <__lshift+0x7a>
 8007ca8:	0026      	movs	r6, r4
 8007caa:	3615      	adds	r6, #21
 8007cac:	2304      	movs	r3, #4
 8007cae:	42b2      	cmp	r2, r6
 8007cb0:	d304      	bcc.n	8007cbc <__lshift+0xa4>
 8007cb2:	1b13      	subs	r3, r2, r4
 8007cb4:	3b15      	subs	r3, #21
 8007cb6:	089b      	lsrs	r3, r3, #2
 8007cb8:	3301      	adds	r3, #1
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	50c8      	str	r0, [r1, r3]
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d002      	beq.n	8007cc8 <__lshift+0xb0>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	9b00      	ldr	r3, [sp, #0]
 8007cca:	9802      	ldr	r0, [sp, #8]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	0021      	movs	r1, r4
 8007cd0:	612b      	str	r3, [r5, #16]
 8007cd2:	f7ff fdc3 	bl	800785c <_Bfree>
 8007cd6:	0028      	movs	r0, r5
 8007cd8:	b005      	add	sp, #20
 8007cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cdc:	cb01      	ldmia	r3!, {r0}
 8007cde:	c101      	stmia	r1!, {r0}
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d8fb      	bhi.n	8007cdc <__lshift+0xc4>
 8007ce4:	e7f0      	b.n	8007cc8 <__lshift+0xb0>
 8007ce6:	46c0      	nop			@ (mov r8, r8)
 8007ce8:	0800acec 	.word	0x0800acec
 8007cec:	0800acfd 	.word	0x0800acfd

08007cf0 <__mcmp>:
 8007cf0:	b530      	push	{r4, r5, lr}
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	6904      	ldr	r4, [r0, #16]
 8007cf6:	0002      	movs	r2, r0
 8007cf8:	1ae0      	subs	r0, r4, r3
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d10f      	bne.n	8007d1e <__mcmp+0x2e>
 8007cfe:	3214      	adds	r2, #20
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	3114      	adds	r1, #20
 8007d04:	0014      	movs	r4, r2
 8007d06:	18c9      	adds	r1, r1, r3
 8007d08:	18d2      	adds	r2, r2, r3
 8007d0a:	3a04      	subs	r2, #4
 8007d0c:	3904      	subs	r1, #4
 8007d0e:	6815      	ldr	r5, [r2, #0]
 8007d10:	680b      	ldr	r3, [r1, #0]
 8007d12:	429d      	cmp	r5, r3
 8007d14:	d004      	beq.n	8007d20 <__mcmp+0x30>
 8007d16:	2001      	movs	r0, #1
 8007d18:	429d      	cmp	r5, r3
 8007d1a:	d200      	bcs.n	8007d1e <__mcmp+0x2e>
 8007d1c:	3802      	subs	r0, #2
 8007d1e:	bd30      	pop	{r4, r5, pc}
 8007d20:	4294      	cmp	r4, r2
 8007d22:	d3f2      	bcc.n	8007d0a <__mcmp+0x1a>
 8007d24:	e7fb      	b.n	8007d1e <__mcmp+0x2e>
	...

08007d28 <__mdiff>:
 8007d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2a:	000c      	movs	r4, r1
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	9000      	str	r0, [sp, #0]
 8007d30:	0011      	movs	r1, r2
 8007d32:	0020      	movs	r0, r4
 8007d34:	0017      	movs	r7, r2
 8007d36:	f7ff ffdb 	bl	8007cf0 <__mcmp>
 8007d3a:	1e05      	subs	r5, r0, #0
 8007d3c:	d110      	bne.n	8007d60 <__mdiff+0x38>
 8007d3e:	0001      	movs	r1, r0
 8007d40:	9800      	ldr	r0, [sp, #0]
 8007d42:	f7ff fd47 	bl	80077d4 <_Balloc>
 8007d46:	1e02      	subs	r2, r0, #0
 8007d48:	d104      	bne.n	8007d54 <__mdiff+0x2c>
 8007d4a:	4b40      	ldr	r3, [pc, #256]	@ (8007e4c <__mdiff+0x124>)
 8007d4c:	4840      	ldr	r0, [pc, #256]	@ (8007e50 <__mdiff+0x128>)
 8007d4e:	4941      	ldr	r1, [pc, #260]	@ (8007e54 <__mdiff+0x12c>)
 8007d50:	f000 fb06 	bl	8008360 <__assert_func>
 8007d54:	2301      	movs	r3, #1
 8007d56:	6145      	str	r5, [r0, #20]
 8007d58:	6103      	str	r3, [r0, #16]
 8007d5a:	0010      	movs	r0, r2
 8007d5c:	b007      	add	sp, #28
 8007d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d60:	2600      	movs	r6, #0
 8007d62:	42b0      	cmp	r0, r6
 8007d64:	da03      	bge.n	8007d6e <__mdiff+0x46>
 8007d66:	0023      	movs	r3, r4
 8007d68:	003c      	movs	r4, r7
 8007d6a:	001f      	movs	r7, r3
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	6861      	ldr	r1, [r4, #4]
 8007d70:	9800      	ldr	r0, [sp, #0]
 8007d72:	f7ff fd2f 	bl	80077d4 <_Balloc>
 8007d76:	1e02      	subs	r2, r0, #0
 8007d78:	d103      	bne.n	8007d82 <__mdiff+0x5a>
 8007d7a:	4b34      	ldr	r3, [pc, #208]	@ (8007e4c <__mdiff+0x124>)
 8007d7c:	4834      	ldr	r0, [pc, #208]	@ (8007e50 <__mdiff+0x128>)
 8007d7e:	4936      	ldr	r1, [pc, #216]	@ (8007e58 <__mdiff+0x130>)
 8007d80:	e7e6      	b.n	8007d50 <__mdiff+0x28>
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	3414      	adds	r4, #20
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	18e3      	adds	r3, r4, r3
 8007d8c:	0021      	movs	r1, r4
 8007d8e:	9401      	str	r4, [sp, #4]
 8007d90:	003c      	movs	r4, r7
 8007d92:	9302      	str	r3, [sp, #8]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3414      	adds	r4, #20
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	18e3      	adds	r3, r4, r3
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	0003      	movs	r3, r0
 8007da0:	60c6      	str	r6, [r0, #12]
 8007da2:	468c      	mov	ip, r1
 8007da4:	2000      	movs	r0, #0
 8007da6:	3314      	adds	r3, #20
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	9305      	str	r3, [sp, #20]
 8007dac:	4663      	mov	r3, ip
 8007dae:	cb20      	ldmia	r3!, {r5}
 8007db0:	b2a9      	uxth	r1, r5
 8007db2:	000e      	movs	r6, r1
 8007db4:	469c      	mov	ip, r3
 8007db6:	cc08      	ldmia	r4!, {r3}
 8007db8:	0c2d      	lsrs	r5, r5, #16
 8007dba:	b299      	uxth	r1, r3
 8007dbc:	1a71      	subs	r1, r6, r1
 8007dbe:	1809      	adds	r1, r1, r0
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	1408      	asrs	r0, r1, #16
 8007dc4:	1aeb      	subs	r3, r5, r3
 8007dc6:	181b      	adds	r3, r3, r0
 8007dc8:	1418      	asrs	r0, r3, #16
 8007dca:	b289      	uxth	r1, r1
 8007dcc:	041b      	lsls	r3, r3, #16
 8007dce:	4319      	orrs	r1, r3
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	c302      	stmia	r3!, {r1}
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d8e7      	bhi.n	8007dac <__mdiff+0x84>
 8007ddc:	0039      	movs	r1, r7
 8007dde:	9c03      	ldr	r4, [sp, #12]
 8007de0:	3115      	adds	r1, #21
 8007de2:	2304      	movs	r3, #4
 8007de4:	428c      	cmp	r4, r1
 8007de6:	d304      	bcc.n	8007df2 <__mdiff+0xca>
 8007de8:	1be3      	subs	r3, r4, r7
 8007dea:	3b15      	subs	r3, #21
 8007dec:	089b      	lsrs	r3, r3, #2
 8007dee:	3301      	adds	r3, #1
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	9901      	ldr	r1, [sp, #4]
 8007df4:	18cd      	adds	r5, r1, r3
 8007df6:	9904      	ldr	r1, [sp, #16]
 8007df8:	002e      	movs	r6, r5
 8007dfa:	18cb      	adds	r3, r1, r3
 8007dfc:	001f      	movs	r7, r3
 8007dfe:	9902      	ldr	r1, [sp, #8]
 8007e00:	428e      	cmp	r6, r1
 8007e02:	d311      	bcc.n	8007e28 <__mdiff+0x100>
 8007e04:	9c02      	ldr	r4, [sp, #8]
 8007e06:	1ee9      	subs	r1, r5, #3
 8007e08:	2000      	movs	r0, #0
 8007e0a:	428c      	cmp	r4, r1
 8007e0c:	d304      	bcc.n	8007e18 <__mdiff+0xf0>
 8007e0e:	0021      	movs	r1, r4
 8007e10:	3103      	adds	r1, #3
 8007e12:	1b49      	subs	r1, r1, r5
 8007e14:	0889      	lsrs	r1, r1, #2
 8007e16:	0088      	lsls	r0, r1, #2
 8007e18:	181b      	adds	r3, r3, r0
 8007e1a:	3b04      	subs	r3, #4
 8007e1c:	6819      	ldr	r1, [r3, #0]
 8007e1e:	2900      	cmp	r1, #0
 8007e20:	d010      	beq.n	8007e44 <__mdiff+0x11c>
 8007e22:	9b00      	ldr	r3, [sp, #0]
 8007e24:	6113      	str	r3, [r2, #16]
 8007e26:	e798      	b.n	8007d5a <__mdiff+0x32>
 8007e28:	4684      	mov	ip, r0
 8007e2a:	ce02      	ldmia	r6!, {r1}
 8007e2c:	b288      	uxth	r0, r1
 8007e2e:	4460      	add	r0, ip
 8007e30:	1400      	asrs	r0, r0, #16
 8007e32:	0c0c      	lsrs	r4, r1, #16
 8007e34:	1904      	adds	r4, r0, r4
 8007e36:	4461      	add	r1, ip
 8007e38:	1420      	asrs	r0, r4, #16
 8007e3a:	b289      	uxth	r1, r1
 8007e3c:	0424      	lsls	r4, r4, #16
 8007e3e:	4321      	orrs	r1, r4
 8007e40:	c702      	stmia	r7!, {r1}
 8007e42:	e7dc      	b.n	8007dfe <__mdiff+0xd6>
 8007e44:	9900      	ldr	r1, [sp, #0]
 8007e46:	3901      	subs	r1, #1
 8007e48:	9100      	str	r1, [sp, #0]
 8007e4a:	e7e6      	b.n	8007e1a <__mdiff+0xf2>
 8007e4c:	0800acec 	.word	0x0800acec
 8007e50:	0800acfd 	.word	0x0800acfd
 8007e54:	00000237 	.word	0x00000237
 8007e58:	00000245 	.word	0x00000245

08007e5c <__d2b>:
 8007e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e5e:	2101      	movs	r1, #1
 8007e60:	0016      	movs	r6, r2
 8007e62:	001f      	movs	r7, r3
 8007e64:	f7ff fcb6 	bl	80077d4 <_Balloc>
 8007e68:	1e04      	subs	r4, r0, #0
 8007e6a:	d105      	bne.n	8007e78 <__d2b+0x1c>
 8007e6c:	0022      	movs	r2, r4
 8007e6e:	4b25      	ldr	r3, [pc, #148]	@ (8007f04 <__d2b+0xa8>)
 8007e70:	4825      	ldr	r0, [pc, #148]	@ (8007f08 <__d2b+0xac>)
 8007e72:	4926      	ldr	r1, [pc, #152]	@ (8007f0c <__d2b+0xb0>)
 8007e74:	f000 fa74 	bl	8008360 <__assert_func>
 8007e78:	033b      	lsls	r3, r7, #12
 8007e7a:	007d      	lsls	r5, r7, #1
 8007e7c:	0b1b      	lsrs	r3, r3, #12
 8007e7e:	0d6d      	lsrs	r5, r5, #21
 8007e80:	d002      	beq.n	8007e88 <__d2b+0x2c>
 8007e82:	2280      	movs	r2, #128	@ 0x80
 8007e84:	0352      	lsls	r2, r2, #13
 8007e86:	4313      	orrs	r3, r2
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	d025      	beq.n	8007eda <__d2b+0x7e>
 8007e8e:	4668      	mov	r0, sp
 8007e90:	9600      	str	r6, [sp, #0]
 8007e92:	f7ff fd6c 	bl	800796e <__lo0bits>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	9900      	ldr	r1, [sp, #0]
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d01b      	beq.n	8007ed6 <__d2b+0x7a>
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	001e      	movs	r6, r3
 8007ea2:	1a12      	subs	r2, r2, r0
 8007ea4:	4096      	lsls	r6, r2
 8007ea6:	0032      	movs	r2, r6
 8007ea8:	40c3      	lsrs	r3, r0
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	6162      	str	r2, [r4, #20]
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	9e01      	ldr	r6, [sp, #4]
 8007eb2:	61a6      	str	r6, [r4, #24]
 8007eb4:	1e73      	subs	r3, r6, #1
 8007eb6:	419e      	sbcs	r6, r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	6126      	str	r6, [r4, #16]
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	d014      	beq.n	8007eea <__d2b+0x8e>
 8007ec0:	2635      	movs	r6, #53	@ 0x35
 8007ec2:	4b13      	ldr	r3, [pc, #76]	@ (8007f10 <__d2b+0xb4>)
 8007ec4:	18ed      	adds	r5, r5, r3
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	182d      	adds	r5, r5, r0
 8007eca:	601d      	str	r5, [r3, #0]
 8007ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ece:	1a36      	subs	r6, r6, r0
 8007ed0:	601e      	str	r6, [r3, #0]
 8007ed2:	0020      	movs	r0, r4
 8007ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ed6:	6161      	str	r1, [r4, #20]
 8007ed8:	e7ea      	b.n	8007eb0 <__d2b+0x54>
 8007eda:	a801      	add	r0, sp, #4
 8007edc:	f7ff fd47 	bl	800796e <__lo0bits>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	2601      	movs	r6, #1
 8007ee4:	6163      	str	r3, [r4, #20]
 8007ee6:	3020      	adds	r0, #32
 8007ee8:	e7e7      	b.n	8007eba <__d2b+0x5e>
 8007eea:	4b0a      	ldr	r3, [pc, #40]	@ (8007f14 <__d2b+0xb8>)
 8007eec:	18c0      	adds	r0, r0, r3
 8007eee:	9b08      	ldr	r3, [sp, #32]
 8007ef0:	6018      	str	r0, [r3, #0]
 8007ef2:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <__d2b+0xbc>)
 8007ef4:	18f3      	adds	r3, r6, r3
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	18e3      	adds	r3, r4, r3
 8007efa:	6958      	ldr	r0, [r3, #20]
 8007efc:	f7ff fd16 	bl	800792c <__hi0bits>
 8007f00:	0176      	lsls	r6, r6, #5
 8007f02:	e7e3      	b.n	8007ecc <__d2b+0x70>
 8007f04:	0800acec 	.word	0x0800acec
 8007f08:	0800acfd 	.word	0x0800acfd
 8007f0c:	0000030f 	.word	0x0000030f
 8007f10:	fffffbcd 	.word	0xfffffbcd
 8007f14:	fffffbce 	.word	0xfffffbce
 8007f18:	3fffffff 	.word	0x3fffffff

08007f1c <__ssputs_r>:
 8007f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1e:	688e      	ldr	r6, [r1, #8]
 8007f20:	b085      	sub	sp, #20
 8007f22:	001f      	movs	r7, r3
 8007f24:	000c      	movs	r4, r1
 8007f26:	680b      	ldr	r3, [r1, #0]
 8007f28:	9002      	str	r0, [sp, #8]
 8007f2a:	9203      	str	r2, [sp, #12]
 8007f2c:	42be      	cmp	r6, r7
 8007f2e:	d830      	bhi.n	8007f92 <__ssputs_r+0x76>
 8007f30:	210c      	movs	r1, #12
 8007f32:	5e62      	ldrsh	r2, [r4, r1]
 8007f34:	2190      	movs	r1, #144	@ 0x90
 8007f36:	00c9      	lsls	r1, r1, #3
 8007f38:	420a      	tst	r2, r1
 8007f3a:	d028      	beq.n	8007f8e <__ssputs_r+0x72>
 8007f3c:	2003      	movs	r0, #3
 8007f3e:	6921      	ldr	r1, [r4, #16]
 8007f40:	1a5b      	subs	r3, r3, r1
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	6963      	ldr	r3, [r4, #20]
 8007f46:	4343      	muls	r3, r0
 8007f48:	9801      	ldr	r0, [sp, #4]
 8007f4a:	0fdd      	lsrs	r5, r3, #31
 8007f4c:	18ed      	adds	r5, r5, r3
 8007f4e:	1c7b      	adds	r3, r7, #1
 8007f50:	181b      	adds	r3, r3, r0
 8007f52:	106d      	asrs	r5, r5, #1
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	d900      	bls.n	8007f5a <__ssputs_r+0x3e>
 8007f58:	001d      	movs	r5, r3
 8007f5a:	0552      	lsls	r2, r2, #21
 8007f5c:	d528      	bpl.n	8007fb0 <__ssputs_r+0x94>
 8007f5e:	0029      	movs	r1, r5
 8007f60:	9802      	ldr	r0, [sp, #8]
 8007f62:	f7ff fba7 	bl	80076b4 <_malloc_r>
 8007f66:	1e06      	subs	r6, r0, #0
 8007f68:	d02c      	beq.n	8007fc4 <__ssputs_r+0xa8>
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	f7fe fc9f 	bl	80068b0 <memcpy>
 8007f72:	89a2      	ldrh	r2, [r4, #12]
 8007f74:	4b18      	ldr	r3, [pc, #96]	@ (8007fd8 <__ssputs_r+0xbc>)
 8007f76:	401a      	ands	r2, r3
 8007f78:	2380      	movs	r3, #128	@ 0x80
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	6126      	str	r6, [r4, #16]
 8007f82:	18f6      	adds	r6, r6, r3
 8007f84:	6026      	str	r6, [r4, #0]
 8007f86:	003e      	movs	r6, r7
 8007f88:	6165      	str	r5, [r4, #20]
 8007f8a:	1aed      	subs	r5, r5, r3
 8007f8c:	60a5      	str	r5, [r4, #8]
 8007f8e:	42be      	cmp	r6, r7
 8007f90:	d900      	bls.n	8007f94 <__ssputs_r+0x78>
 8007f92:	003e      	movs	r6, r7
 8007f94:	0032      	movs	r2, r6
 8007f96:	9903      	ldr	r1, [sp, #12]
 8007f98:	6820      	ldr	r0, [r4, #0]
 8007f9a:	f7fe fbe3 	bl	8006764 <memmove>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	68a3      	ldr	r3, [r4, #8]
 8007fa2:	1b9b      	subs	r3, r3, r6
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	199b      	adds	r3, r3, r6
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	b005      	add	sp, #20
 8007fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb0:	002a      	movs	r2, r5
 8007fb2:	9802      	ldr	r0, [sp, #8]
 8007fb4:	f000 fa31 	bl	800841a <_realloc_r>
 8007fb8:	1e06      	subs	r6, r0, #0
 8007fba:	d1e0      	bne.n	8007f7e <__ssputs_r+0x62>
 8007fbc:	6921      	ldr	r1, [r4, #16]
 8007fbe:	9802      	ldr	r0, [sp, #8]
 8007fc0:	f7ff fb02 	bl	80075c8 <_free_r>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	9a02      	ldr	r2, [sp, #8]
 8007fca:	4240      	negs	r0, r0
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	89a2      	ldrh	r2, [r4, #12]
 8007fd0:	3334      	adds	r3, #52	@ 0x34
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	e7e9      	b.n	8007fac <__ssputs_r+0x90>
 8007fd8:	fffffb7f 	.word	0xfffffb7f

08007fdc <_svfiprintf_r>:
 8007fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fde:	b0a1      	sub	sp, #132	@ 0x84
 8007fe0:	9003      	str	r0, [sp, #12]
 8007fe2:	001d      	movs	r5, r3
 8007fe4:	898b      	ldrh	r3, [r1, #12]
 8007fe6:	000f      	movs	r7, r1
 8007fe8:	0016      	movs	r6, r2
 8007fea:	061b      	lsls	r3, r3, #24
 8007fec:	d511      	bpl.n	8008012 <_svfiprintf_r+0x36>
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10e      	bne.n	8008012 <_svfiprintf_r+0x36>
 8007ff4:	2140      	movs	r1, #64	@ 0x40
 8007ff6:	f7ff fb5d 	bl	80076b4 <_malloc_r>
 8007ffa:	6038      	str	r0, [r7, #0]
 8007ffc:	6138      	str	r0, [r7, #16]
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d105      	bne.n	800800e <_svfiprintf_r+0x32>
 8008002:	230c      	movs	r3, #12
 8008004:	9a03      	ldr	r2, [sp, #12]
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	2001      	movs	r0, #1
 800800a:	4240      	negs	r0, r0
 800800c:	e0cf      	b.n	80081ae <_svfiprintf_r+0x1d2>
 800800e:	2340      	movs	r3, #64	@ 0x40
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	2300      	movs	r3, #0
 8008014:	ac08      	add	r4, sp, #32
 8008016:	6163      	str	r3, [r4, #20]
 8008018:	3320      	adds	r3, #32
 800801a:	7663      	strb	r3, [r4, #25]
 800801c:	3310      	adds	r3, #16
 800801e:	76a3      	strb	r3, [r4, #26]
 8008020:	9507      	str	r5, [sp, #28]
 8008022:	0035      	movs	r5, r6
 8008024:	782b      	ldrb	r3, [r5, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <_svfiprintf_r+0x52>
 800802a:	2b25      	cmp	r3, #37	@ 0x25
 800802c:	d148      	bne.n	80080c0 <_svfiprintf_r+0xe4>
 800802e:	1bab      	subs	r3, r5, r6
 8008030:	9305      	str	r3, [sp, #20]
 8008032:	42b5      	cmp	r5, r6
 8008034:	d00b      	beq.n	800804e <_svfiprintf_r+0x72>
 8008036:	0032      	movs	r2, r6
 8008038:	0039      	movs	r1, r7
 800803a:	9803      	ldr	r0, [sp, #12]
 800803c:	f7ff ff6e 	bl	8007f1c <__ssputs_r>
 8008040:	3001      	adds	r0, #1
 8008042:	d100      	bne.n	8008046 <_svfiprintf_r+0x6a>
 8008044:	e0ae      	b.n	80081a4 <_svfiprintf_r+0x1c8>
 8008046:	6963      	ldr	r3, [r4, #20]
 8008048:	9a05      	ldr	r2, [sp, #20]
 800804a:	189b      	adds	r3, r3, r2
 800804c:	6163      	str	r3, [r4, #20]
 800804e:	782b      	ldrb	r3, [r5, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d100      	bne.n	8008056 <_svfiprintf_r+0x7a>
 8008054:	e0a6      	b.n	80081a4 <_svfiprintf_r+0x1c8>
 8008056:	2201      	movs	r2, #1
 8008058:	2300      	movs	r3, #0
 800805a:	4252      	negs	r2, r2
 800805c:	6062      	str	r2, [r4, #4]
 800805e:	a904      	add	r1, sp, #16
 8008060:	3254      	adds	r2, #84	@ 0x54
 8008062:	1852      	adds	r2, r2, r1
 8008064:	1c6e      	adds	r6, r5, #1
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	60e3      	str	r3, [r4, #12]
 800806a:	60a3      	str	r3, [r4, #8]
 800806c:	7013      	strb	r3, [r2, #0]
 800806e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008070:	4b54      	ldr	r3, [pc, #336]	@ (80081c4 <_svfiprintf_r+0x1e8>)
 8008072:	2205      	movs	r2, #5
 8008074:	0018      	movs	r0, r3
 8008076:	7831      	ldrb	r1, [r6, #0]
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	f7fe fc0e 	bl	800689a <memchr>
 800807e:	1c75      	adds	r5, r6, #1
 8008080:	2800      	cmp	r0, #0
 8008082:	d11f      	bne.n	80080c4 <_svfiprintf_r+0xe8>
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	06d3      	lsls	r3, r2, #27
 8008088:	d504      	bpl.n	8008094 <_svfiprintf_r+0xb8>
 800808a:	2353      	movs	r3, #83	@ 0x53
 800808c:	a904      	add	r1, sp, #16
 800808e:	185b      	adds	r3, r3, r1
 8008090:	2120      	movs	r1, #32
 8008092:	7019      	strb	r1, [r3, #0]
 8008094:	0713      	lsls	r3, r2, #28
 8008096:	d504      	bpl.n	80080a2 <_svfiprintf_r+0xc6>
 8008098:	2353      	movs	r3, #83	@ 0x53
 800809a:	a904      	add	r1, sp, #16
 800809c:	185b      	adds	r3, r3, r1
 800809e:	212b      	movs	r1, #43	@ 0x2b
 80080a0:	7019      	strb	r1, [r3, #0]
 80080a2:	7833      	ldrb	r3, [r6, #0]
 80080a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a6:	d016      	beq.n	80080d6 <_svfiprintf_r+0xfa>
 80080a8:	0035      	movs	r5, r6
 80080aa:	2100      	movs	r1, #0
 80080ac:	200a      	movs	r0, #10
 80080ae:	68e3      	ldr	r3, [r4, #12]
 80080b0:	782a      	ldrb	r2, [r5, #0]
 80080b2:	1c6e      	adds	r6, r5, #1
 80080b4:	3a30      	subs	r2, #48	@ 0x30
 80080b6:	2a09      	cmp	r2, #9
 80080b8:	d950      	bls.n	800815c <_svfiprintf_r+0x180>
 80080ba:	2900      	cmp	r1, #0
 80080bc:	d111      	bne.n	80080e2 <_svfiprintf_r+0x106>
 80080be:	e017      	b.n	80080f0 <_svfiprintf_r+0x114>
 80080c0:	3501      	adds	r5, #1
 80080c2:	e7af      	b.n	8008024 <_svfiprintf_r+0x48>
 80080c4:	9b05      	ldr	r3, [sp, #20]
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	1ac0      	subs	r0, r0, r3
 80080ca:	2301      	movs	r3, #1
 80080cc:	4083      	lsls	r3, r0
 80080ce:	4313      	orrs	r3, r2
 80080d0:	002e      	movs	r6, r5
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	e7cc      	b.n	8008070 <_svfiprintf_r+0x94>
 80080d6:	9b07      	ldr	r3, [sp, #28]
 80080d8:	1d19      	adds	r1, r3, #4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	9107      	str	r1, [sp, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db01      	blt.n	80080e6 <_svfiprintf_r+0x10a>
 80080e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e4:	e004      	b.n	80080f0 <_svfiprintf_r+0x114>
 80080e6:	425b      	negs	r3, r3
 80080e8:	60e3      	str	r3, [r4, #12]
 80080ea:	2302      	movs	r3, #2
 80080ec:	4313      	orrs	r3, r2
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	782b      	ldrb	r3, [r5, #0]
 80080f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f4:	d10c      	bne.n	8008110 <_svfiprintf_r+0x134>
 80080f6:	786b      	ldrb	r3, [r5, #1]
 80080f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080fa:	d134      	bne.n	8008166 <_svfiprintf_r+0x18a>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	3502      	adds	r5, #2
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9207      	str	r2, [sp, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	da01      	bge.n	800810e <_svfiprintf_r+0x132>
 800810a:	2301      	movs	r3, #1
 800810c:	425b      	negs	r3, r3
 800810e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008110:	4e2d      	ldr	r6, [pc, #180]	@ (80081c8 <_svfiprintf_r+0x1ec>)
 8008112:	2203      	movs	r2, #3
 8008114:	0030      	movs	r0, r6
 8008116:	7829      	ldrb	r1, [r5, #0]
 8008118:	f7fe fbbf 	bl	800689a <memchr>
 800811c:	2800      	cmp	r0, #0
 800811e:	d006      	beq.n	800812e <_svfiprintf_r+0x152>
 8008120:	2340      	movs	r3, #64	@ 0x40
 8008122:	1b80      	subs	r0, r0, r6
 8008124:	4083      	lsls	r3, r0
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	3501      	adds	r5, #1
 800812a:	4313      	orrs	r3, r2
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	7829      	ldrb	r1, [r5, #0]
 8008130:	2206      	movs	r2, #6
 8008132:	4826      	ldr	r0, [pc, #152]	@ (80081cc <_svfiprintf_r+0x1f0>)
 8008134:	1c6e      	adds	r6, r5, #1
 8008136:	7621      	strb	r1, [r4, #24]
 8008138:	f7fe fbaf 	bl	800689a <memchr>
 800813c:	2800      	cmp	r0, #0
 800813e:	d038      	beq.n	80081b2 <_svfiprintf_r+0x1d6>
 8008140:	4b23      	ldr	r3, [pc, #140]	@ (80081d0 <_svfiprintf_r+0x1f4>)
 8008142:	2b00      	cmp	r3, #0
 8008144:	d122      	bne.n	800818c <_svfiprintf_r+0x1b0>
 8008146:	2207      	movs	r2, #7
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	3307      	adds	r3, #7
 800814c:	4393      	bics	r3, r2
 800814e:	3308      	adds	r3, #8
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	6963      	ldr	r3, [r4, #20]
 8008154:	9a04      	ldr	r2, [sp, #16]
 8008156:	189b      	adds	r3, r3, r2
 8008158:	6163      	str	r3, [r4, #20]
 800815a:	e762      	b.n	8008022 <_svfiprintf_r+0x46>
 800815c:	4343      	muls	r3, r0
 800815e:	0035      	movs	r5, r6
 8008160:	2101      	movs	r1, #1
 8008162:	189b      	adds	r3, r3, r2
 8008164:	e7a4      	b.n	80080b0 <_svfiprintf_r+0xd4>
 8008166:	2300      	movs	r3, #0
 8008168:	200a      	movs	r0, #10
 800816a:	0019      	movs	r1, r3
 800816c:	3501      	adds	r5, #1
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	782a      	ldrb	r2, [r5, #0]
 8008172:	1c6e      	adds	r6, r5, #1
 8008174:	3a30      	subs	r2, #48	@ 0x30
 8008176:	2a09      	cmp	r2, #9
 8008178:	d903      	bls.n	8008182 <_svfiprintf_r+0x1a6>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0c8      	beq.n	8008110 <_svfiprintf_r+0x134>
 800817e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008180:	e7c6      	b.n	8008110 <_svfiprintf_r+0x134>
 8008182:	4341      	muls	r1, r0
 8008184:	0035      	movs	r5, r6
 8008186:	2301      	movs	r3, #1
 8008188:	1889      	adds	r1, r1, r2
 800818a:	e7f1      	b.n	8008170 <_svfiprintf_r+0x194>
 800818c:	aa07      	add	r2, sp, #28
 800818e:	9200      	str	r2, [sp, #0]
 8008190:	0021      	movs	r1, r4
 8008192:	003a      	movs	r2, r7
 8008194:	4b0f      	ldr	r3, [pc, #60]	@ (80081d4 <_svfiprintf_r+0x1f8>)
 8008196:	9803      	ldr	r0, [sp, #12]
 8008198:	f7fd fdf8 	bl	8005d8c <_printf_float>
 800819c:	9004      	str	r0, [sp, #16]
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	d1d6      	bne.n	8008152 <_svfiprintf_r+0x176>
 80081a4:	89bb      	ldrh	r3, [r7, #12]
 80081a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80081a8:	065b      	lsls	r3, r3, #25
 80081aa:	d500      	bpl.n	80081ae <_svfiprintf_r+0x1d2>
 80081ac:	e72c      	b.n	8008008 <_svfiprintf_r+0x2c>
 80081ae:	b021      	add	sp, #132	@ 0x84
 80081b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b2:	aa07      	add	r2, sp, #28
 80081b4:	9200      	str	r2, [sp, #0]
 80081b6:	0021      	movs	r1, r4
 80081b8:	003a      	movs	r2, r7
 80081ba:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <_svfiprintf_r+0x1f8>)
 80081bc:	9803      	ldr	r0, [sp, #12]
 80081be:	f7fe f893 	bl	80062e8 <_printf_i>
 80081c2:	e7eb      	b.n	800819c <_svfiprintf_r+0x1c0>
 80081c4:	0800ae58 	.word	0x0800ae58
 80081c8:	0800ae5e 	.word	0x0800ae5e
 80081cc:	0800ae62 	.word	0x0800ae62
 80081d0:	08005d8d 	.word	0x08005d8d
 80081d4:	08007f1d 	.word	0x08007f1d

080081d8 <__sflush_r>:
 80081d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081da:	220c      	movs	r2, #12
 80081dc:	5e8b      	ldrsh	r3, [r1, r2]
 80081de:	0005      	movs	r5, r0
 80081e0:	000c      	movs	r4, r1
 80081e2:	071a      	lsls	r2, r3, #28
 80081e4:	d456      	bmi.n	8008294 <__sflush_r+0xbc>
 80081e6:	684a      	ldr	r2, [r1, #4]
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	dc02      	bgt.n	80081f2 <__sflush_r+0x1a>
 80081ec:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	dd4e      	ble.n	8008290 <__sflush_r+0xb8>
 80081f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80081f4:	2f00      	cmp	r7, #0
 80081f6:	d04b      	beq.n	8008290 <__sflush_r+0xb8>
 80081f8:	2200      	movs	r2, #0
 80081fa:	2080      	movs	r0, #128	@ 0x80
 80081fc:	682e      	ldr	r6, [r5, #0]
 80081fe:	602a      	str	r2, [r5, #0]
 8008200:	001a      	movs	r2, r3
 8008202:	0140      	lsls	r0, r0, #5
 8008204:	6a21      	ldr	r1, [r4, #32]
 8008206:	4002      	ands	r2, r0
 8008208:	4203      	tst	r3, r0
 800820a:	d033      	beq.n	8008274 <__sflush_r+0x9c>
 800820c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	075b      	lsls	r3, r3, #29
 8008212:	d506      	bpl.n	8008222 <__sflush_r+0x4a>
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <__sflush_r+0x4a>
 800821e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	2300      	movs	r3, #0
 8008224:	0028      	movs	r0, r5
 8008226:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	47b8      	blx	r7
 800822c:	89a2      	ldrh	r2, [r4, #12]
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d106      	bne.n	8008240 <__sflush_r+0x68>
 8008232:	6829      	ldr	r1, [r5, #0]
 8008234:	291d      	cmp	r1, #29
 8008236:	d846      	bhi.n	80082c6 <__sflush_r+0xee>
 8008238:	4b29      	ldr	r3, [pc, #164]	@ (80082e0 <__sflush_r+0x108>)
 800823a:	410b      	asrs	r3, r1
 800823c:	07db      	lsls	r3, r3, #31
 800823e:	d442      	bmi.n	80082c6 <__sflush_r+0xee>
 8008240:	2300      	movs	r3, #0
 8008242:	6063      	str	r3, [r4, #4]
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	04d2      	lsls	r2, r2, #19
 800824a:	d505      	bpl.n	8008258 <__sflush_r+0x80>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <__sflush_r+0x7e>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d100      	bne.n	8008258 <__sflush_r+0x80>
 8008256:	6560      	str	r0, [r4, #84]	@ 0x54
 8008258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800825a:	602e      	str	r6, [r5, #0]
 800825c:	2900      	cmp	r1, #0
 800825e:	d017      	beq.n	8008290 <__sflush_r+0xb8>
 8008260:	0023      	movs	r3, r4
 8008262:	3344      	adds	r3, #68	@ 0x44
 8008264:	4299      	cmp	r1, r3
 8008266:	d002      	beq.n	800826e <__sflush_r+0x96>
 8008268:	0028      	movs	r0, r5
 800826a:	f7ff f9ad 	bl	80075c8 <_free_r>
 800826e:	2300      	movs	r3, #0
 8008270:	6363      	str	r3, [r4, #52]	@ 0x34
 8008272:	e00d      	b.n	8008290 <__sflush_r+0xb8>
 8008274:	2301      	movs	r3, #1
 8008276:	0028      	movs	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	0002      	movs	r2, r0
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d1c6      	bne.n	800820e <__sflush_r+0x36>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0c3      	beq.n	800820e <__sflush_r+0x36>
 8008286:	2b1d      	cmp	r3, #29
 8008288:	d001      	beq.n	800828e <__sflush_r+0xb6>
 800828a:	2b16      	cmp	r3, #22
 800828c:	d11a      	bne.n	80082c4 <__sflush_r+0xec>
 800828e:	602e      	str	r6, [r5, #0]
 8008290:	2000      	movs	r0, #0
 8008292:	e01e      	b.n	80082d2 <__sflush_r+0xfa>
 8008294:	690e      	ldr	r6, [r1, #16]
 8008296:	2e00      	cmp	r6, #0
 8008298:	d0fa      	beq.n	8008290 <__sflush_r+0xb8>
 800829a:	680f      	ldr	r7, [r1, #0]
 800829c:	600e      	str	r6, [r1, #0]
 800829e:	1bba      	subs	r2, r7, r6
 80082a0:	9201      	str	r2, [sp, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	079b      	lsls	r3, r3, #30
 80082a6:	d100      	bne.n	80082aa <__sflush_r+0xd2>
 80082a8:	694a      	ldr	r2, [r1, #20]
 80082aa:	60a2      	str	r2, [r4, #8]
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	ddee      	ble.n	8008290 <__sflush_r+0xb8>
 80082b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082b4:	0032      	movs	r2, r6
 80082b6:	001f      	movs	r7, r3
 80082b8:	0028      	movs	r0, r5
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	6a21      	ldr	r1, [r4, #32]
 80082be:	47b8      	blx	r7
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dc07      	bgt.n	80082d4 <__sflush_r+0xfc>
 80082c4:	89a2      	ldrh	r2, [r4, #12]
 80082c6:	2340      	movs	r3, #64	@ 0x40
 80082c8:	2001      	movs	r0, #1
 80082ca:	4313      	orrs	r3, r2
 80082cc:	b21b      	sxth	r3, r3
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	4240      	negs	r0, r0
 80082d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	1836      	adds	r6, r6, r0
 80082d8:	1a1b      	subs	r3, r3, r0
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	e7e6      	b.n	80082ac <__sflush_r+0xd4>
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	dfbffffe 	.word	0xdfbffffe

080082e4 <_fflush_r>:
 80082e4:	690b      	ldr	r3, [r1, #16]
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	0005      	movs	r5, r0
 80082ea:	000c      	movs	r4, r1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <_fflush_r+0x12>
 80082f0:	2500      	movs	r5, #0
 80082f2:	0028      	movs	r0, r5
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d004      	beq.n	8008304 <_fflush_r+0x20>
 80082fa:	6a03      	ldr	r3, [r0, #32]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <_fflush_r+0x20>
 8008300:	f7fe f990 	bl	8006624 <__sinit>
 8008304:	220c      	movs	r2, #12
 8008306:	5ea3      	ldrsh	r3, [r4, r2]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0f1      	beq.n	80082f0 <_fflush_r+0xc>
 800830c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800830e:	07d2      	lsls	r2, r2, #31
 8008310:	d404      	bmi.n	800831c <_fflush_r+0x38>
 8008312:	059b      	lsls	r3, r3, #22
 8008314:	d402      	bmi.n	800831c <_fflush_r+0x38>
 8008316:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008318:	f7fe fabd 	bl	8006896 <__retarget_lock_acquire_recursive>
 800831c:	0028      	movs	r0, r5
 800831e:	0021      	movs	r1, r4
 8008320:	f7ff ff5a 	bl	80081d8 <__sflush_r>
 8008324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008326:	0005      	movs	r5, r0
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d4e2      	bmi.n	80082f2 <_fflush_r+0xe>
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	059b      	lsls	r3, r3, #22
 8008330:	d4df      	bmi.n	80082f2 <_fflush_r+0xe>
 8008332:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008334:	f7fe fab0 	bl	8006898 <__retarget_lock_release_recursive>
 8008338:	e7db      	b.n	80082f2 <_fflush_r+0xe>
	...

0800833c <_sbrk_r>:
 800833c:	2300      	movs	r3, #0
 800833e:	b570      	push	{r4, r5, r6, lr}
 8008340:	4d06      	ldr	r5, [pc, #24]	@ (800835c <_sbrk_r+0x20>)
 8008342:	0004      	movs	r4, r0
 8008344:	0008      	movs	r0, r1
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	f7fa febc 	bl	80030c4 <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d103      	bne.n	8008358 <_sbrk_r+0x1c>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d000      	beq.n	8008358 <_sbrk_r+0x1c>
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	2000082c 	.word	0x2000082c

08008360 <__assert_func>:
 8008360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008362:	0014      	movs	r4, r2
 8008364:	001a      	movs	r2, r3
 8008366:	4b09      	ldr	r3, [pc, #36]	@ (800838c <__assert_func+0x2c>)
 8008368:	0005      	movs	r5, r0
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	000e      	movs	r6, r1
 800836e:	68d8      	ldr	r0, [r3, #12]
 8008370:	4b07      	ldr	r3, [pc, #28]	@ (8008390 <__assert_func+0x30>)
 8008372:	2c00      	cmp	r4, #0
 8008374:	d101      	bne.n	800837a <__assert_func+0x1a>
 8008376:	4b07      	ldr	r3, [pc, #28]	@ (8008394 <__assert_func+0x34>)
 8008378:	001c      	movs	r4, r3
 800837a:	4907      	ldr	r1, [pc, #28]	@ (8008398 <__assert_func+0x38>)
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	9402      	str	r4, [sp, #8]
 8008380:	002b      	movs	r3, r5
 8008382:	9600      	str	r6, [sp, #0]
 8008384:	f000 f886 	bl	8008494 <fiprintf>
 8008388:	f000 f894 	bl	80084b4 <abort>
 800838c:	20000028 	.word	0x20000028
 8008390:	0800ae73 	.word	0x0800ae73
 8008394:	0800aeae 	.word	0x0800aeae
 8008398:	0800ae80 	.word	0x0800ae80

0800839c <_calloc_r>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	0c0b      	lsrs	r3, r1, #16
 80083a0:	0c15      	lsrs	r5, r2, #16
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d11e      	bne.n	80083e4 <_calloc_r+0x48>
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	d10c      	bne.n	80083c4 <_calloc_r+0x28>
 80083aa:	b289      	uxth	r1, r1
 80083ac:	b294      	uxth	r4, r2
 80083ae:	434c      	muls	r4, r1
 80083b0:	0021      	movs	r1, r4
 80083b2:	f7ff f97f 	bl	80076b4 <_malloc_r>
 80083b6:	1e05      	subs	r5, r0, #0
 80083b8:	d01a      	beq.n	80083f0 <_calloc_r+0x54>
 80083ba:	0022      	movs	r2, r4
 80083bc:	2100      	movs	r1, #0
 80083be:	f7fe f9e4 	bl	800678a <memset>
 80083c2:	e016      	b.n	80083f2 <_calloc_r+0x56>
 80083c4:	1c2b      	adds	r3, r5, #0
 80083c6:	1c0c      	adds	r4, r1, #0
 80083c8:	b289      	uxth	r1, r1
 80083ca:	b292      	uxth	r2, r2
 80083cc:	434a      	muls	r2, r1
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	b2a1      	uxth	r1, r4
 80083d2:	4359      	muls	r1, r3
 80083d4:	0c14      	lsrs	r4, r2, #16
 80083d6:	190c      	adds	r4, r1, r4
 80083d8:	0c23      	lsrs	r3, r4, #16
 80083da:	d107      	bne.n	80083ec <_calloc_r+0x50>
 80083dc:	0424      	lsls	r4, r4, #16
 80083de:	b292      	uxth	r2, r2
 80083e0:	4314      	orrs	r4, r2
 80083e2:	e7e5      	b.n	80083b0 <_calloc_r+0x14>
 80083e4:	2d00      	cmp	r5, #0
 80083e6:	d101      	bne.n	80083ec <_calloc_r+0x50>
 80083e8:	1c14      	adds	r4, r2, #0
 80083ea:	e7ed      	b.n	80083c8 <_calloc_r+0x2c>
 80083ec:	230c      	movs	r3, #12
 80083ee:	6003      	str	r3, [r0, #0]
 80083f0:	2500      	movs	r5, #0
 80083f2:	0028      	movs	r0, r5
 80083f4:	bd70      	pop	{r4, r5, r6, pc}

080083f6 <__ascii_mbtowc>:
 80083f6:	b082      	sub	sp, #8
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d100      	bne.n	80083fe <__ascii_mbtowc+0x8>
 80083fc:	a901      	add	r1, sp, #4
 80083fe:	1e10      	subs	r0, r2, #0
 8008400:	d006      	beq.n	8008410 <__ascii_mbtowc+0x1a>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d006      	beq.n	8008414 <__ascii_mbtowc+0x1e>
 8008406:	7813      	ldrb	r3, [r2, #0]
 8008408:	600b      	str	r3, [r1, #0]
 800840a:	7810      	ldrb	r0, [r2, #0]
 800840c:	1e43      	subs	r3, r0, #1
 800840e:	4198      	sbcs	r0, r3
 8008410:	b002      	add	sp, #8
 8008412:	4770      	bx	lr
 8008414:	2002      	movs	r0, #2
 8008416:	4240      	negs	r0, r0
 8008418:	e7fa      	b.n	8008410 <__ascii_mbtowc+0x1a>

0800841a <_realloc_r>:
 800841a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800841c:	0006      	movs	r6, r0
 800841e:	000c      	movs	r4, r1
 8008420:	0015      	movs	r5, r2
 8008422:	2900      	cmp	r1, #0
 8008424:	d105      	bne.n	8008432 <_realloc_r+0x18>
 8008426:	0011      	movs	r1, r2
 8008428:	f7ff f944 	bl	80076b4 <_malloc_r>
 800842c:	0004      	movs	r4, r0
 800842e:	0020      	movs	r0, r4
 8008430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008432:	2a00      	cmp	r2, #0
 8008434:	d103      	bne.n	800843e <_realloc_r+0x24>
 8008436:	f7ff f8c7 	bl	80075c8 <_free_r>
 800843a:	2400      	movs	r4, #0
 800843c:	e7f7      	b.n	800842e <_realloc_r+0x14>
 800843e:	f000 f840 	bl	80084c2 <_malloc_usable_size_r>
 8008442:	0007      	movs	r7, r0
 8008444:	4285      	cmp	r5, r0
 8008446:	d802      	bhi.n	800844e <_realloc_r+0x34>
 8008448:	0843      	lsrs	r3, r0, #1
 800844a:	42ab      	cmp	r3, r5
 800844c:	d3ef      	bcc.n	800842e <_realloc_r+0x14>
 800844e:	0029      	movs	r1, r5
 8008450:	0030      	movs	r0, r6
 8008452:	f7ff f92f 	bl	80076b4 <_malloc_r>
 8008456:	9001      	str	r0, [sp, #4]
 8008458:	2800      	cmp	r0, #0
 800845a:	d0ee      	beq.n	800843a <_realloc_r+0x20>
 800845c:	002a      	movs	r2, r5
 800845e:	42bd      	cmp	r5, r7
 8008460:	d900      	bls.n	8008464 <_realloc_r+0x4a>
 8008462:	003a      	movs	r2, r7
 8008464:	0021      	movs	r1, r4
 8008466:	9801      	ldr	r0, [sp, #4]
 8008468:	f7fe fa22 	bl	80068b0 <memcpy>
 800846c:	0021      	movs	r1, r4
 800846e:	0030      	movs	r0, r6
 8008470:	f7ff f8aa 	bl	80075c8 <_free_r>
 8008474:	9c01      	ldr	r4, [sp, #4]
 8008476:	e7da      	b.n	800842e <_realloc_r+0x14>

08008478 <__ascii_wctomb>:
 8008478:	0003      	movs	r3, r0
 800847a:	1e08      	subs	r0, r1, #0
 800847c:	d005      	beq.n	800848a <__ascii_wctomb+0x12>
 800847e:	2aff      	cmp	r2, #255	@ 0xff
 8008480:	d904      	bls.n	800848c <__ascii_wctomb+0x14>
 8008482:	228a      	movs	r2, #138	@ 0x8a
 8008484:	2001      	movs	r0, #1
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	4240      	negs	r0, r0
 800848a:	4770      	bx	lr
 800848c:	2001      	movs	r0, #1
 800848e:	700a      	strb	r2, [r1, #0]
 8008490:	e7fb      	b.n	800848a <__ascii_wctomb+0x12>
	...

08008494 <fiprintf>:
 8008494:	b40e      	push	{r1, r2, r3}
 8008496:	b517      	push	{r0, r1, r2, r4, lr}
 8008498:	4c05      	ldr	r4, [pc, #20]	@ (80084b0 <fiprintf+0x1c>)
 800849a:	ab05      	add	r3, sp, #20
 800849c:	cb04      	ldmia	r3!, {r2}
 800849e:	0001      	movs	r1, r0
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	f000 f83c 	bl	8008520 <_vfiprintf_r>
 80084a8:	bc1e      	pop	{r1, r2, r3, r4}
 80084aa:	bc08      	pop	{r3}
 80084ac:	b003      	add	sp, #12
 80084ae:	4718      	bx	r3
 80084b0:	20000028 	.word	0x20000028

080084b4 <abort>:
 80084b4:	2006      	movs	r0, #6
 80084b6:	b510      	push	{r4, lr}
 80084b8:	f000 fa18 	bl	80088ec <raise>
 80084bc:	2001      	movs	r0, #1
 80084be:	f7fa fd8e 	bl	8002fde <_exit>

080084c2 <_malloc_usable_size_r>:
 80084c2:	1f0b      	subs	r3, r1, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	1f18      	subs	r0, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da01      	bge.n	80084d0 <_malloc_usable_size_r+0xe>
 80084cc:	580b      	ldr	r3, [r1, r0]
 80084ce:	18c0      	adds	r0, r0, r3
 80084d0:	4770      	bx	lr

080084d2 <__sfputc_r>:
 80084d2:	6893      	ldr	r3, [r2, #8]
 80084d4:	b510      	push	{r4, lr}
 80084d6:	3b01      	subs	r3, #1
 80084d8:	6093      	str	r3, [r2, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da04      	bge.n	80084e8 <__sfputc_r+0x16>
 80084de:	6994      	ldr	r4, [r2, #24]
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	db07      	blt.n	80084f4 <__sfputc_r+0x22>
 80084e4:	290a      	cmp	r1, #10
 80084e6:	d005      	beq.n	80084f4 <__sfputc_r+0x22>
 80084e8:	6813      	ldr	r3, [r2, #0]
 80084ea:	1c58      	adds	r0, r3, #1
 80084ec:	6010      	str	r0, [r2, #0]
 80084ee:	7019      	strb	r1, [r3, #0]
 80084f0:	0008      	movs	r0, r1
 80084f2:	bd10      	pop	{r4, pc}
 80084f4:	f000 f930 	bl	8008758 <__swbuf_r>
 80084f8:	0001      	movs	r1, r0
 80084fa:	e7f9      	b.n	80084f0 <__sfputc_r+0x1e>

080084fc <__sfputs_r>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	0006      	movs	r6, r0
 8008500:	000f      	movs	r7, r1
 8008502:	0014      	movs	r4, r2
 8008504:	18d5      	adds	r5, r2, r3
 8008506:	42ac      	cmp	r4, r5
 8008508:	d101      	bne.n	800850e <__sfputs_r+0x12>
 800850a:	2000      	movs	r0, #0
 800850c:	e007      	b.n	800851e <__sfputs_r+0x22>
 800850e:	7821      	ldrb	r1, [r4, #0]
 8008510:	003a      	movs	r2, r7
 8008512:	0030      	movs	r0, r6
 8008514:	f7ff ffdd 	bl	80084d2 <__sfputc_r>
 8008518:	3401      	adds	r4, #1
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	d1f3      	bne.n	8008506 <__sfputs_r+0xa>
 800851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008520 <_vfiprintf_r>:
 8008520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008522:	b0a1      	sub	sp, #132	@ 0x84
 8008524:	000f      	movs	r7, r1
 8008526:	0015      	movs	r5, r2
 8008528:	001e      	movs	r6, r3
 800852a:	9003      	str	r0, [sp, #12]
 800852c:	2800      	cmp	r0, #0
 800852e:	d004      	beq.n	800853a <_vfiprintf_r+0x1a>
 8008530:	6a03      	ldr	r3, [r0, #32]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <_vfiprintf_r+0x1a>
 8008536:	f7fe f875 	bl	8006624 <__sinit>
 800853a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800853c:	07db      	lsls	r3, r3, #31
 800853e:	d405      	bmi.n	800854c <_vfiprintf_r+0x2c>
 8008540:	89bb      	ldrh	r3, [r7, #12]
 8008542:	059b      	lsls	r3, r3, #22
 8008544:	d402      	bmi.n	800854c <_vfiprintf_r+0x2c>
 8008546:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008548:	f7fe f9a5 	bl	8006896 <__retarget_lock_acquire_recursive>
 800854c:	89bb      	ldrh	r3, [r7, #12]
 800854e:	071b      	lsls	r3, r3, #28
 8008550:	d502      	bpl.n	8008558 <_vfiprintf_r+0x38>
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d113      	bne.n	8008580 <_vfiprintf_r+0x60>
 8008558:	0039      	movs	r1, r7
 800855a:	9803      	ldr	r0, [sp, #12]
 800855c:	f000 f93e 	bl	80087dc <__swsetup_r>
 8008560:	2800      	cmp	r0, #0
 8008562:	d00d      	beq.n	8008580 <_vfiprintf_r+0x60>
 8008564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008566:	07db      	lsls	r3, r3, #31
 8008568:	d503      	bpl.n	8008572 <_vfiprintf_r+0x52>
 800856a:	2001      	movs	r0, #1
 800856c:	4240      	negs	r0, r0
 800856e:	b021      	add	sp, #132	@ 0x84
 8008570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008572:	89bb      	ldrh	r3, [r7, #12]
 8008574:	059b      	lsls	r3, r3, #22
 8008576:	d4f8      	bmi.n	800856a <_vfiprintf_r+0x4a>
 8008578:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800857a:	f7fe f98d 	bl	8006898 <__retarget_lock_release_recursive>
 800857e:	e7f4      	b.n	800856a <_vfiprintf_r+0x4a>
 8008580:	2300      	movs	r3, #0
 8008582:	ac08      	add	r4, sp, #32
 8008584:	6163      	str	r3, [r4, #20]
 8008586:	3320      	adds	r3, #32
 8008588:	7663      	strb	r3, [r4, #25]
 800858a:	3310      	adds	r3, #16
 800858c:	76a3      	strb	r3, [r4, #26]
 800858e:	9607      	str	r6, [sp, #28]
 8008590:	002e      	movs	r6, r5
 8008592:	7833      	ldrb	r3, [r6, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <_vfiprintf_r+0x7c>
 8008598:	2b25      	cmp	r3, #37	@ 0x25
 800859a:	d148      	bne.n	800862e <_vfiprintf_r+0x10e>
 800859c:	1b73      	subs	r3, r6, r5
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	42ae      	cmp	r6, r5
 80085a2:	d00b      	beq.n	80085bc <_vfiprintf_r+0x9c>
 80085a4:	002a      	movs	r2, r5
 80085a6:	0039      	movs	r1, r7
 80085a8:	9803      	ldr	r0, [sp, #12]
 80085aa:	f7ff ffa7 	bl	80084fc <__sfputs_r>
 80085ae:	3001      	adds	r0, #1
 80085b0:	d100      	bne.n	80085b4 <_vfiprintf_r+0x94>
 80085b2:	e0ae      	b.n	8008712 <_vfiprintf_r+0x1f2>
 80085b4:	6963      	ldr	r3, [r4, #20]
 80085b6:	9a05      	ldr	r2, [sp, #20]
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	6163      	str	r3, [r4, #20]
 80085bc:	7833      	ldrb	r3, [r6, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d100      	bne.n	80085c4 <_vfiprintf_r+0xa4>
 80085c2:	e0a6      	b.n	8008712 <_vfiprintf_r+0x1f2>
 80085c4:	2201      	movs	r2, #1
 80085c6:	2300      	movs	r3, #0
 80085c8:	4252      	negs	r2, r2
 80085ca:	6062      	str	r2, [r4, #4]
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	3254      	adds	r2, #84	@ 0x54
 80085d0:	1852      	adds	r2, r2, r1
 80085d2:	1c75      	adds	r5, r6, #1
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	60e3      	str	r3, [r4, #12]
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80085de:	4b59      	ldr	r3, [pc, #356]	@ (8008744 <_vfiprintf_r+0x224>)
 80085e0:	2205      	movs	r2, #5
 80085e2:	0018      	movs	r0, r3
 80085e4:	7829      	ldrb	r1, [r5, #0]
 80085e6:	9305      	str	r3, [sp, #20]
 80085e8:	f7fe f957 	bl	800689a <memchr>
 80085ec:	1c6e      	adds	r6, r5, #1
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d11f      	bne.n	8008632 <_vfiprintf_r+0x112>
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	06d3      	lsls	r3, r2, #27
 80085f6:	d504      	bpl.n	8008602 <_vfiprintf_r+0xe2>
 80085f8:	2353      	movs	r3, #83	@ 0x53
 80085fa:	a904      	add	r1, sp, #16
 80085fc:	185b      	adds	r3, r3, r1
 80085fe:	2120      	movs	r1, #32
 8008600:	7019      	strb	r1, [r3, #0]
 8008602:	0713      	lsls	r3, r2, #28
 8008604:	d504      	bpl.n	8008610 <_vfiprintf_r+0xf0>
 8008606:	2353      	movs	r3, #83	@ 0x53
 8008608:	a904      	add	r1, sp, #16
 800860a:	185b      	adds	r3, r3, r1
 800860c:	212b      	movs	r1, #43	@ 0x2b
 800860e:	7019      	strb	r1, [r3, #0]
 8008610:	782b      	ldrb	r3, [r5, #0]
 8008612:	2b2a      	cmp	r3, #42	@ 0x2a
 8008614:	d016      	beq.n	8008644 <_vfiprintf_r+0x124>
 8008616:	002e      	movs	r6, r5
 8008618:	2100      	movs	r1, #0
 800861a:	200a      	movs	r0, #10
 800861c:	68e3      	ldr	r3, [r4, #12]
 800861e:	7832      	ldrb	r2, [r6, #0]
 8008620:	1c75      	adds	r5, r6, #1
 8008622:	3a30      	subs	r2, #48	@ 0x30
 8008624:	2a09      	cmp	r2, #9
 8008626:	d950      	bls.n	80086ca <_vfiprintf_r+0x1aa>
 8008628:	2900      	cmp	r1, #0
 800862a:	d111      	bne.n	8008650 <_vfiprintf_r+0x130>
 800862c:	e017      	b.n	800865e <_vfiprintf_r+0x13e>
 800862e:	3601      	adds	r6, #1
 8008630:	e7af      	b.n	8008592 <_vfiprintf_r+0x72>
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	1ac0      	subs	r0, r0, r3
 8008638:	2301      	movs	r3, #1
 800863a:	4083      	lsls	r3, r0
 800863c:	4313      	orrs	r3, r2
 800863e:	0035      	movs	r5, r6
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	e7cc      	b.n	80085de <_vfiprintf_r+0xbe>
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	1d19      	adds	r1, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	9107      	str	r1, [sp, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	db01      	blt.n	8008654 <_vfiprintf_r+0x134>
 8008650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008652:	e004      	b.n	800865e <_vfiprintf_r+0x13e>
 8008654:	425b      	negs	r3, r3
 8008656:	60e3      	str	r3, [r4, #12]
 8008658:	2302      	movs	r3, #2
 800865a:	4313      	orrs	r3, r2
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	7833      	ldrb	r3, [r6, #0]
 8008660:	2b2e      	cmp	r3, #46	@ 0x2e
 8008662:	d10c      	bne.n	800867e <_vfiprintf_r+0x15e>
 8008664:	7873      	ldrb	r3, [r6, #1]
 8008666:	2b2a      	cmp	r3, #42	@ 0x2a
 8008668:	d134      	bne.n	80086d4 <_vfiprintf_r+0x1b4>
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	3602      	adds	r6, #2
 800866e:	1d1a      	adds	r2, r3, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	9207      	str	r2, [sp, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	da01      	bge.n	800867c <_vfiprintf_r+0x15c>
 8008678:	2301      	movs	r3, #1
 800867a:	425b      	negs	r3, r3
 800867c:	9309      	str	r3, [sp, #36]	@ 0x24
 800867e:	4d32      	ldr	r5, [pc, #200]	@ (8008748 <_vfiprintf_r+0x228>)
 8008680:	2203      	movs	r2, #3
 8008682:	0028      	movs	r0, r5
 8008684:	7831      	ldrb	r1, [r6, #0]
 8008686:	f7fe f908 	bl	800689a <memchr>
 800868a:	2800      	cmp	r0, #0
 800868c:	d006      	beq.n	800869c <_vfiprintf_r+0x17c>
 800868e:	2340      	movs	r3, #64	@ 0x40
 8008690:	1b40      	subs	r0, r0, r5
 8008692:	4083      	lsls	r3, r0
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	3601      	adds	r6, #1
 8008698:	4313      	orrs	r3, r2
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	7831      	ldrb	r1, [r6, #0]
 800869e:	2206      	movs	r2, #6
 80086a0:	482a      	ldr	r0, [pc, #168]	@ (800874c <_vfiprintf_r+0x22c>)
 80086a2:	1c75      	adds	r5, r6, #1
 80086a4:	7621      	strb	r1, [r4, #24]
 80086a6:	f7fe f8f8 	bl	800689a <memchr>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d040      	beq.n	8008730 <_vfiprintf_r+0x210>
 80086ae:	4b28      	ldr	r3, [pc, #160]	@ (8008750 <_vfiprintf_r+0x230>)
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d122      	bne.n	80086fa <_vfiprintf_r+0x1da>
 80086b4:	2207      	movs	r2, #7
 80086b6:	9b07      	ldr	r3, [sp, #28]
 80086b8:	3307      	adds	r3, #7
 80086ba:	4393      	bics	r3, r2
 80086bc:	3308      	adds	r3, #8
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	6963      	ldr	r3, [r4, #20]
 80086c2:	9a04      	ldr	r2, [sp, #16]
 80086c4:	189b      	adds	r3, r3, r2
 80086c6:	6163      	str	r3, [r4, #20]
 80086c8:	e762      	b.n	8008590 <_vfiprintf_r+0x70>
 80086ca:	4343      	muls	r3, r0
 80086cc:	002e      	movs	r6, r5
 80086ce:	2101      	movs	r1, #1
 80086d0:	189b      	adds	r3, r3, r2
 80086d2:	e7a4      	b.n	800861e <_vfiprintf_r+0xfe>
 80086d4:	2300      	movs	r3, #0
 80086d6:	200a      	movs	r0, #10
 80086d8:	0019      	movs	r1, r3
 80086da:	3601      	adds	r6, #1
 80086dc:	6063      	str	r3, [r4, #4]
 80086de:	7832      	ldrb	r2, [r6, #0]
 80086e0:	1c75      	adds	r5, r6, #1
 80086e2:	3a30      	subs	r2, #48	@ 0x30
 80086e4:	2a09      	cmp	r2, #9
 80086e6:	d903      	bls.n	80086f0 <_vfiprintf_r+0x1d0>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0c8      	beq.n	800867e <_vfiprintf_r+0x15e>
 80086ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80086ee:	e7c6      	b.n	800867e <_vfiprintf_r+0x15e>
 80086f0:	4341      	muls	r1, r0
 80086f2:	002e      	movs	r6, r5
 80086f4:	2301      	movs	r3, #1
 80086f6:	1889      	adds	r1, r1, r2
 80086f8:	e7f1      	b.n	80086de <_vfiprintf_r+0x1be>
 80086fa:	aa07      	add	r2, sp, #28
 80086fc:	9200      	str	r2, [sp, #0]
 80086fe:	0021      	movs	r1, r4
 8008700:	003a      	movs	r2, r7
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <_vfiprintf_r+0x234>)
 8008704:	9803      	ldr	r0, [sp, #12]
 8008706:	f7fd fb41 	bl	8005d8c <_printf_float>
 800870a:	9004      	str	r0, [sp, #16]
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	3301      	adds	r3, #1
 8008710:	d1d6      	bne.n	80086c0 <_vfiprintf_r+0x1a0>
 8008712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	d405      	bmi.n	8008724 <_vfiprintf_r+0x204>
 8008718:	89bb      	ldrh	r3, [r7, #12]
 800871a:	059b      	lsls	r3, r3, #22
 800871c:	d402      	bmi.n	8008724 <_vfiprintf_r+0x204>
 800871e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008720:	f7fe f8ba 	bl	8006898 <__retarget_lock_release_recursive>
 8008724:	89bb      	ldrh	r3, [r7, #12]
 8008726:	065b      	lsls	r3, r3, #25
 8008728:	d500      	bpl.n	800872c <_vfiprintf_r+0x20c>
 800872a:	e71e      	b.n	800856a <_vfiprintf_r+0x4a>
 800872c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800872e:	e71e      	b.n	800856e <_vfiprintf_r+0x4e>
 8008730:	aa07      	add	r2, sp, #28
 8008732:	9200      	str	r2, [sp, #0]
 8008734:	0021      	movs	r1, r4
 8008736:	003a      	movs	r2, r7
 8008738:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <_vfiprintf_r+0x234>)
 800873a:	9803      	ldr	r0, [sp, #12]
 800873c:	f7fd fdd4 	bl	80062e8 <_printf_i>
 8008740:	e7e3      	b.n	800870a <_vfiprintf_r+0x1ea>
 8008742:	46c0      	nop			@ (mov r8, r8)
 8008744:	0800ae58 	.word	0x0800ae58
 8008748:	0800ae5e 	.word	0x0800ae5e
 800874c:	0800ae62 	.word	0x0800ae62
 8008750:	08005d8d 	.word	0x08005d8d
 8008754:	080084fd 	.word	0x080084fd

08008758 <__swbuf_r>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	0006      	movs	r6, r0
 800875c:	000d      	movs	r5, r1
 800875e:	0014      	movs	r4, r2
 8008760:	2800      	cmp	r0, #0
 8008762:	d004      	beq.n	800876e <__swbuf_r+0x16>
 8008764:	6a03      	ldr	r3, [r0, #32]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <__swbuf_r+0x16>
 800876a:	f7fd ff5b 	bl	8006624 <__sinit>
 800876e:	69a3      	ldr	r3, [r4, #24]
 8008770:	60a3      	str	r3, [r4, #8]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	071b      	lsls	r3, r3, #28
 8008776:	d502      	bpl.n	800877e <__swbuf_r+0x26>
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <__swbuf_r+0x3a>
 800877e:	0021      	movs	r1, r4
 8008780:	0030      	movs	r0, r6
 8008782:	f000 f82b 	bl	80087dc <__swsetup_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	d003      	beq.n	8008792 <__swbuf_r+0x3a>
 800878a:	2501      	movs	r5, #1
 800878c:	426d      	negs	r5, r5
 800878e:	0028      	movs	r0, r5
 8008790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	b2ef      	uxtb	r7, r5
 8008798:	1ac0      	subs	r0, r0, r3
 800879a:	6963      	ldr	r3, [r4, #20]
 800879c:	b2ed      	uxtb	r5, r5
 800879e:	4283      	cmp	r3, r0
 80087a0:	dc05      	bgt.n	80087ae <__swbuf_r+0x56>
 80087a2:	0021      	movs	r1, r4
 80087a4:	0030      	movs	r0, r6
 80087a6:	f7ff fd9d 	bl	80082e4 <_fflush_r>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d1ed      	bne.n	800878a <__swbuf_r+0x32>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	3001      	adds	r0, #1
 80087b2:	3b01      	subs	r3, #1
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	701f      	strb	r7, [r3, #0]
 80087be:	6963      	ldr	r3, [r4, #20]
 80087c0:	4283      	cmp	r3, r0
 80087c2:	d004      	beq.n	80087ce <__swbuf_r+0x76>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	07db      	lsls	r3, r3, #31
 80087c8:	d5e1      	bpl.n	800878e <__swbuf_r+0x36>
 80087ca:	2d0a      	cmp	r5, #10
 80087cc:	d1df      	bne.n	800878e <__swbuf_r+0x36>
 80087ce:	0021      	movs	r1, r4
 80087d0:	0030      	movs	r0, r6
 80087d2:	f7ff fd87 	bl	80082e4 <_fflush_r>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0d9      	beq.n	800878e <__swbuf_r+0x36>
 80087da:	e7d6      	b.n	800878a <__swbuf_r+0x32>

080087dc <__swsetup_r>:
 80087dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008894 <__swsetup_r+0xb8>)
 80087de:	b570      	push	{r4, r5, r6, lr}
 80087e0:	0005      	movs	r5, r0
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	000c      	movs	r4, r1
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d004      	beq.n	80087f4 <__swsetup_r+0x18>
 80087ea:	6a03      	ldr	r3, [r0, #32]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <__swsetup_r+0x18>
 80087f0:	f7fd ff18 	bl	8006624 <__sinit>
 80087f4:	230c      	movs	r3, #12
 80087f6:	5ee2      	ldrsh	r2, [r4, r3]
 80087f8:	0713      	lsls	r3, r2, #28
 80087fa:	d423      	bmi.n	8008844 <__swsetup_r+0x68>
 80087fc:	06d3      	lsls	r3, r2, #27
 80087fe:	d407      	bmi.n	8008810 <__swsetup_r+0x34>
 8008800:	2309      	movs	r3, #9
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	2340      	movs	r3, #64	@ 0x40
 8008806:	2001      	movs	r0, #1
 8008808:	4313      	orrs	r3, r2
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	4240      	negs	r0, r0
 800880e:	e03a      	b.n	8008886 <__swsetup_r+0xaa>
 8008810:	0752      	lsls	r2, r2, #29
 8008812:	d513      	bpl.n	800883c <__swsetup_r+0x60>
 8008814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008816:	2900      	cmp	r1, #0
 8008818:	d008      	beq.n	800882c <__swsetup_r+0x50>
 800881a:	0023      	movs	r3, r4
 800881c:	3344      	adds	r3, #68	@ 0x44
 800881e:	4299      	cmp	r1, r3
 8008820:	d002      	beq.n	8008828 <__swsetup_r+0x4c>
 8008822:	0028      	movs	r0, r5
 8008824:	f7fe fed0 	bl	80075c8 <_free_r>
 8008828:	2300      	movs	r3, #0
 800882a:	6363      	str	r3, [r4, #52]	@ 0x34
 800882c:	2224      	movs	r2, #36	@ 0x24
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	4393      	bics	r3, r2
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	2300      	movs	r3, #0
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	2308      	movs	r3, #8
 800883e:	89a2      	ldrh	r2, [r4, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10b      	bne.n	8008862 <__swsetup_r+0x86>
 800884a:	21a0      	movs	r1, #160	@ 0xa0
 800884c:	2280      	movs	r2, #128	@ 0x80
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	0089      	lsls	r1, r1, #2
 8008852:	0092      	lsls	r2, r2, #2
 8008854:	400b      	ands	r3, r1
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <__swsetup_r+0x86>
 800885a:	0021      	movs	r1, r4
 800885c:	0028      	movs	r0, r5
 800885e:	f000 f88f 	bl	8008980 <__smakebuf_r>
 8008862:	230c      	movs	r3, #12
 8008864:	5ee2      	ldrsh	r2, [r4, r3]
 8008866:	2101      	movs	r1, #1
 8008868:	0013      	movs	r3, r2
 800886a:	400b      	ands	r3, r1
 800886c:	420a      	tst	r2, r1
 800886e:	d00b      	beq.n	8008888 <__swsetup_r+0xac>
 8008870:	2300      	movs	r3, #0
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6963      	ldr	r3, [r4, #20]
 8008876:	425b      	negs	r3, r3
 8008878:	61a3      	str	r3, [r4, #24]
 800887a:	2000      	movs	r0, #0
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	4283      	cmp	r3, r0
 8008880:	d101      	bne.n	8008886 <__swsetup_r+0xaa>
 8008882:	0613      	lsls	r3, r2, #24
 8008884:	d4be      	bmi.n	8008804 <__swsetup_r+0x28>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	0791      	lsls	r1, r2, #30
 800888a:	d400      	bmi.n	800888e <__swsetup_r+0xb2>
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	60a3      	str	r3, [r4, #8]
 8008890:	e7f3      	b.n	800887a <__swsetup_r+0x9e>
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	20000028 	.word	0x20000028

08008898 <_raise_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	0004      	movs	r4, r0
 800889c:	000d      	movs	r5, r1
 800889e:	291f      	cmp	r1, #31
 80088a0:	d904      	bls.n	80088ac <_raise_r+0x14>
 80088a2:	2316      	movs	r3, #22
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	2001      	movs	r0, #1
 80088a8:	4240      	negs	r0, r0
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <_raise_r+0x24>
 80088b2:	008a      	lsls	r2, r1, #2
 80088b4:	189b      	adds	r3, r3, r2
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	d108      	bne.n	80088ce <_raise_r+0x36>
 80088bc:	0020      	movs	r0, r4
 80088be:	f000 f831 	bl	8008924 <_getpid_r>
 80088c2:	002a      	movs	r2, r5
 80088c4:	0001      	movs	r1, r0
 80088c6:	0020      	movs	r0, r4
 80088c8:	f000 f81a 	bl	8008900 <_kill_r>
 80088cc:	e7ed      	b.n	80088aa <_raise_r+0x12>
 80088ce:	2a01      	cmp	r2, #1
 80088d0:	d009      	beq.n	80088e6 <_raise_r+0x4e>
 80088d2:	1c51      	adds	r1, r2, #1
 80088d4:	d103      	bne.n	80088de <_raise_r+0x46>
 80088d6:	2316      	movs	r3, #22
 80088d8:	6003      	str	r3, [r0, #0]
 80088da:	2001      	movs	r0, #1
 80088dc:	e7e5      	b.n	80088aa <_raise_r+0x12>
 80088de:	2100      	movs	r1, #0
 80088e0:	0028      	movs	r0, r5
 80088e2:	6019      	str	r1, [r3, #0]
 80088e4:	4790      	blx	r2
 80088e6:	2000      	movs	r0, #0
 80088e8:	e7df      	b.n	80088aa <_raise_r+0x12>
	...

080088ec <raise>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	4b03      	ldr	r3, [pc, #12]	@ (80088fc <raise+0x10>)
 80088f0:	0001      	movs	r1, r0
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	f7ff ffd0 	bl	8008898 <_raise_r>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	46c0      	nop			@ (mov r8, r8)
 80088fc:	20000028 	.word	0x20000028

08008900 <_kill_r>:
 8008900:	2300      	movs	r3, #0
 8008902:	b570      	push	{r4, r5, r6, lr}
 8008904:	4d06      	ldr	r5, [pc, #24]	@ (8008920 <_kill_r+0x20>)
 8008906:	0004      	movs	r4, r0
 8008908:	0008      	movs	r0, r1
 800890a:	0011      	movs	r1, r2
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f7fa fb56 	bl	8002fbe <_kill>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d103      	bne.n	800891e <_kill_r+0x1e>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d000      	beq.n	800891e <_kill_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	2000082c 	.word	0x2000082c

08008924 <_getpid_r>:
 8008924:	b510      	push	{r4, lr}
 8008926:	f7fa fb44 	bl	8002fb2 <_getpid>
 800892a:	bd10      	pop	{r4, pc}

0800892c <__swhatbuf_r>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	000e      	movs	r6, r1
 8008930:	001d      	movs	r5, r3
 8008932:	230e      	movs	r3, #14
 8008934:	5ec9      	ldrsh	r1, [r1, r3]
 8008936:	0014      	movs	r4, r2
 8008938:	b096      	sub	sp, #88	@ 0x58
 800893a:	2900      	cmp	r1, #0
 800893c:	da0c      	bge.n	8008958 <__swhatbuf_r+0x2c>
 800893e:	89b2      	ldrh	r2, [r6, #12]
 8008940:	2380      	movs	r3, #128	@ 0x80
 8008942:	0011      	movs	r1, r2
 8008944:	4019      	ands	r1, r3
 8008946:	421a      	tst	r2, r3
 8008948:	d114      	bne.n	8008974 <__swhatbuf_r+0x48>
 800894a:	2380      	movs	r3, #128	@ 0x80
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	2000      	movs	r0, #0
 8008950:	6029      	str	r1, [r5, #0]
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	b016      	add	sp, #88	@ 0x58
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	466a      	mov	r2, sp
 800895a:	f000 f853 	bl	8008a04 <_fstat_r>
 800895e:	2800      	cmp	r0, #0
 8008960:	dbed      	blt.n	800893e <__swhatbuf_r+0x12>
 8008962:	23f0      	movs	r3, #240	@ 0xf0
 8008964:	9901      	ldr	r1, [sp, #4]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	4019      	ands	r1, r3
 800896a:	4b04      	ldr	r3, [pc, #16]	@ (800897c <__swhatbuf_r+0x50>)
 800896c:	18c9      	adds	r1, r1, r3
 800896e:	424b      	negs	r3, r1
 8008970:	4159      	adcs	r1, r3
 8008972:	e7ea      	b.n	800894a <__swhatbuf_r+0x1e>
 8008974:	2100      	movs	r1, #0
 8008976:	2340      	movs	r3, #64	@ 0x40
 8008978:	e7e9      	b.n	800894e <__swhatbuf_r+0x22>
 800897a:	46c0      	nop			@ (mov r8, r8)
 800897c:	ffffe000 	.word	0xffffe000

08008980 <__smakebuf_r>:
 8008980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008982:	2602      	movs	r6, #2
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	0005      	movs	r5, r0
 8008988:	000c      	movs	r4, r1
 800898a:	b085      	sub	sp, #20
 800898c:	4233      	tst	r3, r6
 800898e:	d007      	beq.n	80089a0 <__smakebuf_r+0x20>
 8008990:	0023      	movs	r3, r4
 8008992:	3347      	adds	r3, #71	@ 0x47
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	6123      	str	r3, [r4, #16]
 8008998:	2301      	movs	r3, #1
 800899a:	6163      	str	r3, [r4, #20]
 800899c:	b005      	add	sp, #20
 800899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a0:	ab03      	add	r3, sp, #12
 80089a2:	aa02      	add	r2, sp, #8
 80089a4:	f7ff ffc2 	bl	800892c <__swhatbuf_r>
 80089a8:	9f02      	ldr	r7, [sp, #8]
 80089aa:	9001      	str	r0, [sp, #4]
 80089ac:	0039      	movs	r1, r7
 80089ae:	0028      	movs	r0, r5
 80089b0:	f7fe fe80 	bl	80076b4 <_malloc_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d108      	bne.n	80089ca <__smakebuf_r+0x4a>
 80089b8:	220c      	movs	r2, #12
 80089ba:	5ea3      	ldrsh	r3, [r4, r2]
 80089bc:	059a      	lsls	r2, r3, #22
 80089be:	d4ed      	bmi.n	800899c <__smakebuf_r+0x1c>
 80089c0:	2203      	movs	r2, #3
 80089c2:	4393      	bics	r3, r2
 80089c4:	431e      	orrs	r6, r3
 80089c6:	81a6      	strh	r6, [r4, #12]
 80089c8:	e7e2      	b.n	8008990 <__smakebuf_r+0x10>
 80089ca:	2380      	movs	r3, #128	@ 0x80
 80089cc:	89a2      	ldrh	r2, [r4, #12]
 80089ce:	6020      	str	r0, [r4, #0]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	6120      	str	r0, [r4, #16]
 80089d8:	6167      	str	r7, [r4, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00c      	beq.n	80089f8 <__smakebuf_r+0x78>
 80089de:	0028      	movs	r0, r5
 80089e0:	230e      	movs	r3, #14
 80089e2:	5ee1      	ldrsh	r1, [r4, r3]
 80089e4:	f000 f820 	bl	8008a28 <_isatty_r>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d005      	beq.n	80089f8 <__smakebuf_r+0x78>
 80089ec:	2303      	movs	r3, #3
 80089ee:	89a2      	ldrh	r2, [r4, #12]
 80089f0:	439a      	bics	r2, r3
 80089f2:	3b02      	subs	r3, #2
 80089f4:	4313      	orrs	r3, r2
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	9a01      	ldr	r2, [sp, #4]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	e7cc      	b.n	800899c <__smakebuf_r+0x1c>
	...

08008a04 <_fstat_r>:
 8008a04:	2300      	movs	r3, #0
 8008a06:	b570      	push	{r4, r5, r6, lr}
 8008a08:	4d06      	ldr	r5, [pc, #24]	@ (8008a24 <_fstat_r+0x20>)
 8008a0a:	0004      	movs	r4, r0
 8008a0c:	0008      	movs	r0, r1
 8008a0e:	0011      	movs	r1, r2
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f7fa fb34 	bl	800307e <_fstat>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d103      	bne.n	8008a22 <_fstat_r+0x1e>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d000      	beq.n	8008a22 <_fstat_r+0x1e>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	2000082c 	.word	0x2000082c

08008a28 <_isatty_r>:
 8008a28:	2300      	movs	r3, #0
 8008a2a:	b570      	push	{r4, r5, r6, lr}
 8008a2c:	4d06      	ldr	r5, [pc, #24]	@ (8008a48 <_isatty_r+0x20>)
 8008a2e:	0004      	movs	r4, r0
 8008a30:	0008      	movs	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7fa fb31 	bl	800309a <_isatty>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d103      	bne.n	8008a44 <_isatty_r+0x1c>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d000      	beq.n	8008a44 <_isatty_r+0x1c>
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
 8008a46:	46c0      	nop			@ (mov r8, r8)
 8008a48:	2000082c 	.word	0x2000082c

08008a4c <_init>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	46c0      	nop			@ (mov r8, r8)
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr

08008a58 <_fini>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr
